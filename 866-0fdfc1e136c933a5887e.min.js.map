{"version":3,"file":"866-0fdfc1e136c933a5887e.min.js","mappings":"sJAEA,WAGI,WAAYA,GACRC,KAAKC,GAAK,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAGG,IACnBF,KAAKC,GAAGE,KAAKD,GAuBzB,OAnBI,YAAAE,MAAA,SAAMF,EAAWG,GACb,IAAMC,EAAIN,KAAKO,KAAKL,GACdM,EAAIR,KAAKO,KAAKF,GAEhBG,IAAMF,IACNN,KAAKC,GAAGO,GAAKF,IAIrB,YAAAC,KAAA,SAAKD,GACD,KAAON,KAAKC,GAAGK,KAAOA,GAClBA,EAAIN,KAAKC,GAAGK,GAEhB,OAAOA,GAGX,YAAAG,UAAA,SAAUP,EAAWG,GACjB,OAAOL,KAAKO,KAAKL,KAAOF,KAAKO,KAAKF,IAE1C,EA7BA","sources":["webpack://graphPlayground/./src/js/classes/SpanningTree.ts"],"sourcesContent":["\"use strict\";\r\n\r\nexport default class SpanningTree {\r\n    private readonly id: number[];\r\n\r\n    constructor(V: number) {\r\n        this.id = [];\r\n        for (let v = 0; v < V; v++) {\r\n            this.id.push(v);\r\n        }\r\n    }\r\n\r\n    union(v: number, w: number) {\r\n        const q = this.root(v);\r\n        const p = this.root(w);\r\n\r\n        if (p !== q) {\r\n            this.id[p] = q;\r\n        }\r\n    }\r\n\r\n    root(q: number) {\r\n        while (this.id[q] !== q) {\r\n            q = this.id[q];\r\n        }\r\n        return q;\r\n    }\r\n\r\n    connected(v: number, w: number) {\r\n        return this.root(v) === this.root(w);\r\n    }\r\n}\r\n"],"names":["V","this","id","v","push","union","w","q","root","p","connected"],"sourceRoot":""}
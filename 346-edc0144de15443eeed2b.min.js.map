{"version":3,"file":"346-edc0144de15443eeed2b.min.js","mappings":"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","sources":["webpack://graphPlayground/./src/js/dataImportExport.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport help from './util/genericHelpers';\r\nimport GraphImmut from './classes/GraphImmut/GraphImmut';\r\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\r\nimport { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\r\nimport GraphState from \"./graphState\";\r\nimport { GraphPlain } from \"./util/predefinedGraphs\";\r\nimport * as languages from \"./languages\";\r\n\r\nconst exportedTextSelector = \"exportedText\";\r\n\r\nconst self = {\r\n    importByString: (string: string, format: string): void => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            try {\r\n                const n = JSON.parse(string);\r\n                if (\"nodes\" in n && \"edges\" in n) {\r\n                    window.network.setData({}); // Clear out the existing network in order to import the proper\r\n                    // locations\r\n                    window.main.setData(n, false, true, false);\r\n                }\r\n                else {\r\n                    help.showSimpleModal(languages.current.DataImportError,\r\n                        `<p>${languages.current.DataImportErrorText}</p>`);\r\n                }\r\n            }\r\n            catch (err) {\r\n                help.showSimpleModal(languages.current.JsonParseError, `<p>${languages.current.JsonParseErrorText}</p><pre>${err}</pre>`);\r\n            }\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            const lines = string.split(/\\r?\\n/);\r\n            let graph: GraphImmut | null = null;\r\n            let error = false;\r\n            lines.forEach((l) => {\r\n                const vals = l.split(/\\s+/);\r\n                if (vals[0].toLowerCase() === \"p\") {\r\n                    if (vals[1].toLowerCase() !== \"edge\") {\r\n                        help.showSimpleModal(languages.current.DimacsParseError,\r\n                            `<p>${help.htmlEncode(languages.current.DimacsParseErrorText)}</p>`);\r\n                        error = true;\r\n                        return;\r\n                    }\r\n                    graph = new GraphImmut(parseInt(vals[2]));\r\n                }\r\n                else if (vals[0].toLowerCase() === \"e\" && graph !== null) {\r\n                    graph = graph.addEdge(parseInt(vals[1]) - 1, parseInt(vals[2]) - 1);\r\n                }\r\n            });\r\n\r\n            if (graph === null && !error) {\r\n                help.showSimpleModal(languages.current.DimacsParseError, `<p>${languages.current.DimacsParseErrorNoProgram}</p>`);\r\n                error = true;\r\n            }\r\n\r\n            if (!error) {\r\n                const d: GraphPlain = GraphState.getGraphData(graph!);\r\n                d.nodes.forEach((v) => {\r\n                    v.label = v.id.toString();\r\n                });\r\n                window.main.setData(d, false, true, true);\r\n            }\r\n        }\r\n        else {\r\n            help.showSimpleModal(languages.current.UnrecognizedInputError, `<p>${languages.current.UnrecognizedInputError}.</p>`);\r\n        }\r\n    },\r\n\r\n    makeImportTextModal: (): void => {\r\n        help.showFormModal(($modal, values) => {\r\n            $modal.modal(\"hide\");\r\n            self.importByString(values[0], values[1]);\r\n        }, languages.current.ImportGraphFromText, languages.current.Import,\r\n            [{ type: \"textarea\", label: languages.current.ImportText, extraAttrs: { style: \"height: 20vh; min-height:400px;\" } },\r\n            { type: \"select\", label: languages.current.Format, optionValues: [\"json\", \"dimacs\"], optionText: [\"JSON\", \"DIMACS\"] }\r\n            ]);\r\n    },\r\n\r\n    makeImportFileModal: (): void => {\r\n        help.showFormModal(($modal, values) => {\r\n            $modal.modal(\"hide\");\r\n\r\n            const files = values[0];\r\n            if (files.length === 1) {\r\n                const file = files[0];\r\n                const reader = new FileReader();\r\n                reader.onload = function (event: any) {\r\n                    self.importByString(event.target.result, help.getFileExtension(file.name));\r\n                };\r\n\r\n                reader.readAsText(file);\r\n            }\r\n        }, languages.current.ImportGraphFromFile, languages.current.Import,\r\n            [{\r\n                type: \"file\", label: languages.current.UploadFile, validationFunc: (val, $files) => {\r\n                    const files = ($files.get(0) as any).files;\r\n                    if (files.length >= 1) {\r\n                        return true;\r\n                    }\r\n                    return languages.current.MustChooseFileError;\r\n                }\r\n            }]);\r\n    },\r\n\r\n    makeExportFileModal: (): void => {\r\n        help.showFormModal(null, languages.current.ExportGraphToFile, null,\r\n            [{\r\n                type: \"button\",\r\n                initialValue: languages.current.ExportToJson,\r\n                onclick: () => {\r\n                    self.exportToFile(\"json\");\r\n                },\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary m-1\"\r\n\r\n                },\r\n                clickDismiss: true\r\n            },\r\n            {\r\n                type: \"button\",\r\n                initialValue: languages.current.ExportToDimacs,\r\n                onclick: () => {\r\n                    self.exportToFile(\"dimacs\");\r\n                },\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary\"\r\n                },\r\n                clickDismiss: true\r\n            }\r\n            ], null, false);\r\n    },\r\n\r\n    makeExportTextModal: (): void => {\r\n        help.showFormModal(null, languages.current.ExportGraphToText, null,\r\n            [{\r\n                type: \"button\",\r\n                initialValue: languages.current.ExportToJson,\r\n                onclick: () => {\r\n                    self.exportToText(\"json\");\r\n                },\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary m-1\",\r\n                },\r\n                clickDismiss: false\r\n            },\r\n            {\r\n                type: \"button\",\r\n                initialValue: languages.current.ExportToDimacs,\r\n                onclick: () => {\r\n                    self.exportToText(\"dimacs\");\r\n                },\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary\",\r\n                },\r\n                clickDismiss: false\r\n            },\r\n            {\r\n                type: \"textarea\", label: \"\", initialValue: \"\", extraAttrs: {\r\n                    style: \"height: 20vh;\" +\r\n                        \" min-height:400px; white-space:pre; margin-top: 1rem;\"\r\n                },\r\n                onclick: () => {\r\n                    (document.getElementById(exportedTextSelector) as HTMLTextAreaElement).select();\r\n                    document.execCommand(\"copy\");\r\n                }, id: \"exportedText\"\r\n            }\r\n            ], ($modal) => {\r\n                $modal.modal(\"hide\");\r\n            }, false);\r\n    },\r\n\r\n    exportToFile: (format: string): void => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            self.downloadFile(\"graph.json\", self.getDataAsJSON());\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            self.downloadFile(\"graph.dimacs\", self.getDataAsDIMACS());\r\n        }\r\n    },\r\n\r\n    exportToText: (format: string): void => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            document.getElementById(exportedTextSelector)!.innerHTML = JSON.stringify(JSON.parse(self.getDataAsJSON()), null, 2);\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            document.getElementById(exportedTextSelector)!.innerHTML = self.getDataAsDIMACS();\r\n        }\r\n    },\r\n\r\n    getDataAsJSON: (): string => {\r\n        const d = GraphState.getGraphData(GraphState.graph);\r\n        const nodeKeys = [\"id\", \"label\", \"color\", \"x\", \"y\"];\r\n        const edgeKeys = [\"from\", \"to\", \"weight\", \"color\"];\r\n        d.nodes = help.keepOnlyKeys(d.nodes, nodeKeys) as NodeImmutPlain[];\r\n        d.edges = help.keepOnlyKeys(d.edges, edgeKeys) as EdgeImmutPlain[];\r\n\r\n        return JSON.stringify(d);\r\n    },\r\n\r\n    getDataAsDIMACS: (): string => {\r\n        // If I add direction, DIMACS cannot be used, it only works for undirected graphs\r\n        const g = GraphState.getGraphData();\r\n        let text = \"c This Graph was generated and exported from Michael Dombrowski's Graph Playground \" +\r\n            \"-- https://mikedombo.github.io/graphPlayground -- https://mikedombrowski.com\\n\";\r\n\r\n        let adj = GraphState.graph.getFullAdjacency();\r\n        adj = adj.filter((v: number[]) => {\r\n            return v.length !== 0;\r\n        });\r\n\r\n        const nodes: number[] = [];\r\n        adj.forEach((v: number[], i: number) => {\r\n            if (nodes.indexOf(i + 1) === -1) {\r\n                nodes.push(i + 1);\r\n            }\r\n            v.forEach((n: number) => {\r\n                if (nodes.indexOf(n + 1) === -1) {\r\n                    nodes.push(n + 1);\r\n                }\r\n            });\r\n        });\r\n\r\n        let edgeCount = 0;\r\n        let edgeText = \"\";\r\n        g.edges.forEach((v: EdgeImmutPlain) => {\r\n            edgeText += `e ${v.from + 1} ${v.to + 1}\\n`;\r\n            edgeCount++;\r\n        });\r\n        edgeText = edgeText.trim();\r\n\r\n        text += `p edge ${nodes.length} ${edgeCount}\\n`;\r\n        return text + edgeText;\r\n    },\r\n\r\n    downloadFile: (filename: string, text: string): void => {\r\n        const blob = new Blob([text], { type: 'text/plain' });\r\n        // @ts-ignore\r\n        if (window.navigator.msSaveOrOpenBlob) {\r\n            window.navigator.msSaveBlob(blob, filename);\r\n        }\r\n        else {\r\n            const a = window.document.createElement('a');\r\n            a.href = window.URL.createObjectURL(blob);\r\n            a.download = filename;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(blob as any);\r\n        }\r\n    },\r\n};\r\n\r\nexport default self;\r\n"],"names":["exportedTextSelector","self","importByString","string","format","toLowerCase","n","JSON","parse","window","network","setData","main","err","lines","split","forEach","l","vals","parseInt","addEdge","d","nodes","v","label","id","toString","makeImportTextModal","$modal","values","modal","type","extraAttrs","style","optionValues","optionText","makeImportFileModal","files","length","reader","FileReader","onload","event","target","result","name","readAsText","validationFunc","val","$files","get","makeExportFileModal","initialValue","onclick","exportToFile","class","clickDismiss","makeExportTextModal","exportToText","document","getElementById","select","execCommand","downloadFile","getDataAsJSON","getDataAsDIMACS","innerHTML","stringify","edges","g","text","adj","filter","i","indexOf","push","edgeCount","edgeText","from","to","trim","filename","blob","Blob","navigator","msSaveOrOpenBlob","msSaveBlob","a","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","revokeObjectURL"],"sourceRoot":""}
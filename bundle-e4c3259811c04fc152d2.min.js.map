{"version":3,"file":"bundle-e4c3259811c04fc152d2.min.js","mappings":"UAAIA,ECCAC,EADAC,ECAAC,EACAC,E,0FCSEC,EAAkB,SAACC,EAAWC,GAChC,OAAOC,OAAOC,KAAKH,GACdI,QAAO,SAACC,GAAQ,OAAC,EAASC,SAASD,EAAnB,IAChBE,QAAO,SAACC,EAAUH,GAEf,OADAG,EAAIH,GAAOL,EAAKK,GACTG,CACX,GAAG,CAAC,EACZ,EAEMC,EAAsB,SAACT,GACzB,OAAOD,EAAgBC,EAAM,CAAC,QAAS,MAC3C,E,QAiGA,WAQI,WAAYU,EACRC,EACAC,EAAkBC,G,4BADlB,IAAAF,IAAAA,EAAA,WACA,IAAAC,IAAAA,GAAA,QAAkB,IAAAC,IAAAA,GAAA,GAClBC,KAAKF,SAAWV,OAAOa,OAAOH,GAC9BE,KAAKD,SAAWX,OAAOa,OAAOF,GAC9B,IAAIG,EAAU,CAAC,EAGf,GAAqB,iBAAVN,IAAwC,iBAAVA,GAAwBA,aAAiB,MAQ7E,MAAIA,aAAiB,MAItB,MAAM,IAAIO,MAAM,0DAHhBH,KAAKJ,MAAQA,C,KATyE,CACtF,IAAMQ,EApEe,SAACR,GAC9B,GAAc,OAAVA,EACA,OAAO,EAGX,IAAIS,GAA4B,UAC1BH,EAAuB,CAAC,EAE9B,GAAqB,iBAAVN,EAEP,IAAK,IAAIU,EAAI,EAAGA,EAAIC,KAAKC,MAAMZ,GAAQU,IACnCD,EAAWA,EAASI,IAAIH,EAAG,IAAI,UAAUA,IACzCJ,EAAQI,GAAKA,MAGhB,IAAqB,iBAAVV,EA8BZ,OAAO,EA7BP,IAAI,EAAU,EACdA,EAAMc,SAAQ,SAACN,GACX,IAEIO,EAFEC,EAAK,IACPC,EAAQ,KAGR,UAAWT,IACXS,EAAQT,EAAES,OAEV,OAAQT,GACRF,EAAQE,EAAEQ,IAAMA,EACZ,UAAWR,GAAKA,EAAES,QAAUT,EAAEQ,GAAGE,aACjCD,EAAQD,EAAGE,aAIfZ,EAAQU,GAAMA,EAGdD,EAAahB,EADb,eAAgBS,EACiBA,EAAEW,WAGFX,GAGrCC,EAAWA,EAASI,IAAIG,EAAI,IAAI,UAAUA,EAAIC,EAAOF,GACzD,G,CAMJ,MAAO,CAAEf,MAAOR,OAAOa,OAAOI,GAAWW,IAAKd,EAClD,CAmBsBe,CAAyBrB,GACnC,GAAiB,iBAANQ,EACP,MAAM,IAAID,MAAM,+BAEpBH,KAAKJ,MAAQQ,EAAER,MACfM,EAAUE,EAAEY,G,CAYhB,GAJAhB,KAAKJ,MAAQR,OAAOa,OAAOD,KAAKJ,OAChCI,KAAKkB,SAAW9B,OAAOa,OAAOD,KAAKJ,MAAMuB,MAG3B,OAAVtB,GAAmC,iBAAVA,GAAwBA,aAAiB,KAO7DA,aAAiB,KACtBG,KAAKH,MAAQA,EAGbG,KAAKH,OAAQ,cAX4D,CACzE,IAAMuB,EA9He,SAACvB,EAAYK,GAC1C,QAD0C,IAAAA,IAAAA,EAAA,IAC5B,OAAVL,EACA,OAAO,EAGX,IAAIwB,GAA4B,UAEhC,MAAqB,iBAAVxB,IACPA,EAAMa,SAAQ,SAACY,GACX,IAbiBpC,EAabqC,EAAS,EACTC,EAAO,EACPC,EAAK,EACLd,EAAa,CAAC,EAEd,WAAYW,IACZC,EAASG,WAAWJ,EAAKC,SAEzB,SAAUD,IACVE,EAAOtB,EAAQoB,EAAKE,OAEpB,OAAQF,IACRG,EAAKvB,EAAQoB,EAAKG,KAzBLvC,EA2Bb,eAAgBoC,EACiBA,EAAKP,WAGLO,EAHjCX,EA3BL1B,EAAgBC,EAAM,CAAC,OAAQ,KAAM,WAiCpCmC,EAAWA,EAASM,KAAK,IAAI,UAAUH,EAAMC,EAAIF,EAAQZ,GAC7D,IAMGU,EACX,CAwFsBO,CAAyB/B,EAAOK,GAC1C,GAAiB,iBAANkB,EACP,MAAM,IAAIjB,MAAM,8BAEpBH,KAAKH,MAAQuB,C,CAQjBpB,KAAKH,MAAQT,OAAOa,OAAOD,KAAKH,OAChCG,KAAK6B,SAAWzC,OAAOa,OAAOD,KAAKH,MAAMsB,MAErC,IAAeW,GACf1C,OAAOa,OAAOD,KAEtB,CAkXJ,OAhXI,YAAA+B,QAAA,SAAQnB,EAAYoB,GAChB,QADgB,IAAAA,IAAAA,GAAA,GACZpB,GAAMZ,KAAKkB,SACX,OAAO,EAEX,IAAMe,EAAOjC,KAAKJ,MAAMsC,IAAItB,GAC5B,YAAoB,IAATqB,IAGPD,EACOC,EAEJA,EAAKE,UAChB,EAEA,YAAAC,QAAA,SAAQlD,QAAA,IAAAA,IAAAA,EAAA,MACS,OAATA,IACAA,EAAO,CAAC,GAGZ,IAAM0B,EAAKZ,KAAKkB,SACV,UAAWhC,IACbA,EAAK2B,MAAQD,EAAGE,YAGpB,IAAMH,EAAahB,EAAoBT,GAEvC,OAAO,IAAI4C,EAAW9B,KAAKJ,MAAMa,IAAIG,EAAI,IAAI,UAAUA,EAAI1B,EAAK2B,MAAOF,IACnEX,KAAKH,MAAOG,KAAKF,SAAUE,KAAKD,SACxC,EAEA,YAAAsC,SAAA,SAASzB,EAAY1B,GACjB,IAAKc,KAAKJ,MAAM0C,IAAI1B,GAChB,OAAO,EAGX,IAAMD,EAAahB,EAAoBT,GAIvC,MAHM,UAAWA,IACbA,EAAK2B,MAASb,KAAK+B,QAAQnB,GAAI,GAAoB2B,YAEhD,IAAIT,EAAW9B,KAAKJ,MAAMa,IAAIG,EAAKZ,KAAK+B,QAAQnB,GAAI,GAAoByB,SAASnD,EAAK2B,MAAOF,IAChGX,KAAKH,MAAOG,KAAKF,SAAUE,KAAKD,SACxC,EAEA,YAAAyC,WAAA,SAAW5B,GAEP,KAAMA,GAAM,GAAKA,EAAKZ,KAAKkB,UACvB,OAAO,EAGX,IAAMhB,EAAuB,CAAC,EAG1BuC,EAAY,EA8BhB,OAAO,IAAIX,EA7BuB9B,KAAKJ,MAClCN,QAAO,SAACc,GAQL,OAPIA,EAAEsC,UAAY9B,EACdV,EAAQE,EAAEsC,UAAY,EAGtBxC,EAAQE,EAAEsC,SAAWD,IAGlBrC,EAAEsC,UAAY9B,CACzB,IACCI,KAAI,SAACiB,GACF,IAAIpB,EAAQoB,EAAKM,WAKjB,OAJIN,EAAKS,QAAQ5B,aAAeD,IAC5BA,EAAQX,EAAQ+B,EAAKS,SAAS5B,YAG3B,IAAI,UAAUZ,EAAQ+B,EAAKS,SAAU7B,EAAOoB,EAAKU,mBAC5D,IAG8B3C,KAAKH,MAClCP,QAAO,SAACgC,GACL,QAASA,EAAKsB,YAAchC,GAAMU,EAAKuB,UAAYjC,EACvD,IACCI,KAAI,SAACM,GACF,OAAO,IAAI,UAAUpB,EAAQoB,EAAKsB,WAAY1C,EAAQoB,EAAKuB,SAAUvB,EAAKwB,YAAaxB,EAAKqB,mBAChG,IAEsC3C,KAAKF,SAAUE,KAAKD,SAClE,EAEA,YAAAgD,QAAA,SAAQvB,EAAcC,EAAYF,QAAA,IAAAA,IAAAA,EAAA,GACzBvB,KAAKD,WACNwB,EAAS,GAGb,IAAMF,EAAWrB,KAAKH,MAAM8B,KAAK,IAAI,UAAUH,EAAMC,EAAIC,WAAWH,KACpE,OAAO,IAAIO,EAAW9B,KAAKJ,MAAOyB,EAAUrB,KAAKF,SAAUE,KAAKD,SACpE,EAEA,YAAAiD,WAAA,SAAWxB,EAAcC,EAAYF,EAAoB0B,GAAzD,gBAAqC,IAAA1B,IAAAA,EAAA,WAAoB,IAAA0B,IAAAA,GAAA,GACtC,OAAX1B,IACAA,EAASG,WAAWH,IAGxB,IAAI2B,GAAe,EACb7B,EAA4BrB,KAAKH,MAAMP,QAAO,SAACgC,GAEjD,SAAI4B,GAAiBD,KAKjB3B,EAAKsB,YAAcpB,GAAQF,EAAKuB,UAAYpB,GAAkB,OAAXF,GAAmBD,EAAKwB,cAAgBvB,OAM1F,EAAKzB,UACFwB,EAAKsB,YAAcnB,GAAMH,EAAKuB,UAAYrB,GAAoB,OAAXD,GAAmBD,EAAKwB,cAAgBvB,KAN/F2B,GAAe,GACR,EAYf,IAEA,OAAO,IAAIpB,EAAW9B,KAAKJ,MAAOyB,EAAUrB,KAAKF,SAAUE,KAAKD,SACpE,EAEA,YAAAoD,SAAA,SAAS3B,EAAcC,EAAY2B,EAAgBC,EAAuBC,GAA1E,gBAAmD,IAAAD,IAAAA,EAAA,WAAuB,IAAAC,IAAAA,EAAA,MACtE,IAAIC,GAAa,EAEC,OAAdF,IACAA,EAAY3B,WAAW2B,IAG3B,IAAIhC,EAAWrB,KAAKH,MAsBpB,OArBAG,KAAKH,MAAMa,SAAQ,SAACY,EAAMkC,GAClBD,KAIEjC,EAAKsB,YAAcpB,GAAQF,EAAKuB,UAAYpB,IACzC,EAAKgC,cAAgBnC,EAAKsB,YAAcnB,GAAMH,EAAKuB,UAAYrB,IAClD,OAAd6B,GAAsB/B,EAAKwB,cAAgBO,IAG3ChC,EADU,OAAViC,EACWjC,EAASZ,IAAI+C,EACpBlC,EAAK6B,SAAuB,OAAdC,EAAqB,KAAO1B,WAAW0B,GACjD,CAAEE,MAAOA,KAGNjC,EAASZ,IAAI+C,EAAOlC,EAAK6B,SAAuB,OAAdC,EAAqB,KAAO1B,WAAW0B,KAExFG,GAAa,EAErB,IAEO,IAAIzB,EAAW9B,KAAKJ,MAAOyB,EAAUrB,KAAKF,SAAUE,KAAKD,SACpE,EAEA,YAAA2D,YAAA,SAAY1B,GACR,YADQ,IAAAA,IAAAA,GAAA,GACJA,EACOhC,KAAKJ,MAAM+D,UAEf3D,KAAKJ,MAAMoB,KAAI,SAACiB,GACnB,OAAOA,EAAKE,SAChB,IAAGwB,SACP,EAEA,YAAAC,2BAAA,WACI,OAAO5D,KAAKJ,KAChB,EAEA,YAAAiE,2BAAA,WACI,OAAO7D,KAAKH,KAChB,EAEA,YAAAiE,YAAA,SAAY9B,GACR,YADQ,IAAAA,IAAAA,GAAA,GACJA,EACOhC,KAAKH,MAAM8D,UAEf3D,KAAKH,MAAMmB,KAAI,SAACM,GACnB,OAAOA,EAAKa,SAChB,IAAGwB,SACP,EAEA,YAAAI,iBAAA,WACI,OAAO/D,KAAKkB,QAChB,EAEA,YAAA8C,iBAAA,WACI,OAAOhE,KAAK6B,QAChB,EAEA,YAAAoC,iBAAA,WACI,IAAMC,EAAoB,GAQ1B,OAPAlE,KAAKJ,MAAMc,SAAQ,SAACyD,EAAG7D,GACnB4D,EAAQ5D,GAAK,CACjB,IACAN,KAAKH,MAAMa,SAAQ,SAACY,GAChB4C,EAAQ5C,EAAKsB,YACjB,IAEOsB,CACX,EAEA,YAAAE,WAAA,WACI,OAAO,IAAItC,EAAW9B,KAAKJ,MAAOI,KAAKH,MAAMmB,KAAI,SAACM,GAC9C,OAAOA,EAAK6B,SAAS,EACzB,IAAuBnD,KAAKF,UAAU,EAC1C,EAEA,YAAAuE,aAAA,WACI,OAAO,IAAIvC,EAAW9B,KAAKJ,MAAOI,KAAKH,MAAMmB,KAAI,SAACM,GAC9C,OAAOA,EAAK6B,SAAS,EACzB,IAAuBnD,KAAKF,UAAU,EAC1C,EAEA,YAAAwE,WAAA,SAAWC,GACP,QADO,IAAAA,IAAAA,GAAA,IACFA,EACD,OAAO,IAAIzC,EAAW9B,KAAKJ,MAAOI,KAAKH,OAAO,EAAMG,KAAKD,UAG7D,IAAIsB,EAAWrB,KAAKH,MAKpB,OAJAG,KAAKH,MAAMa,SAAQ,SAACY,GAChBD,EAAWA,EAASM,KAAK,IAAI,UAAUL,EAAKuB,QAASvB,EAAKsB,UAAWtB,EAAKwB,YAAaxB,EAAKqB,oBAChG,IAEO,IAAIb,EAAW9B,KAAKJ,MAAOyB,GAAU,EAAMrB,KAAKD,SAC3D,EAEA,YAAAyE,aAAA,WACI,IAAInD,GAA4B,UAC1BoD,EAAsC,CAAC,EAe7C,OAbAzE,KAAKH,MAAMa,SAAQ,SAACY,GAChB,IAAIE,EAAOF,EAAKsB,UACZnB,EAAKH,EAAKuB,QACVpB,EAAKD,IACLA,EAAOC,EACPA,EAAKH,EAAKsB,WAELpB,EAAI,IAAIC,KAAQgD,IACrBA,EAAcjD,EAAI,IAAIC,GAAQ,KAC9BJ,EAAWA,EAASM,KAAK,IAAI,UAAUH,EAAMC,EAAIH,EAAKwB,YAAaxB,EAAKqB,qBAEhF,IAEO,IAAIb,EAAW9B,KAAKJ,MAAOyB,GAAU,EAAOrB,KAAKD,SAC5D,EAEA,YAAA2E,0BAAA,SAA0B5E,EAAmBC,GACzC,IAAI4E,EAAgB3E,KAepB,OAdIF,IAAaE,KAAKF,SAClB6E,EAAIA,EAAEL,cAEAxE,GAAYE,KAAKF,WACvB6E,EAAIA,EAAEH,gBAGNzE,IAAaC,KAAKD,SAClB4E,EAAIA,EAAEP,cAEArE,GAAYC,KAAKD,WACvB4E,EAAIA,EAAEN,gBAGHM,CACX,EAEA,YAAAC,iBAAA,SAAiBhE,GAAjB,WACUiE,EAAgB,GAUtB,OATA7E,KAAKH,MAAMa,SAAQ,SAACY,GACZA,EAAKsB,YAAchC,EACnBiE,EAAIlD,KAAKL,EAAKuB,SAER,EAAK/C,UAAYwB,EAAKuB,UAAYjC,GACxCiE,EAAIlD,KAAKL,EAAKsB,UAEtB,IAEOiC,CACX,EAEA,YAAAC,iBAAA,sBACUD,EAAkB,GAKxB,OAJA7E,KAAKJ,MAAMc,SAAQ,SAACN,GAChByE,EAAIzE,EAAEsC,SAAW,EAAKkC,iBAAiBxE,EAAEsC,QAC7C,IAEOmC,CACX,EAEA,YAAAE,YAAA,SAAYC,EAAaC,GACrB,OAAOjF,KAAK4E,iBAAiBI,GAAKxF,SAASyF,EAC/C,EAEA,YAAAC,gBAAA,SAAgBF,EAAaC,GAA7B,WACUE,EAAwB,GAC9B,OAAIH,GAAOhF,KAAKkB,UAAY+D,GAAOjF,KAAKkB,UAIxClB,KAAKH,MAAMa,SAAQ,SAACY,GACX,EAAKxB,UAAYwB,EAAKsB,YAAcqC,GAAO3D,EAAKuB,UAAYmC,GAC7DG,EAASxD,KAAKL,GAGdA,EAAKsB,YAAcoC,GAAO1D,EAAKuB,UAAYoC,GAC3CE,EAASxD,KAAKL,EAEtB,IAXW6D,CAcf,EAEA,YAAAC,wBAAA,SAAwBJ,EAAaC,GACjC,IAAII,EAAYC,IAOhB,OANAtF,KAAKkF,gBAAgBF,EAAKC,GAAKvE,SAAQ,SAACY,GAChCA,EAAKwB,YAAcuC,IACnBA,EAAY/D,EAAKwB,YAEzB,IAEOuC,CACX,EAGA,YAAAE,iBAAA,SAAiBC,EAAsDC,GAAvE,gBAAiB,IAAAD,IAAAA,EAA4CjF,KAAKmF,UAAK,IAAAD,IAAAA,EAAA,KACnE,IAAME,EAA+B,GACrC3F,KAAKJ,MAAMc,SAAQ,SAACuB,GAEhB,IAAM4C,EAAM,EAAKD,iBAAiB3C,EAAKS,SACjCkD,EAAU,IAAIC,IAAIhB,GACpBe,EAAQzE,KAAO0D,EAAIiB,QACnBF,EAAQlF,SAAQ,SAACe,GACb,IAAM2B,EAAY,EAAK8B,gBAAgBjD,EAAKS,QAASjB,GAAIhC,QAAO,SAACsG,EAAKzE,GAClE,OAAOkE,EAAQO,EAAKzE,EAAKwB,YAC7B,GAAG2C,GAEHE,EAAWhE,KAAK,CAAEH,KAAMS,EAAKS,QAASjB,GAAE,EAAEF,OAAQG,WAAW0B,IACjE,GAER,IAGA,IAAI/B,EAAWrB,KAAKH,MAAMP,QAAO,SAACgC,GAC9B,IAAI0E,GAAO,EAOX,OANAL,EAAWjF,SAAQ,SAACuF,GACZ3E,EAAKsB,YAAcqD,EAAczE,MAAQF,EAAKuB,UAAYoD,EAAcxE,KACxEuE,GAAO,EAEf,IAEOA,CACX,IAKA,OAJAL,EAAWjF,SAAQ,SAACY,GAChBD,EAAWA,EAASM,KAAK,IAAI,UAAUL,EAAKE,KAAMF,EAAKG,GAAIH,EAAKC,QACpE,IAEO,IAAIO,EAAW9B,KAAKJ,MAAOyB,EAAUrB,KAAKF,SAAUE,KAAKD,SACpE,EAEA,YAAAmG,WAAA,WACI,OAAOlG,KAAKD,QAChB,EAEA,YAAA0D,WAAA,WACI,OAAOzD,KAAKF,QAChB,EACJ,EAvaA,E,mEC7GA,WAKI,WAAYc,EAASC,EAA6BF,G,uBAAlD,YAAqB,IAAAE,IAAAA,EAAA,WAA6B,IAAAF,IAAAA,EAAA,MAE1CX,KAAKa,MADK,OAAVA,EACaD,EAAGE,WAEHD,EAGjBb,KAAKe,WAAa,CAAC,EACA,OAAfJ,GAA6C,iBAAfA,GAC9BvB,OAAOC,KAAKsB,GAAYD,SAAQ,SAAAnB,GAC5B,EAAKwB,WAAWxB,GAAOH,OAAOa,OAAOU,EAAWpB,GACpD,IAGJS,KAAKe,WAAa3B,OAAOa,OAAOD,KAAKe,YACrCf,KAAKa,MAAQzB,OAAOa,OAAOD,KAAKa,OAChCb,KAAKY,GAAKxB,OAAOa,OAAOW,GAEpB,IAAeuF,GACf/G,OAAOa,OAAOD,KAEtB,CAgDJ,OA9CI,YAAAmC,QAAA,sBACUiE,EAA2B,CAAExF,GAAIZ,KAAKY,GAAIC,MAAOb,KAAKa,OAO5D,OANAzB,OAAOC,KAAKW,KAAKe,YAAYL,SAAQ,SAAAnB,GAC3BA,KAAO6G,IACTA,EAAS7G,GAAO,EAAKwB,WAAWxB,GAExC,IAEO6G,CACX,EAEA,YAAA1D,MAAA,WACI,OAAO1C,KAAKY,EAChB,EAEA,YAAA2B,SAAA,WACI,OAAOvC,KAAKa,KAChB,EAEA,YAAAwF,aAAA,SAAaC,GACT,OAAIA,KAAatG,KAAKe,WACXf,KAAKe,WAAWuF,GAGpB,IACX,EAEA,YAAA3D,iBAAA,WACI,OAAO3C,KAAKe,UAChB,EAEA,YAAAsB,SAAA,SAASxB,EAAmBF,QAAnB,IAAAE,IAAAA,EAAA,WAAmB,IAAAF,IAAAA,EAAA,MACV,OAAVE,IACAA,EAAQb,KAAKuC,YAIjB,IAAMxB,EAAa3B,OAAOmH,OAAO,CAAC,EAAGvG,KAAKe,YAO1C,OANmB,OAAfJ,GACAvB,OAAOC,KAAKsB,GAAYD,SAAQ,SAAAnB,GAC5BwB,EAAWxB,GAAOoB,EAAWpB,EACjC,IAGG,IAAI4G,EAAUnG,KAAK0C,QAAS7B,EAAOE,EAC9C,EACJ,EA1EA,E,gBCTA,IAAIC,EAAM,CACT,aAAc,CACb,IACA,EACA,KAED,gBAAiB,CAChB,IACA,EACA,KAED,0BAA2B,CAC1B,GACA,EACA,IAED,yBAA0B,CACzB,IACA,GAED,cAAe,CACd,IACA,GAED,uCAAwC,CACvC,IACA,GAED,wCAAyC,CACxC,GACA,GAED,uCAAwC,CACvC,IACA,GAED,+BAAgC,CAC/B,IACA,EACA,KAED,2BAA4B,CAC3B,IACA,EACA,KAED,qBAAsB,CACrB,IACA,GAED,oBAAqB,CACpB,IACA,GAED,eAAgB,CACf,IACA,GAED,mBAAoB,CACnB,IACA,GAED,8BAA+B,CAC9B,IACA,GAED,4BAA6B,CAC5B,IACA,GAED,gCAAiC,CAChC,IACA,EACA,KAED,uCAAwC,CACvC,GACA,EACA,IAED,mCAAoC,CACnC,IACA,EACA,KAED,uBAAwB,CACvB,IACA,EACA,MAGF,SAASwF,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAE3F,EAAKyF,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,KAC7B,IAAI1F,EAAI,IAAIjB,MAAM,uBAAyBsG,EAAM,KAEjD,MADArF,EAAE2F,KAAO,mBACH3F,CAAC,IAIT,IAAI4F,EAAMhG,EAAIyF,GAAM7F,EAAKoG,EAAI,GAC7B,OAAOJ,QAAQK,IAAID,EAAIE,MAAM,GAAGlG,IAAI0F,EAAoBtF,IAAI0F,MAAK,IACzDJ,EAAoBS,EAAEvG,EAAa,GAAToG,EAAI,KAEvC,CACAR,EAAoBnH,KAAO,IAAOD,OAAOC,KAAK2B,GAC9CwF,EAAoB5F,GAAK,IACzBwG,EAAOC,QAAUb,C,iGCzGLc,GAAZ,SAAYA,GACR,eAEH,CAHD,CAAYA,IAAAA,EAAS,KAKd,IAAIC,EAAU,CAAC,EAGTC,EAAc,kB,OAAA,E,OAAA,E,EAAA,W,qlCACZ,SAAM,OAAO,MAAMC,OAAOC,SAASC,UAAU,aAAeL,EAAUM,OAAK,Q,cAAtFL,EAAW,SAAmFM,Q,qBADvE,K,iVCD3B,wBAoEA,QA5DkB,EAAAC,qBAAd,WACI,IACI,IAAMC,EAAI,mBAGV,OAFAC,aAAaC,QAAQF,EAAGA,GACxBC,aAAaE,WAAWH,IACjB,C,CACT,MAAO3G,GACL,OAAO,C,CAEf,EAEc,EAAA+G,aAAd,WACQC,EAASN,wBACTE,aAAaC,QAAQ,2BAA4BI,KAAKC,UAAUF,EAASb,SAEjF,EAEc,EAAAgB,aAAd,WACI,GAAIH,EAASN,uBAAwB,CACjC,IAAMJ,EAAWM,aAAaQ,QAAQ,4BAElCJ,EAASb,QADI,OAAbG,EACmBA,EAEAW,KAAKI,MAAMf,E,CAGb,OAArBU,EAASb,UACTa,EAASb,QAAU,CAAC,GAExBa,EAASM,QACb,EAEc,EAAAA,OAAd,WACIjB,OAAOkB,QAAQC,WAAW,CAAEhJ,MAAO,CAAEiJ,QAAST,EAAST,UAAU,kBACjEF,OAAOkB,QAAQC,WAAW,CAAE/I,MAAO,CAAEiJ,OAAQ,CAAErH,GAAI2G,EAAST,UAAU,iBAClES,EAAST,UAAU,WACnBF,OAAOkB,QAAQC,WAAW,CACtBG,aAAc,CACV5F,SAAU,CACN6F,gBAAiBvB,OAAOwB,KAAKC,sBAKzCzB,OAAOkB,QAAQC,WAAW,CAAEG,aAAc,CAAE5F,SAAUsE,OAAOwB,KAAKE,WAAWJ,aAAa5F,WAElG,EAEc,EAAAiG,aAAd,SAA2BC,EAAgBC,GACvClB,EAASb,QAAQ8B,GAAUC,EAC3BlB,EAASD,eACTC,EAASM,QACb,EAEc,EAAAf,UAAd,SAAwB0B,GACpB,OAAIA,KAAUjB,EAASb,QACZa,EAASb,QAAQ8B,GAErBjB,EAASmB,SAASF,EAC7B,EAlEwB,EAAAE,SAAyB,CAC7CC,aAAa,EACbC,WAAW,EACXC,SAAS,GAEE,EAAAnC,QAAe,CAAC,EA8DnC,C,CApEA,E,wECkBMoC,EAAkB,SAACC,GACrBA,EAAOC,MAAM,OACjB,EAEMC,EAAO,CACTC,SAAA,SAASC,EAAeC,EAAYC,GAChC,IAmBIC,EACAC,EACAC,EACAC,EAtBEC,EAAgB,SAAC7K,GACnB,IAAKA,GAAiC,oBAA1B,CAAC,EAAEoB,SAAS0J,KAAK9K,GACzB,OAAO,EAGX,IAAI+K,EAAQrL,OAAOsL,eAAehL,GAElC,IAAK+K,EACD,OAAO,EAIX,IAAIE,EAAO,CAAC,EAAEC,eAAeJ,KAAKC,EAAO,gBAAkBA,EAAMI,YACjE,MACoB,mBAATF,GACP,CAAC,EAAEC,eAAe9J,SAAS0J,KAAKG,KAAU,CAAC,EAAEC,eAAe9J,SAAS0J,KAAKpL,OAElF,EAMI0L,EAASC,UAAU,IAAM,CAAC,EAC1BzK,EAAI,EACJwF,EAASiF,UAAUjF,OAqBvB,IAlBsB,kBAAXgF,IACPd,EAAOc,EAGPA,EAASC,UAAUzK,IAAM,CAAC,EAC1BA,KAIkB,iBAAXwK,GAAyC,mBAAXA,IACrCA,EAAS,CAAC,GAGVxK,IAAMwF,IACNgF,EAAS9K,KACTM,KAGGA,EAAIwF,EAAQxF,IAEf,GAAgC,OAA3B6J,EAAUY,UAAUzK,IAErB,IAAK8J,KAAQD,EACTE,EAAMS,EAAOV,GAITU,KAHJZ,EAAOC,EAAQC,MAQXJ,GAAQE,IAASK,EAAcL,KAAUI,EAAcU,MAAMC,QAAQf,MACjEI,GACAA,GAAc,EACdL,EAAQI,GAAOW,MAAMC,QAAQZ,GAAOA,EAAM,IAE1CJ,EAAQI,GAAOE,EAAcF,GAAOA,EAAM,CAAC,EAI/CS,EAAOV,GAAQN,EAAKC,SAASC,EAAMC,EAAOC,SAG1BgB,IAAThB,IACPY,EAAOV,GAAQF,IAO/B,OAAOY,CACX,EAEAK,WAAY,SAAmBxE,GAc3B,OAbAvH,OAAOa,OAAO0G,GAEdvH,OAAOgM,oBAAoBzE,GAAGjG,SAAQ,SAAC2K,IAE/B1E,EAAEiE,eAAeS,IACI,OAApB1E,EAAU0E,IACkB,iBAApB1E,EAAU0E,IAAkD,mBAApB1E,EAAU0E,IAC1DjM,OAAOkM,SAAU3E,EAAU0E,KAE5BvB,EAAKqB,WAAYxE,EAAU0E,GAEnC,IAEO1E,CACX,EAEA4E,KAAM,SAAIC,EAAUC,GAChB,O,qLAAO,CAAID,GAAKD,KAAKE,EACzB,EAEAC,eAAgB,SAACC,EAASpM,GACtB,IAAMqM,EAAW,GAIjB,OAHAD,EAAGjL,SAAQ,SAACmL,GACRD,EAAEjK,KAAKkK,EAAEtM,GACb,IACOuK,EAAKqB,WAAWS,EAC3B,EAEAE,aAAc,SAAIN,EAAUnM,GAUxB,OATAmM,EAAMA,EAAItE,SACNxG,SAAQ,SAACmL,GACCzM,OAAOC,KAAKwM,GACpBnL,SAAQ,SAAAnB,GACFF,EAAK0M,QAAQxM,GAAO,UACbsM,EAAEtM,EAEjB,GACJ,IACOuK,EAAKqB,WAAWK,EAC3B,EAEAQ,iBAAkB,SAACC,GACf,OAAOA,EAASC,MAAM,KAAKC,QAAQ,GAAG,EAC1C,EAEAC,WAAY,SAACC,GACT,IAAMlF,EAAImF,SAASC,cAAc,YAGjC,OAFApF,EAAEqF,YAAcH,EACPlF,EAAEsF,UAAUC,QAAQ,kBAAmB,QAEpD,EAEAC,SAAU,SAACC,EAAcC,GACjBA,IACAD,EAAO9C,EAAKsC,WAAWS,IAE3BP,SAASQ,eAAe,YAAaL,UAAYG,CACrD,EAEAG,QAAS,SAAI/L,GACT,IAAM4K,EAAS,GAIf,OAHAxM,OAAOC,KAAK2B,GAAKN,SAAQ,SAAAJ,GACrBsL,EAAEjK,KAAKX,EAAIV,GACf,IACOwJ,EAAKqB,WAAWS,EAC3B,EAEAoB,OAAQ,SAAChM,GACL,IAAM4K,EAAS,CAAC,EAQhB,OAPAxM,OAAOC,KAAK2B,GAAKN,SAAQ,SAAAJ,GACjBU,EAAIV,KAAMsL,EACVA,EAAE5K,EAAIV,IAAIqB,KAAKrB,GAEfsL,EAAE5K,EAAIV,IAAM,CAACA,EAErB,IACOwJ,EAAKqB,WAAWS,EAC3B,EAEAqB,IAAK,SAACC,GACF,OAAOA,EAASzN,QAAO,SAAC0N,EAAGC,GACvB,OAAO7M,KAAK0M,IAAIE,EAAGC,EACvB,GACJ,EAEAC,YAAa,SAACC,GACV,OAAOA,EAAIZ,QAAQ,eAAe,SAAAa,GAC9B,OAAOA,EAAMC,aACjB,GACJ,EAEAC,kBAAmB,SAACH,G,IAAa,wDAC7B,OAAOI,EAAajO,QAAO,SAACkO,EAAKC,EAAatN,GAC1C,OAAOqN,EAAIjB,QAAQ,KAAIpM,EAAI,GAAKsN,EACpC,GAAGN,EACP,EAEAO,gBAAiB,SAACC,EAAeC,GAC7BjE,EAAKkE,cAAc,KAAMF,EAAO,KAAM,KAAM,CAAC,CAAEG,KAAM,OAAQxI,aAAcsI,IAAS,MAAM,EAC9F,EAEAG,cAAe,SAACJ,EAAeK,EAA4BC,EAA2BC,EAAsBC,QAAA,IAAAA,IAAAA,GAAA,GACxG,IAAMC,EAAI,EAAE,QAAS,CAAEC,MAAO,0BAC9BH,EAAK3N,SAAQ,SAAC+N,EAASnO,GACb,iBAAkBmO,IACpBA,EAAQhJ,aAAe,IAG3B,IAAI7E,EAAK,cAAgBN,EACrB,OAAQmO,GAA0B,KAAfA,EAAQ7N,IAA4B,OAAf6N,EAAQ7N,IAAqC,iBAAf6N,EAAQ7N,KAC9EA,EAAK6N,EAAQ7N,IAGjB,IAAM8N,EAAyB,CAAEF,MAAO,eAAgB5N,GAAE,EAAE0I,MAAOmF,EAAQhJ,cAEvE,eAAgBgJ,GAChBrP,OAAOC,KAAKoP,EAAQ9N,YAAYD,SAAQ,SAAAiO,GACQ,mBAAjCF,EAAQ9N,WAAWgO,KAC1BD,EAASC,GAAYF,EAAQ9N,WAAWgO,GAEhD,IAGJ,IAAIC,EAA8C,WAAM,UACpD,mBAAoBH,GAA6C,mBAA3BA,EAAQI,iBAC9CD,EAAYH,EAAQI,gBAGxB,IAAMC,EAAmB,SAACC,EAAYC,QAAA,IAAAA,IAAAA,EAAA,MAClC,IAAMC,EAAK,EAAEF,EAAMjE,QACf6C,EAAMsB,EAAGtB,MACQ,OAAjBqB,GAAiD,mBAAjBA,IAChCrB,EAAMqB,EAAarB,IAEvB,IAAMuB,EAAQN,EAAWjB,EAAKsB,IAEhB,IAAVC,EACAD,EAAGE,YAAY,cACVC,KAAK,aAAe9O,GACpB+O,UAELJ,EAAGK,SAAS,cAC6B,IAArCL,EAAGG,KAAK,aAAe9O,GAAGwF,QAC1BmJ,EAAGM,MAAM,EAAE,QAAS,CAAEf,MAAO,mBAAoB5N,GAAI,YAAcN,IAAKsM,KAAKsC,IAGzF,EAEA,GAAqB,SAAjBT,EAAQR,KACRM,EAAEiB,OAAO,EAAEf,EAAQhJ,oBAChB,GAAqB,aAAjBgJ,EAAQR,KACfS,EAAST,KAAO,WAChBS,EAASF,MAAQ,0BACVE,EAASpF,MACZmF,EAAQhJ,eACRiJ,EAASe,QAAU,IAGvBlB,EAAEiB,OACE,EAAE,QAAS,CAAEhB,MAAO,eAAgBgB,OAChC,EAAE,UAAW,CAAEE,IAAK9O,EAAI4N,MAAO,qBAC1B5B,KAAK6B,EAAQ5N,OACb8O,QAAQ,EAAE,UAAWjB,WAMlC,GAFAH,EAAEiB,OAAO,EAAE,UAAW,CAAEE,IAAK9O,EAAI4N,MAAO,mBAAoB5B,KAAK6B,EAAQ5N,QAEpD,WAAjB4N,EAAQR,KAAmB,CACvB,iBAAkBQ,IAAoC,IAAzBA,EAAQmB,eACrClB,EAASF,OAAS,gBAEtB,IAAMqB,EAAK,EAAE,WAAYnB,GAAU9B,KAAK6B,EAAQhJ,cAC5C,YAAagJ,GAAsC,mBAApBA,EAAQqB,SACvCD,EAAGE,GAAG,QAAStB,EAAQqB,SAE3BvB,EAAEiB,OAAOK,E,MACN,GAAqB,YAAjBpB,EAAQR,KACfS,EAAST,KAAO,SAChBM,EAAEiB,OACE,EAAE,UAAWd,GAAUqB,GAAG,iBAAiB,SAAA3O,GACvC0N,EAAiB1N,EAAGM,WACxB,UAED,GAAqB,SAAjB+M,EAAQR,KACfS,EAAST,KAAO,OAChBM,EAAEiB,OAAO,EAAE,UAAWd,GAAUqB,GAAG,gBAAiBjB,SACjD,GAAqB,SAAjBL,EAAQR,KACfS,EAAST,KAAO,OAChBS,EAASF,MAAQ,iCACjBD,EAAEiB,OAAO,EAAE,UAAWd,GAAUqB,GAAG,gBAAiBjB,SACjD,GAAqB,aAAjBL,EAAQR,KACT4B,EAAK,EAAE,aAAcnB,GAAUqB,GAAG,gBAAiBjB,GACrD,YAAaL,GACboB,EAAGE,GAAG,QAAStB,EAAQqB,SAE3BvB,EAAEiB,OAAOK,QACN,GAAqB,WAAjBpB,EAAQR,KAAmB,CAClC,IAAM,EAAW,EAAE,WAAYS,GAC/BD,EAAQuB,WAAYtP,SAAQ,SAACuP,EAAOC,GAChC,GAAIA,EAASzB,EAAQ0B,aAAcrK,OAAQ,CACvC,IAAIsK,GAAW,EACX3B,EAAQhJ,eAAiBgJ,EAAQ0B,aAAcD,KAC/CE,GAAW,GAEf,EAASZ,OAAO,EAAE,WAAY,CAAElG,MAAOmF,EAAQ0B,aAAcD,GAASE,SAAQ,IAAIxD,KAAKqD,G,MAEnFG,GAAW,EACX3B,EAAQhJ,eAAiBwK,IACzBG,GAAW,GAEf,EAASZ,OAAO,EAAE,WAAY,CAAEY,SAAQ,IAAIxD,KAAKqD,GAEzD,IACA1B,EAAEiB,OAAO,EAASO,GAAG,gBAAiBjB,G,CAGlD,IAEA,IAAIuB,EAAsC,EAAE,QAAS,CAAE7B,MAAO,iBACzDgB,OAAO,EAAE,WAAY,CAAEhB,MAAO,kBAAmBP,KAAM,WAAYrB,KAAKuB,IACxEqB,OAAO,EAAE,WAAY,CAAEhB,MAAO,4BAA6BP,KAAM,WAAYrB,KAAKwB,KAExE,IAAXE,IACA+B,EAAU,MAGd,IAAMzG,EAAS,EAAE,QAAS,CAAE4E,MAAO,aAAc8B,SAAU,KAAMC,KAAM,SAAU,cAAe,SAoChG,OAnCA3G,EAAO4F,OACH,EAAE,QAAS,CAAEhB,MAAO,iBAAkBgB,OAClC,EAAE,QAAS,CAAEhB,MAAO,kBACfgB,OACG,EAAE,QAAS,CAAEhB,MAAO,iBACfgB,OAAO,EAAE,OAAQ,CAAEhB,MAAO,gBAAiB5B,KAAKkB,IAChD0B,OACG,EAAE,WAAY,CACVhB,MAAO,QACP,eAAgB,QAChB,aAAc,UACfgB,OAAO,EAAE,SAAU,CAAE,cAAe,SAAUgB,KAAK,cAGjEhB,OAAOjB,GACPiB,OAAOa,KAGpBzG,EACK6G,KAAK,mBACLC,IAAI,SACJX,GAAG,SAAS,SAAA3O,GACK,UAAVA,EAAE7B,KACF,EAAE,gBACGoR,OACAC,QAAQ,QAErB,IACJhH,EAAOmG,GAAG,kBAAkB,WACxBnG,EACK6G,KAAK,sDACLI,QACAD,QAAQ,QACjB,IAEOhH,CACX,EAEAoE,cAAe,SACX8C,EACAhD,EACAK,EACAC,EACAC,EACA0C,EACAzC,QADA,IAAAyC,IAAAA,EAAA,QACA,IAAAzC,IAAAA,GAAA,GAEA,IAAM1E,EAASE,EAAKoE,cAAcJ,EAAOK,EAAaC,EAAYC,EAAMC,GAExE1E,EACKmG,GAAG,QAAS,eAAe,WACA,mBAAbgB,EACPA,EAASnH,GAETA,EAAOC,MAAM,OAErB,IACCkG,GAAG,QAAS,gBAAgB,WACzBnG,EAAOC,MAAM,OACjB,IACCkG,GAAG,QAAS,gBAAgB,WACzB,IAAMiB,EAAc,GAChBC,GAAY,EAEhBrH,EAAO6G,KAAK,2BAA2BS,MAAK,SAAC5Q,EAAGuL,GAC5C,IAAMoD,EAAK,EAAEpD,GAEe,WAAvBoD,EAAWkC,QACZH,EAAKrP,KAAKsN,EAAGwB,KAAK,aAAa9C,OACJ,aAApBsB,EAAGmC,KAAK,QACfJ,EAAKrP,KAAKsN,EAAG5D,KAAK,YACS,SAApB4D,EAAGmC,KAAK,QACfJ,EAAKrP,KAAMsN,EAAG/M,IAAI,GAAWmP,OACF,WAApBpC,EAAGmC,KAAK,QACfJ,EAAKrP,KAAKD,WAAWuN,EAAGtB,QAExBqD,EAAKrP,KAAKsN,EAAGtB,OAGbsB,EAAG2B,QAAQ,YAAYU,SAAS,gBAChCL,GAAY,EAEpB,IAEKA,GAAkC,mBAAdH,GACrBA,EAAUlH,EAAQoH,EAE1B,IACCjB,GAAG,mBAAmB,WACK,mBAAbgB,GACPA,EAASnH,GAEbA,EAAOyF,QACX,IACCxF,MAAM,OACf,GAGJ,S,4FCvaApC,OAAOwB,KAAO,UACdxB,OAAOC,SAAW,UAElB,gBAAwBZ,MAAK,WACzBW,OAAO8J,GAAK,UACZ9J,OAAO8J,GAAGC,oBAEV,UAAKrI,WAAWsI,QAAU,UAAkBC,UAC5C,UAAKvI,WAAWwI,OAAS,GACzBlK,OAAOkB,QAAU,IAAI,EAAAiJ,QAAQ,UAAKC,UAAW,CAAC,EAAG,UAAK1I,YACtD,UAASZ,eAET,UAAKuJ,oBAAoBrK,OAAOkB,SAEhC,I,QAAIoJ,GAAc,EAClB,GAAI,UAASjK,uBAAwB,CACjC,IAAMkK,EAAIhK,aAAaQ,QAAQ,6BAC/B,GAAU,OAANwJ,EAAY,CACZ,IAAMC,EAAiB5J,KAAKI,MAAMuJ,GAC9B,UAAWC,GAAa,UAAWA,EAAUC,QAC7CH,GAAc,EACd,UAAKI,YAAW,EAAOF,G,EAI/BF,I,OACC,E,OAAA,E,EAAA,W,2lCACuB,SAAM,8B,cAApBK,EAAc,SAAyCvK,QAC7D,UAAKwK,QAAQD,EAAWE,YAAY,GAAO,GAAM,G,qBAFpD,K,kQAKT,G,mECtCA,WAMI,WAAY9Q,EAA+BC,EAAaF,EAA6BZ,G,uBAArF,YAAwD,IAAAY,IAAAA,EAAA,QAA6B,IAAAZ,IAAAA,EAAA,MAC7D,iBAATa,IACPb,EAAavB,OAAOC,KAAKmC,GACpBlC,QAAO,SAAAC,GAAO,OAAC,CAAC,OAAQ,KAAM,UAAUC,SAASD,EAAnC,IACdE,QAAO,SAACC,EAAUH,GAEf,OADAG,EAAIH,GAAwBiC,EAAMjC,GAC3BG,CACX,GAAG,CAAC,GAER+B,EAAKD,EAAKC,GACVF,EAASC,EAAKD,OACdC,EAAOA,EAAKA,MAGhBxB,KAAKe,WAAa,CAAC,EACA,OAAfJ,GAA6C,iBAAfA,GAC9BvB,OAAOC,KAAKsB,GAAYD,SAAQ,SAAAnB,GAC5B,EAAKwB,WAAWxB,GAAOH,OAAOa,OAAOU,EAAWpB,GACpD,IAGJS,KAAKe,WAAa3B,OAAOa,OAAOD,KAAKe,YACrCf,KAAKwB,KAAOpC,OAAOa,OAAOuB,GAC1BxB,KAAKyB,GAAKrC,OAAOa,OAAOwB,GACxBzB,KAAKuB,OAASnC,OAAOa,OAAOyB,WAAWH,IAEnC,IAAegR,GACfnT,OAAOa,OAAOD,KAEtB,CAmDJ,OAjDI,YAAA4C,QAAA,WACI,OAAO5C,KAAKwB,IAChB,EAEA,YAAAqB,MAAA,WACI,OAAO7C,KAAKyB,EAChB,EAEA,YAAAqB,UAAA,WACI,OAAO9C,KAAKuB,MAChB,EAEA,YAAA8E,aAAA,SAAaC,GACT,OAAIA,KAAatG,KAAKe,WACXf,KAAKe,WAAWuF,GAGpB,IACX,EAEA,YAAA3D,iBAAA,WACI,OAAO3C,KAAKe,UAChB,EAEA,YAAAoB,QAAA,sBACUiE,EAA2B,CAAE5E,KAAMxB,KAAKwB,KAAMC,GAAIzB,KAAKyB,GAAIF,OAAQvB,KAAKuB,QAO9E,OANAnC,OAAOC,KAAKW,KAAKe,YAAYL,SAAQ,SAAAnB,GAC3BA,KAAO6G,IACTA,EAAS7G,GAAO,EAAKwB,WAAWxB,GAExC,IAEO6G,CACX,EAEA,YAAAjD,SAAA,SAASC,EAA0BzC,QAAA,IAAAA,IAAAA,EAAA,IAE/B,IAAMI,EAAa3B,OAAOmH,OAAO,CAAC,EAAGvG,KAAKe,YAK1C,OAJA3B,OAAOC,KAAKsB,GAAYD,SAAQ,SAAAnB,GAC5BwB,EAAWxB,GAAOoB,EAAWpB,EACjC,IAEO,IAAIgT,EACPvS,KAAK4C,UACL5C,KAAK6C,QACS,OAAdO,EAAqBpD,KAAK8C,YAAcM,EACxCrC,EAER,EACJ,EAtFA,E,2DCHA,SACIyR,6BAA8B,SAACC,GAE3B,IAAMvO,EAAoB,GAkB1B,OAjBAuO,EAAgB/R,SAAQ,SAACmL,EAAGvL,GACpBA,KAAK4D,EACLA,EAAQ5D,GAAGoS,KAAO7G,EAAE/F,OAGpB5B,EAAQ5D,GAAK,CAACoS,IAAK7G,EAAE/F,OAAQ6M,GAAI,GAErC9G,EAAEnL,SAAQ,SAACkS,GACHA,KAAQ1O,EACRA,EAAQ0O,GAAMD,IAAM,EAGpBzO,EAAQ0O,GAAQ,CAACD,GAAI,EAAGD,IAAK,EAErC,GACJ,IAEOxO,CACX,EAEA2O,0BAA2B,SAAChT,GACxB,IAAMD,EAA0B,GAMhC,OALAC,EAAMa,SAAQ,SAACmL,GACXjM,EAAMiM,EAAErK,MAAQ,CAACZ,GAAIiL,EAAErK,KAAMX,MAAOgL,EAAErK,KAAKV,YAC3ClB,EAAMiM,EAAEpK,IAAM,CAACb,GAAIiL,EAAEpK,GAAIZ,MAAOgL,EAAEpK,GAAGX,WACzC,IAEOlB,CACX,E,0FC1CW,SAASkT,IACtB,OAAO,IAAIC,OAAO,IAA0B,0DAC9C,C,22CCiBMC,EAA2B,SAAClF,EAAemF,EAAYlT,GACzD,IAAMmT,EAASC,EAAU5L,QAAQ6L,aAC7BC,EAAeC,UAAUJ,GACzBG,EAAeE,oBAAoBL,IAGvCG,EAAeC,UAAUJ,IAAU,EAEnC,UAAKlF,eACD,SAACpE,EAAQ4J,GACL5J,EAAOC,MAAM,QAEb,IAAM4J,EAAS,UAAWC,cAAcF,EAAO,IACzCG,EAAO,UAAWD,cAAcF,EAAO,IAEvCI,EAAmBP,EAAeQ,wBAClCC,EAAIT,EAAeU,qBAAoB,SAAA3S,GACzC,IAAI+L,EAAI/L,EAAElC,KAOV,GANA4U,EAAEE,UACEJ,GACAP,EAAeY,uBAEnBZ,EAAeC,UAAUJ,IAAU,GAEzB,IAAN/F,EAAJ,CAiBA,IAAI+G,EAAI,OAAOpG,EAAK,YAAY,UAAKL,kBAAkB0F,EAAU5L,QAAQ4M,eACrE,UAAK/H,WAAWqH,EAAO3S,YAAa,UAAKsL,WAAWuH,EAAK7S,aAE7D,GAAIqM,EAAEiH,WAAY,CACdF,EAAI,UAAKzG,kBAAkB0F,EAAU5L,QAAQ8M,qBAAsBvG,EAC/D,UAAWwG,cAAcb,GAAS,UAAWa,cAAcX,GAAOxG,EAAEoH,UACpExU,IACAmU,GAAK,KAAK,UAAKzG,kBAAkB0F,EAAU5L,QAAQiN,iBAAkBrH,EAAEsH,OAE3EP,GAAK,OAASf,EAAU5L,QAAQmN,UAEhCR,EAAI,UAAK9H,WAAW8H,GACpB,IAAIhC,EAAQ,UAAWyC,aAAa,UAAWzC,OAAO,GAAO,GACzD,EAAI,IAAIpQ,EAAA,QAAWoQ,EAAMtS,MAAOsS,EAAMrS,MAAOqS,EAAMpS,SAAUoS,EAAMnS,UACvEoN,EAAEyH,KAAKlU,SAAQ,SAACmL,EAAWvL,GACvB4T,GAAQ,UAAK9H,WAAW,UAAWkI,cAAczI,IAAG,WAChDvL,EAAI,IACJ,EAAI,EAAE6C,SAASgK,EAAEyH,KAAKtU,EAAI,GAAIuL,EAAG,KAAM,KAAM,WAErD,IACA,UAAWqG,MAAQ,EACnBzK,OAAOwB,KAAKoJ,QAAQ,UAAWsC,aAAa,IAAI,GAAO,GAAO,GAC9DT,EAAIA,EAAEhN,MAAM,GAAI,GAChBgN,EAAI,OAAOpG,EAAK,YAAYoG,C,CAGhC,UAAKvH,SAASuH,E,MA1CNjB,EAAGzT,SAAS,YACZ,UAAKqO,gBACDsF,EAAU5L,QAAQsN,cAClB1B,EAAU5L,QAAQuN,mBAEf7B,EAAGzT,SAAS,YACnB,UAAKqO,gBACDsF,EAAU5L,QAAQwN,iBAClB5B,EAAU5L,QAAQyN,qBAmClC,IACAlB,EAAEmB,KAAK,CACHhH,KAAMgF,EACNiC,KAAM,CAACzB,EAAQE,GACfwB,qBAAqB,EACrBjD,MAAOzK,OAAOwB,KAAKmM,WAAWT,gBAEtC,GACA7G,EACAqF,EAAU5L,QAAQ8N,GAClBlC,EAAU5L,QAAQ+N,OAClB,CACI,CACIzU,MAAOsS,EAAU5L,QAAQgO,UACzBtH,KAAM,OACNY,eAAgBpH,OAAOwB,KAAKuM,sBAEhC,CACI3U,MAAOsS,EAAU5L,QAAQkO,QACzBxH,KAAM,OACNY,eAAgBpH,OAAOwB,KAAKuM,wBAGpC,SAAC5L,GACGyJ,EAAeC,UAAUJ,IAAU,EACnCtJ,EAAOC,MAAM,OACjB,IAER,EAEM6L,EAAyB,SAAOC,GAA0B,0C,yCAK5D,GAJIxI,EAAI,KACJyI,EAAKzC,EAAU5L,QAAQsO,oBACvBC,EAAe,sBAEfH,EAAmB,CACnB,IAAKlO,OAAOC,SAASC,UAAU,aAC3B,UAEJiO,EAAKzC,EAAU5L,QAAQwO,4BACvBD,EAAe,6B,MAEf,GAAIrO,OAAOC,SAASC,UAAU,aAC1B,UAIR,OAAI0L,EAAeC,UAAUsC,IACzBvC,EAAeE,oBAAoBqC,GAC5B,CAAP,EAAOhP,QAAQoP,OAAO7C,EAAU5L,QAAQ0O,uBAE5C5C,EAAeC,UAAUsC,IAAM,EAEzBhC,EAAmBP,EAAeQ,yBAClCC,EAAIT,EAAeU,qBAAoB,SAAA3S,GACzC+L,EAAI/L,EAAElC,KACN4U,EAAEE,UAEF,UAAWkC,gBAAgBN,GAAMzI,EAAEgJ,MACnC,UAAWC,aAAY,EAAM,CAACR,EAAIE,IAClC,UAAWO,MAAMP,GAAgB3I,EAAEmJ,WAEnC,IAAMA,EAAa,UAAKvJ,QAAQI,EAAEmJ,YAC9BpC,EAAI,UAAKzG,kBAAkB0F,EAAU5L,QAAQgP,4BAA6BX,EAAIzI,EAAEgJ,OACpFjC,GAAK,OAELoC,EAAW5V,SAAQ,SAACmL,EAAGvL,GACnB4T,GAAK,UAAKzG,kBAAkB0F,EAAU5L,QAAQiP,mCAAoC,UAAWlC,cAAchU,GAAIuL,EAAI,IAAM,IAC7H,IAEAqI,GAAK,KAAK7L,KAAKC,UAAU,UAAK0E,OAAOG,EAAEmJ,YAAa,KAAM,GAAE,OAC5DpC,EAAI,OAAO0B,EAAE,YAAY,UAAKxJ,WAAW8H,GAErCN,GACAP,EAAeY,uBAEnBZ,EAAeC,UAAUsC,IAAM,EAE/B,UAAKjJ,SAASuH,EAClB,KACEe,KAAK,CACHhH,KAAM6H,EACNZ,KAAM,GACNhD,MAAOzK,OAAOwB,KAAKmM,WAAWT,eAC9BQ,qBAAqB,I,YAI7B,aAKI,WAAYvU,EAAYkT,EAAW2C,GAAnC,WACIzW,KAAKY,GAAKA,EACVZ,KAAK0W,OAAS5C,EACd9T,KAAKyW,SAAWA,EAChB3C,EAAE6C,YAAY,CAAE1I,KAAM,KAAMrN,GAAE,IAC9BkT,EAAE8C,UAAY,SAACxV,GACX,EAAKqV,SAAS,CAAEvX,KAAMkC,EAAElC,KAAKA,MACjC,CACJ,CAUJ,OARW,YAAA+V,KAAP,SAAY/V,GACRc,KAAK0W,OAAOC,YAAYzX,EAC5B,EAEO,YAAA8U,QAAP,WACIhU,KAAK0W,OAAOG,YACZ,UAAWC,WAAW9W,KAAKY,IAAM,IACrC,EACJ,EAvBA,GAyBA,0BAwpBA,QAtpBW,EAAAmW,cAAP,WACI,MAAO,CACH,CACI3M,KAAM+I,EAAU5L,QAAQyP,cACxBC,aAAa,EACbC,UAAW7D,EAAe8D,0BAC1BC,SAAS,GAEb,CACIhN,KAAM+I,EAAU5L,QAAQsO,oBACxBoB,aAAa,EACbC,UAAW,WACPxB,GAAuB,EAC3B,EACA0B,SAAS,GAEb,CACIhN,KAAM+I,EAAU5L,QAAQwO,4BACxBkB,aAAa,EACbG,SAAS,EACTF,UAAW,WACPxB,GAAuB,EAC3B,GAEJ,CACItL,KAAM+I,EAAU5L,QAAQ8P,IACxBJ,aAAa,EACbC,UAAW,WACPlE,EAAyBG,EAAU5L,QAAQ8P,IAAK,sBAAsB,EAC1E,EACAD,SAAS,GAEb,CACIhN,KAAM+I,EAAU5L,QAAQ+P,SACxBJ,UAAW,WACPlE,EAAyBG,EAAU5L,QAAQ+P,SAAU,kBAAkB,EAC3E,EACAF,SAAS,GAEb,CACIhN,KAAM+I,EAAU5L,QAAQgQ,YACxBxX,UAAU,EACVkX,aAAa,EACbC,UAAW,WACPlE,EAAyBG,EAAU5L,QAAQgQ,YAAa,eAAe,EAC3E,EACAH,SAAS,GAEb,CACIhN,KAAM+I,EAAU5L,QAAQiQ,cACxBzX,UAAU,EACVkX,aAAa,EACbC,UAAW7D,EAAeoE,mBAC1BL,SAAS,GAEb,CACIhN,KAAM+I,EAAU5L,QAAQmQ,WACxB3X,UAAU,EACVkX,aAAa,EACbC,UAAW7D,EAAesE,oBAC1BP,SAAS,GAEb,CACIhN,KAAM+I,EAAU5L,QAAQqQ,OACxBV,UAAW7D,EAAewE,qBAC1BZ,aAAa,EACbG,SAAS,GAEb,CACIhN,KAAM+I,EAAU5L,QAAQuQ,SACxBZ,UAAW7D,EAAe0E,4BAC1Bd,aAAa,EACbG,SAAS,GAEb,CACIhN,KAAM+I,EAAU5L,QAAQyQ,SACxBf,aAAa,EACbG,SAAS,EACTF,UAAW,MAEf,CACI9M,KAAM+I,EAAU5L,QAAQyQ,SACxBf,aAAa,EACbG,SAAS,EACTF,UAAW7D,EAAe4E,iCAGtC,EAEO,EAAAzG,kBAAP,sBACU0G,EAA0B,SAACC,EAAkBlF,GAC/C3G,SAAS8L,cAAcD,GAAWE,iBAAiB,SAAS,SAAAjX,GACxDA,EAAEkX,iBACFrF,GACJ,GACJ,EAEAiF,EAAwB,mBAAoB7E,EAAekF,WAC3DL,EAAwB,sBAAuB7E,EAAemF,cAC9DN,EAAwB,uBAAuB,gD,wDACvB,SAAM,8B,cAApB9F,EAAc,SAAyCvK,QAC7DJ,OAAOwB,KAAKoJ,QAAQD,EAAWE,YAAY,GAAO,GAAM,G,cAE5D4F,EAAwB,yBAAyB,gD,wDACzB,SAAM,8B,cAApB9F,EAAc,SAAyCvK,QAC7DJ,OAAOwB,KAAKoJ,QAAQD,EAAWqG,cAAc,GAAO,GAAM,G,cAE9DP,EAAwB,uBAAuB,gD,kDACvB,SAAM,8B,cAAN,SAAyCrQ,QAClD6Q,W,cAEfR,EAAwB,wBAAwB,gD,kDACxB,SAAM,8B,cAAN,SAAyCrQ,QAClD8Q,Y,cAEfT,EAAwB,qBAAqB,gD,kDACrB,SAAM,8B,cAAN,SAAyCrQ,QAClD+Q,S,cAEfV,EAAwB,aAAczQ,OAAOwB,KAAK4P,MAClDX,EAAwB,aAAczQ,OAAOwB,KAAK6P,MAClDZ,EAAwB,kCAAkC,gD,2BACtD,MAAO,CAAP,EAAO,UAAWa,wBAAuB,G,UAE7Cb,EAAwB,yBAA0BzQ,OAAOwB,KAAK+P,sBAC9Dd,EAAwB,qBAAqB,gD,kDAC5B,SAAM,8B,cAAN,SAAoCrQ,QAC7CoR,sB,cAERf,EAAwB,qBAAqB,gD,kDAC5B,SAAM,8B,cAAN,SAAoCrQ,QAC7CqR,sB,cAERhB,EAAwB,qBAAqB,gD,kDAC5B,SAAM,8B,cAAN,SAAoCrQ,QAC7CsR,sB,cAERjB,EAAwB,qBAAqB,gD,kDAC5B,SAAM,8B,cAAN,SAAoCrQ,QAC7CuR,sB,cAEP9M,SAAS8L,cAAc,iBAAuCiB,UAAYlG,EAAU5L,QAAQ+R,KAC5FhN,SAAS8L,cAAc,qBAA2CiB,UAAYlG,EAAU5L,QAAQgS,WAChGjN,SAAS8L,cAAc,qBAA2CiB,UAAYlG,EAAU5L,QAAQiS,WAChGlN,SAAS8L,cAAc,qBAA2CiB,UAAYlG,EAAU5L,QAAQkS,WAChGnN,SAAS8L,cAAc,qBAA2CiB,UAAYlG,EAAU5L,QAAQmS,WAEhGpN,SAAS8L,cAAc,kCAAwDiB,UAAYlG,EAAU5L,QAAQoS,uBAC7GrN,SAAS8L,cAAc,0BAAgDiB,UAAYlG,EAAU5L,QAAQqS,eACrGtN,SAAS8L,cAAc,uBAA6CiB,UAAYlG,EAAU5L,QAAQsS,aAClGvN,SAAS8L,cAAc,oBAA0CiB,UAAYlG,EAAU5L,QAAQuS,KAE/FxN,SAAS8L,cAAc,yBAAgDiB,UAAYlG,EAAU5L,QAAQwS,cACrGzN,SAAS8L,cAAc,uBAA6CiB,UAAYlG,EAAU5L,QAAQyS,aAClG1N,SAAS8L,cAAc,yBAA+CiB,UAAYlG,EAAU5L,QAAQ0S,eACpG3N,SAAS8L,cAAc,uBAA6CiB,UAAYlG,EAAU5L,QAAQ2S,aAClG5N,SAAS8L,cAAc,wBAA8CiB,UAAYlG,EAAU5L,QAAQ4S,cACnG7N,SAAS8L,cAAc,qBAA2CiB,UAAYlG,EAAU5L,QAAQ6S,WAEhG9N,SAAS8L,cAAc,qBAAyCiB,UAAYlG,EAAU5L,QAAQ8S,WAE9F/N,SAAS8L,cAAc,2BAA+CiB,UAAYlG,EAAU5L,QAAQ+S,gBACpGhO,SAAS8L,cAAc,kBAAsCiB,UAAYlG,EAAU5L,QAAQgT,OAChG,EAEO,EAAAhC,UAAP,WACI,UAAK1K,gBACDsF,EAAU5L,QAAQuS,KAClB3G,EAAU5L,QAAQiT,WAE1B,EAEO,EAAAhC,aAAP,WACI,UAAKxK,eACD,SAACpE,EAAQoH,GAKL,GAJApH,EAAOC,MAAM,QACTpC,OAAOC,SAASC,UAAU,iBAAmBqJ,EAAK,IAClDvJ,OAAOC,SAAS0B,aAAa,cAAe4H,EAAK,IAEjDvJ,OAAOC,SAASC,UAAU,eAAiBqJ,EAAK,GAAI,CACpDvJ,OAAOC,SAAS0B,aAAa,YAAa4H,EAAK,IAC/C,IAAIrM,EAAI,UAAWuN,MACnBvN,EAAIqM,EAAK,GAAKrM,EAAEL,YAAW,GAAQK,EAAEH,eAErCiD,OAAOwB,KAAKoJ,QAAQ,UAAWsC,aAAahQ,GAAG,G,CAE/C8C,OAAOC,SAASC,UAAU,aAAeqJ,EAAK,KAC9CvJ,OAAOC,SAAS0B,aAAa,UAAW4H,EAAK,IACzCrM,EAAI,UAAWuN,MACnBvN,EAAIqM,EAAK,GAAKrM,EAAEP,aAAeO,EAAEN,eACjCoD,OAAOwB,KAAKoJ,QAAQ,UAAWsC,aAAahQ,KAE5C8C,OAAOC,SAASC,UAAU,kBAAoBqJ,EAAK,IACnDvJ,OAAOC,SAAS0B,aAAa,eAAgB4H,EAAK,GAE1D,GACAmC,EAAU5L,QAAQkT,QAClBtH,EAAU5L,QAAQmT,KAClBvH,EAAU5L,QAAQ+N,OAClB,CACI,CACIzU,MAAOsS,EAAU5L,QAAQoT,aACzBlV,aAAcgC,OAAOC,SAASC,UAAU,eACxCsG,KAAM,YAEV,CACIpN,MAAOsS,EAAU5L,QAAQqT,QACzBnV,aAAcgC,OAAOC,SAASC,UAAU,aACxCsG,KAAM,YAEV,CACIpN,MAAOsS,EAAU5L,QAAQsT,cACzBpV,aAAcgC,OAAOC,SAASC,UAAU,WACxCsG,KAAM,YAEV,CACIpN,MAAOsS,EAAU5L,QAAQuT,iBACzBrV,aAAcgC,OAAOC,SAASC,UAAU,gBACxCsG,KAAM,aAGd,KAER,EAEO,EAAA8M,uBAAP,WACI,IAAgB,oBAAWjE,WAAX,eAAuB,CAAlC,IAAMjL,EAAC,KACE,OAANA,GAAcA,aAAapE,OAAOsL,QAClClH,EAAEgL,W,CAIV,UAAWC,WAAa,GACxBzD,EAAeY,uBACfZ,EAAeC,UAAY,CAAC,CAChC,EAEO,EAAAS,oBAAP,SAA2B6C,GACvB,IAAIoE,EAAY,UAAWlE,WAAWmE,WAAU,SAAApP,GAC5C,OAAOA,OACX,KACmB,IAAfmP,IACAA,EAAY,UAAWlE,WAAWhR,QAGtC,IAAMgO,EAAI,IAAI,EAEd,OADA,UAAWgD,WAAWkE,GAAalH,EAC5B,IAAIoH,EAAYF,EAAWlH,EAAG8C,EACzC,EAEO,EAAA/C,sBAAP,WACI,IAAMsH,EAAO7O,SAASQ,eAAe,gBACrC,MAA2B,SAAvBqO,EAAKC,MAAMhE,UACX+D,EAAKC,MAAMhE,QAAU,QACd,EAGf,EAEO,EAAAnD,qBAAP,WACI,IAAMkH,EAAO7O,SAASQ,eAAe,gBACV,SAAvBqO,EAAKC,MAAMhE,UACX+D,EAAKC,MAAMhE,QAAU,OAE7B,EAEO,EAAA7D,oBAAP,SAA2BnJ,GACvB,IAAIhK,EAAI+S,EAAU5L,QAAQ8T,SACtBjR,IACAhK,EAAIgK,GAER,UAAKyD,gBACDsF,EAAU5L,QAAQ0O,mBAClB,MAAQ,UAAKxI,kBAAkB0F,EAAU5L,QAAQ+T,uBAAwBlb,GAAK,OAEtF,EAEO,EAAA+W,0BAAP,sBACUjE,EAASC,EAAU5L,QAAQyP,cACjC,OAAI3D,EAAeC,UAAUJ,IACzBG,EAAeE,oBAAoBL,GAC5BtM,QAAQoP,OAAO7C,EAAU5L,QAAQ0O,sBAE5C5C,EAAeC,UAAUJ,IAAU,EAE5B,IAAItM,SAAc,SAAMC,GAAO,qC,kEAClC,OAAIY,OAAOC,SAASC,UAAU,cAC1B0L,EAAeC,UAAUJ,IAAU,EAC5B,CAAP,EAAOrM,O,KAKW,GAAM,UAAW0U,YAAY,sB,cAA/C,EAAAC,gBAAkB,SAClB,EAAAC,OAAQ,UAAWpF,MAAMqF,cAFzBvO,E,EAKEwO,EAAU,WACZ,UAAWzF,gBAAgB,oBAAsB/I,EAAEqO,gBACnD,UAAWpF,aAAY,EAAM,CAAC,mBAAoB,kBACjD,UAAWC,MAAMqF,cAAuBvO,EAAEsO,OAE3C,IAAMA,EAAS,UAAK1O,QAAQI,EAAEsO,QAC1BvH,EAAI,UAAKzG,kBAAkB0F,EAAU5L,QAAQqU,iBAAkBH,EAAO3V,OAAS,IACnFoO,GAAK,KAAO,UAAKzG,kBAAkB0F,EAAU5L,QAAQsU,kBAAmB1O,EAAEqO,gBAAkB,IAC5FtH,GAAK,OAELuH,EAAO/a,SAAQ,SAACmL,EAAGvL,GACf4T,GAAK,UAAKzG,kBAAkB0F,EAAU5L,QAAQuU,gBAAiB,UAAWxH,cAAchU,GAAIuL,EAAI,IAAM,IAC1G,IAEAqI,GAAK,KAAK7L,KAAKC,UAAU,UAAK0E,OAAOG,EAAEsO,QAAS,KAAM,GAAE,OAExDvH,EAAI,OAAOf,EAAU5L,QAAQwU,mBAAkB,YAAY,UAAK3P,WAAW8H,GAC3EA,GAAK,qEAAqEf,EAAU5L,QAAQyU,QAAO,YAEnG,UAAKrP,SAASuH,GACdzM,OAAOwB,KAAKgT,aAChB,EAEMrI,EAAmBP,EAAeQ,yBAElC,EAAsB,OAAtB1G,EAAEqO,iBAA6B,GAAM,UAAWD,YAAY,kBAA5D,M,OAA8B,EAAoD,OAAnD,S,wBAAhC,GAkBDI,IACI/H,GACAP,EAAeY,uBAEnBZ,EAAeC,UAAUJ,IAAU,IArB7B,EAAIG,EAAeU,qBAAoB,SAAA3S,GACzC+L,EAAI/L,EAAElC,KACNyc,IACA,EAAE3H,UACEJ,GACAP,EAAeY,uBAEnBZ,EAAeC,UAAUJ,IAAU,EACnCrM,EAAQzF,EAAElC,KACd,KACE+V,KAAK,CACHhH,KAAM,eACNiH,KAAM,GACNhD,MAAOzK,OAAOwB,KAAKmM,WAAWT,eAC9BQ,qBAAqB,I,cAUrC,EAEO,EAAA8C,gCAAP,sBACU/E,EAASC,EAAU5L,QAAQyQ,SACjC,OAAI3E,EAAeC,UAAUJ,IACzBG,EAAeE,oBAAoBL,GAC5BtM,QAAQoP,OAAO7C,EAAU5L,QAAQ0O,sBAE5C5C,EAAeC,UAAUJ,IAAU,EAE5B,IAAItM,SAAc,SAAMC,GAAO,qC,4DAClC,OAAKY,OAAOC,SAASC,UAAU,cAKzBiM,EAAmBP,EAAeQ,wBAClCC,EAAIT,EAAeU,qBAAoB,SAAA3S,GACzC,UAAW8U,gBAAgBgG,SAAW9a,EAAElC,KACxC,UAAWkX,aAAY,EAAM,CAAC,aAC9BtC,EAAEE,UACEJ,GACAP,EAAeY,uBAEnBZ,EAAeC,UAAUJ,IAAU,EACnCrM,EAAQzF,EAAElC,KACd,IAEY,GAAM,UAAWqc,YAAY,+BAA+B,MAhBpElI,EAAeC,UAAUJ,IAAU,EAC5B,CAAP,EAAOrM,M,cAeLsV,EAAM,SAEZrI,EAAEmB,KAAK,CACHhH,KAAM,sBACNiH,KAAM,CAAC,UAAM1C,6BAA6B,UAAWN,MAAMpN,oBAAqBqX,K,cAG5F,EAEO,EAAAC,qBAAP,SAA4BC,GAA5B,gBAA4B,IAAAA,IAAAA,GAAA,GACxB,IAAMnJ,EAASC,EAAU5L,QAAQyQ,SACjC,OAAI3E,EAAeC,UAAUJ,GACrBmJ,EACOzV,QAAQC,WAEnBwM,EAAeE,oBAAoBL,GAC5BtM,QAAQoP,OAAO7C,EAAU5L,QAAQ0O,sBAE5C5C,EAAeC,UAAUJ,IAAU,EAE5B,IAAItM,SAAc,SAAMC,GAAO,qC,4DAClC,OAAIY,OAAOC,SAASC,UAAU,cAC1B0L,EAAeC,UAAUJ,IAAU,EAC5B,CAAP,EAAOrM,EAAQwM,EAAe4E,sCAG5BrE,EAAmBP,EAAeQ,wBAC7B,GAAM,UAAW0H,YAAY,uBAAuB,K,cAAzD3F,EAAK,UAEL9B,EAAIT,EAAeU,qBAAoB,SAAA3S,GACzC,UAAW8U,gBAAgBgG,SAAW9a,EAAElC,KACxC,UAAWkX,aAAY,EAAM,CAAC,aAC1BxC,GACAP,EAAeY,uBAEnBZ,EAAeC,UAAUJ,IAAU,EACnCY,EAAEE,UACFnN,EAAQzF,EAAElC,KACd,KACE+V,KAAK,CACHhH,KAAM,qBACNiH,KAAM,CAAC,UAAWhD,MAAMjO,mBAAoB2R,K,cAGxD,EAEO,EAAA6B,mBAAP,sBACI,GAAKhQ,OAAOC,SAASC,UAAU,cAAiBF,OAAOC,SAASC,UAAU,WAA1E,CAGA,IAAMuL,EAASC,EAAU5L,QAAQiQ,cAC7BnE,EAAeC,UAAUJ,GACzBG,EAAeE,oBAAoBL,IAGvCG,EAAeC,UAAUJ,IAAU,EAEnC,UAAKlF,eACD,SAAOpE,EAAQ4J,GAAM,qC,kDACjB5J,EAAOC,MAAM,QAEP4J,EAAS,UAAWC,cAAcF,EAAO,IACzCG,EAAO,UAAWD,cAAcF,EAAO,IAEzCrG,EAAiC,KAE/BmP,EAAK,WACP,IAAIpI,EAAI,OAAOf,EAAU5L,QAAQiQ,cAAa,YAAY,UAAK/J,kBAAkB0F,EAAU5L,QAAQ4M,eAC/F,UAAK/H,WAAW,UAAWkI,cAAcb,IAAU,UAAKrH,WAAW,UAAWkI,cAAcX,MAEtF,IAANxG,GAMJ+G,EAAOf,EAAU5L,QAAQgV,2BAA0B,IAAI,UAAK9O,kBAAkB0F,EAAU5L,QAAQiV,gBAC5F,UAAWlI,cAAcb,GAAS,UAAWa,cAAcX,GAAOxG,EAAEsP,QAAU,IAClFvI,GAAK,OAAOf,EAAU5L,QAAQmV,gBAAe,OAC7CxI,EAAI,UAAK9H,WAAW8H,GACpB/G,EAAEwP,SAASjc,SAAQ,SAAAmL,GACfqI,GAAK,UAAKzG,kBAAkB0F,EAAU5L,QAAQqV,iBAAkB,UAAWtI,cAAczI,EAAErK,MACvF,UAAW8S,cAAczI,EAAEpK,IAAKoK,EAAEgR,KAAO,GAAIhR,EAAEiR,SAAW,IAC9D5I,GAAK,IACT,IACAA,EAAIA,EAAE6I,OACN7I,EAAI,OAAOf,EAAU5L,QAAQgV,2BAA0B,YAAcrI,EAErE,UAAKvH,SAASuH,IAjBV,UAAKvH,SAASuH,EAkBtB,EAEMN,EAAmBP,EAAeQ,yBAClCC,EAAIT,EAAeU,qBAAoB,SAAA3S,GACzC+L,EAAI/L,EAAElC,KACNmU,EAAeC,UAAUJ,IAAU,EACnCoJ,IACI1I,GACAP,EAAeY,uBAEnBH,EAAEE,SACN,KACEiB,KAAK,CACHhH,KAAM,gBACNiH,KAAM,CAACzB,EAAQE,GACfwB,qBAAqB,EACrBjD,MAAOzK,OAAOwB,KAAKmM,WAAWT,iB,YAGtCxB,EAAU5L,QAAQgV,2BAClBpJ,EAAU5L,QAAQ8N,GAClBlC,EAAU5L,QAAQ+N,OAClB,CACI,CACIzU,MAAOsS,EAAU5L,QAAQyV,WACzB/O,KAAM,OACNY,eAAgBpH,OAAOwB,KAAKuM,sBAEhC,CACI3U,MAAOsS,EAAU5L,QAAQ0V,SACzBhP,KAAM,OACNY,eAAgBpH,OAAOwB,KAAKuM,wBAGpC,SAAC5L,GACGyJ,EAAeC,UAAUJ,IAAU,EACnCtJ,EAAOC,MAAM,OACjB,I,CAER,EAEO,EAAA8N,oBAAP,WACI,IAAIlQ,OAAOC,SAASC,UAAU,cAAiBF,OAAOC,SAASC,UAAU,WAAzE,CAIA,IAAMuL,EAASC,EAAU5L,QAAQmQ,WACjC,GAAIrE,EAAeC,UAAUJ,GACzBG,EAAeE,oBAAoBL,OADvC,CAIAG,EAAeC,UAAUJ,IAAU,EAEnC,IAAMU,EAAmBP,EAAeQ,wBAClCC,EAAIT,EAAeU,qBAAoB,SAAA3S,GACzC,IAAM+L,EAAe/L,EAAElC,KACvB4U,EAAEE,UAEF,IAAIE,EAAI,UAAKzG,kBAAkB0F,EAAU5L,QAAQ2V,sBAAuB/P,EAAEgQ,YAAc,IACxFjJ,GAAK,OAAOf,EAAU5L,QAAQ6V,WAAU,OACxClJ,EAAI,UAAK9H,WAAW8H,GACpB/G,EAAEkQ,IAAI3c,SAAQ,SAAAmL,GACVqI,GAAQ,UAAWI,cAAc,IAAI/B,EAAA,QAAU1G,GAAGjJ,WAAU,SAC5DsR,GAAQ,UAAWI,cAAc,IAAI/B,EAAA,QAAU1G,GAAGhJ,SAAQ,IAC9D,IACAqR,EAAIA,EAAE6I,OACN7I,EAAI,OAAOf,EAAU5L,QAAQmQ,WAAU,YAAYxD,EAE/CN,GACAP,EAAeY,uBAEnBZ,EAAeC,UAAUJ,IAAU,EAEnC,UAAKvG,SAASuH,EAClB,IACAJ,EAAEmB,KAAK,CACHhH,KAAM,UACNiH,KAAM,GACNC,qBAAqB,EACrBjD,MAAOzK,OAAOwB,KAAKmM,WAAWT,gB,EAEtC,EAEO,EAAAkD,qBAAP,WACI,IAAKpQ,OAAOC,SAASC,UAAU,aAC3B,OAAOf,QAAQC,UAGnB,IAAMqM,EAASC,EAAU5L,QAAQqQ,OACjC,OAAIvE,EAAeC,UAAUJ,IACzBG,EAAeE,oBAAoBL,GAC5BtM,QAAQoP,OAAO7C,EAAU5L,QAAQ0O,sBAE5C5C,EAAeC,UAAUJ,IAAU,EAE5B,IAAItM,SAAc,SAAAC,GACrB,IAAM+M,EAAmBP,EAAeQ,wBAClCC,EAAIT,EAAeU,qBAAoB,SAAA3S,GACzC,UAAW8U,gBAAgBoH,OAASlc,EAAElC,KACtC,UAAWkX,aAAY,EAAM,CAAC,WAC9BtC,EAAEE,UACEJ,GACAP,EAAeY,uBAEnBZ,EAAeC,UAAUJ,IAAU,EACnCrM,GACJ,IACAiN,EAAEmB,KAAK,CACHhH,KAAM,gBACNiH,KAAM,GACNC,qBAAqB,EACrBjD,MAAOzK,OAAOwB,KAAKmM,WAAWT,gBAEtC,IACJ,EAEO,EAAAoD,4BAAP,WACI,GAAKtQ,OAAOC,SAASC,UAAU,aAA/B,CAIA,IAAMuL,EAASC,EAAU5L,QAAQuQ,SACjC,GAAIzE,EAAeC,UAAUJ,GACzBG,EAAeE,oBAAoBL,OADvC,CAIAG,EAAeC,UAAUJ,IAAU,EAEnC,IAAMU,EAAmBP,EAAeQ,wBAClCC,EAAIT,EAAeU,qBAAoB,SAAA3S,GACzC,IAAM+L,EAA2B/L,EAAElC,KAQnC,GAPA4U,EAAEE,UAEEJ,GACAP,EAAeY,uBAEnBZ,EAAeC,UAAUJ,IAAU,GAEzB,IAAN/F,EAIA,OAHA,UAAW+I,gBAAgBoH,QAAS,EACpC,UAAWlH,aAAY,EAAM,CAAC,gBAC9B,UAAKzJ,SAASwG,EAAU5L,QAAQgW,mBAIpC,IAAIrJ,EAAIf,EAAU5L,QAAQuQ,SAAW,QACrC5D,EAAI,UAAK9H,WAAW8H,GACnB/G,EAAYzM,SAAQ,SAAAmL,GACjBqI,GAAQ,UAAWI,cAAczI,EAAEjL,IAAG,IAC1C,IACAsT,EAAIA,EAAEhN,MAAM,GAAI,GAChBgN,EAAI,OAAOf,EAAU5L,QAAQuQ,SAAQ,YAAY5D,EAEjD,UAAKvH,SAASuH,EAClB,IACAJ,EAAEmB,KAAK,CACHhH,KAAM,kBACNiH,KAAM,GACNC,qBAAqB,EACrBjD,MAAOzK,OAAOwB,KAAKmM,WAAWT,gB,EAEtC,EAEO,EAAA6I,qBAAP,WACI,IAAMC,EAAOnR,SAASQ,eAAe,mBACrC2Q,EAAKhR,UAAY,GACjB,IAAMwK,EAAcxP,OAAOC,SAASC,UAAU,aACxC5H,EAAW0H,OAAOC,SAASC,UAAU,WAErC+V,EAAgB,SAACC,GACnB,IAAMC,EAAUtR,SAASC,cAAc,KACvCqR,EAAQC,UAAUC,IAAI,YACtBF,EAAQG,aAAa,OAAQ,KAC7BH,EAAQvE,UAAYsE,EAAIvT,KACxBwT,EAAQvF,iBAAiB,SAAS,SAAAjX,GAC9BA,EAAEkX,iBACFqF,EAAIzG,WACR,IAEAuG,EAAKO,YAAYJ,EACrB,EAEUvK,EAAe0D,gBACvBrW,SAAQ,SAAAid,GACDA,EAAIvG,UAGJ,gBAAiBuG,GAAOA,EAAI1G,cAAgBA,KAAkB,gBAAiB0G,IAC3E,aAAcA,GAAOA,EAAI5d,WAAaA,KAAe,aAAc4d,KACpED,EAAcC,IAEV,aAAcA,GAAOA,EAAI5d,WAAaA,KAAe,aAAc4d,MACtE,gBAAiBA,GAAOA,EAAI1G,cAAgBA,KAAkB,gBAAiB0G,KAChFD,EAAcC,GAG1B,GACJ,EAtpBc,EAAArK,UAA0C,CAAC,EAupB7D,C,CAxpBA,G,w7CCjJM2K,EAAS,SAACpS,GACZ,MAAiB,iBAANA,EACAA,EAEJqS,SAASrS,EACpB,E,QAEA,wBAuTA,QA9OW,EAAAuK,YAAP,SAAmB9M,EAAe6U,QAAf,IAAA7U,IAAAA,GAAA,GACf,IAAMrC,EAAMkX,QACRC,GAAW,EACfC,EAAWC,SAAS5d,SAAQ,SAACmL,GAClB,WAAYA,GAAOA,EAAE0S,UAAYtX,GAAOkX,EAAapS,QAAQF,EAAEzB,OAAS,KAC3EyB,EAAEyS,SAAWhV,EACE,aAAXuC,EAAEoC,OACFmQ,GAAW,GAGvB,IACIA,GACAC,EAAWtF,wBAEnB,EAEa,EAAAwC,YAAb,SAAyB6C,EAAiCI,EAA4BnC,G,YAA5B,IAAAmC,IAAAA,GAAA,QAA4B,IAAAnC,IAAAA,GAAA,G,gGAC5ElP,EAAIkR,EAAWC,SAAS7N,MAAK,SAAC5E,GAChC,MAAQ,SAAUA,GAAKA,EAAEzB,OAASgU,CACtC,KACOE,SAAH,MACI,cAAenR,GAA4B,mBAAhBA,EAAE+J,WAA4BsH,EACzD,GAAMrR,EAAE+J,UAAUmF,IADlB,M,cACA,S,aAGA,MAAO,CAAP,EAAO,M,OAGf,MAAe,UAAXlP,EAAEc,KACK,CAAP,EAAOrH,QAAQC,QAAQwX,EAAWhI,MAAM+H,KAErC,CAAP,EAAOxX,QAAQC,QAAQwX,EAAWnI,gBAAgBkI,K,QAGzC,EAAArF,uBAAb,SAAoC0F,G,YAAA,IAAAA,IAAAA,GAAA,G,2GAC1BxH,EAAcxP,OAAOC,SAASC,UAAU,aAE9C0W,EAAWnI,gBAAgBwI,SAAWL,EAAWnM,MAAMnO,mBACvDsa,EAAWnI,gBAAgBrW,MAAQwe,EAAWnM,MAAMlO,mBAE/CiT,EAAD,MACA,GAAMoH,EAAW9C,YAAY,YAAY,GAAM,I,OAA/C,S,iBAWJ,OARMrH,EAAI9U,OAAOC,KAAKgf,EAAWnI,iBAC7BuI,GACAvK,EAAExT,SAAQ,SAAOmL,GAAC,qC,kDACd,SAAMwS,EAAW9C,YAAY1P,GAAG,I,cAAhC,S,cAIF8S,EAA2B,CAAC,EAClC,GAAM/X,QAAQK,IAAIiN,EAAElT,KAAI,SAAO6K,GAAC,qC,0DACH,OAAzB,EAAA8S,EAAoB,EAAA9S,EAAK,GAAMwS,EAAW9C,YAAY1P,I,cAAtD,KAAyB,S,8BAD7B,SAIAwS,EAAWO,qBAAqBD,G,YAG7B,EAAAC,qBAAP,SAA4BC,GACxB,IAAI3K,EAAI,GACR9U,OAAOC,KAAKwf,GAAYne,SAAQ,SAACoe,GACP,OAAlBD,EAAWC,KACX5K,GAAQ,UAAK7G,YAAYyR,GAAE,KAAKD,EAAWC,GAAE,KAErD,IACA5K,EAAIA,EAAE6I,OACN7I,EAAI,UAAK9H,WAAW8H,GACpB5H,SAASQ,eAAe,cAAeL,UAAY,uBAAuByH,EAAC,MAC/E,EAEe,EAAA6K,YAAf,SAA2B7M,QAAA,IAAAA,IAAAA,EAAQmM,EAAWnM,OAC1C,IAAItS,EAAQsS,EAAMxO,cACd7D,EAAQqS,EAAMpO,cACb2D,OAAOC,SAASC,UAAU,kBAC3B/H,EAAQye,EAAWW,oBAAoBpf,GACvCC,EAAQwe,EAAWY,oBAAoBpf,IAE3C4H,OAAOwB,KAAKoJ,QAAQ,CAAEzS,MAAK,EAAEC,MAAK,GACtC,EAEO,EAAAkD,QAAP,SAAevB,EAAuBC,EAAqBF,EAAY2Q,QAAZ,IAAA3Q,IAAAA,EAAA,QAAY,IAAA2Q,IAAAA,EAAQmM,EAAWnM,OACtF,IAAMgN,EAAWjB,EAAOzc,GAClB2d,EAASlB,EAAOxc,GACtByQ,EAAQA,EAAMnP,QAAQmc,EAAUC,EAAQ5d,GACxCvB,KAAK+e,YAAY7M,EACrB,EAEO,EAAA9P,QAAP,SAAelD,EAAgBgT,QAAA,IAAAA,IAAAA,EAAQmM,EAAWnM,OAC9CA,EAAQA,EAAM9P,QAAQ,CAAEvB,MAAO3B,EAAK2B,MAAOkH,EAAG7I,EAAK6I,EAAGqX,EAAGlgB,EAAKkgB,EAAG9b,MAAOpE,EAAKoE,QAC7EtD,KAAK+e,YAAY7M,EACrB,EAEO,EAAA7P,SAAP,SAAgBzB,EAAqBC,EAAeyC,EAAgB4O,QAAA,IAAAA,IAAAA,EAAQmM,EAAWnM,OACnF,IAAMmN,EAAMpB,EAAOrd,GACnBsR,EAAQA,EAAM7P,SAASgd,EAAK,CAAExe,MAAK,EAAEyC,MAAK,IAC1CmE,OAAOwB,KAAKoJ,QAAQgM,EAAW1J,aAAazC,IAAQ,GAAO,EAC/D,EAEO,EAAA/O,SAAP,SAAgB3B,EAAuBC,EACnC2B,EAAmBC,EAAmB6O,QAAA,IAAAA,IAAAA,EAAQmM,EAAWnM,OACzD,IAAMgN,EAAWjB,EAAOzc,GAClB2d,EAASlB,EAAOxc,GAChB6d,EAAWpN,EAAM/O,SAAS+b,EAAUC,EAAQ/b,EAAWC,GACzDic,aAAoB,WACpB7X,OAAOwB,KAAKoJ,QAAQgM,EAAW1J,aAAa2K,IAAW,GAAO,EAEtE,EAEO,EAAAtc,WAAP,SAAkBxB,EAAuBC,EAAqBF,EAA4C2Q,QAA5C,IAAA3Q,IAAAA,EAAA,WAA4C,IAAA2Q,IAAAA,EAAQmM,EAAWnM,OACzH,IAAMgN,EAAWjB,EAAOzc,GAClB2d,EAASlB,EAAOxc,GACtByQ,EAAQA,EAAMlP,WAAWkc,EAAUC,EAAQ5d,GAAQ,GACnDvB,KAAK+e,YAAY7M,EACrB,EAEO,EAAA1P,WAAP,SAAkB5B,EAAqBsR,QAAA,IAAAA,IAAAA,EAAQmM,EAAWnM,OACtD,IAAMmN,EAAMpB,EAAOrd,GACb0e,EAAWpN,EAAM1P,WAAW6c,GAC9BC,aAAoB,WACpBtf,KAAK+e,YAAYO,EAEzB,EAEO,EAAAN,oBAAP,SAA2Bpf,GAIvB,OAHAA,EAAMc,SAAQ,SAACmL,GACXA,EAAEvI,MAAQ,IACd,IACO1D,CACX,EAEO,EAAAqf,oBAAP,SAA2Bpf,GAIvB,OAHAA,EAAMa,SAAQ,SAACmL,UACJA,EAAEvI,KACb,IACOzD,CACX,EAEO,EAAAyU,cAAP,SAAqB1T,EAAYsR,QAAA,IAAAA,IAAAA,EAAQmM,EAAWnM,OAChD,IAAM9R,EAAI8R,EAAMnQ,QAAQnB,GAAI,GAC5B,OAAU,IAANR,GAAqB,OAANA,GAAcA,aAAa,WAAaA,EAAEmC,WAAWwa,OAAOjX,OAAS,EAC7E1F,EAAEmC,WAAWwa,OAGjBnc,EAAGE,UACd,EAGO,EAAA4S,cAAP,SAAqB7S,EAAeqR,QAAA,IAAAA,IAAAA,EAAQmM,EAAWnM,OACnD,IAAI9R,EAAI8R,EAAMxO,aAAY,GAK1B,GAAiB,KAJjBtD,EAAIA,EAAEd,QAAO,SAAC2C,GACV,OAAOA,EAAKM,WAAWgd,gBAAkB1e,EAAM0e,eAAiBtd,EAAKS,QAAQ5B,aAAeD,CAChG,KAEMiF,OACF,OAAQ,EAEP,GAAiB,IAAb1F,EAAE0F,OACP,OAAO1F,EAAE,GAAGsC,QAGhB,IAAI8c,GAAO,EACPC,GAAQ,EASZ,OAPArf,EAAEM,SAAQ,SAACuB,GACFwd,GAASxd,EAAKS,QAAQ5B,aAAeD,IACtC2e,EAAMvd,EAAKS,QACX+c,GAAQ,EAEhB,IAEIA,IAIJrf,EAAEM,SAAQ,SAACuB,GACFwd,GAASxd,EAAKM,aAAe1B,IAC9B2e,EAAMvd,EAAKS,QACX+c,GAAQ,EAEhB,IAEIA,GAIJrf,EAAEM,SAAQ,SAACuB,GACFwd,GAASxd,EAAKM,WAAWgd,gBAAkB1e,EAAM0e,gBAClDC,EAAMvd,EAAKS,QACX+c,GAAQ,EAEhB,KAnBWD,CAsBf,EAGO,EAAAE,kBAAP,SAAyBxN,GACrB,IAAMyN,EAAItB,EAAW1J,aAAazC,GAYlC,OAXIA,EAAMhM,cACNyZ,EAAE9f,MAAMa,SAAQ,SAACU,GACbA,EAAEP,MAAQO,EAAEG,OAAOT,UACvB,IAEJ6e,EAAE9f,MAAMa,SAAQ,SAACU,GACT,UAAWA,IACXA,EAAEkC,MAAQ,CAAEA,MAAOlC,EAAEkC,OAE7B,IAEO,CAAE1D,MAAO,IAAI,EAAAggB,QAAQD,EAAE/f,OAAkBC,MAAO,IAAI,EAAA+f,QAAQD,EAAE9f,OACzE,EAEO,EAAAggB,aAAP,SAAoBC,EAAwD5N,QAAA,IAAAA,IAAAA,EAAQmM,EAAWnM,OAC3F,IAAI7R,EAAW6R,EAAMtO,6BAWrB,OAVAxE,OAAOC,KAAKygB,GAAWpf,SAAQ,SAACJ,GAC5B,IAAMuL,EAAIiU,EAAUxf,GACd2B,EAAO5B,EAAS6B,IAAIgc,SAAS5d,IAE/B2B,EAAKoE,aAAa,OAASwF,EAAE9D,GAAK9F,EAAKoE,aAAa,OAASwF,EAAEuT,IAE/D/e,EAAWA,EAASI,IAAIyd,SAAS5d,GAAI2B,EAAKI,SAASJ,EAAKM,WAAY,CAAEwF,EAAG8D,EAAE9D,EAAGqX,EAAGvT,EAAEuT,KAE3F,IAEO,IAAI,UAAW/e,EAAU6R,EAAMrO,6BAA8BqO,EAAMzO,aAAcyO,EAAMhM,aAClG,EAEO,EAAAyO,aAAP,SAAoBzC,EAA0B6N,EAAyBC,QAAnD,IAAA9N,IAAAA,EAAQmM,EAAWnM,YAAO,IAAA6N,IAAAA,GAAA,QAAyB,IAAAC,IAAAA,GAAA,GACnE,IAAMpgB,EAAQsS,EAAMxO,cACd7D,EAAQqS,EAAMpO,cACpB,MAAO,CACHlE,MAAOmgB,EAAkB1B,EAAWW,oBAAoBpf,GAASA,EACjEC,MAAOmgB,EAAkB3B,EAAWY,oBAAoBpf,GAASA,EACjEC,SAAUoS,EAAMzO,aAChB1D,SAAUmS,EAAMhM,aAExB,EArTc,EAAA4Q,WAAgC,GAChC,EAAAmJ,YAAmC,GACnC,EAAAC,eAAsC,GACtC,EAAAC,WAAa,GACb,EAAA7B,SAAiC,CAC3C,CACIlU,KAAM,mBAAoBkU,UAAU,EAAOrQ,KAAM,WACjDiJ,UAAW,WACP,OAAOzP,OAAO8J,GAAG4F,2BACrB,GAEJ,CACI/M,KAAM,gBAAiBkU,UAAU,EAAOrQ,KAAM,QAC9CiJ,UAAW,WACP,OAAOzP,OAAO8J,GAAG4F,2BACrB,GAEJ,CAAE/M,KAAM,WAAYkU,UAAU,EAAMC,QAAQ,EAAMtQ,KAAM,YACxD,CAAE7D,KAAM,QAASkU,UAAU,EAAMC,QAAQ,EAAMtQ,KAAM,YACrD,CACI7D,KAAM,WAAYkU,UAAU,EAAOrQ,KAAM,WACzCiJ,UAAW,SAAC5W,GACR,OAAOmH,OAAO8J,GAAG6K,qBAAqB9b,EAC1C,GAEJ,CACI8J,KAAM,uBAAwBkU,UAAU,EAAOrQ,KAAM,WACrDiJ,UAAW,WACPzP,OAAO8J,GAAGwF,gBAAgBtG,MAAK,SAAC5E,GAAM,MAAW,yBAAXA,EAAEzB,IAAF,IAAoC8M,WAC9E,GAEJ,CACI9M,KAAM,sBAAuBkU,UAAU,EAAOrQ,KAAM,QACpDiJ,UAAW,WACPzP,OAAO8J,GAAGwF,gBAAgBtG,MAAK,SAAC5E,GAAM,MAAW,yBAAXA,EAAEzB,IAAF,IAAoC8M,WAC9E,GAEJ,CACI9M,KAAM,gCAAiCkU,UAAU,EAAOrQ,KAAM,WAC9DiJ,UAAW,WACPzP,OAAO8J,GAAGwF,gBAAgBtG,MAAK,SAAC5E,GAAM,MAAW,kCAAXA,EAAEzB,IAAF,IAA6C8M,WACvF,GAEJ,CACI9M,KAAM,8BAA+BkU,UAAU,EAAOrQ,KAAM,QAC5DiJ,UAAW,WACPzP,OAAO8J,GAAGwF,gBAAgBtG,MAAK,SAAC5E,GAAM,MAAW,kCAAXA,EAAEzB,IAAF,IAA6C8M,WACvF,GAEJ,CACI9M,KAAM,SAAUkU,UAAU,EAAOrQ,KAAM,WACvCiJ,UAAW,WACP,OAAOzP,OAAO8J,GAAGsG,sBACrB,IAGM,EAAAxB,MAAwB,CAClC+J,4BAA6B,KAC7BC,oBAAqB,KACrB3E,cAAe,MAGL,EAAAxF,gBAAmC,CAC7CwI,SAAU,EACV7e,MAAO,EACPqc,UAAU,EACV,mBAAoB,KACpB,uBAAwB,KACxB,gCAAiC,KACjCoB,QAAQ,GAiPhB,C,CAvTA,E,i8CCUMgD,EAAqB,CACvB,QAAW,UACX,IAAO,MACP,OAAU,SACV,OAAU,SACV,MAAS,QACT,KAAQ,OACR,MAAS,QACT,KAAQ,OACR,KAAQ,OACR,KAAQ,OACR,KAAQ,OACR,QAAW,UACX,OAAU,UAGRxW,EAAc,CAChBsL,WAAY,UACZvD,UAAWvF,SAASQ,eAAe,WAEnC5D,kBAAmB,SAAChK,EAA2BqhB,GAC3C,UAAKvS,eAAc,SAACpE,EAAQoH,GACxBuP,EAAS,MACT3W,EAAOC,MAAM,QACb,IAAMP,EAAQ5H,WAAWsP,EAAK,IAC9B,UAAW7N,SAASjE,EAAKsC,KAAKZ,GAAI1B,EAAKuC,GAAGb,GAAI0I,EAAO5H,WAAWxC,EAAK2B,OACzE,GAAG,UAAkB2f,SAAU,UAAkB9F,KAAM,UAAkBpF,OAAQ,CAC7E,CACIrH,KAAM,UACNpN,MAAO,UAAkB4f,eACzBhb,aAAc/D,WAAWxC,EAAK2B,SAG1C,EACAsI,WAAY,CACRuX,YAAa,CAAEC,OAAO,GACtB5X,aAAc,CACV3G,QAAS,SAAOlD,EAAMqhB,GAAQ,0C,0EAKmD,OAJvEK,EAAenZ,OAAOC,SAASC,UAAU,gB,GAGvCsG,KAAM,Q,QACc,gBAAKR,kB,GAAkB,UAAkBoT,QAAQ,GAAM,UAAWtF,YAAY,a,OAEnC,O,IAF/D,EAAA9V,aAAc,EAAM,oBAAiD,YAAyC,O,OAEhHwI,KAAM,OAAQpN,MAAO,UAAkBigB,YAA0B,GAAM,UAAWvF,YAAY,a,cAL9FpR,EAAO,WAK4C,EAAA1E,aAAc,SAAwC,KAE3Gmb,GACAzW,EAAQxI,KAAK,CAAEsM,KAAM,SAAUpN,MAAO,UAAkBkgB,MAAO/Q,WAAY5Q,OAAOC,KAAKihB,GAAqBnQ,aAAc/Q,OAAOoU,OAAO8M,MAEtIU,EAAS,UAAK9S,cAAc,UAAkB+S,QAAS,UAAkBvG,KAAM,UAAkBpF,OAAQnL,IAExG4F,GAAG,QAAS,gBAAgB,WAC/BiR,EAAOnX,MAAM,QACbC,EAAKoX,SAAShiB,EAAMqhB,EAAU,MAAOS,EAAOvQ,KAAK,SAASI,QAAQlD,MAAiBqT,EAAOvQ,KAAK,UAAUI,QAAQlD,MACrH,IAAGoC,GAAG,QAAS,eAAe,WAC1BiR,EAAOnX,MAAM,QACbC,EAAKqX,WAAWZ,EACpB,IAAGxQ,GAAG,mBAAmB,WACrBiR,EAAO3R,SACPvF,EAAKqX,WAAWZ,EACpB,IAAG1W,MAAM,Q,YAEbxH,SAAU,SAACnD,EAAMqhB,GACb,IAAMK,EAAenZ,OAAOC,SAASC,UAAU,gBACzCyZ,EAAehiB,OAAOgM,oBAAoBlM,EAAKoE,OAAO9D,SAAS,cAAiBN,EAAKoE,MAAc+d,WAAa,UAEhHlX,EAA0B,CAC5B,CACI8D,KAAM,OACNxI,aAAc,MAAM,UAAKgI,kBAAkB,UAAkBoT,OAAQ3hB,EAAK0B,GAAK,IAAG,QAEtF,CAAEqN,KAAM,OAAQpN,MAAO,UAAkBigB,WAAYrb,aAAcvG,EAAK2B,QAExE+f,GACAzW,EAAQxI,KAAK,CAAEsM,KAAM,SAAUpN,MAAO,UAAkBkgB,MAAO/Q,WAAY5Q,OAAOC,KAAKihB,GAAqBnQ,aAAc/Q,OAAOoU,OAAO8M,GAAqB7a,aAAc2b,IAE/K,IAAMJ,EAAS,UAAK9S,cAAc,UAAkBoT,SAAU,UAAkB5G,KAAM,UAAkBpF,OAAQnL,GAEhH6W,EAAOjR,GAAG,QAAS,gBAAgB,WAC/BiR,EAAOnX,MAAM,QACbC,EAAKoX,SAAShiB,EAAMqhB,EAAU,WAAYS,EAAOvQ,KAAK,SAASI,QAAQlD,MAAiBqT,EAAOvQ,KAAK,UAAUI,QAAQlD,MAC1H,IAAGoC,GAAG,QAAS,eAAe,WAC1BiR,EAAOnX,MAAM,QACbC,EAAKqX,WAAWZ,EACpB,IAAGxQ,GAAG,mBAAmB,WACrBiR,EAAO3R,SACPvF,EAAKqX,WAAWZ,EACpB,IAAG1W,MAAM,OACb,EACA9G,QAAS,SAAC7D,EAAMqhB,IAORrhB,EAAKsC,OAAStC,EAAKuC,IACf8f,QAAQ,UAAkBC,oCANN,mBAAbjB,GACPA,EAAS,MAEb,UAAWxd,QAAQ7D,EAAKsC,KAAMtC,EAAKuC,IAU3C,EACA0B,SAAU,SAACjE,EAAMqhB,GACbA,EAAS,MACTzW,EAAKX,WAAWJ,aAAa/F,WAAW,CAAEnD,MAAO,CAACX,EAAK0B,MACvDkJ,EAAKX,WAAWJ,aAAahG,QAAQ7D,EACzC,EACA8D,WAAY,SAAC9D,EAAMqhB,GACS,mBAAbA,GACPA,EAAS,MAEbrhB,EAAKW,MAAMa,SAAQ,SAACmL,GAChB,IAAItK,EAAS,KACPD,EAAQmG,OAAOkB,QAAgBoF,KAAK7O,KAAKW,MAAMqC,IAAI2J,GACnD4V,EAAkBngB,EAAKT,WACE,IAApB4gB,IACPlgB,EAASG,WAAW+f,IAGxB,UAAWze,WAAW1B,EAAKE,KAAMF,EAAKG,GAAIF,EAC9C,GACJ,EACAiB,WAAY,SAACtD,EAAMqhB,GACfA,EAAS,MACTrhB,EAAKU,MAAMc,SAAQ,SAACmL,GAChB,UAAWrJ,WAAWqJ,EAC1B,GACJ,IAIRsV,WAAY,SAACZ,GACe,mBAAbA,GACPA,EAAS,KAEjB,EAEAW,SAAU,SAAOhiB,EAAMqhB,EAAUmB,EAAW7gB,EAAOyC,GAAK,0C,kCACpDid,EAAS,MAETrhB,EAAK2B,MAAQA,EACb3B,EAAKoE,MAAQA,EACC,YAAVA,IACApE,EAAKoE,WAAQ4H,GAEC,QAAdwW,EACA,UAAWtf,QAAQlD,GAEA,aAAdwiB,GACL,UAAWrf,SAASnD,EAAK0B,GAAI1B,EAAK2B,MAAO3B,EAAKoE,O,WAItDkS,qBAAsB,SAAC3J,GACnB,OAAI,UAAW6H,cAAc7H,IAAM,GAG5B,UAAkB8V,gBAC7B,EAEA1F,YAAa,qD,8DACT,OAAIxU,OAAOC,SAASC,UAAU,aAC1B,IAEgB,GAAM,UAAW4T,YAAY,iBAAiB,I,OAC1C,OADlBqG,EAAc,SACI,GAAM,UAAWrG,YAAY,oBAAoB,I,cAAnEC,EAAkB,SAElBC,EAAS,IAAY,CAAEtF,MAAOqF,EAAiBqG,WAAY,WAC7Dld,EAAI,UAAWuN,OAChBxO,cAAmChD,SAAQ,SAACmL,GAC3ClH,EAAIA,EAAEtC,SAASwJ,EAAEjL,GAAI,CAAE0C,MAAOmY,EAAOmG,EAAY/V,EAAEjL,MACvD,IACAkJ,EAAKuI,QAAQ,UAAWsC,aAAahQ,IAAI,GAAO,G,YAGpD0N,QAAS,SAACnT,EAAM4iB,EAAqBC,EAAqBC,QAA1C,IAAAF,IAAAA,GAAA,QAAqB,IAAAC,IAAAA,GAAA,QAAqB,IAAAC,IAAAA,GAAA,GAElDA,GACA9iB,EAAKU,MAAMc,SAAQ,SAACmL,UACTA,EAAE9D,SACF8D,EAAEuT,CACb,IAGA2C,GACAjY,EAAKmY,YAGL,aAAc/iB,QAAiC,IAAlBA,EAAKY,UAClC2H,OAAOC,SAAS0B,aAAa,YAAalK,EAAKY,UAE/C,aAAcZ,QAAiC,IAAlBA,EAAKa,UAClC0H,OAAOC,SAAS0B,aAAa,UAAWlK,EAAKa,UAEjD,IAAMkX,EAAcxP,OAAOC,SAASC,UAAU,aACxC5H,EAAW0H,OAAOC,SAASC,UAAU,WAErCua,EAAI,IAAI,UAAWhjB,EAAKU,MAAOV,EAAKW,MAAOoX,EAAalX,GAC9D,UAAWmS,MAAQgQ,EAGnBpY,EAAKqY,2BAA2B1a,OAAOkB,SACvClB,OAAOkB,QAAQ0J,QAAQ,UAAWqN,kBAAkBwC,IACpD,UAAWhQ,MAAQ,UAAW2N,aAAapY,OAAOkB,QAAQyZ,gBAE1D3a,OAAOkB,QAAQ0Z,kBACf5a,OAAOkB,QAAQ2Z,iBAEXP,IACAta,OAAO8J,GAAG0C,uBACVxM,OAAO8J,GAAG+B,UAAY,CAAC,EACvB7L,OAAO8J,GAAGwJ,yBACVtT,OAAO8J,GAAGiM,uBACV,UAAK7Q,SAAS,IACd,UAAWyJ,cACX,UAAW2C,uBAAuB+I,IAGtChY,EAAKyY,uBACT,EAEAN,UAAW,WACkB,OAArB,UAAW/P,QAIX,UAAW+N,YAAYna,QAAU,UAAWqa,YAC5C,UAAWF,YAAYuC,QAG3B,UAAWvC,YAAYte,KAAKmI,EAAK2Y,qBACjC,UAAWvC,eAAiB,GAC5B5T,SAASoW,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAe/E,UAAUC,IAAI,UACvG,EAEA2E,kBAAmB,WACf,IAAMpM,EAAa,CAAC,EAkBpB,OAjBAjX,OAAOC,KAAK,WAAYqB,SAAQ,SAACoe,GAC7B,IAAMjT,EAAU,UAAmBiT,GAClB,mBAANjT,IACU,iBAANA,EACPwK,EAAMyI,GAAKjT,GAGD,UAANiT,GAAuB,OAANjT,IACjBwK,EAAMyI,GAAKjT,GAEViT,EAAES,cAAc/f,SAAS,aAC1B6W,EAAMyI,GAAK,UAAK/U,UAAS,EAAMiB,MAAMC,QAAQY,GAAK,GAAK,CAAC,EAAGA,KAI3E,IAEOwK,CACX,EAEAwC,KAAM,WACE,UAAWoH,YAAYna,OAAS,GAChCgE,EAAKqI,YAAW,EAExB,EAEA2G,KAAM,WACE,UAAWoH,eAAepa,OAAS,GACnCgE,EAAKqI,YAAW,EAExB,EAEAA,WAAY,SAAC0G,EAAagK,QAAb,IAAAhK,IAAAA,GAAA,QAAa,IAAAgK,IAAAA,EAAA,MACtB,IAAMC,EAAyB,OAAbD,EACZE,EAAejZ,EAAK2Y,oBAErBK,IAEGD,EADAhK,EACW,UAAWoH,YAAY+C,MAGvB,UAAW9C,eAAe8C,OAK7CH,EAAS3Q,MAAQ,IAAI,UAAW2Q,EAAS3Q,MAAMtS,MAAOijB,EAAS3Q,MAAMrS,MAAOgjB,EAAS3Q,MAAMpS,SAAU+iB,EAAS3Q,MAAMnS,UAEpH0H,OAAOC,SAAS0B,aAAa,YAAayZ,EAAU3Q,MAAMzO,cAC1DgE,OAAOC,SAAS0B,aAAa,UAAWyZ,EAAU3Q,MAAMhM,cAExD,UAAWgM,MAAQ2Q,EAAU3Q,MAE7BzK,OAAOkB,QAAQ0J,QAAQ,UAAWqN,kBAAkB,UAAWxN,QAC/DzK,OAAOkB,QAAQ0Z,kBACf5a,OAAOkB,QAAQ2Z,iBAEf7a,OAAO8J,GAAGiM,uBACV,UAAK7Q,SAAS,IAEdvN,OAAOC,KAAKwjB,GAAWniB,SAAQ,SAACoe,GAC5B,IAAMjT,EAAIgX,EAAU/D,GACH,iBAANjT,EACN,UAAmBiT,GAAKjT,EAEnBiT,EAAES,cAAc/f,SAAS,YAAkC,UAApBsf,EAAES,gBACvB,aAApBT,EAAES,cACFngB,OAAOC,KAAM,UAAmByf,IAAIpe,SAAQ,SAACuiB,GACxC,UAAmBnE,GAAGmE,GAAQ3E,SAAYzS,EAAUoX,GAAQ3E,QACjE,IAGC,UAAmBQ,GAAK,UAAK/U,UAAS,EAAO,UAAmB+U,GAAIjT,GAGjF,IAEA,UAAWkN,yBAAyBjS,MAAK,WACjC+R,IAASiK,GACTxW,SAASoW,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAe/E,UAAUC,IAAI,UAC7D,IAAlC,UAAWmC,YAAYna,QACvBwG,SAASoW,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAe/E,UAAUxO,OAAO,UAE1G,UAAW6Q,eAAeve,KAAKohB,IAEzBlK,GAASiK,IACfxW,SAASoW,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAe/E,UAAUC,IAAI,UAC1D,IAArC,UAAWoC,eAAepa,QAC1BwG,SAASoW,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAe/E,UAAUxO,OAAO,UAE1G,UAAW4Q,YAAYte,KAAKohB,IAGhCjZ,EAAKyY,uBACT,GACJ,EAEAA,sBAAuB,WACf9a,OAAOC,SAASI,wBAChBE,aAAaC,QAAQ,4BAA6BI,KAAKC,UAAUwB,EAAK2Y,qBAE9E,EAEAzJ,qBAAsB,WAClBlP,EAAKuI,QAAQ,CACTzS,MAAO,UAAWsS,MAAMxO,cACxB7D,MAAO,UAAWqS,MAAMpO,gBACzB,GAAO,GAAO,EACrB,EAEAqe,2BAA4B,SAACxZ,GACzB,IAAMiD,EAAIrL,KAAK2iB,MAAsB,IAAhB3iB,KAAK4iB,UAC1Bxa,EAAQya,aAAaC,WAAazX,EAClCjD,EAAQya,aAAaE,kBAAoB1X,CAC7C,EAEAkG,oBAAqB,SAACnJ,GAElBA,EAAQoH,GAAG,eAAe,SAACmE,GACnBzM,OAAOC,SAASC,UAAU,YAAc,UAAWuM,GAAwB,IAAnBA,EAAErU,MAAMiG,QAChE6C,EAAQ4a,eAER,UAAWrP,GAAwB,IAAnBA,EAAEtU,MAAMkG,SACxB0d,EAAwB,KACxB7a,EAAQtG,WAEhB,IAGAsG,EAAQoH,GAAG,WAAW,WAClB,UAAWmC,MAAQ,UAAW2N,aAAalX,EAAQyZ,gBACnDtY,EAAKyY,uBACT,IAGA,IAAIiB,EAAsC,KAC1C7a,EAAQoH,GAAG,SAAS,SAAChB,GACjByU,EAAwBzU,CAC5B,IAGAzC,SAAS+L,iBAAiB,SAAS,SAAC9Y,GAChB,WAAZA,EAAIA,KAA8C,OAA1BikB,GACpB1Z,EAAK+H,UAAU4R,SAAUD,EAA8BzU,MAAMjE,UACxD,UAAW0Y,GAAyE,IAA/CA,EAA8B3jB,MAAMiG,QACtE,UAAW0d,GAAyE,IAA/CA,EAA8B5jB,MAAMkG,SAC7E6C,EAAQ+a,gBAIxB,IAGApX,SAAS+L,iBAAiB,WAAW,SAACjX,GACL,MAAxBA,EAAE7B,IAAIggB,eAAyBne,EAAEuiB,SAAqC,MAAxBviB,EAAE7B,IAAIggB,eAAyBne,EAAEuiB,SAAWviB,EAAEwiB,SAC7F9Z,EAAKgP,OAEwB,MAAxB1X,EAAE7B,IAAIggB,eAAyBne,EAAEuiB,SACtC7Z,EAAK+O,MAEb,IAGAvM,SAAS+L,iBAAiB,SAAS,SAACjX,GAC5B0I,EAAK+H,YAAczQ,EAAE0J,QAAWhB,EAAK+H,UAAU4R,SAASriB,EAAE0J,UAC1D0Y,EAAwB,KAEhC,GACJ,GAIJ,S,GCneIK,EAA2B,CAAC,EAGhC,SAASnd,EAAoBod,GAE5B,IAAIC,EAAeF,EAAyBC,GAC5C,QAAqB5Y,IAAjB6Y,EACH,OAAOA,EAAa1c,QAGrB,IAAID,EAASyc,EAAyBC,GAAY,CACjDljB,GAAIkjB,EACJE,QAAQ,EACR3c,QAAS,CAAC,GAUX,OANA4c,EAAoBH,GAAUtZ,KAAKpD,EAAOC,QAASD,EAAQA,EAAOC,QAASX,GAG3EU,EAAO4c,QAAS,EAGT5c,EAAOC,OACf,CAGAX,EAAoBwd,EAAID,EhB5BpBrlB,EAAW,GACf8H,EAAoByd,EAAI,CAACC,EAAQC,EAAUpR,EAAIqR,KAC9C,IAAGD,EAAH,CAMA,IAAIE,EAAejf,IACnB,IAAShF,EAAI,EAAGA,EAAI1B,EAASkH,OAAQxF,IAAK,CAGzC,IAFA,IAAK+jB,EAAUpR,EAAIqR,GAAY1lB,EAAS0B,GACpCkkB,GAAY,EACPC,EAAI,EAAGA,EAAIJ,EAASve,OAAQ2e,MACpB,EAAXH,GAAsBC,GAAgBD,IAAallB,OAAOC,KAAKqH,EAAoByd,GAAGO,OAAOnlB,GAASmH,EAAoByd,EAAE5kB,GAAK8kB,EAASI,MAC9IJ,EAASlY,OAAOsY,IAAK,IAErBD,GAAY,EACTF,EAAWC,IAAcA,EAAeD,IAG7C,GAAGE,EAAW,CACb5lB,EAASuN,OAAO7L,IAAK,GACrB,IAAIsL,EAAIqH,SACE/H,IAANU,IAAiBwY,EAASxY,EAC/B,CACD,CACA,OAAOwY,CAnBP,CAJCE,EAAWA,GAAY,EACvB,IAAI,IAAIhkB,EAAI1B,EAASkH,OAAQxF,EAAI,GAAK1B,EAAS0B,EAAI,GAAG,GAAKgkB,EAAUhkB,IAAK1B,EAAS0B,GAAK1B,EAAS0B,EAAI,GACrG1B,EAAS0B,GAAK,CAAC+jB,EAAUpR,EAAIqR,EAqBjB,EiBzBd5d,EAAoBtG,EAAKgH,IACxB,IAAIud,EAASvd,GAAUA,EAAOwd,WAC7B,IAAOxd,EAAiB,QACxB,IAAM,EAEP,OADAV,EAAoBiZ,EAAEgF,EAAQ,CAAExX,EAAGwX,IAC5BA,CAAM,EhBNV7lB,EAAWM,OAAOsL,eAAkBhL,GAASN,OAAOsL,eAAehL,GAASA,GAASA,EAAa,UAQtGgH,EAAoBS,EAAI,SAASmC,EAAOub,GAEvC,GADU,EAAPA,IAAUvb,EAAQtJ,KAAKsJ,IAChB,EAAPub,EAAU,OAAOvb,EACpB,GAAoB,iBAAVA,GAAsBA,EAAO,CACtC,GAAW,EAAPub,GAAavb,EAAMsb,WAAY,OAAOtb,EAC1C,GAAW,GAAPub,GAAoC,mBAAfvb,EAAMxC,KAAqB,OAAOwC,CAC5D,CACA,IAAIwb,EAAK1lB,OAAO2lB,OAAO,MACvBre,EAAoBkF,EAAEkZ,GACtB,IAAIE,EAAM,CAAC,EACXnmB,EAAiBA,GAAkB,CAAC,KAAMC,EAAS,CAAC,GAAIA,EAAS,IAAKA,EAASA,IAC/E,IAAI,IAAIyI,EAAiB,EAAPsd,GAAYvb,EAAyB,iBAAX/B,KAAyB1I,EAAekN,QAAQxE,GAAUA,EAAUzI,EAASyI,GACxHnI,OAAOgM,oBAAoB7D,GAAS7G,SAASnB,GAASylB,EAAIzlB,GAAO,IAAO+J,EAAM/J,KAI/E,OAFAylB,EAAa,QAAI,IAAM,EACvBte,EAAoBiZ,EAAEmF,EAAIE,GACnBF,CACR,EiBxBApe,EAAoBiZ,EAAI,CAACtY,EAAS4d,KACjC,IAAI,IAAI1lB,KAAO0lB,EACXve,EAAoBC,EAAEse,EAAY1lB,KAASmH,EAAoBC,EAAEU,EAAS9H,IAC5EH,OAAO8lB,eAAe7d,EAAS9H,EAAK,CAAE4lB,YAAY,EAAMjjB,IAAK+iB,EAAW1lB,IAE1E,ECNDmH,EAAoB6H,EAAI,CAAC,EAGzB7H,EAAoBtF,EAAKgkB,GACjBxe,QAAQK,IAAI7H,OAAOC,KAAKqH,EAAoB6H,GAAG9O,QAAO,CAAC4lB,EAAU9lB,KACvEmH,EAAoB6H,EAAEhP,GAAK6lB,EAASC,GAC7BA,IACL,KCNJ3e,EAAoB4e,EAAKF,GAEZA,EAAU,IAAM,CAAC,GAAK,uBAAuB,GAAK,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,wBAAwBA,GAAW,UCH7S1e,EAAoBwb,EAAI,WACvB,GAA0B,iBAAfqD,WAAyB,OAAOA,WAC3C,IACC,OAAOvlB,MAAQ,IAAIwlB,SAAS,cAAb,EAChB,CAAE,MAAOpkB,GACR,GAAsB,iBAAXqG,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxBf,EAAoBC,EAAI,CAACjH,EAAK2L,IAAUjM,OAAOqmB,UAAU7a,eAAeJ,KAAK9K,EAAK2L,GpBA9EtM,EAAa,CAAC,EACdC,EAAoB,mBAExB0H,EAAoBgf,EAAI,CAACC,EAAKC,EAAMrmB,EAAK6lB,KACxC,GAAGrmB,EAAW4mB,GAAQ5mB,EAAW4mB,GAAKhkB,KAAKikB,OAA3C,CACA,IAAIC,EAAQC,EACZ,QAAW5a,IAAR3L,EAEF,IADA,IAAIwmB,EAAUzZ,SAAS0Z,qBAAqB,UACpC1lB,EAAI,EAAGA,EAAIylB,EAAQjgB,OAAQxF,IAAK,CACvC,IAAI0R,EAAI+T,EAAQzlB,GAChB,GAAG0R,EAAE3L,aAAa,QAAUsf,GAAO3T,EAAE3L,aAAa,iBAAmBrH,EAAoBO,EAAK,CAAEsmB,EAAS7T,EAAG,KAAO,CACpH,CAEG6T,IACHC,GAAa,GACbD,EAASvZ,SAASC,cAAc,WAEzB0Z,QAAU,QACjBJ,EAAOK,QAAU,IACbxf,EAAoByf,IACvBN,EAAO9H,aAAa,QAASrX,EAAoByf,IAElDN,EAAO9H,aAAa,eAAgB/e,EAAoBO,GAExDsmB,EAAOxb,IAAMsb,GAEd5mB,EAAW4mB,GAAO,CAACC,GACnB,IAAIQ,EAAmB,CAACC,EAAMtX,KAE7B8W,EAAOS,QAAUT,EAAOU,OAAS,KACjCC,aAAaN,GACb,IAAIO,EAAU1nB,EAAW4mB,GAIzB,UAHO5mB,EAAW4mB,GAClBE,EAAOa,YAAcb,EAAOa,WAAWC,YAAYd,GACnDY,GAAWA,EAAQ/lB,SAASuS,GAAQA,EAAGlE,KACpCsX,EAAM,OAAOA,EAAKtX,EAAM,EAExBmX,EAAUU,WAAWR,EAAiBS,KAAK,UAAM3b,EAAW,CAAE+C,KAAM,UAAWnD,OAAQ+a,IAAW,MACtGA,EAAOS,QAAUF,EAAiBS,KAAK,KAAMhB,EAAOS,SACpDT,EAAOU,OAASH,EAAiBS,KAAK,KAAMhB,EAAOU,QACnDT,GAAcxZ,SAASwa,KAAK9I,YAAY6H,EApCkB,CAoCX,EqBvChDnf,EAAoBkF,EAAKvE,IACH,oBAAX0f,QAA0BA,OAAOC,aAC1C5nB,OAAO8lB,eAAe7d,EAAS0f,OAAOC,YAAa,CAAE1d,MAAO,WAE7DlK,OAAO8lB,eAAe7d,EAAS,aAAc,CAAEiC,OAAO,GAAO,ECL9D5C,EAAoBugB,IAAO7f,IAC1BA,EAAO8f,MAAQ,GACV9f,EAAO+f,WAAU/f,EAAO+f,SAAW,IACjC/f,GCHRV,EAAoBwN,EAAI,G,MCKxB,IAAIkT,EAAkB,CACrB,GAAI,GAGL1gB,EAAoB6H,EAAEkW,EAAI,CAACW,EAASC,KAElC,IAAIgC,EAAqB3gB,EAAoBC,EAAEygB,EAAiBhC,GAAWgC,EAAgBhC,QAAWla,EACtG,GAA0B,IAAvBmc,EAGF,GAAGA,EACFhC,EAAS1jB,KAAK0lB,EAAmB,QAC3B,CAGL,IAAIC,EAAU,IAAI1gB,SAAQ,CAACC,EAASmP,IAAYqR,EAAqBD,EAAgBhC,GAAW,CAACve,EAASmP,KAC1GqP,EAAS1jB,KAAK0lB,EAAmB,GAAKC,GAGtC,IAAI3B,EAAMjf,EAAoBwN,EAAIxN,EAAoB4e,EAAEF,GAEpDmC,EAAQ,IAAIpnB,MAgBhBuG,EAAoBgf,EAAEC,GAfF5W,IACnB,GAAGrI,EAAoBC,EAAEygB,EAAiBhC,KAEf,KAD1BiC,EAAqBD,EAAgBhC,MACRgC,EAAgBhC,QAAWla,GACrDmc,GAAoB,CACtB,IAAIG,EAAYzY,IAAyB,SAAfA,EAAMd,KAAkB,UAAYc,EAAMd,MAChEwZ,EAAU1Y,GAASA,EAAMjE,QAAUiE,EAAMjE,OAAOT,IACpDkd,EAAMG,QAAU,iBAAmBtC,EAAU,cAAgBoC,EAAY,KAAOC,EAAU,IAC1FF,EAAMnd,KAAO,iBACbmd,EAAMtZ,KAAOuZ,EACbD,EAAMI,QAAUF,EAChBJ,EAAmB,GAAGE,EACvB,CACD,GAEwC,SAAWnC,EAASA,EAE/D,CACD,EAWF1e,EAAoByd,EAAEM,EAAKW,GAA0C,IAA7BgC,EAAgBhC,GAGxD,IAAIwC,EAAuB,CAACC,EAA4B3oB,KACvD,IAGI4kB,EAAUsB,GAHTf,EAAUyD,EAAaC,GAAW7oB,EAGhBoB,EAAI,EAC3B,GAAG+jB,EAAS2D,MAAMpnB,GAAgC,IAAxBwmB,EAAgBxmB,KAAa,CACtD,IAAIkjB,KAAYgE,EACZphB,EAAoBC,EAAEmhB,EAAahE,KACrCpd,EAAoBwd,EAAEJ,GAAYgE,EAAYhE,IAGhD,GAAGiE,EAAS,IAAI3D,EAAS2D,EAAQrhB,EAClC,CAEA,IADGmhB,GAA4BA,EAA2B3oB,GACrDoB,EAAI+jB,EAASve,OAAQxF,IACzB8kB,EAAUf,EAAS/jB,GAChBoG,EAAoBC,EAAEygB,EAAiBhC,IAAYgC,EAAgBhC,IACrEgC,EAAgBhC,GAAS,KAE1BgC,EAAgBhC,GAAW,EAE5B,OAAO1e,EAAoByd,EAAEC,EAAO,EAGjC6D,EAAqBne,KAAkC,4BAAIA,KAAkC,6BAAK,GACtGme,EAAmBvnB,QAAQknB,EAAqBf,KAAK,KAAM,IAC3DoB,EAAmBtmB,KAAOimB,EAAqBf,KAAK,KAAMoB,EAAmBtmB,KAAKklB,KAAKoB,G,KClFvF,IAAIC,EAAsBxhB,EAAoByd,OAAEjZ,EAAW,CAAC,KAAK,IAAOxE,EAAoB,OAC5FwhB,EAAsBxhB,EAAoByd,EAAE+D,E","sources":["webpack://graphPlayground/webpack/runtime/chunk loaded","webpack://graphPlayground/webpack/runtime/create fake namespace object","webpack://graphPlayground/webpack/runtime/load script","webpack://graphPlayground/./src/js/classes/GraphImmut/GraphImmut.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/NodeImmut.ts","webpack://graphPlayground/./src/ lazy ^\\.\\/.*\\.ts$ namespace object","webpack://graphPlayground/./src/js/languages.ts","webpack://graphPlayground/./src/js/settings.ts","webpack://graphPlayground/./src/js/util/genericHelpers.ts","webpack://graphPlayground/./src/js/app.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/EdgeImmut.ts","webpack://graphPlayground/./src/js/util/graphHelpers.ts","webpack://graphPlayground/./src/js/workers/GraphAlgorithmWorker.ts?dbca","webpack://graphPlayground/./src/js/UIInteractions.ts","webpack://graphPlayground/./src/js/graphState.ts","webpack://graphPlayground/./src/js/main.ts","webpack://graphPlayground/webpack/bootstrap","webpack://graphPlayground/webpack/runtime/compat get default export","webpack://graphPlayground/webpack/runtime/define property getters","webpack://graphPlayground/webpack/runtime/ensure chunk","webpack://graphPlayground/webpack/runtime/get javascript chunk filename","webpack://graphPlayground/webpack/runtime/global","webpack://graphPlayground/webpack/runtime/hasOwnProperty shorthand","webpack://graphPlayground/webpack/runtime/make namespace object","webpack://graphPlayground/webpack/runtime/node module decorator","webpack://graphPlayground/webpack/runtime/publicPath","webpack://graphPlayground/webpack/runtime/jsonp chunk loading","webpack://graphPlayground/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"graphPlayground:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","\"use strict\";\n\nimport { List } from 'immutable';\nimport { default as NodeImmut, NodeImmutPlain } from './NodeImmut';\nimport { default as EdgeImmut, EdgeImmutPlain } from './EdgeImmut';\n\ninterface NodeMapping {\n    [key: number]: number\n}\n\nconst filterExtraAttr = (data: any, labels: any) => {\n    return Object.keys(data)\n        .filter((key) => !(labels).includes(key))\n        .reduce((obj: any, key) => {\n            obj[key] = data[key];\n            return obj;\n        }, {});\n};\n\nconst filterNodeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"label\", \"id\"]);\n};\n\nconst filterEdgeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"from\", \"to\", \"weight\"]);\n};\n\nconst genericEdgesToImmutEdges = (edges: any, nodeMap: NodeMapping = {}): boolean | List<EdgeImmut> => {\n    if (edges === null) {\n        return false;\n    }\n\n    let newEdges: List<EdgeImmut> = List();\n\n    if (typeof edges === 'object') {\n        edges.forEach((edge: any) => {\n            let weight = 0;\n            let from = 0;\n            let to = 0;\n            let extraAttrs = {};\n\n            if (\"weight\" in edge) {\n                weight = parseFloat(edge.weight);\n            }\n            if (\"from\" in edge) {\n                from = nodeMap[edge.from];\n            }\n            if (\"to\" in edge) {\n                to = nodeMap[edge.to];\n            }\n            if (\"attributes\" in edge) {\n                extraAttrs = filterEdgeExtraAttr(edge.attributes);\n            }\n            else {\n                extraAttrs = filterEdgeExtraAttr(edge);\n            }\n\n            newEdges = newEdges.push(new EdgeImmut(from, to, weight, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return newEdges;\n};\n\nconst genericNodesToImmutNodes = (nodes: any): boolean | { nodes: Readonly<List<NodeImmut>>; map: { [key: number]: number } } => {\n    if (nodes === null) {\n        return false;\n    }\n\n    let newNodes: List<NodeImmut> = List();\n    const nodeMap: NodeMapping = {};\n\n    if (typeof nodes === \"number\") {\n        // Create the nodes\n        for (let i = 0; i < Math.floor(nodes); i++) {\n            newNodes = newNodes.set(i, new NodeImmut(i));\n            nodeMap[i] = i;\n        }\n    }\n    else if (typeof nodes === 'object') {\n        let nodeNum = 0;\n        nodes.forEach((n: any) => {\n            const id = nodeNum++;\n            let label = null;\n            let extraAttrs = null;\n\n            if (\"label\" in n) {\n                label = n.label;\n            }\n            if (\"id\" in n) {\n                nodeMap[n.id] = id;\n                if (\"label\" in n && n.label === n.id.toString()) {\n                    label = id.toString();\n                }\n            }\n            else {\n                nodeMap[id] = id;\n            }\n            if (\"attributes\" in n) {\n                extraAttrs = filterNodeExtraAttr(n.attributes);\n            }\n            else {\n                extraAttrs = filterNodeExtraAttr(n);\n            }\n\n            newNodes = newNodes.set(id, new NodeImmut(id, label, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return { nodes: Object.freeze(newNodes), map: nodeMap };\n};\n\nexport default class GraphImmut {\n    private readonly directed: Readonly<boolean>;\n    private readonly weighted: Readonly<boolean>;\n    private readonly nodes: Readonly<List<NodeImmut>>;\n    private readonly numNodes: Readonly<number>;\n    private readonly edges: Readonly<List<EdgeImmut>>;\n    private readonly numEdges: Readonly<number>;\n\n    constructor(nodes: number | Readonly<List<NodeImmut>> | NodeImmutPlain[],\n        edges: null | Readonly<List<EdgeImmut>> | EdgeImmutPlain[] = null,\n        directed = false, weighted = false) {\n        this.directed = Object.freeze(directed);\n        this.weighted = Object.freeze(weighted);\n        let nodeMap = {};\n\n        // Make Nodes\n        if (typeof nodes === \"number\" || (typeof nodes === \"object\" && !(nodes instanceof List))) {\n            const n = genericNodesToImmutNodes(nodes);\n            if (typeof n !== \"object\") {\n                throw new Error(\"Unable to parse node input!\");\n            }\n            this.nodes = n.nodes;\n            nodeMap = n.map;\n        }\n        else if (nodes instanceof List) {\n            this.nodes = nodes as List<NodeImmut>;\n        }\n        else {\n            throw new Error(\"Illegal type of 'node' input to GraphImmut constructor\");\n        }\n        this.nodes = Object.freeze(this.nodes);\n        this.numNodes = Object.freeze(this.nodes.size);\n\n        // If we are given edges, add them to the graph\n        if (edges !== null && typeof edges === \"object\" && !(edges instanceof List)) {\n            const e = genericEdgesToImmutEdges(edges, nodeMap);\n            if (typeof e !== \"object\") {\n                throw new Error(\"Unable to parse Edge input\");\n            }\n            this.edges = e;\n        }\n        else if (edges instanceof List) {\n            this.edges = edges as List<EdgeImmut>;\n        }\n        else {\n            this.edges = List<EdgeImmut>();\n        }\n        this.edges = Object.freeze(this.edges);\n        this.numEdges = Object.freeze(this.edges.size);\n\n        if (new.target === GraphImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getNode(id: number, rich = false): NodeImmut | NodeImmutPlain | boolean {\n        if (id >= this.numNodes) {\n            return false;\n        }\n        const node = this.nodes.get(id);\n        if (typeof node === \"undefined\") {\n            return false;\n        }\n        if (rich) {\n            return node;\n        }\n        return node.toPlain();\n    }\n\n    addNode(data: any = null): GraphImmut {\n        if (data === null) {\n            data = {};\n        }\n\n        const id = this.numNodes;\n        if (!(\"label\" in data)) {\n            data.label = id.toString();\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n\n        return new GraphImmut(this.nodes.set(id, new NodeImmut(id, data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    editNode(id: number, data: any): any {\n        if (!this.nodes.has(id)) {\n            return false;\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n        if (!(\"label\" in data)) {\n            data.label = (this.getNode(id, true) as NodeImmut).getLabel();\n        }\n        return new GraphImmut(this.nodes.set(id, (this.getNode(id, true) as NodeImmut).editNode(data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    deleteNode(id: number): GraphImmut | boolean {\n        // Make sure the ID exists\n        if (!(id >= 0 && id < this.numNodes)) {\n            return false;\n        }\n\n        const nodeMap: NodeMapping = {}; // Map for old IDs to new ones since we're deleting an entry\n\n        // Remove it from the node list\n        let nodeCount = 0;\n        const newNodes: List<NodeImmut> = this.nodes\n            .filter((n) => {\n                if (n.getID() === id) {\n                    nodeMap[n.getID()] = -1;\n                }\n                else {\n                    nodeMap[n.getID()] = nodeCount++;\n                }\n\n                return n.getID() !== id;\n            })\n            .map((node) => {\n                let label = node.getLabel();\n                if (node.getID().toString() === label) {\n                    label = nodeMap[node.getID()].toString();\n                }\n\n                return new NodeImmut(nodeMap[node.getID()], label, node.getAllAttributes());\n            }) as List<NodeImmut>;\n\n        // Remap edges\n        const newEdges: List<EdgeImmut> = this.edges\n            .filter((edge) => {\n                return !(edge.getFrom() === id || edge.getTo() === id);\n            })\n            .map((edge) => {\n                return new EdgeImmut(nodeMap[edge.getFrom()], nodeMap[edge.getTo()], edge.getWeight(), edge.getAllAttributes());\n            }) as List<EdgeImmut>;\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    addEdge(from: number, to: number, weight: any = 1): GraphImmut {\n        if (!this.weighted) {\n            weight = 1; // Ensure that edge weights are 1 if this is an unweighted graph\n        }\n\n        const newEdges = this.edges.push(new EdgeImmut(from, to, parseFloat(weight)));\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    deleteEdge(from: number, to: number, weight: any = null, deleteAll = true): GraphImmut {\n        if (weight !== null) {\n            weight = parseFloat(weight);\n        }\n\n        let foundOneEdge = false;\n        const newEdges: List<EdgeImmut> = this.edges.filter((edge) => {\n            // If we're not deleting everything and we have found one edge, then do not filter anymore\n            if (foundOneEdge && !deleteAll) {\n                return true;\n            }\n\n            // If we have an exact match\n            if (edge.getFrom() === from && edge.getTo() === to && (weight === null || edge.getWeight() === weight)) {\n                foundOneEdge = true;\n                return false; // Remove this edge\n            }\n\n            // If we are undirected, check for opposing matches\n            if (!this.directed) {\n                if (edge.getFrom() === to && edge.getTo() === from && (weight === null || edge.getWeight() === weight)) {\n                    foundOneEdge = true;\n                    return false; // Remove this edge\n                }\n            }\n\n            return true;\n        }) as List<EdgeImmut>;\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    editEdge(from: number, to: number, newWeight: any, oldWeight: any = null, color: string | null = null): GraphImmut | boolean {\n        let foundFirst = false;\n\n        if (oldWeight !== null) {\n            oldWeight = parseFloat(oldWeight);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge, index) => {\n            if (foundFirst) {\n                return;\n            }\n\n            if (((edge.getFrom() === from && edge.getTo() === to)\n                || (!this.isDirected() && edge.getFrom() === to && edge.getTo() === from))\n                && (oldWeight === null || edge.getWeight() === oldWeight)) {\n\n                if (color !== null) {\n                    newEdges = newEdges.set(index,\n                        edge.editEdge(newWeight === null ? null : parseFloat(newWeight),\n                            { color: color }));\n                }\n                else {\n                    newEdges = newEdges.set(index, edge.editEdge(newWeight === null ? null : parseFloat(newWeight)));\n                }\n                foundFirst = true;\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    getAllNodes(rich = false): NodeImmut[] | NodeImmutPlain[] {\n        if (rich) {\n            return this.nodes.toArray();\n        }\n        return this.nodes.map((node) => {\n            return node.toPlain();\n        }).toArray();\n    }\n\n    getAllNodesAsImmutableList(): Readonly<List<NodeImmut>> {\n        return this.nodes;\n    }\n\n    getAllEdgesAsImmutableList(): Readonly<List<EdgeImmut>> {\n        return this.edges;\n    }\n\n    getAllEdges(rich = false): EdgeImmut[] | EdgeImmutPlain[] {\n        if (rich) {\n            return this.edges.toArray();\n        }\n        return this.edges.map((edge) => {\n            return edge.toPlain();\n        }).toArray();\n    }\n\n    getNumberOfNodes(): number {\n        return this.numNodes;\n    }\n\n    getNumberOfEdges(): number {\n        return this.numEdges;\n    }\n\n    getAllOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.nodes.forEach((_, i) => {\n            degrees[i] = 0;\n        });\n        this.edges.forEach((edge) => {\n            degrees[edge.getFrom()]++;\n        });\n\n        return degrees;\n    }\n\n    asWeighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, true);\n    }\n\n    asUnweighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, false);\n    }\n\n    asDirected(doubleEdges = false): GraphImmut {\n        if (!doubleEdges) {\n            return new GraphImmut(this.nodes, this.edges, true, this.weighted);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.getTo(), edge.getFrom(), edge.getWeight(), edge.getAllAttributes()));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, true, this.weighted);\n    }\n\n    asUndirected(): GraphImmut {\n        let newEdges: List<EdgeImmut> = List();\n        const addedEdges: { [key: string]: null } = {};\n\n        this.edges.forEach((edge) => {\n            let from = edge.getFrom();\n            let to = edge.getTo();\n            if (to < from) {\n                from = to;\n                to = edge.getFrom();\n            }\n            if (!(`${from}_${to}` in addedEdges)) {\n                addedEdges[`${from}_${to}`] = null;\n                newEdges = newEdges.push(new EdgeImmut(from, to, edge.getWeight(), edge.getAllAttributes()));\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, false, this.weighted);\n    }\n\n    asChangedDirectedWeighted(directed: boolean, weighted: boolean): GraphImmut {\n        let G: GraphImmut = this;\n        if (directed && !this.directed) {\n            G = G.asDirected();\n        }\n        else if (!directed && this.directed) {\n            G = G.asUndirected();\n        }\n\n        if (weighted && !this.weighted) {\n            G = G.asWeighted();\n        }\n        else if (!weighted && this.weighted) {\n            G = G.asUnweighted();\n        }\n\n        return G;\n    }\n\n    getNodeAdjacency(id: number): number[] {\n        const adj: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() === id) {\n                adj.push(edge.getTo());\n            }\n            else if (!this.directed && edge.getTo() === id) {\n                adj.push(edge.getFrom());\n            }\n        });\n\n        return adj;\n    }\n\n    getFullAdjacency(): number[][] {\n        const adj: number[][] = [];\n        this.nodes.forEach((n) => {\n            adj[n.getID()] = this.getNodeAdjacency(n.getID());\n        });\n\n        return adj;\n    }\n\n    areAdjacent(id1: number, id2: number): boolean {\n        return this.getNodeAdjacency(id1).includes(id2);\n    }\n\n    getEdgesBetween(id1: number, id2: number): EdgeImmut[] {\n        const edgeList: EdgeImmut[] = [];\n        if (id1 >= this.numNodes || id2 >= this.numNodes) {\n            return edgeList;\n        }\n\n        this.edges.forEach((edge) => {\n            if (!this.directed && edge.getFrom() === id2 && edge.getTo() === id1) {\n                edgeList.push(edge);\n            }\n\n            if (edge.getFrom() === id1 && edge.getTo() === id2) {\n                edgeList.push(edge);\n            }\n        });\n\n        return edgeList;\n    }\n\n    getMinWeightEdgeBetween(id1: number, id2: number): number {\n        let minWeight = Infinity;\n        this.getEdgesBetween(id1, id2).forEach((edge) => {\n            if (edge.getWeight() < minWeight) {\n                minWeight = edge.getWeight();\n            }\n        });\n\n        return minWeight;\n    }\n\n    // Take a multigraph and reduce all multiple edges to a single edge, weighted using the reducer\n    reduceMultiGraph(reducer: (a: number, b: number) => number = Math.min, initialValue: any = Infinity): GraphImmut {\n        const multiEdges: EdgeImmutPlain[] = [];\n        this.nodes.forEach((node) => {\n            // If we have duplicates\n            const adj = this.getNodeAdjacency(node.getID());\n            const uniques = new Set(adj);\n            if (uniques.size < adj.length) {\n                uniques.forEach((to) => {\n                    const newWeight = this.getEdgesBetween(node.getID(), to).reduce((acc, edge) => {\n                        return reducer(acc, edge.getWeight());\n                    }, initialValue);\n\n                    multiEdges.push({ from: node.getID(), to, weight: parseFloat(newWeight) });\n                });\n            }\n        });\n\n        // Remove all multigraph edges and replace them with single new edges\n        let newEdges = this.edges.filter((edge) => {\n            let keep = true;\n            multiEdges.forEach((duplicateEdge) => {\n                if (edge.getFrom() === duplicateEdge.from && edge.getTo() === duplicateEdge.to) {\n                    keep = false;\n                }\n            });\n\n            return keep;\n        }) as List<EdgeImmut>;\n        multiEdges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.from, edge.to, edge.weight));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    isWeighted() {\n        return this.weighted;\n    }\n\n    isDirected() {\n        return this.directed;\n    }\n}\n","\"use strict\";\n\nexport interface NodeImmutPlain {\n    id: Readonly<number>;\n    label: string;\n    [key: string]: any;\n    [key: number]: any;\n}\n\nexport default class NodeImmut {\n    private readonly id: Readonly<number>;\n    private readonly label: Readonly<string>;\n    private readonly attributes: any;\n\n    constructor(id: any, label: null | string = null, extraAttrs: null | any = null) {\n        if (label === null) {\n            this.label = id.toString();\n        } else {\n            this.label = label;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.label = Object.freeze(this.label);\n        this.id = Object.freeze(id);\n\n        if (new.target === NodeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    toPlain(): NodeImmutPlain {\n        const toReturn: NodeImmutPlain = { id: this.id, label: this.label };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    getID(): Readonly<number> {\n        return this.id;\n    }\n\n    getLabel(): Readonly<string> {\n        return this.label;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    editNode(label: any = null, extraAttrs: any = null): NodeImmut {\n        if (label === null) {\n            label = this.getLabel();\n        }\n\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        if (extraAttrs !== null) {\n            Object.keys(extraAttrs).forEach(key => {\n                attributes[key] = extraAttrs[key];\n            });\n        }\n\n        return new NodeImmut(this.getID(), label, attributes);\n    }\n}\n","var map = {\n\t\"./EN_US.ts\": [\n\t\t744,\n\t\t9,\n\t\t744\n\t],\n\t\"./custom.d.ts\": [\n\t\t702,\n\t\t7,\n\t\t702\n\t],\n\t\"./js/GraphAlgorithms.ts\": [\n\t\t32,\n\t\t9,\n\t\t32\n\t],\n\t\"./js/UIInteractions.ts\": [\n\t\t819,\n\t\t9\n\t],\n\t\"./js/app.ts\": [\n\t\t625,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/EdgeImmut.ts\": [\n\t\t765,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/GraphImmut.ts\": [\n\t\t76,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/NodeImmut.ts\": [\n\t\t126,\n\t\t9\n\t],\n\t\"./js/classes/SpanningTree.ts\": [\n\t\t503,\n\t\t9,\n\t\t503\n\t],\n\t\"./js/dataImportExport.ts\": [\n\t\t191,\n\t\t9,\n\t\t191\n\t],\n\t\"./js/graphState.ts\": [\n\t\t885,\n\t\t9\n\t],\n\t\"./js/languages.ts\": [\n\t\t301,\n\t\t9\n\t],\n\t\"./js/main.ts\": [\n\t\t997,\n\t\t9\n\t],\n\t\"./js/settings.ts\": [\n\t\t445,\n\t\t9\n\t],\n\t\"./js/util/genericHelpers.ts\": [\n\t\t473,\n\t\t9\n\t],\n\t\"./js/util/graphHelpers.ts\": [\n\t\t778,\n\t\t9\n\t],\n\t\"./js/util/predefinedGraphs.ts\": [\n\t\t508,\n\t\t9,\n\t\t508\n\t],\n\t\"./js/workers/GraphAlgorithmWorker.ts\": [\n\t\t27,\n\t\t9,\n\t\t27\n\t],\n\t\"./js/workers/pwaServiceWorker.ts\": [\n\t\t732,\n\t\t7,\n\t\t732\n\t],\n\t\"./overloadTypes.d.ts\": [\n\t\t202,\n\t\t7,\n\t\t202\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__.t(id, ids[1] | 16)\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 273;\nmodule.exports = webpackAsyncContext;","import EN_US from \"src/EN_US\";\n\nexport enum Languages {\n    EN_US = \"EN_US\",\n\n}\n\nexport let current = {} as typeof EN_US;\n\n\nexport const setLanguage = async () => {\n    current = (await import(`../${window.settings.getOption(\"language\") || Languages.EN_US}.ts`)).default;\n};\n","\"use strict\";\ninterface SettingsList {\n    nodePhysics: boolean;\n    direction: boolean;\n    weights: boolean;\n\n    [index: string]: boolean;\n}\n\nexport default class Settings {\n    private static readonly defaults: SettingsList = {\n        nodePhysics: true,\n        direction: false,\n        weights: false\n    };\n    private static current: any = {};\n\n    public static checkForLocalStorage() {\n        try {\n            const x = \"__storage_test__\";\n            localStorage.setItem(x, x);\n            localStorage.removeItem(x);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    public static saveSettings() {\n        if (Settings.checkForLocalStorage()) {\n            localStorage.setItem(\"graphPlayground.settings\", JSON.stringify(Settings.current));\n        }\n    }\n\n    public static loadSettings() {\n        if (Settings.checkForLocalStorage()) {\n            const settings = localStorage.getItem(\"graphPlayground.settings\");\n            if (settings === null) {\n                Settings.current = settings;\n            } else {\n                Settings.current = JSON.parse(settings);\n            }\n        }\n        if (Settings.current === null) {\n            Settings.current = {};\n        }\n        Settings.setAll();\n    }\n\n    public static setAll() {\n        window.network.setOptions({ nodes: { physics: Settings.getOption(\"nodePhysics\") as boolean } });\n        window.network.setOptions({ edges: { arrows: { to: Settings.getOption(\"direction\") as boolean } } });\n        if (Settings.getOption(\"weights\")) {\n            window.network.setOptions({\n                manipulation: {\n                    editEdge: {\n                        editWithoutDrag: window.main.visWeightEdgeEdit\n                    }\n                }\n            });\n        } else {\n            window.network.setOptions({ manipulation: { editEdge: window.main.visOptions.manipulation.editEdge } });\n        }\n    }\n\n    public static changeOption(option: string, value: string | boolean): void {\n        Settings.current[option] = value;\n        Settings.saveSettings();\n        Settings.setAll();\n    }\n\n    public static getOption(option: string): string | boolean {\n        if (option in Settings.current) {\n            return Settings.current[option];\n        }\n        return Settings.defaults[option];\n    }\n}\n","\"use strict\";\n\nimport * as $ from \"jquery\";\n\nexport declare interface ModalFormRow {\n    type: string;\n    label?: string;\n    initialValue?: any;\n    id?: string | number;\n    extraAttrs?: any;\n    validationFunc?: (value: any, container: JQuery) => boolean | string;\n    clickDismiss?: boolean;\n    onclick?: (...args: any[]) => void;\n    optionText?: any[];\n    optionValues?: any[];\n}\n\ndeclare interface BasicMapType {\n    class: string;\n    id: string;\n    value: any;\n\n    [key: number]: any;\n\n    [key: string]: any;\n}\n\nconst defaultCancelCb = ($modal: JQuery) => {\n    $modal.modal(\"hide\");\n};\n\nconst self = {\n    deepCopy(deep: boolean, clone: any, copy: any) {\n        const isPlainObject = (obj: any) => {\n            if (!obj || {}.toString.call(obj) !== \"[object Object]\") {\n                return false;\n            }\n\n            let proto = Object.getPrototypeOf(obj);\n\n            if (!proto) {\n                return true;\n            }\n\n            // Objects with prototype are plain iff they were constructed by a global Object function\n            let Ctor = {}.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n            return (\n                typeof Ctor === \"function\" &&\n                {}.hasOwnProperty.toString.call(Ctor) === {}.hasOwnProperty.toString.call(Object)\n            );\n        };\n\n        let options,\n            name,\n            src,\n            copyIsArray,\n            target = arguments[0] || {},\n            i = 1,\n            length = arguments.length;\n\n        // Handle a deep copy situation\n        if (typeof target === \"boolean\") {\n            deep = target;\n\n            // Skip the boolean and the target\n            target = arguments[i] || {};\n            i++;\n        }\n\n        // Handle case when target is a string or something (possible in deep copy)\n        if (typeof target !== \"object\" && typeof target !== \"function\") {\n            target = {};\n        }\n\n        if (i === length) {\n            target = this;\n            i--;\n        }\n\n        for (; i < length; i++) {\n            // Only deal with non-null/undefined values\n            if ((options = arguments[i]) != null) {\n                // Extend the base object\n                for (name in options) {\n                    src = target[name];\n                    copy = options[name];\n\n                    // Prevent never-ending loop\n                    if (target === copy) {\n                        continue;\n                    }\n\n                    // Recurse if we're merging plain objects or arrays\n                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n                        if (copyIsArray) {\n                            copyIsArray = false;\n                            clone = src && Array.isArray(src) ? src : [];\n                        } else {\n                            clone = src && isPlainObject(src) ? src : {};\n                        }\n\n                        // Never move original objects, clone them\n                        target[name] = self.deepCopy(deep, clone, copy);\n\n                        // Don't bring in undefined values\n                    } else if (copy !== undefined) {\n                        target[name] = copy;\n                    }\n                }\n            }\n        }\n\n        // Return the modified object\n        return target;\n    },\n\n    deepFreeze: <T extends Object>(o: T): Readonly<T> => {\n        Object.freeze(o);\n\n        Object.getOwnPropertyNames(o).forEach((prop: string | number) => {\n            if (\n                o.hasOwnProperty(prop) &&\n                (o as any)[prop] !== null &&\n                (typeof (o as any)[prop] === \"object\" || typeof (o as any)[prop] === \"function\") &&\n                !Object.isFrozen((o as any)[prop])\n            ) {\n                self.deepFreeze((o as any)[prop]);\n            }\n        });\n\n        return o;\n    },\n\n    sort: <T>(arr: T[], compareFunction: (a: any, b: any) => number): T[] => {\n        return [...arr].sort(compareFunction);\n    },\n\n    datasetToArray: (ds: any, key: string): Readonly<any[]> => {\n        const r: any[] = [];\n        ds.forEach((v: { [index: string]: any }) => {\n            r.push(v[key]);\n        });\n        return self.deepFreeze(r);\n    },\n\n    keepOnlyKeys: <T>(arr: T[], keys: string[]): Readonly<T[]> => {\n        arr = arr.slice();\n        arr.forEach((v: any) => {\n            const k = Object.keys(v);\n            k.forEach(key => {\n                if (keys.indexOf(key) < 0) {\n                    delete v[key];\n                }\n            });\n        });\n        return self.deepFreeze(arr);\n    },\n\n    getFileExtension: (filename: string): string => {\n        return filename.split(\".\").splice(-1)[0];\n    },\n\n    htmlEncode: (string: string): string => {\n        const t = document.createElement(\"textarea\");\n        t.textContent = string;\n        string = t.innerHTML.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\");\n        return string;\n    },\n\n    printout: (text: string, escape?: string): void => {\n        if (escape) {\n            text = self.htmlEncode(escape);\n        }\n        document.getElementById(\"printout\")!.innerHTML = text;\n    },\n\n    flatten: <T>(map: { [key: string]: T }): Readonly<T[]> => {\n        const r: T[] = [];\n        Object.keys(map).forEach(i => {\n            r.push(map[i]);\n        });\n        return self.deepFreeze(r);\n    },\n\n    rotate: (map: { [key: string]: any }): Readonly<any> => {\n        const r: any = {};\n        Object.keys(map).forEach(i => {\n            if (map[i] in r) {\n                r[map[i]].push(i);\n            } else {\n                r[map[i]] = [i];\n            }\n        });\n        return self.deepFreeze(r);\n    },\n\n    max: (iterable: any[]): number => {\n        return iterable.reduce((a, b) => {\n            return Math.max(a, b);\n        });\n    },\n\n    toTitleCase: (str: string): string => {\n        return str.replace(/(?:^|\\s)\\w/g, match => {\n            return match.toUpperCase();\n        });\n    },\n\n    stringReplacement: (str: string, ...replacements: string[]) => {\n        return replacements.reduce((val, replacement, i) => {\n            return val.replace(`$${i + 1}`, replacement);\n        }, str);\n    },\n\n    showSimpleModal: (title: string, body: string): void => {\n        self.showFormModal(null, title, null, null, [{ type: \"html\", initialValue: body }], null, false);\n    },\n\n    makeFormModal: (title: string, successText: string | null, cancelText: string | null, form: ModalFormRow[], footer = true): JQuery => {\n        const f = $(\"<div>\", { class: \"modal-body form-group\" });\n        form.forEach((formRow, i) => {\n            if (!(\"initialValue\" in formRow)) {\n                formRow.initialValue = \"\";\n            }\n\n            let id = \"form-modal-\" + i;\n            if (\"id\" in formRow && formRow.id !== \"\" && formRow.id !== null && typeof formRow.id === \"string\") {\n                id = formRow.id;\n            }\n\n            const basicMap: BasicMapType = { class: \"form-control\", id, value: formRow.initialValue };\n\n            if (\"extraAttrs\" in formRow) {\n                Object.keys(formRow.extraAttrs).forEach(attrname => {\n                    if (typeof formRow.extraAttrs[attrname] !== \"function\") {\n                        basicMap[attrname] = formRow.extraAttrs[attrname];\n                    }\n                });\n            }\n\n            let validFunc: typeof formRow[\"validationFunc\"] = () => true;\n            if (\"validationFunc\" in formRow && typeof formRow.validationFunc === \"function\") {\n                validFunc = formRow.validationFunc;\n            }\n\n            const generalValidator = (event: any, valueMutator: null | ((v: any) => any) = null) => {\n                const $v = $(event.target);\n                let val = $v.val();\n                if (valueMutator !== null && typeof valueMutator === \"function\") {\n                    val = valueMutator(val);\n                }\n                const valid = validFunc!(val, $v);\n\n                if (valid === true) {\n                    $v.removeClass(\"is-invalid\")\n                        .next(\"#feedback-\" + i)\n                        .remove();\n                } else {\n                    $v.addClass(\"is-invalid\");\n                    if ($v.next(\"#feedback-\" + i).length === 0) {\n                        $v.after($(\"<div>\", { class: \"invalid-feedback\", id: \"feedback-\" + i }).text(valid));\n                    }\n                }\n            };\n\n            if (formRow.type === \"html\") {\n                f.append($(formRow.initialValue));\n            } else if (formRow.type === \"checkbox\") {\n                basicMap.type = \"checkbox\";\n                basicMap.class = \"form-check-input\";\n                delete basicMap.value;\n                if (formRow.initialValue) {\n                    basicMap.checked = \"\";\n                }\n\n                f.append(\n                    $(\"<div>\", { class: \"form-check\" }).append(\n                        $(\"<label>\", { for: id, class: \"form-check-label\" })\n                            .text(formRow.label!)\n                            .prepend($(\"<input>\", basicMap))\n                    )\n                );\n            } else {\n                f.append($(\"<label>\", { for: id, class: \"col-form-label\" }).text(formRow.label!));\n\n                if (formRow.type === \"button\") {\n                    if (\"clickDismiss\" in formRow && formRow.clickDismiss === true) {\n                        basicMap.class += \" btn-dismiss\";\n                    }\n                    const $b = $(\"<button>\", basicMap).text(formRow.initialValue);\n                    if (\"onclick\" in formRow && typeof formRow.onclick === \"function\") {\n                        $b.on(\"click\", formRow.onclick);\n                    }\n                    f.append($b);\n                } else if (formRow.type === \"numeric\") {\n                    basicMap.type = \"number\";\n                    f.append(\n                        $(\"<input>\", basicMap).on(\"blur validate\", e => {\n                            generalValidator(e, parseFloat);\n                        })\n                    );\n                } else if (formRow.type === \"text\") {\n                    basicMap.type = \"text\";\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\n                } else if (formRow.type === \"file\") {\n                    basicMap.type = \"file\";\n                    basicMap.class = \"form-control-file form-control\";\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\n                } else if (formRow.type === \"textarea\") {\n                    const $b = $(\"<textarea>\", basicMap).on(\"blur validate\", generalValidator);\n                    if (\"onclick\" in formRow) {\n                        $b.on(\"click\", formRow.onclick!);\n                    }\n                    f.append($b);\n                } else if (formRow.type === \"select\") {\n                    const $options = $(\"<select>\", basicMap);\n                    formRow.optionText!.forEach((oText, oIndex) => {\n                        if (oIndex < formRow.optionValues!.length) {\n                            let selected = false;\n                            if (formRow.initialValue === formRow.optionValues![oIndex]) {\n                                selected = true;\n                            }\n                            $options.append($(\"<option>\", { value: formRow.optionValues![oIndex], selected }).text(oText));\n                        } else {\n                            let selected = false;\n                            if (formRow.initialValue === oText) {\n                                selected = true;\n                            }\n                            $options.append($(\"<option>\", { selected }).text(oText));\n                        }\n                    });\n                    f.append($options.on(\"blur validate\", generalValidator));\n                }\n            }\n        });\n\n        let $footer: JQuery<HTMLElement> | null = $(\"<div>\", { class: \"modal-footer\" })\n            .append($(\"<button>\", { class: \"btn btn-success\", type: \"button\" }).text(successText!))\n            .append($(\"<button>\", { class: \"btn btn-danger btn-cancel\", type: \"button\" }).text(cancelText!));\n\n        if (footer === false) {\n            $footer = null;\n        }\n\n        const $modal = $(\"<div>\", { class: \"modal fade\", tabindex: \"-1\", role: \"dialog\", \"aria-hidden\": \"true\" });\n        $modal.append(\n            $(\"<div>\", { class: \"modal-dialog\" }).append(\n                $(\"<div>\", { class: \"modal-content\" })\n                    .append(\n                        $(\"<div>\", { class: \"modal-header\" })\n                            .append($(\"<h5>\", { class: \"modal-title\" }).text(title))\n                            .append(\n                                $(\"<button>\", {\n                                    class: \"close\",\n                                    \"data-dismiss\": \"modal\",\n                                    \"aria-label\": \"close\"\n                                }).append($(\"<span>\", { \"aria-hidden\": \"true\" }).html(\"&times;\"))\n                            )\n                    )\n                    .append(f)\n                    .append($footer!)\n            )\n        );\n        $modal\n            .find(\"input, textarea\")\n            .off(\"keyup\")\n            .on(\"keyup\", e => {\n                if (e.key === \"Enter\") {\n                    $(\".btn-success\")\n                        .last()\n                        .trigger(\"click\");\n                }\n            });\n        $modal.on(\"shown.bs.modal\", () => {\n            $modal\n                .find(\"input[type='text'], input[type='number'], textarea\")\n                .first()\n                .trigger(\"focus\");\n        });\n\n        return $modal;\n    },\n\n    showFormModal: (\n        successCb: null | (($modal: JQuery, vals: any[]) => void),\n        title: string,\n        successText: string | null,\n        cancelText: string | null,\n        form: ModalFormRow[],\n        cancelCb: null | (($modal: JQuery) => void) = defaultCancelCb,\n        footer = true\n    ) => {\n        const $modal = self.makeFormModal(title, successText, cancelText, form, footer);\n\n        $modal\n            .on(\"click\", \".btn-cancel\", () => {\n                if (typeof cancelCb === \"function\") {\n                    cancelCb($modal);\n                } else {\n                    $modal.modal(\"hide\");\n                }\n            })\n            .on(\"click\", \".btn-dismiss\", () => {\n                $modal.modal(\"hide\");\n            })\n            .on(\"click\", \".btn-success\", () => {\n                const vals: any[] = [];\n                let hasErrors = false;\n\n                $modal.find(\"input, textarea, select\").each((i, v) => {\n                    const $v = $(v);\n\n                    if (($v as any).tagName === \"SELECT\") {\n                        vals.push($v.find(\":selected\").val());\n                    } else if ($v.attr(\"type\") === \"checkbox\") {\n                        vals.push($v.prop(\"checked\"));\n                    } else if ($v.attr(\"type\") === \"file\") {\n                        vals.push(($v.get(0) as any).files);\n                    } else if ($v.attr(\"type\") === \"number\") {\n                        vals.push(parseFloat($v.val() as string));\n                    } else {\n                        vals.push($v.val());\n                    }\n\n                    if ($v.trigger(\"validate\").hasClass(\"is-invalid\")) {\n                        hasErrors = true;\n                    }\n                });\n\n                if (!hasErrors && typeof successCb === \"function\") {\n                    successCb($modal, vals);\n                }\n            })\n            .on(\"hidden.bs.modal\", () => {\n                if (typeof cancelCb === \"function\") {\n                    cancelCb($modal);\n                }\n                $modal.remove();\n            })\n            .modal(\"show\");\n    }\n};\n\nexport default self;\n","\"use strict\";\n\nimport \"bootstrap\";\nimport { Network } from \"vis-network\";\nimport { default as main, MainI } from \"./main\";\nimport Settings from \"./settings\";\nimport UI from \"./UIInteractions\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport * as languages from \"./languages\";\n\ndeclare global {\n    interface Window {\n        main: MainI;\n        network: Network;\n        settings: typeof Settings;\n        ui: typeof UI;\n        Worker: Function;\n    }\n}\n\nwindow.main = main;\nwindow.settings = Settings;\n\nlanguages.setLanguage().then(() => {\n    window.ui = UI;\n    window.ui.registerListeners();\n\n    main.visOptions.locales = languages.current.VisLocale;\n    main.visOptions.locale = \"\";\n    window.network = new Network(main.container, {}, main.visOptions);\n    Settings.loadSettings();\n\n    main.addNetworkListeners(window.network);\n\n    let loadDefault = true;\n    if (Settings.checkForLocalStorage()) {\n        const s = localStorage.getItem(\"graphPlayground.lastState\");\n        if (s !== null) {\n            const jsonGraph: any = JSON.parse(s);\n            if (\"graph\" in jsonGraph && \"nodes\" in jsonGraph.graph) {\n                loadDefault = false;\n                main.applyState(false, jsonGraph as { graph: GraphPlain });\n            }\n        }\n    }\n    if (loadDefault) {\n        (async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            main.setData(predefined.Petersen(), false, true, true);\n        })();\n    }\n});\n","\"use strict\";\n\nexport interface EdgeImmutPlain {\n    label?: string;\n    from: number;\n    to: number;\n    weight: number;\n\n    [key: string]: any;\n\n    [key: number]: any;\n}\n\nexport default class EdgeImmut {\n    private readonly from: Readonly<number>;\n    private readonly to: Readonly<number>;\n    private readonly weight: Readonly<number>;\n    private readonly attributes: any;\n\n    constructor(from: number | EdgeImmutPlain, to?: number, weight: number | string = 1, extraAttrs: any = null) {\n        if (typeof from === \"object\") {\n            extraAttrs = Object.keys(from)\n                .filter(key => ![\"from\", \"to\", \"weight\"].includes(key))\n                .reduce((obj: any, key: string) => {\n                    obj[key] = (<EdgeImmutPlain>from)[key];\n                    return obj;\n                }, {});\n\n            to = from.to;\n            weight = from.weight;\n            from = from.from;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.from = Object.freeze(from);\n        this.to = Object.freeze(to!);\n        this.weight = Object.freeze(parseFloat(weight as string));\n\n        if (new.target === EdgeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getFrom(): Readonly<number> {\n        return this.from;\n    }\n\n    getTo(): Readonly<number> {\n        return this.to;\n    }\n\n    getWeight(): Readonly<number> {\n        return this.weight;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    toPlain(): EdgeImmutPlain {\n        const toReturn: EdgeImmutPlain = { from: this.from, to: this.to, weight: this.weight };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    editEdge(newWeight: number | null, extraAttrs: any = {}): EdgeImmut {\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        Object.keys(extraAttrs).forEach(key => {\n            attributes[key] = extraAttrs[key];\n        });\n\n        return new EdgeImmut(\n            this.getFrom(),\n            this.getTo(),\n            newWeight === null ? this.getWeight() : newWeight,\n            attributes\n        );\n    }\n}\n","\"use strict\";\n\nimport {EdgeImmutPlain} from \"../classes/GraphImmut/EdgeImmut\";\nimport {NodeImmutPlain} from \"../classes/GraphImmut/NodeImmut\";\n\ninterface Degree {\n    in: number;\n    out: number;\n}\n\nexport default {\n    findVertexDegreesDirectional: (adjacencyMatrix: Array<Array<number>>): Degree[] => {\n        // Adjacency stores IDs of edges TO\n        const degrees: Degree[] = [];\n        adjacencyMatrix.forEach((v, i) => {\n            if (i in degrees) {\n                degrees[i].out += v.length;\n            }\n            else {\n                degrees[i] = {out: v.length, in: 0};\n            }\n            v.forEach((outV) => {\n                if (outV in degrees) {\n                    degrees[outV].in += 1;\n                }\n                else {\n                    degrees[outV] = {in: 1, out: 0};\n                }\n            });\n        });\n\n        return degrees;\n    },\n\n    interpolateNodesFromEdges: (edges: EdgeImmutPlain[]): NodeImmutPlain[] => {\n        const nodes: NodeImmutPlain[] = [];\n        edges.forEach((v) => {\n            nodes[v.from] = {id: v.from, label: v.from.toString()};\n            nodes[v.to] = {id: v.to, label: v.to.toString()};\n        });\n\n        return nodes;\n    },\n};\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"GraphAlgorithmWorker-d05360076d32090f1731.min.worker.js\");\n}\n","import gHelp from \"./util/graphHelpers\";\nimport help from \"./util/genericHelpers\";\nimport GraphState from \"./graphState\";\nimport { FlowResult, MSTResult, ShortestPathResult } from \"./GraphAlgorithms\";\n//@ts-ignore\nimport Worker from \"worker-loader!./workers/GraphAlgorithmWorker\";\nimport NodeImmut from \"./classes/GraphImmut/NodeImmut\";\nimport EdgeImmut from \"./classes/GraphImmut/EdgeImmut\";\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport * as languages from \"./languages\";\n\ninterface AlgorithmI {\n    name: string;\n    directional?: boolean;\n    weighted?: boolean;\n    applyFunc: () => any;\n    display: boolean;\n}\n\nconst makeAndPrintShortestPath = (title: string, fn: string, weighted: boolean): void => {\n    const myName = languages.current.ShortestPath;\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const source = GraphState.nodeLabelToID(values[0]);\n            const sink = GraphState.nodeLabelToID(values[1]);\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                if (a === false) {\n                    if (fn.includes(\"dijkstra\")) {\n                        help.showSimpleModal(\n                            languages.current.DijkstraError,\n                            languages.current.DijkstraErrorHTML\n                        );\n                    } else if (fn.includes(\"bellman\")) {\n                        help.showSimpleModal(\n                            languages.current.BellmanFordError,\n                            languages.current.BellmanFordErrorHTML\n                        );\n                    }\n                    return;\n                }\n\n                a = a as ShortestPathResult;\n\n                let p = `<h3>${title}</h3><hr>${help.stringReplacement(languages.current.NoPathFromAToB,\n                    help.htmlEncode(source.toString()), help.htmlEncode(sink.toString()))}`;\n\n                if (a.pathExists) {\n                    p = help.stringReplacement(languages.current.ShortestPathFromAToB, title,\n                        GraphState.nodeIDToLabel(source), GraphState.nodeIDToLabel(sink), a.distance);\n                    if (weighted) {\n                        p += `\\n${help.stringReplacement(languages.current.WithWeightedCost, a.cost)}`;\n                    }\n                    p += \"\\n\\n\" + languages.current.UsingPath;\n\n                    p = help.htmlEncode(p);\n                    let graph = GraphState.getGraphData(GraphState.graph, false, true);\n                    let G = new GraphImmut(graph.nodes, graph.edges, graph.directed, graph.weighted);\n                    a.path.forEach((v: number, i: number) => {\n                        p += `${help.htmlEncode(GraphState.nodeIDToLabel(v))} &rarr; `;\n                        if (i > 0) {\n                            G = G.editEdge(a.path[i - 1], v, null, null, \"#FF0000\") as GraphImmut;\n                        }\n                    });\n                    GraphState.graph = G;\n                    window.main.setData(GraphState.getGraphData(G), false, false, false);\n                    p = p.slice(0, -8);\n                    p = `<h3>${title}</h3><hr>${p}`;\n                }\n\n                help.printout(p);\n            });\n            w.send({\n                type: fn,\n                args: [source, sink],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        },\n        title,\n        languages.current.Go,\n        languages.current.Cancel,\n        [\n            {\n                label: languages.current.StartNode,\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            },\n            {\n                label: languages.current.EndNode,\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            }\n        ],\n        ($modal) => {\n            UIInteractions.isRunning[myName] = false;\n            $modal.modal(\"hide\");\n        }\n    );\n};\n\nconst makeAndPrintComponents = async (stronglyConnected: boolean): Promise<void> => {\n    let a = null;\n    let cc = languages.current.ConnectedComponents;\n    let componentKey = \"connectedComponents\";\n\n    if (stronglyConnected) {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        cc = languages.current.StronglyConnectedComponents;\n        componentKey = \"stronglyConnectedComponents\";\n    } else {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n    }\n\n    if (UIInteractions.isRunning[cc]) {\n        UIInteractions.printAlreadyRunning(cc);\n        return Promise.reject(languages.current.TaskAlreadyRunning);\n    }\n    UIInteractions.isRunning[cc] = true;\n\n    const iStartedProgress = UIInteractions.startLoadingAnimation();\n    const w = UIInteractions.getWorkerIfPossible(e => {\n        a = e.data;\n        w.cleanup();\n\n        GraphState.graphProperties[cc] = a.count;\n        GraphState.setUpToDate(true, [cc, componentKey]);\n        GraphState.state[componentKey] = a.components;\n\n        const components = help.flatten(a.components);\n        let p = help.stringReplacement(languages.current.NumberOfConnectedComponents, cc, a.count);\n        p += \"\\n\\n\";\n\n        components.forEach((v, i) => {\n            p += help.stringReplacement(languages.current.VertexIsInConnectedComponentNumber, GraphState.nodeIDToLabel(i), v + \"\") + \"\\n\";\n        });\n\n        p += `\\n${JSON.stringify(help.rotate(a.components), null, 4)}\\n\\n`;\n        p = `<h3>${cc}</h3><hr>${help.htmlEncode(p)}`;\n\n        if (iStartedProgress) {\n            UIInteractions.stopLoadingAnimation();\n        }\n        UIInteractions.isRunning[cc] = false;\n\n        help.printout(p);\n    });\n    w.send({\n        type: componentKey,\n        args: [],\n        graph: window.main.graphState.getGraphData(),\n        convertToGraphImmut: true\n    });\n};\n\nclass WorkerProxy {\n    private readonly worker: Worker;\n    private readonly id: number;\n    private readonly listener: (e: { data: any }) => any;\n\n    constructor(id: number, w: Worker, listener: ((e: { data: any }) => any)) {\n        this.id = id;\n        this.worker = w;\n        this.listener = listener;\n        w.postMessage({ type: \"id\", id });\n        w.onmessage = (e: MessageEvent) => {\n            this.listener({ data: e.data.data });\n        };\n    }\n\n    public send(data: any) {\n        this.worker.postMessage(data);\n    }\n\n    public cleanup() {\n        this.worker.terminate();\n        GraphState.workerPool[this.id] = null;\n    }\n}\n\nexport default class UIInteractions {\n    public static isRunning: { [index: string]: boolean } = {};\n    static getAlgorithms(): AlgorithmI[] {\n        return [\n            {\n                name: languages.current.GraphColoring,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintGraphColoring,\n                display: true\n            },\n            {\n                name: languages.current.ConnectedComponents,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintComponents(false);\n                },\n                display: true\n            },\n            {\n                name: languages.current.StronglyConnectedComponents,\n                directional: true,\n                display: true,\n                applyFunc: () => {\n                    makeAndPrintComponents(true);\n                }\n            },\n            {\n                name: languages.current.BFS,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.BFS, \"breadthFirstSearch\", false);\n                },\n                display: true\n            },\n            {\n                name: languages.current.Dijkstra,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.Dijkstra, \"dijkstraSearch\", true);\n                },\n                display: true\n            },\n            {\n                name: languages.current.BellmanFord,\n                weighted: true,\n                directional: true,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.BellmanFord, \"bellmanFord\", true);\n                },\n                display: true\n            },\n            {\n                name: languages.current.FordFulkerson,\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintFFMCMF,\n                display: true\n            },\n            {\n                name: languages.current.KruskalMST,\n                weighted: true,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintKruskal,\n                display: true\n            },\n            {\n                name: languages.current.Cyclic,\n                applyFunc: UIInteractions.makeAndPrintIsCyclic,\n                directional: true,\n                display: true\n            },\n            {\n                name: languages.current.TopoSort,\n                applyFunc: UIInteractions.makeAndPrintTopologicalSort,\n                directional: true,\n                display: true\n            },\n            {\n                name: languages.current.Eulerian,\n                directional: false,\n                display: false,\n                applyFunc: null\n            },\n            {\n                name: languages.current.Eulerian,\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintDirectionalEulerian\n            }\n        ] as AlgorithmI[];\n    }\n\n    static registerListeners(): void {\n        const makeSimpleClickListener = (selector: string, fn: () => any) => {\n            document.querySelector(selector)!.addEventListener(\"click\", e => {\n                e.preventDefault();\n                fn();\n            });\n        };\n\n        makeSimpleClickListener(\"#print-help-link\", UIInteractions.printHelp);\n        makeSimpleClickListener(\"#graph-options-link\", UIInteractions.printOptions);\n        makeSimpleClickListener(\"#load-petersen-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            window.main.setData(predefined.Petersen(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-konigsberg-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            window.main.setData(predefined.Konigsberg(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-complete-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Complete();\n        });\n        makeSimpleClickListener(\"#load-hypercube-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Hypercube();\n        });\n        makeSimpleClickListener(\"#load-custom-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Custom();\n        });\n        makeSimpleClickListener(\"#undo-link\", window.main.undo);\n        makeSimpleClickListener(\"#redo-link\", window.main.redo);\n        makeSimpleClickListener(\"#calculate-all-properties-link\", async () => {\n            return GraphState.makeAndPrintProperties(true);\n        });\n        makeSimpleClickListener(\"#new-graph-layout-link\", window.main.shuffleNetworkLayout);\n        makeSimpleClickListener(\"#import-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportFileModal();\n        });\n        makeSimpleClickListener(\"#import-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportTextModal();\n        });\n        makeSimpleClickListener(\"#export-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportFileModal();\n        });\n        makeSimpleClickListener(\"#export-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportTextModal();\n        });\n        (document.querySelector(\"#fileDropdown\") as HTMLAnchorElement).innerText = languages.current.File;\n        (document.querySelector(\"#import-file-link\") as HTMLAnchorElement).innerText = languages.current.ImportFile;\n        (document.querySelector(\"#import-text-link\") as HTMLAnchorElement).innerText = languages.current.ImportText;\n        (document.querySelector(\"#export-file-link\") as HTMLAnchorElement).innerText = languages.current.ExportFile;\n        (document.querySelector(\"#export-text-link\") as HTMLAnchorElement).innerText = languages.current.ExportText;\n\n        (document.querySelector(\"#calculate-all-properties-link\") as HTMLAnchorElement).innerText = languages.current.CalculateAllProperties;\n        (document.querySelector(\"#new-graph-layout-link\") as HTMLAnchorElement).innerText = languages.current.NewGraphLayout;\n        (document.querySelector(\"#graph-options-link\") as HTMLAnchorElement).innerText = languages.current.GraphOptions;\n        (document.querySelector(\"#print-help-link\") as HTMLAnchorElement).innerText = languages.current.Help;\n\n        (document.querySelector(\"#example-graphs-label\") as HTMLHeadingElement).innerText = languages.current.ExampleGraphs;\n        (document.querySelector(\"#load-petersen-link\") as HTMLAnchorElement).innerText = languages.current.LoadPetersen;\n        (document.querySelector(\"#load-konigsberg-link\") as HTMLAnchorElement).innerText = languages.current.LoadKonigsberg;\n        (document.querySelector(\"#load-complete-link\") as HTMLAnchorElement).innerText = languages.current.LoadComplete;\n        (document.querySelector(\"#load-hypercube-link\") as HTMLAnchorElement).innerText = languages.current.LoadHypercube;\n        (document.querySelector(\"#load-custom-link\") as HTMLAnchorElement).innerText = languages.current.LoadCustom;\n\n        (document.querySelector(\"#algorithms-label\") as HTMLHeadElement).innerText = languages.current.Algorithms;\n\n        (document.querySelector(\"#graph-properties-label\") as HTMLHeadElement).innerText = languages.current.GraphProperties;\n        (document.querySelector(\"#results-label\") as HTMLHeadElement).innerText = languages.current.Results;\n    }\n\n    static printHelp(): void {\n        help.showSimpleModal(\n            languages.current.Help,\n            languages.current.IssuesHTML\n        );\n    }\n\n    static printOptions(): void {\n        help.showFormModal(\n            ($modal, vals) => {\n                $modal.modal(\"hide\");\n                if (window.settings.getOption(\"nodePhysics\") !== vals[0]) {\n                    window.settings.changeOption(\"nodePhysics\", vals[0]); // Physics\n                }\n                if (window.settings.getOption(\"direction\") !== vals[1]) {\n                    window.settings.changeOption(\"direction\", vals[1]);\n                    let G = GraphState.graph;\n                    G = vals[1] ? G.asDirected(true) : G.asUndirected();\n                    // Clear node coloring because graph color doesn't apply to directed graphs\n                    window.main.setData(GraphState.getGraphData(G, true));\n                }\n                if (window.settings.getOption(\"weights\") !== vals[2]) {\n                    window.settings.changeOption(\"weights\", vals[2]);\n                    let G = GraphState.graph;\n                    G = vals[2] ? G.asWeighted() : G.asUnweighted();\n                    window.main.setData(GraphState.getGraphData(G));\n                }\n                if (window.settings.getOption(\"customColors\") !== vals[3]) {\n                    window.settings.changeOption(\"customColors\", vals[3]);\n                }\n            },\n            languages.current.Options,\n            languages.current.Save,\n            languages.current.Cancel,\n            [\n                {\n                    label: languages.current.GraphPhysics,\n                    initialValue: window.settings.getOption(\"nodePhysics\"),\n                    type: \"checkbox\"\n                },\n                {\n                    label: languages.current.DiGraph,\n                    initialValue: window.settings.getOption(\"direction\"),\n                    type: \"checkbox\"\n                },\n                {\n                    label: languages.current.WeightedGraph,\n                    initialValue: window.settings.getOption(\"weights\"),\n                    type: \"checkbox\"\n                },\n                {\n                    label: languages.current.CustomNodeColors,\n                    initialValue: window.settings.getOption(\"customColors\"),\n                    type: \"checkbox\"\n                }\n            ],\n            null\n        );\n    }\n\n    static terminateAllWebWorkers(): void {\n        for (const v of GraphState.workerPool) {\n            if (v !== null && v instanceof window.Worker) {\n                v.terminate();\n            }\n        }\n        // Cleanup state\n        GraphState.workerPool = [];\n        UIInteractions.stopLoadingAnimation();\n        UIInteractions.isRunning = {};\n    }\n\n    static getWorkerIfPossible(onmessage: (d: { data: any }) => any): WorkerProxy {\n        let nextIndex = GraphState.workerPool.findIndex(v => {\n            return v === null || typeof v === \"undefined\";\n        });\n        if (nextIndex === -1) {\n            nextIndex = GraphState.workerPool.length;\n        }\n\n        const w = new Worker();\n        GraphState.workerPool[nextIndex] = w;\n        return new WorkerProxy(nextIndex, w, onmessage);\n    }\n\n    static startLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"flex\") {\n            prog.style.display = \"flex\";\n            return true;\n        }\n        return false;\n    }\n\n    static stopLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"none\") {\n            prog.style.display = \"none\";\n        }\n    }\n\n    static printAlreadyRunning(name?: string) {\n        let n = languages.current.ThisTask;\n        if (name) {\n            n = name;\n        }\n        help.showSimpleModal(\n            languages.current.TaskAlreadyRunning,\n            \"<p>\" + help.stringReplacement(languages.current.TaskAlreadyRunningBody, n) + \"</p>\"\n        );\n    }\n\n    static makeAndPrintGraphColoring(): Promise<void> {\n        const myName = languages.current.GraphColoring;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            // Use cached responses when able\n            let a = {\n                chromaticNumber: (await GraphState.getProperty(\"Chromatic Number\")) as number,\n                colors: GraphState.state.graphColoring as {}\n            };\n\n            const printGC = () => {\n                GraphState.graphProperties[\"Chromatic Number\"] = a.chromaticNumber;\n                GraphState.setUpToDate(true, [\"Chromatic Number\", \"graphColoring\"]);\n                (GraphState.state.graphColoring as {}) = a.colors;\n\n                const colors = help.flatten(a.colors);\n                let p = help.stringReplacement(languages.current.NumberOfVertices, colors.length + \"\");\n                p += \"\\n\" + help.stringReplacement(languages.current.ChromaticNumberIs, a.chromaticNumber + \"\");\n                p += \"\\n\\n\";\n\n                colors.forEach((v, i) => {\n                    p += help.stringReplacement(languages.current.VertexGetsColor, GraphState.nodeIDToLabel(i), v + \"\") + \"\\n\";\n                });\n\n                p += `\\n${JSON.stringify(help.rotate(a.colors), null, 4)}\\n\\n`;\n\n                p = `<h3>${languages.current.GraphColoringTitle}</h3><hr>${help.htmlEncode(p)}`;\n                p += `<br/><button class='btn btn-primary' onclick='main.applyColors()'>${languages.current.ReColor}</button>`;\n\n                help.printout(p);\n                window.main.applyColors();\n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            if (!(a.chromaticNumber !== null && (await GraphState.getProperty(\"graphColoring\")) !== null)) {\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    printGC();\n                    w.cleanup();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    UIInteractions.isRunning[myName] = false;\n                    resolve(e.data);\n                });\n                w.send({\n                    type: \"colorNetwork\",\n                    args: [],\n                    graph: window.main.graphState.getGraphData(),\n                    convertToGraphImmut: true\n                });\n            } else {\n                printGC();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n            }\n        });\n    }\n\n    static makeAndPrintDirectionalEulerian(): Promise<void> {\n        const myName = languages.current.Eulerian;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (!window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n\n            const scc = await GraphState.getProperty(\"stronglyConnectedComponents\", true);\n\n            w.send({\n                type: \"directionalEulerian\",\n                args: [gHelp.findVertexDegreesDirectional(GraphState.graph.getFullAdjacency()), scc]\n            });\n        });\n    }\n\n    static makeAndPrintEulerian(ignoreDuplicate = false): Promise<void> {\n        const myName = languages.current.Eulerian;\n        if (UIInteractions.isRunning[myName]) {\n            if (ignoreDuplicate) {\n                return Promise.resolve();\n            }\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve(UIInteractions.makeAndPrintDirectionalEulerian());\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const cc = await GraphState.getProperty(\"connectedComponents\", true);\n\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                w.cleanup();\n                resolve(e.data);\n            });\n            w.send({\n                type: \"hasEulerianCircuit\",\n                args: [GraphState.graph.getAllOutDegrees(), cc]\n            });\n        });\n    }\n\n    static makeAndPrintFFMCMF(): void {\n        if (!window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n        const myName = languages.current.FordFulkerson;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        help.showFormModal(\n            async ($modal, values) => {\n                $modal.modal(\"hide\");\n\n                const source = GraphState.nodeLabelToID(values[0]);\n                const sink = GraphState.nodeLabelToID(values[1]);\n\n                let a: boolean | FlowResult | null = null;\n\n                const cb = () => {\n                    let p = `<h3>${languages.current.FordFulkerson}</h3><hr>${help.stringReplacement(languages.current.NoPathFromAToB,\n                        help.htmlEncode(GraphState.nodeIDToLabel(source)), help.htmlEncode(GraphState.nodeIDToLabel(sink)))}`;\n\n                    if (a === false) {\n                        help.printout(p);\n                        return;\n                    }\n                    a = a as { maxFlow: number; flowPath: any[] };\n\n                    p = `${languages.current.FordFulkersonMaxFlowMinCut} ${help.stringReplacement(languages.current.MaxFlowFromAToB,\n                        GraphState.nodeIDToLabel(source), GraphState.nodeIDToLabel(sink), a.maxFlow + \"\")}`;\n                    p += `\\n\\n${languages.current.UsingCapacities}\\n\\n`;\n                    p = help.htmlEncode(p);\n                    a.flowPath.forEach(v => {\n                        p += help.stringReplacement(languages.current.FlowWithCapacity, GraphState.nodeIDToLabel(v.from),\n                            GraphState.nodeIDToLabel(v.to), v.flow + \"\", v.capacity + \"\");\n                        p += \"\\n\";\n                    });\n                    p = p.trim();\n                    p = `<h3>${languages.current.FordFulkersonMaxFlowMinCut}</h3><hr>` + p;\n\n                    help.printout(p);\n                };\n\n                const iStartedProgress = UIInteractions.startLoadingAnimation();\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    UIInteractions.isRunning[myName] = false;\n                    cb();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    w.cleanup();\n                });\n                w.send({\n                    type: \"fordFulkerson\",\n                    args: [source, sink],\n                    convertToGraphImmut: true,\n                    graph: window.main.graphState.getGraphData()\n                });\n            },\n            languages.current.FordFulkersonMaxFlowMinCut,\n            languages.current.Go,\n            languages.current.Cancel,\n            [\n                {\n                    label: languages.current.SourceNode,\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                },\n                {\n                    label: languages.current.SinkNode,\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                }\n            ],\n            ($modal) => {\n                UIInteractions.isRunning[myName] = false;\n                $modal.modal(\"hide\");\n            }\n        );\n    }\n\n    static makeAndPrintKruskal(): void {\n        if (window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n\n        const myName = languages.current.KruskalMST;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: MSTResult = e.data;\n            w.cleanup();\n\n            let p = help.stringReplacement(languages.current.KruskalMSTTotalWeight, a.totalWeight + \"\");\n            p += `\\n\\n${languages.current.UsingEdges}\\n\\n`;\n            p = help.htmlEncode(p);\n            a.mst.forEach(v => {\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getFrom())}&rarr;`;\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getTo())}\\n`;\n            });\n            p = p.trim();\n            p = `<h3>${languages.current.KruskalMST}</h3><hr>${p}`;\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"kruskal\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static makeAndPrintIsCyclic(): Promise<void> {\n        if (!window.settings.getOption(\"direction\")) {\n            return Promise.resolve();\n        }\n\n        const myName = languages.current.Cyclic;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(resolve => {\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.cyclic = e.data;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve();\n            });\n            w.send({\n                type: \"isGraphCyclic\",\n                args: [],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        });\n    }\n\n    static makeAndPrintTopologicalSort(): void {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const myName = languages.current.TopoSort;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: boolean | NodeImmut[] = e.data;\n            w.cleanup();\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            if (a === true) {\n                GraphState.graphProperties.cyclic = true;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                help.printout(languages.current.TopoSortErrorHTML);\n                return;\n            }\n\n            let p = languages.current.TopoSort + \":\\n\\n\";\n            p = help.htmlEncode(p);\n            (a as any[]).forEach(v => {\n                p += `${GraphState.nodeIDToLabel(v.id)}, `;\n            });\n            p = p.slice(0, -2);\n            p = `<h3>${languages.current.TopoSort}</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"topologicalSort\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static printGraphAlgorithms(): void {\n        const $div = document.getElementById(\"algorithms-pane\")!;\n        $div.innerHTML = \"\";\n        const directional = window.settings.getOption(\"direction\");\n        const weighted = window.settings.getOption(\"weights\");\n\n        const addAlgoToPane = (alg: AlgorithmI) => {\n            const navlink = document.createElement(\"a\");\n            navlink.classList.add(\"nav-link\");\n            navlink.setAttribute(\"href\", \"#\");\n            navlink.innerText = alg.name;\n            navlink.addEventListener(\"click\", e => {\n                e.preventDefault();\n                alg.applyFunc();\n            });\n\n            $div.appendChild(navlink);\n        };\n\n        const a = UIInteractions.getAlgorithms();\n        a.forEach(alg => {\n            if (!alg.display) {\n                return;\n            }\n            if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            } else if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n        });\n    }\n}\n","\"use strict\";\n\nimport { DataSet } from 'vis-data';\nimport { Node, Edge } from 'vis-network';\nimport help from './util/genericHelpers';\nimport GraphImmut from './classes/GraphImmut/GraphImmut';\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport NodeImmut, { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\n\ninterface UpToDateProperties {\n    name: string;\n    upToDate: boolean;\n    type: string;\n    always?: boolean;\n    applyFunc?: (ignoreDuplicate?: boolean) => any;\n    [index: string]: undefined | string | boolean | ((ignoreDuplicate?: boolean) => any)\n}\n\ninterface GraphProperties {\n    vertices: number;\n    edges: number;\n    eulerian: boolean;\n    \"Chromatic Number\": number | null;\n    \"Connected Components\": number | null;\n    \"Strongly Connected Components\": number | null;\n    cyclic: boolean;\n\n    [index: string]: boolean | number | null;\n}\n\ninterface GraphStateData {\n    stronglyConnectedComponents: null | { [key: number]: number };\n    connectedComponents: null | { [key: number]: number };\n    graphColoring: null | number[];\n\n    [index: string]: null | number[] | { [key: number]: number };\n}\n\nexport interface AddNodeI {\n    id?: number\n    label: string;\n    x: number;\n    y: number;\n    color?: string;\n}\n\nexport interface GraphStateHistory {\n    upToDate: UpToDateProperties[];\n    state: GraphStateData;\n    graph: GraphImmut;\n    graphProperties: GraphProperties;\n    [index: string]: UpToDateProperties[] | GraphStateData | GraphImmut | GraphProperties;\n}\n\nconst getInt = (v: string | number): number => {\n    if (typeof v === 'number') {\n        return v;\n    }\n    return parseInt(v);\n};\n\nexport default class GraphState {\n    public static workerPool: (Worker | null)[] = [];\n    public static backHistory: GraphStateHistory[] = [];\n    public static forwardHistory: GraphStateHistory[] = [];\n    public static maxHistory = 10;\n    public static upToDate: UpToDateProperties[] = [\n        {\n            name: \"Chromatic Number\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                return window.ui.makeAndPrintGraphColoring();\n            }\n        },\n        {\n            name: \"graphColoring\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                return window.ui.makeAndPrintGraphColoring();\n            }\n        },\n        { name: \"vertices\", upToDate: true, always: true, type: \"property\" },\n        { name: \"edges\", upToDate: true, always: true, type: \"property\" },\n        {\n            name: \"eulerian\", upToDate: false, type: \"property\",\n            applyFunc: (i) => {\n                return window.ui.makeAndPrintEulerian(i);\n            }\n        },\n        {\n            name: \"Connected Components\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"connectedComponents\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"Strongly Connected Components\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"stronglyConnectedComponents\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"cyclic\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                return window.ui.makeAndPrintIsCyclic();\n            }\n        },\n    ];\n    public static state: GraphStateData = {\n        stronglyConnectedComponents: null,\n        connectedComponents: null,\n        graphColoring: null,\n    };\n    public static graph: GraphImmut;\n    public static graphProperties: GraphProperties = {\n        vertices: 0,\n        edges: 0,\n        eulerian: false,\n        \"Chromatic Number\": null,\n        \"Connected Components\": null,\n        \"Strongly Connected Components\": null,\n        cyclic: false,\n    };\n\n    static setUpToDate(value = false, listOptions?: string[]) {\n        const all = listOptions === null || typeof listOptions === \"undefined\";\n        let property = false;\n        GraphState.upToDate.forEach((v) => {\n            if ((!(\"always\" in v) || !v.always) && (all || listOptions!.indexOf(v.name) > -1)) {\n                v.upToDate = value;\n                if (v.type === \"property\") {\n                    property = true;\n                }\n            }\n        });\n        if (property) {\n            GraphState.makeAndPrintProperties();\n        }\n    }\n\n    static async getProperty(property: keyof GraphProperties, updateIfNotUpdated = false, ignoreDuplicate = false): Promise<any> {\n        const a = GraphState.upToDate.find((v) => {\n            return (\"name\" in v && v.name === property);\n        })!;\n        if (!a.upToDate) {\n            if (\"applyFunc\" in a && typeof a.applyFunc === \"function\" && updateIfNotUpdated) {\n                await a.applyFunc(ignoreDuplicate);\n            }\n            else {\n                return null;\n            }\n        }\n        if (a.type === \"state\") {\n            return Promise.resolve(GraphState.state[property]);\n        }\n        return Promise.resolve(GraphState.graphProperties[property]);\n    }\n\n    static async makeAndPrintProperties(recalcLong = false) {\n        const directional = window.settings.getOption(\"direction\");\n\n        GraphState.graphProperties.vertices = GraphState.graph.getNumberOfNodes();\n        GraphState.graphProperties.edges = GraphState.graph.getNumberOfEdges();\n\n        if (!directional) {\n            await GraphState.getProperty(\"eulerian\", true, true);\n        }\n\n        const p = Object.keys(GraphState.graphProperties);\n        if (recalcLong) {\n            p.forEach(async (v) => {\n                await GraphState.getProperty(v, true);\n            });\n        }\n\n        const printableProperties: any = {};\n        await Promise.all(p.map(async (v) => {\n            printableProperties[v] = await GraphState.getProperty(v);\n        }));\n\n        GraphState.printGraphProperties(printableProperties);\n    }\n\n    static printGraphProperties(properties: any) {\n        let p = \"\";\n        Object.keys(properties).forEach((k) => {\n            if (properties[k] !== null) {\n                p += `${help.toTitleCase(k)}: ${properties[k]}\\n`;\n            }\n        });\n        p = p.trim();\n        p = help.htmlEncode(p);\n        document.getElementById(\"graphProps\")!.innerHTML = `<p class='nav-link'>${p}</p>`;\n    }\n\n    private static updateGraph(graph = GraphState.graph) {\n        let nodes = graph.getAllNodes() as NodeImmutPlain[];\n        let edges = graph.getAllEdges() as EdgeImmutPlain[];\n        if (!window.settings.getOption(\"customColors\")) {\n            nodes = GraphState.clearColorFromNodes(nodes);\n            edges = GraphState.clearColorFromEdges(edges);\n        }\n        window.main.setData({ nodes, edges });\n    }\n\n    static addEdge(from: number | string, to: number | string, weight = 0, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        graph = graph.addEdge(edgeFrom, edgeTo, weight);\n        this.updateGraph(graph);\n    }\n\n    static addNode(data: AddNodeI, graph = GraphState.graph) {\n        graph = graph.addNode({ label: data.label, x: data.x, y: data.y, color: data.color });\n        this.updateGraph(graph);\n    }\n\n    static editNode(id: number | string, label: string, color?: string, graph = GraphState.graph) {\n        const iId = getInt(id);\n        graph = graph.editNode(iId, { label, color });\n        window.main.setData(GraphState.getGraphData(graph), false, false);\n    }\n\n    static editEdge(from: number | string, to: number | string,\n        newWeight: number, oldWeight: number, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        const newGraph = graph.editEdge(edgeFrom, edgeTo, newWeight, oldWeight);\n        if (newGraph instanceof GraphImmut) {\n            window.main.setData(GraphState.getGraphData(newGraph), false, false);\n        }\n    }\n\n    static deleteEdge(from: number | string, to: number | string, weight: (undefined | null | number) = null, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        graph = graph.deleteEdge(edgeFrom, edgeTo, weight, false);\n        this.updateGraph(graph);\n    }\n\n    static deleteNode(id: number | string, graph = GraphState.graph) {\n        const iId = getInt(id);\n        const newGraph = graph.deleteNode(iId);\n        if (newGraph instanceof GraphImmut) {\n            this.updateGraph(newGraph);\n        }\n    }\n\n    static clearColorFromNodes(nodes: NodeImmutPlain[]): NodeImmutPlain[] {\n        nodes.forEach((v) => {\n            v.color = null;\n        });\n        return nodes;\n    }\n\n    static clearColorFromEdges(edges: EdgeImmutPlain[]): EdgeImmutPlain[] {\n        edges.forEach((v) => {\n            delete v.color;\n        });\n        return edges;\n    }\n\n    static nodeIDToLabel(id: number, graph = GraphState.graph): string {\n        const n = graph.getNode(id, true);\n        if (n !== false && n !== null && n instanceof NodeImmut && n.getLabel().trim().length > 0) {\n            return n.getLabel().trim();\n        }\n\n        return id.toString();\n    }\n\n    // Preferentially search by ID, label, and case-insensitive label\n    static nodeLabelToID(label: string, graph = GraphState.graph) {\n        let n = graph.getAllNodes(true) as NodeImmut[];\n        n = n.filter((node) => {\n            return node.getLabel().toLowerCase() === label.toLowerCase() || node.getID().toString() === label;\n        });\n\n        if (n.length === 0) {\n            return -1;\n        }\n        else if (n.length === 1) {\n            return n[0].getID();\n        }\n\n        let rID = -1;\n        let found = false;\n\n        n.forEach((node) => {\n            if (!found && node.getID().toString() === label) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        if (found) {\n            return rID;\n        }\n\n        n.forEach((node) => {\n            if (!found && node.getLabel() === label) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        if (found) {\n            return rID;\n        }\n\n        n.forEach((node) => {\n            if (!found && node.getLabel().toLowerCase() === label.toLowerCase()) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        return rID;\n    }\n\n    // Return graph as a Vis compatible dataset\n    static getGraphAsDataSet(graph: GraphImmut): { nodes: DataSet<Node>; edges: DataSet<Edge> } {\n        const d = GraphState.getGraphData(graph);\n        if (graph.isWeighted()) {\n            d.edges.forEach((e) => {\n                e.label = e.weight.toString();\n            });\n        }\n        d.edges.forEach((e) => {\n            if ('color' in e) {\n                e.color = { color: e.color };\n            }\n        });\n\n        return { nodes: new DataSet(d.nodes as Node[]), edges: new DataSet(d.edges as Edge[]) };\n    }\n\n    static setLocations(locations: { [key: string]: { x: number; y: number } }, graph = GraphState.graph): GraphImmut {\n        let newNodes = graph.getAllNodesAsImmutableList();\n        Object.keys(locations).forEach((i) => {\n            const v = locations[i];\n            const node = newNodes.get(parseInt(i))!;\n            // Only change when there is actually a new position\n            if (node.getAttribute(\"x\") !== v.x || node.getAttribute(\"y\") !== v.y) {\n                // Batch up all changes that we'll be making\n                newNodes = newNodes.set(parseInt(i), node.editNode(node.getLabel(), { x: v.x, y: v.y }));\n            }\n        });\n\n        return new GraphImmut(newNodes, graph.getAllEdgesAsImmutableList(), graph.isDirected(), graph.isWeighted());\n    }\n\n    static getGraphData(graph = GraphState.graph, clearNodeColors = false, clearEdgeColors = false): GraphPlain {\n        const nodes = graph.getAllNodes() as NodeImmutPlain[];\n        const edges = graph.getAllEdges() as EdgeImmutPlain[];\n        return {\n            nodes: clearNodeColors ? GraphState.clearColorFromNodes(nodes) : nodes,\n            edges: clearEdgeColors ? GraphState.clearColorFromEdges(edges) : edges,\n            directed: graph.isDirected(),\n            weighted: graph.isWeighted()\n        };\n    }\n}\n","\"use strict\";\n\nimport help, { ModalFormRow } from './util/genericHelpers';\nimport randomColor from 'randomcolor';\nimport GraphState, { AddNodeI, GraphStateHistory } from './graphState';\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport { Network, Node as VisNode, Edge } from \"vis-network\";\nimport { DataSet } from \"vis-data\";\nimport * as languages from \"./languages\";\n\n\nexport interface MainI {\n    graphState: typeof GraphState;\n    container: HTMLElement;\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback: Function) => void;\n    visOptions: {\n        interaction: { hover: boolean };\n        manipulation: {\n            addNode: (data: AddNodeI, callback: Function) => void;\n            editNode: (data: AddNodeI, callback: Function) => void;\n            addEdge: (data: VisEdgeInternal, callback?: Function) => void;\n            editEdge: (data: VisEdgeInternal, callback: Function) => void;\n            deleteEdge: (data: { edges: string[] }, callback?: Function) => void;\n            deleteNode: (data: { nodes: string[] }, callback: Function) => void\n        },\n        locale?: string,\n        locales?: any,\n    };\n    cancelEdit: (callback: Function) => void;\n    saveData: (data: any, callback: Function, operation: string, label: string, color: string) => Promise<void>;\n    nodeLabelIDValidator: (v: string) => (boolean | string);\n    applyColors: () => Promise<void>;\n    setData: (data: GraphPlain, recalcProps?: boolean, graphChanged?: boolean, rearrangeGraph?: boolean) => void;\n    saveState: () => void;\n    getStateForSaving: () => GraphStateHistory;\n    undo: () => void;\n    redo: () => void;\n    applyState: (undo?: boolean, newState?: any) => void;\n    saveStateLocalStorage: () => void;\n    shuffleNetworkLayout: () => void;\n    randomizeNetworkLayoutSeed: (network: VisNetworkInternals) => void;\n    addNetworkListeners: (network: Network) => void\n}\n\ninterface VisNetworkEvent {\n    edges: DataSet<Edge>;\n    nodes: DataSet<VisNode>;\n}\n\ninterface VisNetworkInternals extends Network {\n    layoutEngine: {\n        randomSeed: number,\n        initialRandomSeed: number\n    }\n}\n\ninterface VisEditEdgeInternal {\n    from: { id: string | number };\n    to: { id: string | number };\n    label?: string\n}\n\ninterface VisEdgeInternal {\n    from: string | number;\n    to: string | number;\n    id: string;\n    label?: string\n}\n\nconst customColorPallete = {\n    \"Default\": \"DEFAULT\",\n    \"Red\": \"red\",\n    \"Maroon\": \"maroon\",\n    \"Yellow\": \"yellow\",\n    \"Olive\": \"olive\",\n    \"Lime\": \"lime\",\n    \"Green\": \"green\",\n    \"Aqua\": \"aqua\",\n    \"Teal\": \"teal\",\n    \"Blue\": \"blue\",\n    \"Navy\": \"navy\",\n    \"Fuchsia\": \"fuchsia\",\n    \"Purple\": \"purple\",\n};\n\nconst self: MainI = {\n    graphState: GraphState,\n    container: document.getElementById('network')!,\n    // Function used to overwrite the edge edit functionality when weights are active\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback) => {\n        help.showFormModal(($modal, vals) => {\n            callback(null);\n            $modal.modal(\"hide\");\n            const value = parseFloat(vals[0]);\n            GraphState.editEdge(data.from.id, data.to.id, value, parseFloat(data.label!));\n        }, languages.current.EditEdge, languages.current.Save, languages.current.Cancel, [\n            {\n                type: \"numeric\",\n                label: languages.current.WeightCapacity,\n                initialValue: parseFloat(data.label!)\n            }\n        ]);\n    },\n    visOptions: {\n        interaction: { hover: true },\n        manipulation: {\n            addNode: async (data, callback) => {\n                const customColors = window.settings.getOption(\"customColors\");\n                const options: ModalFormRow[] = [\n                    {\n                        type: \"html\",\n                        initialValue: `<p>${help.stringReplacement(languages.current.NodeId, await GraphState.getProperty(\"vertices\"))}</p>`\n                    },\n                    { type: \"text\", label: languages.current.LabelLabel, initialValue: await GraphState.getProperty(\"vertices\") },\n                ];\n                if (customColors) {\n                    options.push({ type: \"select\", label: languages.current.Color, optionText: Object.keys(customColorPallete), optionValues: Object.values(customColorPallete) });\n                }\n                const $popup = help.makeFormModal(languages.current.AddNode, languages.current.Save, languages.current.Cancel, options);\n\n                $popup.on(\"click\", \".btn-success\", () => {\n                    $popup.modal(\"hide\");\n                    self.saveData(data, callback, \"add\", $popup.find(\"input\").first().val() as string, $popup.find(\"select\").first().val() as string);\n                }).on(\"click\", \".btn-cancel\", () => {\n                    $popup.modal(\"hide\");\n                    self.cancelEdit(callback);\n                }).on(\"hidden.bs.modal\", () => {\n                    $popup.remove();\n                    self.cancelEdit(callback);\n                }).modal(\"show\");\n            },\n            editNode: (data, callback) => {\n                const customColors = window.settings.getOption(\"customColors\");\n                const initialColor = Object.getOwnPropertyNames(data.color).includes(\"background\") ? (data.color as any).background : \"DEFAULT\";\n\n                const options: ModalFormRow[] = [\n                    {\n                        type: \"html\",\n                        initialValue: `<p>${help.stringReplacement(languages.current.NodeId, data.id + \"\")}</p>`\n                    },\n                    { type: \"text\", label: languages.current.LabelLabel, initialValue: data.label },\n                ];\n                if (customColors) {\n                    options.push({ type: \"select\", label: languages.current.Color, optionText: Object.keys(customColorPallete), optionValues: Object.values(customColorPallete), initialValue: initialColor });\n                }\n                const $popup = help.makeFormModal(languages.current.EditNode, languages.current.Save, languages.current.Cancel, options);\n\n                $popup.on(\"click\", \".btn-success\", () => {\n                    $popup.modal(\"hide\");\n                    self.saveData(data, callback, \"editNode\", $popup.find(\"input\").first().val() as string, $popup.find(\"select\").first().val() as string);\n                }).on(\"click\", \".btn-cancel\", () => {\n                    $popup.modal(\"hide\");\n                    self.cancelEdit(callback);\n                }).on(\"hidden.bs.modal\", () => {\n                    $popup.remove();\n                    self.cancelEdit(callback);\n                }).modal(\"show\");\n            },\n            addEdge: (data, callback) => {\n                const apply = () => {\n                    if (typeof callback === \"function\") {\n                        callback(null);\n                    }\n                    GraphState.addEdge(data.from, data.to);\n                };\n                if (data.from === data.to) {\n                    if (confirm(languages.current.ConnectNodeToItselfConfirmation)) {\n                        apply();\n                    }\n                    return;\n                }\n\n                apply();\n            },\n            editEdge: (data, callback) => {\n                callback(null);\n                self.visOptions.manipulation.deleteEdge({ edges: [data.id] });\n                self.visOptions.manipulation.addEdge(data);\n            },\n            deleteEdge: (data, callback) => {\n                if (typeof callback === \"function\") {\n                    callback(null);\n                }\n                data.edges.forEach((v: any) => {\n                    let weight = null;\n                    const edge = (window.network as any).body.data.edges.get(v);\n                    const weightFromLabel = edge.label;\n                    if (typeof weightFromLabel !== \"undefined\") {\n                        weight = parseFloat(weightFromLabel);\n                    }\n\n                    GraphState.deleteEdge(edge.from, edge.to, weight);\n                });\n            },\n            deleteNode: (data, callback) => {\n                callback(null);\n                data.nodes.forEach((v: string) => {\n                    GraphState.deleteNode(v);\n                });\n            },\n        },\n    },\n\n    cancelEdit: (callback) => {\n        if (typeof callback === \"function\") {\n            callback(null);\n        }\n    },\n\n    saveData: async (data, callback, operation, label, color) => {\n        callback(null);\n\n        data.label = label;\n        data.color = color;\n        if (color === \"DEFAULT\") {\n            data.color = undefined;\n        }\n        if (operation === \"add\") {\n            GraphState.addNode(data);\n        }\n        else if (operation === \"editNode\") {\n            GraphState.editNode(data.id, data.label, data.color);\n        }\n    },\n\n    nodeLabelIDValidator: (v) => {\n        if (GraphState.nodeLabelToID(v) > -1) {\n            return true;\n        }\n        return languages.current.InvalidLabelOrId;\n    },\n\n    applyColors: async () => {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n        const graphColors = await GraphState.getProperty(\"graphColoring\", true);\n        const chromaticNumber = await GraphState.getProperty(\"Chromatic Number\", true);\n\n        const colors = randomColor({ count: chromaticNumber, luminosity: \"light\" });\n        let G = GraphState.graph;\n        (G.getAllNodes() as NodeImmutPlain[]).forEach((v) => {\n            G = G.editNode(v.id, { color: colors[graphColors[v.id]] });\n        });\n        self.setData(GraphState.getGraphData(G), false, false);\n    },\n\n    setData: (data, recalcProps = false, graphChanged = true, rearrangeGraph = false) => {\n        // Store existing positions in the data if we're supposed to keep the layout\n        if (rearrangeGraph) {\n            data.nodes.forEach((v) => {\n                delete v.x;\n                delete v.y;\n            });\n        }\n\n        if (graphChanged) {\n            self.saveState();\n        }\n\n        if (\"directed\" in data && typeof data.directed !== \"undefined\") {\n            window.settings.changeOption(\"direction\", data.directed);\n        }\n        if (\"weighted\" in data && typeof data.weighted !== \"undefined\") {\n            window.settings.changeOption(\"weights\", data.weighted);\n        }\n        const directional = window.settings.getOption(\"direction\") as boolean;\n        const weighted = window.settings.getOption(\"weights\") as boolean;\n\n        const g = new GraphImmut(data.nodes, data.edges, directional, weighted);\n        GraphState.graph = g;\n\n        // Set a new random seed so that the layout will be different\n        self.randomizeNetworkLayoutSeed(window.network as unknown as VisNetworkInternals);\n        window.network.setData(GraphState.getGraphAsDataSet(g));\n        GraphState.graph = GraphState.setLocations(window.network.getPositions());\n\n        window.network.disableEditMode();\n        window.network.enableEditMode();\n\n        if (graphChanged) {\n            window.ui.stopLoadingAnimation();\n            window.ui.isRunning = {};\n            window.ui.terminateAllWebWorkers();\n            window.ui.printGraphAlgorithms();\n            help.printout(\"\");\n            GraphState.setUpToDate();\n            GraphState.makeAndPrintProperties(recalcProps);\n        }\n\n        self.saveStateLocalStorage();\n    },\n\n    saveState: () => {\n        if (GraphState.graph === null) {\n            return;\n        }\n\n        if (GraphState.backHistory.length >= GraphState.maxHistory) {\n            GraphState.backHistory.shift();\n        }\n\n        GraphState.backHistory.push(self.getStateForSaving());\n        GraphState.forwardHistory = [];\n        document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n    },\n\n    getStateForSaving: () => {\n        const state: any = {};\n        Object.keys(GraphState).forEach((k: string) => {\n            const v: any = (GraphState as any)[k];\n            if (typeof v !== \"function\") {\n                if (typeof v !== \"object\") {\n                    state[k] = v;\n                }\n                else {\n                    if (k === \"graph\" && v !== null) {\n                        state[k] = v;\n                    }\n                    if (!k.toLowerCase().includes(\"history\")) {\n                        state[k] = help.deepCopy(true, Array.isArray(v) ? [] : {}, v);\n                    }\n                }\n            }\n        });\n\n        return state as GraphStateHistory;\n    },\n\n    undo: () => {\n        if (GraphState.backHistory.length > 0) {\n            self.applyState(true);\n        }\n    },\n\n    redo: () => {\n        if (GraphState.forwardHistory.length > 0) {\n            self.applyState(false);\n        }\n    },\n\n    applyState: (undo = true, newState: null | GraphStateHistory = null) => {\n        const firstLoad = newState !== null;\n        const currentState = self.getStateForSaving();\n\n        if (!firstLoad) {\n            if (undo) {\n                newState = GraphState.backHistory.pop()!;\n            }\n            else {\n                newState = GraphState.forwardHistory.pop()!;\n            }\n        }\n\n        //@ts-ignore Ignore accessing private props. I do this because saving the state lost the type of the data\n        newState.graph = new GraphImmut(newState.graph.nodes, newState.graph.edges, newState.graph.directed, newState.graph.weighted);\n\n        window.settings.changeOption(\"direction\", newState!.graph.isDirected());\n        window.settings.changeOption(\"weights\", newState!.graph.isWeighted());\n\n        GraphState.graph = newState!.graph;\n\n        window.network.setData(GraphState.getGraphAsDataSet(GraphState.graph));\n        window.network.disableEditMode();\n        window.network.enableEditMode();\n\n        window.ui.printGraphAlgorithms();\n        help.printout(\"\");\n\n        Object.keys(newState!).forEach((k: string) => {\n            const v = newState![k];\n            if (typeof v !== \"object\") {\n                (GraphState as any)[k] = v;\n            }\n            else if (!k.toLowerCase().includes(\"history\") && k.toLowerCase() !== \"graph\") {\n                if (k.toLowerCase() === \"uptodate\") {\n                    Object.keys((GraphState as any)[k]).forEach((oldKey) => {\n                        (GraphState as any)[k][oldKey].upToDate = (v as any)[oldKey].upToDate;\n                    });\n                }\n                else {\n                    (GraphState as any)[k] = help.deepCopy(true, (GraphState as any)[k], v);\n                }\n            }\n        });\n\n        GraphState.makeAndPrintProperties().then(() => {\n            if (undo && !firstLoad) {\n                document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n                if (GraphState.backHistory.length === 0) {\n                    document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\n                }\n                GraphState.forwardHistory.push(currentState);\n            }\n            else if (!undo && !firstLoad) {\n                document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n                if (GraphState.forwardHistory.length === 0) {\n                    document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\n                }\n                GraphState.backHistory.push(currentState);\n            }\n\n            self.saveStateLocalStorage();\n        });\n    },\n\n    saveStateLocalStorage: () => {\n        if (window.settings.checkForLocalStorage()) {\n            localStorage.setItem(\"graphPlayground.lastState\", JSON.stringify(self.getStateForSaving()));\n        }\n    },\n\n    shuffleNetworkLayout: () => {\n        self.setData({\n            nodes: GraphState.graph.getAllNodes() as NodeImmutPlain[],\n            edges: GraphState.graph.getAllEdges() as EdgeImmutPlain[]\n        }, false, false, true);\n    },\n\n    randomizeNetworkLayoutSeed: (network) => {\n        const r = Math.round(Math.random() * 1000000);\n        network.layoutEngine.randomSeed = r;\n        network.layoutEngine.initialRandomSeed = r;\n    },\n\n    addNetworkListeners: (network) => {\n        // Enable edit node/edge when double clicking\n        network.on(\"doubleClick\", (p: VisNetworkEvent) => {\n            if (window.settings.getOption(\"weights\") && \"edges\" in p && p.edges.length === 1) {\n                network.editEdgeMode();\n            }\n            if (\"nodes\" in p && p.nodes.length === 1) {\n                lastNetworkClickEvent = null;\n                network.editNode();\n            }\n        });\n\n        // Save locations of nodes after dragging\n        network.on(\"dragEnd\", () => {\n            GraphState.graph = GraphState.setLocations(network.getPositions());\n            self.saveStateLocalStorage(); // Save the new locations as part of the state\n        });\n\n        // Delete nodes/edges when hit \"Delete\"\n        let lastNetworkClickEvent: Event | null = null;\n        network.on('click', (event) => {\n            lastNetworkClickEvent = event;\n        });\n\n        // Delete key to delete node or edge\n        document.addEventListener('keyup', (key) => {\n            if (key.key === \"Delete\" && lastNetworkClickEvent !== null) {\n                if (self.container.contains((lastNetworkClickEvent as any).event.target)) {\n                    if ((\"edges\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).edges.length === 1)\n                        || (\"nodes\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).nodes.length === 1)) {\n                        network.deleteSelected();\n                    }\n                }\n            }\n        });\n\n        // Undo/Redo keyboard commands\n        document.addEventListener(\"keydown\", (e) => {\n            if ((e.key.toLowerCase() === 'y' && e.ctrlKey) || (e.key.toLowerCase() === 'z' && e.ctrlKey && e.shiftKey)) {\n                self.redo();\n            }\n            else if (e.key.toLowerCase() === 'z' && e.ctrlKey) {\n                self.undo();\n            }\n        });\n\n        // When clicking off of the network, remove the Delete functionality\n        document.addEventListener(\"click\", (e) => {\n            if (self.container !== e.target && !self.container.contains(e.target as Node)) {\n                lastNetworkClickEvent = null;\n            }\n        });\n    },\n\n};\n\nexport default self;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \"-\" + {\"27\":\"92c3586009311542a585\",\"32\":\"f36dc9bafabe5a3b520d\",\"191\":\"192ef97088f8382ff5db\",\"202\":\"d1efa091aad30682f06f\",\"503\":\"6530393cb8040c05ad4e\",\"508\":\"0bf8d27c3b98f091d2df\",\"702\":\"57e2a8939f09fbb481ea\",\"732\":\"767edb413b2ad5db8ed3\",\"744\":\"f550a18abc265c39ae95\"}[chunkId] + \".min.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t23: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkgraphPlayground\"] = self[\"webpackChunkgraphPlayground\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [96], () => (__webpack_require__(625)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","filterExtraAttr","data","labels","Object","keys","filter","key","includes","reduce","obj","filterNodeExtraAttr","nodes","edges","directed","weighted","this","freeze","nodeMap","Error","n","newNodes","i","Math","floor","set","forEach","extraAttrs","id","label","toString","attributes","map","genericNodesToImmutNodes","numNodes","size","e","newEdges","edge","weight","from","to","parseFloat","push","genericEdgesToImmutEdges","numEdges","GraphImmut","getNode","rich","node","get","toPlain","addNode","editNode","has","getLabel","deleteNode","nodeCount","getID","getAllAttributes","getFrom","getTo","getWeight","addEdge","deleteEdge","deleteAll","foundOneEdge","editEdge","newWeight","oldWeight","color","foundFirst","index","isDirected","getAllNodes","toArray","getAllNodesAsImmutableList","getAllEdgesAsImmutableList","getAllEdges","getNumberOfNodes","getNumberOfEdges","getAllOutDegrees","degrees","_","asWeighted","asUnweighted","asDirected","doubleEdges","asUndirected","addedEdges","asChangedDirectedWeighted","G","getNodeAdjacency","adj","getFullAdjacency","areAdjacent","id1","id2","getEdgesBetween","edgeList","getMinWeightEdgeBetween","minWeight","Infinity","reduceMultiGraph","reducer","initialValue","min","multiEdges","uniques","Set","length","acc","keep","duplicateEdge","isWeighted","NodeImmut","toReturn","getAttribute","attribute","assign","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","code","ids","all","slice","t","module","exports","Languages","current","setLanguage","window","settings","getOption","EN_US","default","checkForLocalStorage","x","localStorage","setItem","removeItem","saveSettings","Settings","JSON","stringify","loadSettings","getItem","parse","setAll","network","setOptions","physics","arrows","manipulation","editWithoutDrag","main","visWeightEdgeEdit","visOptions","changeOption","option","value","defaults","nodePhysics","direction","weights","defaultCancelCb","$modal","modal","self","deepCopy","deep","clone","copy","options","name","src","copyIsArray","isPlainObject","call","proto","getPrototypeOf","Ctor","hasOwnProperty","constructor","target","arguments","Array","isArray","undefined","deepFreeze","getOwnPropertyNames","prop","isFrozen","sort","arr","compareFunction","datasetToArray","ds","r","v","keepOnlyKeys","indexOf","getFileExtension","filename","split","splice","htmlEncode","string","document","createElement","textContent","innerHTML","replace","printout","text","escape","getElementById","flatten","rotate","max","iterable","a","b","toTitleCase","str","match","toUpperCase","stringReplacement","replacements","val","replacement","showSimpleModal","title","body","showFormModal","type","makeFormModal","successText","cancelText","form","footer","f","class","formRow","basicMap","attrname","validFunc","validationFunc","generalValidator","event","valueMutator","$v","valid","removeClass","next","remove","addClass","after","append","checked","for","prepend","clickDismiss","$b","onclick","on","optionText","oText","oIndex","optionValues","selected","$footer","tabindex","role","html","find","off","last","trigger","first","successCb","cancelCb","vals","hasErrors","each","tagName","attr","files","hasClass","ui","registerListeners","locales","VisLocale","locale","Network","container","addNetworkListeners","loadDefault","s","jsonGraph","graph","applyState","predefined","setData","Petersen","EdgeImmut","findVertexDegreesDirectional","adjacencyMatrix","out","in","outV","interpolateNodesFromEdges","Worker_fn","Worker","makeAndPrintShortestPath","fn","myName","languages","ShortestPath","UIInteractions","isRunning","printAlreadyRunning","values","source","nodeLabelToID","sink","iStartedProgress","startLoadingAnimation","w","getWorkerIfPossible","cleanup","stopLoadingAnimation","p","NoPathFromAToB","pathExists","ShortestPathFromAToB","nodeIDToLabel","distance","WithWeightedCost","cost","UsingPath","getGraphData","path","DijkstraError","DijkstraErrorHTML","BellmanFordError","BellmanFordErrorHTML","send","args","convertToGraphImmut","graphState","Go","Cancel","StartNode","nodeLabelIDValidator","EndNode","makeAndPrintComponents","stronglyConnected","cc","ConnectedComponents","componentKey","StronglyConnectedComponents","reject","TaskAlreadyRunning","graphProperties","count","setUpToDate","state","components","NumberOfConnectedComponents","VertexIsInConnectedComponentNumber","listener","worker","postMessage","onmessage","terminate","workerPool","getAlgorithms","GraphColoring","directional","applyFunc","makeAndPrintGraphColoring","display","BFS","Dijkstra","BellmanFord","FordFulkerson","makeAndPrintFFMCMF","KruskalMST","makeAndPrintKruskal","Cyclic","makeAndPrintIsCyclic","TopoSort","makeAndPrintTopologicalSort","Eulerian","makeAndPrintDirectionalEulerian","makeSimpleClickListener","selector","querySelector","addEventListener","preventDefault","printHelp","printOptions","Konigsberg","Complete","Hypercube","Custom","undo","redo","makeAndPrintProperties","shuffleNetworkLayout","makeImportFileModal","makeImportTextModal","makeExportFileModal","makeExportTextModal","innerText","File","ImportFile","ImportText","ExportFile","ExportText","CalculateAllProperties","NewGraphLayout","GraphOptions","Help","ExampleGraphs","LoadPetersen","LoadKonigsberg","LoadComplete","LoadHypercube","LoadCustom","Algorithms","GraphProperties","Results","IssuesHTML","Options","Save","GraphPhysics","DiGraph","WeightedGraph","CustomNodeColors","terminateAllWebWorkers","nextIndex","findIndex","WorkerProxy","prog","style","ThisTask","TaskAlreadyRunningBody","getProperty","chromaticNumber","colors","graphColoring","printGC","NumberOfVertices","ChromaticNumberIs","VertexGetsColor","GraphColoringTitle","ReColor","applyColors","eulerian","scc","makeAndPrintEulerian","ignoreDuplicate","cb","FordFulkersonMaxFlowMinCut","MaxFlowFromAToB","maxFlow","UsingCapacities","flowPath","FlowWithCapacity","flow","capacity","trim","SourceNode","SinkNode","KruskalMSTTotalWeight","totalWeight","UsingEdges","mst","cyclic","TopoSortErrorHTML","printGraphAlgorithms","$div","addAlgoToPane","alg","navlink","classList","add","setAttribute","appendChild","getInt","parseInt","listOptions","property","GraphState","upToDate","always","updateIfNotUpdated","recalcLong","vertices","printableProperties","printGraphProperties","properties","k","updateGraph","clearColorFromNodes","clearColorFromEdges","edgeFrom","edgeTo","y","iId","newGraph","toLowerCase","rID","found","getGraphAsDataSet","d","DataSet","setLocations","locations","clearNodeColors","clearEdgeColors","backHistory","forwardHistory","maxHistory","stronglyConnectedComponents","connectedComponents","customColorPallete","callback","EditEdge","WeightCapacity","interaction","hover","customColors","NodeId","LabelLabel","Color","$popup","AddNode","saveData","cancelEdit","initialColor","background","EditNode","confirm","ConnectNodeToItselfConfirmation","weightFromLabel","operation","InvalidLabelOrId","graphColors","luminosity","recalcProps","graphChanged","rearrangeGraph","saveState","g","randomizeNetworkLayoutSeed","getPositions","disableEditMode","enableEditMode","saveStateLocalStorage","shift","getStateForSaving","getElementsByClassName","item","parentElement","newState","firstLoad","currentState","pop","oldKey","round","random","layoutEngine","randomSeed","initialRandomSeed","editEdgeMode","lastNetworkClickEvent","contains","deleteSelected","ctrlKey","shiftKey","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","m","O","result","chunkIds","priority","notFulfilled","fulfilled","j","every","getter","__esModule","mode","ns","create","def","definition","defineProperty","enumerable","chunkId","promises","u","globalThis","Function","prototype","l","url","done","script","needAttach","scripts","getElementsByTagName","charset","timeout","nc","onScriptComplete","prev","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","head","Symbol","toStringTag","nmd","paths","children","installedChunks","installedChunkData","promise","error","errorType","realSrc","message","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}
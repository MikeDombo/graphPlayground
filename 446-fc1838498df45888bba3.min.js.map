{"version":3,"file":"446-fc1838498df45888bba3.min.js","mappings":"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","sources":["webpack://graphPlayground/./src/js/GraphAlgorithms.ts","webpack://graphPlayground/./src/js/classes/SpanningTree.ts"],"sourcesContent":["\"use strict\";\n\nimport genericH from \"./util/genericHelpers\";\nimport graphH from \"./util/graphHelpers\";\nimport SpanningTree from \"./classes/SpanningTree\";\nimport EdgeImmut, { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport NodeImmut from \"./classes/GraphImmut/NodeImmut\";\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport GraphState from \"./graphState\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\n\ntype EdgeFlowProp = { from: number; to: number; capacity: number; flow: number };\nexport type MSTResult = { mst: EdgeImmutPlain[]; totalWeight: number };\nexport type FlowResult = { maxFlow: number; flowPath: EdgeFlowProp[] };\nexport type ShortestPathResult = {\n    pathExists: boolean;\n    path: number[];\n    distance: number;\n    cost?: number;\n    weight?: number;\n};\nexport type ConnectedComponentResult = { components: { [key: number]: number }; count: number };\n\nexport default class GraphAlgorithms {\n    public static graphPlainToGraphImmut = (gp: GraphPlain): GraphImmut => {\n        return new GraphImmut(gp.nodes, gp.edges, gp.directed, gp.weighted);\n    };\n\n    // Welsh-Powell Algorithm\n    public static colorNetwork = (G: GraphImmut = GraphState.graph): { colors: {}; chromaticNumber: number } => {\n        // Get node ID's only\n        const nodeArr: number[] = genericH.datasetToArray(G.getAllNodes(), \"id\") as number[];\n\n        // Put vertices in array in decreasing order of degree\n        const degrees = G.getAllOutDegrees();\n        const vertexOrder = genericH.sort(nodeArr, (a, b) => {\n            return degrees[a] < degrees[b] ? 1 : degrees[a] === degrees[b] ? 0 : -1;\n        });\n\n        const colorIndex: { [key: number]: number } = {};\n        let currentColor = 0;\n        while (vertexOrder.length > 0) {\n            const root = vertexOrder.shift()!;\n            colorIndex[root] = currentColor;\n\n            const myGroup = [];\n            myGroup.push(root);\n\n            for (let i = 0; i < vertexOrder.length; ) {\n                const p = vertexOrder[i];\n                let conflict = false;\n\n                for (let j = 0; j < myGroup.length; j++) {\n                    if (G.areAdjacent(p, myGroup[j])) {\n                        i++;\n                        conflict = true;\n                        break;\n                    }\n                }\n                if (conflict) {\n                    continue;\n                }\n\n                colorIndex[p] = currentColor;\n                myGroup.push(p);\n                vertexOrder.splice(i, 1);\n            }\n\n            currentColor++;\n        }\n\n        const chromaticNumber = genericH.max(genericH.flatten(colorIndex) as any[]) + 1;\n        return { colors: colorIndex, chromaticNumber };\n    };\n\n    public static connectedComponents = (G: GraphImmut = GraphState.graph): ConnectedComponentResult => {\n        const components: { [key: number]: number } = {};\n        let componentCount = 0;\n        const setComponentNum = (v: number) => {\n            components[v] = componentCount;\n        };\n        for (let i = 0; i < G.getNumberOfNodes(); i++) {\n            if (!(i in components)) {\n                const visited = GraphAlgorithms.depthFirstSearch(i, G);\n                visited.forEach(setComponentNum);\n                componentCount++;\n            }\n        }\n\n        return { components, count: componentCount };\n    };\n\n    public static depthFirstSearch = (start: number, G = GraphState.graph): number[] => {\n        const visisted: number[] = [];\n        const Stack: number[] = [];\n        Stack.push(start);\n        while (Stack.length > 0) {\n            const v = Stack.pop()!;\n            if (!visisted.includes(v)) {\n                visisted.push(v);\n                G.getNodeAdjacency(v).forEach(nodeID => {\n                    Stack.push(nodeID);\n                });\n            }\n        }\n\n        return visisted;\n    };\n\n    // Tarjan's algorithm\n    public static stronglyConnectedComponents = (G: GraphImmut = GraphState.graph): ConnectedComponentResult => {\n        let index = 0;\n        const indices: { [key: number]: number } = {};\n        const lowlink: { [key: number]: number } = {};\n        const S: number[] = [];\n        const components: { [key: number]: number } = {};\n        let componentCount = 0;\n\n        const strongConnect = (v: number) => {\n            indices[v] = index;\n            lowlink[v] = index++;\n            S.push(v);\n\n            G.getNodeAdjacency(v).forEach(w => {\n                if (!(w in indices)) {\n                    strongConnect(w);\n                    lowlink[v] = Math.min(lowlink[v], lowlink[w]);\n                } else if (S.includes(w)) {\n                    lowlink[v] = Math.min(lowlink[v], indices[w]);\n                }\n            });\n\n            if (lowlink[v] === indices[v]) {\n                let w = -1;\n                if (S.length > 0) {\n                    do {\n                        w = S.pop()!;\n                        components[w] = componentCount;\n                    } while (w !== v);\n                    componentCount++;\n                }\n            }\n        };\n\n        for (let i = 0; i < G.getNumberOfNodes(); i++) {\n            if (!(i in indices)) {\n                strongConnect(i);\n            }\n        }\n\n        return { components, count: componentCount };\n    };\n\n    public static breadthFirstSearch = (\n        startNodeID: number,\n        targetNodeID: number,\n        G: GraphImmut = GraphState.graph\n    ): ShortestPathResult => {\n        // Perform the BFS\n        const visisted: number[] = [];\n        const Q: number[] = []; // Use Push and Shift for Queue operations\n        const edgeTo: { [key: number]: number } = {};\n\n        Q.push(startNodeID);\n        while (Q.length > 0) {\n            const x = Q.shift()!;\n            if (!visisted.includes(x)) {\n                visisted.push(x);\n                G.getNodeAdjacency(x).forEach(y => {\n                    if (!visisted.includes(y)) {\n                        edgeTo[y] = x;\n                        Q.push(y);\n                    }\n                });\n            }\n        }\n\n        if (visisted.includes(targetNodeID)) {\n            // Build the path\n            const path = [];\n            for (let x = targetNodeID; x !== startNodeID; x = edgeTo[x]) {\n                path.push(x);\n            }\n            path.push(startNodeID);\n            path.reverse();\n\n            // Get the path weight\n            let weight = 0;\n            for (let i = 0; i < path.length - 1; i++) {\n                weight += G.getMinWeightEdgeBetween(path[i], path[i + 1]);\n            }\n\n            return { pathExists: true, path, distance: path.length, weight };\n        }\n\n        return { pathExists: false, path: [], distance: -1, weight: -1 };\n    };\n\n    public static dijkstraSearch = (\n        startNodeID: number,\n        targetNodeID: number,\n        G: GraphImmut = GraphState.graph\n    ): ShortestPathResult | boolean => {\n        if (!G.isDirected()) {\n            G = G.asDirected(true);\n        }\n        if (!G.isWeighted()) {\n            G = G.asWeighted();\n        }\n\n        const nonNegative = (G.getAllEdges(true) as EdgeImmut[]).find(edge => {\n            return edge.getWeight() < 0;\n        });\n        if (typeof nonNegative !== \"undefined\") {\n            return false;\n        }\n\n        // Priority Queue implementation for Dijkstra\n        class PriorityQueue {\n            private readonly _nodes: { key: number | string; priority: number }[] = [];\n\n            enqueue(priority: number, key: number): void {\n                this._nodes.push({ key, priority });\n                this.sort();\n            }\n\n            dequeue(): number | string {\n                return this._nodes.shift()!.key;\n            }\n\n            sort(): void {\n                this._nodes.sort((a: { priority: number }, b: { priority: number }) => {\n                    return a.priority - b.priority;\n                });\n            }\n\n            isEmpty(): boolean {\n                return !this._nodes.length;\n            }\n        }\n\n        const queue = new PriorityQueue();\n        const distances: { [key: number]: number } = {};\n        const previous: { [key: number]: number | null } = {};\n        let path = [];\n\n        // Initialize Queue and distances\n        (G.getAllNodes(true) as NodeImmut[]).forEach(node => {\n            let dist = Infinity;\n            if (node.getID() === startNodeID) {\n                dist = 0;\n            }\n\n            distances[node.getID()] = dist;\n            queue.enqueue(dist, node.getID());\n            previous[node.getID()] = null;\n        });\n\n        while (!queue.isEmpty()) {\n            let smallest = queue.dequeue() as number;\n\n            if (smallest === targetNodeID) {\n                path = [];\n                while (previous[smallest] !== null) {\n                    path.push(smallest);\n                    smallest = previous[smallest]!;\n                }\n                break;\n            }\n\n            if (distances[smallest] === Infinity) {\n                continue;\n            }\n\n            G.getNodeAdjacency(smallest).forEach(neighbor => {\n                const alt = distances[smallest] + G.getMinWeightEdgeBetween(smallest, neighbor);\n\n                if (alt < distances[neighbor]) {\n                    distances[neighbor] = alt;\n                    previous[neighbor] = smallest;\n\n                    queue.enqueue(alt, neighbor);\n                }\n            });\n        }\n\n        path.push(startNodeID);\n        path.reverse();\n\n        if (distances[targetNodeID] !== Infinity) {\n            return { pathExists: true, path, distance: path.length, cost: distances[targetNodeID] };\n        }\n\n        return { pathExists: false, path: [], distance: -1, cost: 0 };\n    };\n\n    public static bellmanFord = (\n        startNodeID: number,\n        targetNodeID: number,\n        G: GraphImmut = GraphState.graph\n    ): ShortestPathResult | boolean => {\n        const distances: number[] = [];\n        const parents: (number | null)[] = [];\n\n        // Initialize\n        (G.getAllNodes(true) as NodeImmut[]).forEach(node => {\n            distances[node.getID()] = Infinity;\n            parents[node.getID()] = null;\n        });\n\n        // Relax Edges\n        distances[startNodeID] = 0;\n        for (let i = 0; i < G.getNumberOfNodes() - 1; i++) {\n            (G.getAllEdges(true) as EdgeImmut[]).forEach(edge => {\n                if (distances[edge.getFrom()] + edge.getWeight() < distances[edge.getTo()]) {\n                    distances[edge.getTo()] = distances[edge.getFrom()] + edge.getWeight();\n                    parents[edge.getTo()] = edge.getFrom();\n                }\n            });\n        }\n\n        // Check for negative weight cycles\n        let negativeCylce = false;\n        (G.getAllEdges(true) as EdgeImmut[]).forEach(edge => {\n            if (distances[edge.getFrom()] + edge.getWeight() < distances[edge.getTo()]) {\n                negativeCylce = true;\n            }\n        });\n\n        if (distances[targetNodeID] !== Infinity) {\n            const path: number[] = [targetNodeID];\n            while (!path.includes(startNodeID)) {\n                path.push(parents[path.slice().pop()!] as number);\n            }\n            path.reverse();\n\n            return { pathExists: true, path, distance: path.length, cost: distances[targetNodeID] };\n        }\n\n        if (negativeCylce) {\n            return false;\n        }\n\n        return { pathExists: false, path: [], distance: -1, cost: 0 };\n    };\n\n    public static fordFulkerson = (\n        startNodeID: number,\n        targetNodeID: number,\n        G: GraphImmut = GraphState.graph\n    ): boolean | FlowResult => {\n        // Must be a directed graph\n        if (!G.isDirected()) {\n            return false;\n        }\n\n        // Source == sink\n        if (startNodeID === targetNodeID) {\n            return false;\n        }\n\n        const bfs = GraphAlgorithms.breadthFirstSearch(startNodeID, targetNodeID, G);\n        // No path from source to sink\n        if (!bfs.pathExists) {\n            return false;\n        }\n\n        // If we have a multigraph, then reduce the graph to have single edges with the sum of the capacities\n        G = G.reduceMultiGraph((a, b) => {\n            return a + b;\n        }, 0);\n\n        const V = G.getNumberOfNodes();\n        let value = 0;\n        let marked: boolean[] = [];\n        let edgeTo: (string | null)[] = [];\n\n        const edgeProperties: { [key: string]: EdgeFlowProp } = {};\n        (G.getAllEdges(true) as EdgeImmut[]).forEach(edge => {\n            edgeProperties[`${edge.getFrom()}_${edge.getTo()}`] = {\n                from: edge.getFrom(),\n                to: edge.getTo(),\n                capacity: edge.getWeight(),\n                flow: 0\n            };\n        });\n\n        const other = (e: string, x: number) => {\n            const edge = e.split(\"_\");\n            const a = parseInt(edge[0]);\n            const b = parseInt(edge[1]);\n            return x === a ? b : a;\n        };\n\n        const residualCapacity = (e: string, x: number) => {\n            const edge = e.split(\"_\");\n            const a = parseInt(edge[0]);\n            if (x === a) {\n                return edgeProperties[e].flow;\n            }\n            return edgeProperties[e].capacity - edgeProperties[e].flow;\n        };\n\n        const addResidualFlow = (e: string, x: number, deltaFlow: number) => {\n            const edge = e.split(\"_\");\n            const v = parseInt(edge[0]);\n            if (x === v) {\n                edgeProperties[e].flow -= deltaFlow;\n            } else {\n                edgeProperties[e].flow += deltaFlow;\n            }\n        };\n\n        const hasAugmentedPath = () => {\n            marked = [];\n            edgeTo = [];\n            for (let v = 0; v < V; ++v) {\n                marked.push(false);\n                edgeTo.push(null);\n            }\n\n            const queue = [];\n            queue.push(startNodeID);\n\n            marked[startNodeID] = true;\n            while (queue.length > 0) {\n                const v = queue.shift()!;\n                const vertexAdjacency = G.getNodeAdjacency(v);\n                for (const i of vertexAdjacency) {\n                    const e = `${v}_${i}`;\n                    const w = other(e, v);\n                    if (!marked[w] && residualCapacity(e, w) > 0) {\n                        edgeTo[w] = e;\n                        marked[w] = true;\n                        if (w === targetNodeID) {\n                            return true;\n                        }\n\n                        queue.push(w);\n                    }\n                }\n            }\n\n            return false;\n        };\n\n        while (hasAugmentedPath()) {\n            let bottleneckValue = Infinity;\n            for (let x = targetNodeID; x !== startNodeID; x = other(edgeTo[x]!, x)) {\n                bottleneckValue = Math.min(bottleneckValue, residualCapacity(edgeTo[x]!, x));\n            }\n            for (let x = targetNodeID; x !== startNodeID; x = other(edgeTo[x]!, x)) {\n                addResidualFlow(edgeTo[x]!, x, bottleneckValue);\n            }\n            value += bottleneckValue;\n        }\n\n        const getFlows = (): EdgeFlowProp[] => {\n            const f: EdgeFlowProp[] = [];\n            for (let v = 0; v < V; v++) {\n                const vertexAdjacency = G.getNodeAdjacency(v);\n                for (const i of vertexAdjacency) {\n                    const e = `${v}_${i}`;\n                    if (edgeProperties[e].flow > 0) {\n                        f.push(edgeProperties[e]);\n                    }\n                }\n            }\n\n            return f;\n        };\n\n        return { maxFlow: value, flowPath: getFlows() };\n    };\n\n    public static kruskal = (G: GraphImmut = GraphState.graph): MSTResult => {\n        // If we have a multigraph, reduce it by using the minimum edge weights\n        G.reduceMultiGraph();\n\n        const Q: EdgeImmut[] = G.getAllEdges(true) as EdgeImmut[];\n\n        // Sort edges by weight so that they are added to the tree in the order of lowest possible weight\n        Q.sort((a, b) => {\n            return a.getWeight() - b.getWeight();\n        });\n\n        const kruskal: EdgeImmut[] = [];\n        const set = new SpanningTree(G.getNumberOfNodes());\n        while (Q.length > 0 && kruskal.length < G.getNumberOfNodes() - 1) {\n            const e = Q.shift()!;\n            if (!set.connected(e.getFrom(), e.getTo())) {\n                set.union(e.getFrom(), e.getTo());\n                kruskal.push(e);\n            }\n        }\n\n        // Get the total cost of the MST\n        const weight = kruskal.reduce((acc, e) => {\n            return acc + e.getWeight();\n        }, 0);\n\n        return { mst: (kruskal as any) as EdgeImmutPlain[], totalWeight: weight };\n    };\n\n    public static topologicalSort = (G: GraphImmut = GraphState.graph): boolean | NodeImmut[] => {\n        const adjacency = G.getFullAdjacency();\n        const degrees = graphH.findVertexDegreesDirectional(adjacency);\n\n        const L: NodeImmut[] = [];\n        const S: NodeImmut[] = (G.getAllNodes(true) as NodeImmut[]).filter(n => {\n            return degrees[n.getID()].in === 0;\n        });\n        let edges = G.getAllEdges(true) as EdgeImmut[];\n\n        while (S.length !== 0) {\n            const nodeN = S.pop()!;\n            L.push(nodeN);\n\n            const nodeNConnectedTo = adjacency[nodeN.getID()];\n\n            // Remove n to m edges for all nodes m\n            edges = edges.filter(edge => {\n                if (edge.getFrom() === nodeN.getID() && nodeNConnectedTo.includes(edge.getTo())) {\n                    degrees[edge.getTo()].in--;\n                    adjacency[nodeN.getID()] = adjacency[nodeN.getID()].filter(v => {\n                        return v !== edge.getTo();\n                    });\n                    return false;\n                }\n                return true;\n            });\n\n            // If m has no more incoming edges, add it to S\n            nodeNConnectedTo.forEach(mID => {\n                if (degrees[mID].in === 0) {\n                    S.push(G.getNode(mID, true) as NodeImmut);\n                }\n            });\n        }\n\n        return edges.length > 0 || L;\n    };\n\n    public static isGraphCyclic = (G: GraphImmut = GraphState.graph): boolean => {\n        // If the topological sorting returns true, then it failed, so the graph has a cycle\n        return GraphAlgorithms.topologicalSort(G) === true;\n    };\n\n    public static directionalEulerian = (directionalDegrees: { in: number; out: number }[], scc: number[]): boolean => {\n        let eulerian = true;\n        let component = -1;\n        directionalDegrees.forEach((deg, id) => {\n            if (deg.in !== deg.out) {\n                eulerian = false;\n            }\n            if (deg.in > 0) {\n                if (component === -1) {\n                    component = scc[id];\n                }\n                if (component !== scc[id]) {\n                    eulerian = false;\n                }\n            }\n        });\n\n        return eulerian;\n    };\n\n    public static hasEulerianCircuit = (degrees: number[], cc: number[]): boolean => {\n        const oddDegree = degrees.filter(v => {\n            return v % 2 !== 0;\n        });\n\n        // If any nodes have odd degree, we can short-circuit the algorithm because it cannot be Eulerian\n        if (oddDegree.length !== 0) {\n            return false;\n        }\n\n        let eulerian = true;\n        let component = -1;\n        degrees.forEach((v, i) => {\n            if (v !== 0) {\n                if (component === -1) {\n                    component = cc[i];\n                }\n                if (component !== cc[i]) {\n                    eulerian = false;\n                }\n            }\n        });\n\n        return eulerian;\n    };\n}\n","\"use strict\";\n\nexport default class SpanningTree {\n    private readonly id: number[];\n\n    constructor(V: number) {\n        this.id = [];\n        for (let v = 0; v < V; v++) {\n            this.id.push(v);\n        }\n    }\n\n    union(v: number, w: number) {\n        const q = this.root(v);\n        const p = this.root(w);\n\n        if (p !== q) {\n            this.id[p] = q;\n        }\n    }\n\n    root(q: number) {\n        while (this.id[q] !== q) {\n            q = this.id[q];\n        }\n        return q;\n    }\n\n    connected(v: number, w: number) {\n        return this.root(v) === this.root(w);\n    }\n}\n"],"names":["graphPlainToGraphImmut","gp","nodes","edges","directed","weighted","colorNetwork","G","graph","nodeArr","datasetToArray","getAllNodes","degrees","getAllOutDegrees","vertexOrder","sort","a","b","colorIndex","currentColor","length","root","shift","myGroup","push","i","p","conflict","j","areAdjacent","splice","colors","chromaticNumber","max","flatten","connectedComponents","components","componentCount","setComponentNum","v","getNumberOfNodes","GraphAlgorithms","depthFirstSearch","forEach","count","start","visisted","Stack","pop","includes","getNodeAdjacency","nodeID","stronglyConnectedComponents","index","indices","lowlink","S","strongConnect","w","Math","min","breadthFirstSearch","startNodeID","targetNodeID","Q","edgeTo","x","y","path","reverse","weight","getMinWeightEdgeBetween","pathExists","distance","dijkstraSearch","isDirected","asDirected","isWeighted","asWeighted","getAllEdges","find","edge","getWeight","queue","_nodes","enqueue","priority","key","this","dequeue","isEmpty","distances","previous","node","dist","Infinity","getID","smallest","neighbor","alt","cost","bellmanFord","parents","getFrom","getTo","negativeCylce","slice","fordFulkerson","V","reduceMultiGraph","value","marked","edgeProperties","from","to","capacity","flow","other","e","split","parseInt","residualCapacity","addResidualFlow","deltaFlow","hasAugmentedPath","bottleneckValue","maxFlow","flowPath","f","getFlows","kruskal","set","connected","union","reduce","acc","mst","totalWeight","topologicalSort","adjacency","getFullAdjacency","findVertexDegreesDirectional","L","filter","n","in","nodeN","nodeNConnectedTo","mID","getNode","isGraphCyclic","directionalEulerian","directionalDegrees","scc","eulerian","component","deg","id","out","hasEulerianCircuit","cc","q"],"sourceRoot":""}
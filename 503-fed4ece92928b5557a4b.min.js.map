{"version":3,"file":"503-fed4ece92928b5557a4b.min.js","mappings":"sJAEA,WAGI,WAAYA,GACRC,KAAKC,GAAK,GACV,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAGG,IACnBF,KAAKC,GAAGE,KAAKD,EAErB,CAqBJ,OAnBI,YAAAE,MAAA,SAAMF,EAAWG,GACb,IAAMC,EAAIN,KAAKO,KAAKL,GACdM,EAAIR,KAAKO,KAAKF,GAEhBG,IAAMF,IACNN,KAAKC,GAAGO,GAAKF,EAErB,EAEA,YAAAC,KAAA,SAAKD,GACD,KAAON,KAAKC,GAAGK,KAAOA,GAClBA,EAAIN,KAAKC,GAAGK,GAEhB,OAAOA,CACX,EAEA,YAAAG,UAAA,SAAUP,EAAWG,GACjB,OAAOL,KAAKO,KAAKL,KAAOF,KAAKO,KAAKF,EACtC,EACJ,EA7BA,E","sources":["webpack://graphPlayground/./src/js/classes/SpanningTree.ts"],"sourcesContent":["\"use strict\";\n\nexport default class SpanningTree {\n    private readonly id: number[];\n\n    constructor(V: number) {\n        this.id = [];\n        for (let v = 0; v < V; v++) {\n            this.id.push(v);\n        }\n    }\n\n    union(v: number, w: number) {\n        const q = this.root(v);\n        const p = this.root(w);\n\n        if (p !== q) {\n            this.id[p] = q;\n        }\n    }\n\n    root(q: number) {\n        while (this.id[q] !== q) {\n            q = this.id[q];\n        }\n        return q;\n    }\n\n    connected(v: number, w: number) {\n        return this.root(v) === this.root(w);\n    }\n}\n"],"names":["V","this","id","v","push","union","w","q","root","p","connected"],"sourceRoot":""}
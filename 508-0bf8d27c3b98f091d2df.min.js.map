{"version":3,"file":"508-0bf8d27c3b98f091d2df.min.js","mappings":"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","sources":["webpack://graphPlayground/./src/js/util/predefinedGraphs.ts"],"sourcesContent":["\"use strict\";\n\nimport gHelp from './graphHelpers';\nimport help from './genericHelpers';\nimport { EdgeImmutPlain } from \"../classes/GraphImmut/EdgeImmut\";\nimport { NodeImmutPlain } from \"../classes/GraphImmut/NodeImmut\";\nimport * as languages from \"../languages\";\n\nexport interface GraphPlain {\n    edges: EdgeImmutPlain[];\n    nodes: NodeImmutPlain[];\n    directed?: boolean;\n    weighted?: boolean\n}\n\nconst petersenEdges = help.deepFreeze([\n    { from: 1, to: 2, weight: 1 },\n    { from: 2, to: 3, weight: 1 },\n    { from: 3, to: 4, weight: 1 },\n    { from: 4, to: 5, weight: 1 },\n    { from: 5, to: 1, weight: 1 },\n\n    { from: 6, to: 8, weight: 1 },\n    { from: 7, to: 9, weight: 1 },\n    { from: 7, to: 10, weight: 1 },\n    { from: 8, to: 10, weight: 1 },\n    { from: 9, to: 6, weight: 1 },\n\n    { from: 1, to: 6, weight: 1 },\n    { from: 2, to: 7, weight: 1 },\n    { from: 3, to: 8, weight: 1 },\n    { from: 4, to: 9, weight: 1 },\n    { from: 5, to: 10, weight: 1 }\n]) as EdgeImmutPlain[];\n\nconst konigsbergEdges = help.deepFreeze([\n    { from: 1, to: 2, weight: 1 },\n    { from: 2, to: 3, weight: 1 },\n    { from: 2, to: 4, weight: 1 },\n    { from: 3, to: 4, weight: 1 },\n    { from: 3, to: 4, weight: 1 },\n    { from: 4, to: 1, weight: 1 },\n    { from: 4, to: 1, weight: 1 },\n]) as EdgeImmutPlain[];\n\nconst completeGraph = (V: number): Readonly<GraphPlain> => {\n    const edges = [];\n    const nodes = [];\n\n    for (let i = 0; i < V; i++) {\n        nodes.push({ id: i, label: i.toString() });\n        for (let j = i + 1; j < V; j++) {\n            edges.push({ from: i, to: j });\n        }\n    }\n\n    return help.deepFreeze({ nodes, edges, directed: false, weighted: false } as GraphPlain);\n};\n\nconst hypercubeGraph = (D: number): Readonly<GraphPlain> => {\n    const edges: EdgeImmutPlain[] = [];\n    const nodes: NodeImmutPlain[] = [];\n\n    const numNodes = Math.pow(2, D);\n\n    const pad = (str: string, max: number): string => {\n        return str.length < max ? pad(\"0\" + str, max) : str;\n    };\n\n    const generateDifferByOne = (input: number, numBits: number) => {\n        const inputBits = pad((input).toString(2), numBits).split(\"\").reverse();\n        const allDiffer = [];\n\n        // 1 bit difference from input, increasing order, none less than input\n        for (let b = 0; b < numBits; b++) {\n            if (inputBits[b] === \"0\") {\n                const newNum = inputBits.slice();\n                newNum[b] = \"1\";\n                newNum.reverse();\n                allDiffer.push(parseInt(newNum.join(\"\"), 2));\n            }\n        }\n\n        return allDiffer;\n    };\n\n    for (let i = 0; i < numNodes; i++) {\n        nodes.push({ id: i, label: pad(i.toString(2), D) });\n        generateDifferByOne(i, D).forEach((j) => {\n            edges.push({ from: i, to: j, weight: 1 });\n        });\n    }\n\n    return help.deepFreeze({ nodes, edges, directed: false, weighted: false } as GraphPlain);\n};\n\nconst newCustomGraph = (V: number, directed = false, weighted = false): Readonly<GraphPlain> => {\n    const nodes = [];\n    for (let i = 0; i < V; i++) {\n        nodes.push({ id: i, label: i.toString() });\n    }\n\n    return help.deepFreeze({ nodes, edges: [], directed, weighted } as GraphPlain);\n};\n\nexport default class PredefinedGraphs {\n    public static _complete = completeGraph;\n    public static _custom = newCustomGraph;\n    public static _hypercube = hypercubeGraph;\n\n    public static Petersen(): Readonly<GraphPlain> {\n        return help.deepFreeze({\n            edges: petersenEdges,\n            nodes: gHelp.interpolateNodesFromEdges(petersenEdges),\n            directed: false,\n            weighted: false,\n        });\n    }\n\n    public static Konigsberg(): Readonly<GraphPlain> {\n        return help.deepFreeze({\n            edges: konigsbergEdges,\n            nodes: gHelp.interpolateNodesFromEdges(konigsbergEdges),\n            directed: false,\n            weighted: false,\n        });\n    }\n\n    public static Complete(): void {\n        help.showFormModal(($modal, vals) => {\n            $modal.modal(\"hide\");\n            window.main.setData(completeGraph(vals[0]), false, true, true);\n        },\n            languages.current.ConfigurableCompleteGraph, languages.current.Go, languages.current.Cancel,\n            [{\n                type: \"numeric\", initialValue: 5, label: languages.current.NumberOfVerticesLabel, validationFunc: (v) => {\n                    return v >= 0 || languages.current.NumberOfVerticesNonNegativeError;\n                }\n            }]);\n    }\n\n    public static Hypercube(): void {\n        help.showFormModal(($modal, vals) => {\n            $modal.modal(\"hide\");\n            window.main.setData(hypercubeGraph(vals[0]), false, true, true);\n        },\n            languages.current.ConfigurableHypercubeGraph, languages.current.Go, languages.current.Cancel,\n            [{\n                type: \"numeric\", initialValue: 3, label: languages.current.NumberOfDimensionsLabel, validationFunc: (v) => {\n                    return v >= 0 || languages.current.NumberOfDimensionsNonNegativeError;\n                }\n            }]);\n    }\n\n    public static Custom(): void {\n        help.showFormModal(($modal, vals) => {\n            $modal.modal(\"hide\");\n            window.main.setData(newCustomGraph(vals[0], vals[1], vals[2]), false, true, true);\n        },\n            languages.current.ConfigurableGraph, languages.current.Go, languages.current.Cancel,\n            [\n                {\n                    type: \"numeric\", initialValue: 0, label: languages.current.NumberOfVerticesLabel, validationFunc: (v) => {\n                        return v >= 0 || languages.current.NumberOfVerticesNonNegativeError;\n                    }\n                },\n                { type: \"checkbox\", initialValue: false, label: \"Directed\" },\n                { type: \"checkbox\", initialValue: false, label: \"Weighted\" },\n            ]);\n    }\n}\n"],"names":["petersenEdges","deepFreeze","from","to","weight","konigsbergEdges","completeGraph","V","edges","nodes","i","push","id","label","toString","j","directed","weighted","hypercubeGraph","D","numNodes","Math","pow","pad","str","max","length","input","numBits","inputBits","split","reverse","allDiffer","b","newNum","slice","parseInt","join","generateDifferByOne","forEach","newCustomGraph","Petersen","interpolateNodesFromEdges","Konigsberg","Complete","showFormModal","$modal","vals","modal","window","main","setData","ConfigurableCompleteGraph","Go","Cancel","type","initialValue","NumberOfVerticesLabel","validationFunc","v","NumberOfVerticesNonNegativeError","Hypercube","ConfigurableHypercubeGraph","NumberOfDimensionsLabel","NumberOfDimensionsNonNegativeError","Custom","ConfigurableGraph","_complete","_custom","_hypercube"],"sourceRoot":""}
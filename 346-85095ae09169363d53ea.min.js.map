{"version":3,"file":"346-85095ae09169363d53ea.min.js","mappings":"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","sources":["webpack://graphPlayground/./src/js/dataImportExport.ts"],"sourcesContent":["\"use strict\";\n\nimport help from './util/genericHelpers';\nimport GraphImmut from './classes/GraphImmut/GraphImmut';\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport GraphState from \"./graphState\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport * as languages from \"./languages\";\n\nconst exportedTextSelector = \"exportedText\";\n\nconst self = {\n    importByString: (string: string, format: string): void => {\n        if (format.toLowerCase() === \"json\") {\n            try {\n                const n = JSON.parse(string);\n                if (\"nodes\" in n && \"edges\" in n) {\n                    window.network.setData({}); // Clear out the existing network in order to import the proper\n                    // locations\n                    window.main.setData(n, false, true, false);\n                }\n                else {\n                    help.showSimpleModal(languages.current.DataImportError,\n                        `<p>${languages.current.DataImportErrorText}</p>`);\n                }\n            }\n            catch (err) {\n                help.showSimpleModal(languages.current.JsonParseError, `<p>${languages.current.JsonParseErrorText}</p><pre>${err}</pre>`);\n            }\n        }\n        else if (format.toLowerCase() === \"dimacs\") {\n            const lines = string.split(/\\r?\\n/);\n            let graph: GraphImmut | null = null;\n            let error = false;\n            lines.forEach((l) => {\n                const vals = l.split(/\\s+/);\n                if (vals[0].toLowerCase() === \"p\") {\n                    if (vals[1].toLowerCase() !== \"edge\") {\n                        help.showSimpleModal(languages.current.DimacsParseError,\n                            `<p>${help.htmlEncode(languages.current.DimacsParseErrorText)}</p>`);\n                        error = true;\n                        return;\n                    }\n                    graph = new GraphImmut(parseInt(vals[2]));\n                }\n                else if (vals[0].toLowerCase() === \"e\" && graph !== null) {\n                    graph = graph.addEdge(parseInt(vals[1]) - 1, parseInt(vals[2]) - 1);\n                }\n            });\n\n            if (graph === null && !error) {\n                help.showSimpleModal(languages.current.DimacsParseError, `<p>${languages.current.DimacsParseErrorNoProgram}</p>`);\n                error = true;\n            }\n\n            if (!error) {\n                const d: GraphPlain = GraphState.getGraphData(graph!);\n                d.nodes.forEach((v) => {\n                    v.label = v.id.toString();\n                });\n                window.main.setData(d, false, true, true);\n            }\n        }\n        else {\n            help.showSimpleModal(languages.current.UnrecognizedInputError, `<p>${languages.current.UnrecognizedInputError}.</p>`);\n        }\n    },\n\n    makeImportTextModal: (): void => {\n        help.showFormModal(($modal, values) => {\n            $modal.modal(\"hide\");\n            self.importByString(values[0], values[1]);\n        }, languages.current.ImportGraphFromText, languages.current.Import, languages.current.Cancel,\n            [{ type: \"textarea\", label: languages.current.ImportText, extraAttrs: { style: \"height: 20vh; min-height:400px;\" } },\n            { type: \"select\", label: languages.current.Format, optionValues: [\"json\", \"dimacs\"], optionText: [\"JSON\", \"DIMACS\"] }\n            ]);\n    },\n\n    makeImportFileModal: (): void => {\n        help.showFormModal(($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const files = values[0];\n            if (files.length === 1) {\n                const file = files[0];\n                const reader = new FileReader();\n                reader.onload = function (event: any) {\n                    self.importByString(event.target.result, help.getFileExtension(file.name));\n                };\n\n                reader.readAsText(file);\n            }\n        }, languages.current.ImportGraphFromFile, languages.current.Import, languages.current.Cancel,\n            [{\n                type: \"file\", label: languages.current.UploadFile, validationFunc: (val, $files) => {\n                    const files = ($files.get(0) as any).files;\n                    if (files.length >= 1) {\n                        return true;\n                    }\n                    return languages.current.MustChooseFileError;\n                }\n            }]);\n    },\n\n    makeExportFileModal: (): void => {\n        help.showFormModal(null, languages.current.ExportGraphToFile, null, languages.current.Cancel,\n            [{\n                type: \"button\",\n                initialValue: languages.current.ExportToJson,\n                onclick: () => {\n                    self.exportToFile(\"json\");\n                },\n                extraAttrs: {\n                    class: \"btn btn-sm btn-primary m-1\"\n\n                },\n                clickDismiss: true\n            },\n            {\n                type: \"button\",\n                initialValue: languages.current.ExportToDimacs,\n                onclick: () => {\n                    self.exportToFile(\"dimacs\");\n                },\n                extraAttrs: {\n                    class: \"btn btn-sm btn-primary\"\n                },\n                clickDismiss: true\n            }\n            ], null, false);\n    },\n\n    makeExportTextModal: (): void => {\n        help.showFormModal(null, languages.current.ExportGraphToText, null, languages.current.Cancel,\n            [{\n                type: \"button\",\n                initialValue: languages.current.ExportToJson,\n                onclick: () => {\n                    self.exportToText(\"json\");\n                },\n                extraAttrs: {\n                    class: \"btn btn-sm btn-primary m-1\",\n                },\n                clickDismiss: false\n            },\n            {\n                type: \"button\",\n                initialValue: languages.current.ExportToDimacs,\n                onclick: () => {\n                    self.exportToText(\"dimacs\");\n                },\n                extraAttrs: {\n                    class: \"btn btn-sm btn-primary\",\n                },\n                clickDismiss: false\n            },\n            {\n                type: \"textarea\", label: \"\", initialValue: \"\", extraAttrs: {\n                    style: \"height: 20vh;\" +\n                        \" min-height:400px; white-space:pre; margin-top: 1rem;\"\n                },\n                onclick: () => {\n                    (document.getElementById(exportedTextSelector) as HTMLTextAreaElement).select();\n                    document.execCommand(\"copy\");\n                }, id: \"exportedText\"\n            }\n            ], ($modal) => {\n                $modal.modal(\"hide\");\n            }, false);\n    },\n\n    exportToFile: (format: string): void => {\n        if (format.toLowerCase() === \"json\") {\n            self.downloadFile(\"graph.json\", self.getDataAsJSON());\n        }\n        else if (format.toLowerCase() === \"dimacs\") {\n            self.downloadFile(\"graph.dimacs\", self.getDataAsDIMACS());\n        }\n    },\n\n    exportToText: (format: string): void => {\n        if (format.toLowerCase() === \"json\") {\n            document.getElementById(exportedTextSelector)!.innerHTML = JSON.stringify(JSON.parse(self.getDataAsJSON()), null, 2);\n        }\n        else if (format.toLowerCase() === \"dimacs\") {\n            document.getElementById(exportedTextSelector)!.innerHTML = self.getDataAsDIMACS();\n        }\n    },\n\n    getDataAsJSON: (): string => {\n        const d = GraphState.getGraphData(GraphState.graph);\n        const nodeKeys = [\"id\", \"label\", \"color\", \"x\", \"y\"];\n        const edgeKeys = [\"from\", \"to\", \"weight\", \"color\"];\n        d.nodes = help.keepOnlyKeys(d.nodes, nodeKeys) as NodeImmutPlain[];\n        d.edges = help.keepOnlyKeys(d.edges, edgeKeys) as EdgeImmutPlain[];\n\n        return JSON.stringify(d);\n    },\n\n    getDataAsDIMACS: (): string => {\n        // If I add direction, DIMACS cannot be used, it only works for undirected graphs\n        const g = GraphState.getGraphData();\n        let text = \"c This Graph was generated and exported from Michael Dombrowski's Graph Playground \" +\n            \"-- https://mikedombo.github.io/graphPlayground -- https://mikedombrowski.com\\n\";\n\n        let adj = GraphState.graph.getFullAdjacency();\n        adj = adj.filter((v: number[]) => {\n            return v.length !== 0;\n        });\n\n        const nodes: number[] = [];\n        adj.forEach((v: number[], i: number) => {\n            if (nodes.indexOf(i + 1) === -1) {\n                nodes.push(i + 1);\n            }\n            v.forEach((n: number) => {\n                if (nodes.indexOf(n + 1) === -1) {\n                    nodes.push(n + 1);\n                }\n            });\n        });\n\n        let edgeCount = 0;\n        let edgeText = \"\";\n        g.edges.forEach((v: EdgeImmutPlain) => {\n            edgeText += `e ${v.from + 1} ${v.to + 1}\\n`;\n            edgeCount++;\n        });\n        edgeText = edgeText.trim();\n\n        text += `p edge ${nodes.length} ${edgeCount}\\n`;\n        return text + edgeText;\n    },\n\n    downloadFile: (filename: string, text: string): void => {\n        const blob = new Blob([text], { type: 'text/plain' });\n        // @ts-ignore\n        if (window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveBlob(blob, filename);\n        }\n        else {\n            const a = window.document.createElement('a');\n            a.href = window.URL.createObjectURL(blob);\n            a.download = filename;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(blob as any);\n        }\n    },\n};\n\nexport default self;\n"],"names":["exportedTextSelector","self","importByString","string","format","toLowerCase","n","JSON","parse","window","network","setData","main","err","lines","split","forEach","l","vals","parseInt","addEdge","d","nodes","v","label","id","toString","makeImportTextModal","$modal","values","modal","type","extraAttrs","style","optionValues","optionText","makeImportFileModal","files","length","reader","FileReader","onload","event","target","result","name","readAsText","validationFunc","val","$files","get","makeExportFileModal","initialValue","onclick","exportToFile","class","clickDismiss","makeExportTextModal","exportToText","document","getElementById","select","execCommand","downloadFile","getDataAsJSON","getDataAsDIMACS","innerHTML","stringify","edges","g","text","adj","filter","i","indexOf","push","edgeCount","edgeText","from","to","trim","filename","blob","Blob","navigator","msSaveOrOpenBlob","msSaveBlob","a","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","revokeObjectURL"],"sourceRoot":""}
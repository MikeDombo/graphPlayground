{"version":3,"file":"191-192ef97088f8382ff5db.min.js","mappings":"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","sources":["webpack://graphPlayground/./src/js/dataImportExport.ts"],"sourcesContent":["\"use strict\";\n\nimport help from './util/genericHelpers';\nimport GraphImmut from './classes/GraphImmut/GraphImmut';\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport GraphState from \"./graphState\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport * as languages from \"./languages\";\n\nconst exportedTextSelector = \"exportedText\";\n\nconst self = {\n    importByString: (string: string, format: string): void => {\n        if (format.toLowerCase() === \"json\") {\n            try {\n                const n = JSON.parse(string);\n                if (\"nodes\" in n && \"edges\" in n) {\n                    window.network.setData({}); // Clear out the existing network in order to import the proper\n                    // locations\n                    window.main.setData(n, false, true, false);\n                }\n                else {\n                    help.showSimpleModal(languages.current.DataImportError,\n                        `<p>${languages.current.DataImportErrorText}</p>`);\n                }\n            }\n            catch (err) {\n                help.showSimpleModal(languages.current.JsonParseError, `<p>${languages.current.JsonParseErrorText}</p><pre>${err}</pre>`);\n            }\n        }\n        else if (format.toLowerCase() === \"dimacs\") {\n            const lines = string.split(/\\r?\\n/);\n            let graph: GraphImmut | null = null;\n            let error = false;\n            lines.forEach((l) => {\n                const vals = l.split(/\\s+/);\n                if (vals[0].toLowerCase() === \"p\") {\n                    if (vals[1].toLowerCase() !== \"edge\") {\n                        help.showSimpleModal(languages.current.DimacsParseError,\n                            `<p>${help.htmlEncode(languages.current.DimacsParseErrorText)}</p>`);\n                        error = true;\n                        return;\n                    }\n                    graph = new GraphImmut(parseInt(vals[2]));\n                }\n                else if (vals[0].toLowerCase() === \"e\" && graph !== null) {\n                    graph = graph.addEdge(parseInt(vals[1]) - 1, parseInt(vals[2]) - 1);\n                }\n            });\n\n            if (graph === null && !error) {\n                help.showSimpleModal(languages.current.DimacsParseError, `<p>${languages.current.DimacsParseErrorNoProgram}</p>`);\n                error = true;\n            }\n\n            if (!error) {\n                const d: GraphPlain = GraphState.getGraphData(graph!);\n                d.nodes.forEach((v) => {\n                    v.label = v.id.toString();\n                });\n                window.main.setData(d, false, true, true);\n            }\n        }\n        else {\n            help.showSimpleModal(languages.current.UnrecognizedInputError, `<p>${languages.current.UnrecognizedInputError}.</p>`);\n        }\n    },\n\n    makeImportTextModal: (): void => {\n        help.showFormModal(($modal, values) => {\n            $modal.modal(\"hide\");\n            self.importByString(values[0], values[1]);\n        }, languages.current.ImportGraphFromText, languages.current.Import, languages.current.Cancel,\n            [{ type: \"textarea\", label: languages.current.ImportText, extraAttrs: { style: \"height: 20vh; min-height:400px;\" } },\n            { type: \"select\", label: languages.current.Format, optionValues: [\"json\", \"dimacs\"], optionText: [\"JSON\", \"DIMACS\"] }\n            ]);\n    },\n\n    makeImportFileModal: (): void => {\n        help.showFormModal(($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const files = values[0];\n            if (files.length === 1) {\n                const file = files[0];\n                const reader = new FileReader();\n                reader.onload = function (event: any) {\n                    self.importByString(event.target.result, help.getFileExtension(file.name));\n                };\n\n                reader.readAsText(file);\n            }\n        }, languages.current.ImportGraphFromFile, languages.current.Import, languages.current.Cancel,\n            [{\n                type: \"file\", label: languages.current.UploadFile, validationFunc: (val, $files) => {\n                    const files = ($files.get(0) as any).files;\n                    if (files.length >= 1) {\n                        return true;\n                    }\n                    return languages.current.MustChooseFileError;\n                }\n            }]);\n    },\n\n    makeExportFileModal: (): void => {\n        help.showFormModal(null, languages.current.ExportGraphToFile, null, languages.current.Cancel,\n            [{\n                type: \"button\",\n                initialValue: languages.current.ExportToJson,\n                onclick: () => {\n                    self.exportToFile(\"json\");\n                },\n                extraAttrs: {\n                    class: \"btn btn-sm btn-primary m-1\"\n\n                },\n                clickDismiss: true\n            },\n            {\n                type: \"button\",\n                initialValue: languages.current.ExportToDimacs,\n                onclick: () => {\n                    self.exportToFile(\"dimacs\");\n                },\n                extraAttrs: {\n                    class: \"btn btn-sm btn-primary\"\n                },\n                clickDismiss: true\n            }\n            ], null, false);\n    },\n\n    makeExportTextModal: (): void => {\n        help.showFormModal(null, languages.current.ExportGraphToText, null, languages.current.Cancel,\n            [{\n                type: \"button\",\n                initialValue: languages.current.ExportToJson,\n                onclick: () => {\n                    self.exportToText(\"json\");\n                },\n                extraAttrs: {\n                    class: \"btn btn-sm btn-primary m-1\",\n                },\n                clickDismiss: false\n            },\n            {\n                type: \"button\",\n                initialValue: languages.current.ExportToDimacs,\n                onclick: () => {\n                    self.exportToText(\"dimacs\");\n                },\n                extraAttrs: {\n                    class: \"btn btn-sm btn-primary\",\n                },\n                clickDismiss: false\n            },\n            {\n                type: \"textarea\", label: \"\", initialValue: \"\", extraAttrs: {\n                    style: \"height: 20vh;\" +\n                        \" min-height:400px; white-space:pre; margin-top: 1rem;\"\n                },\n                onclick: () => {\n                    (document.getElementById(exportedTextSelector) as HTMLTextAreaElement).select();\n                    document.execCommand(\"copy\");\n                }, id: \"exportedText\"\n            }\n            ], ($modal) => {\n                $modal.modal(\"hide\");\n            }, false);\n    },\n\n    exportToFile: (format: string): void => {\n        if (format.toLowerCase() === \"json\") {\n            self.downloadFile(\"graph.json\", self.getDataAsJSON());\n        }\n        else if (format.toLowerCase() === \"dimacs\") {\n            self.downloadFile(\"graph.dimacs\", self.getDataAsDIMACS());\n        }\n    },\n\n    exportToText: (format: string): void => {\n        if (format.toLowerCase() === \"json\") {\n            document.getElementById(exportedTextSelector)!.innerHTML = JSON.stringify(JSON.parse(self.getDataAsJSON()), null, 2);\n        }\n        else if (format.toLowerCase() === \"dimacs\") {\n            document.getElementById(exportedTextSelector)!.innerHTML = self.getDataAsDIMACS();\n        }\n    },\n\n    getDataAsJSON: (): string => {\n        const d = GraphState.getGraphData(GraphState.graph);\n        const nodeKeys = [\"id\", \"label\", \"color\", \"x\", \"y\"];\n        const edgeKeys = [\"from\", \"to\", \"weight\", \"color\"];\n        d.nodes = help.keepOnlyKeys(d.nodes, nodeKeys) as NodeImmutPlain[];\n        d.edges = help.keepOnlyKeys(d.edges, edgeKeys) as EdgeImmutPlain[];\n\n        return JSON.stringify(d);\n    },\n\n    getDataAsDIMACS: (): string => {\n        // If I add direction, DIMACS cannot be used, it only works for undirected graphs\n        const g = GraphState.getGraphData();\n        let text = \"c This Graph was generated and exported from Michael Dombrowski's Graph Playground \" +\n            \"-- https://mikedombo.github.io/graphPlayground -- https://mikedombrowski.com\\n\";\n\n        let adj = GraphState.graph.getFullAdjacency();\n        adj = adj.filter((v: number[]) => {\n            return v.length !== 0;\n        });\n\n        const nodes: number[] = [];\n        adj.forEach((v: number[], i: number) => {\n            if (nodes.indexOf(i + 1) === -1) {\n                nodes.push(i + 1);\n            }\n            v.forEach((n: number) => {\n                if (nodes.indexOf(n + 1) === -1) {\n                    nodes.push(n + 1);\n                }\n            });\n        });\n\n        let edgeCount = 0;\n        let edgeText = \"\";\n        g.edges.forEach((v: EdgeImmutPlain) => {\n            edgeText += `e ${v.from + 1} ${v.to + 1}\\n`;\n            edgeCount++;\n        });\n        edgeText = edgeText.trim();\n\n        text += `p edge ${nodes.length} ${edgeCount}\\n`;\n        return text + edgeText;\n    },\n\n    downloadFile: (filename: string, text: string): void => {\n        const blob = new Blob([text], { type: 'text/plain' });\n        // @ts-ignore\n        if (window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveBlob(blob, filename);\n        }\n        else {\n            const a = window.document.createElement('a');\n            a.href = window.URL.createObjectURL(blob);\n            a.download = filename;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(blob as any);\n        }\n    },\n};\n\nexport default self;\n"],"names":["exportedTextSelector","self","importByString","string","format","toLowerCase","n","JSON","parse","window","network","setData","main","showSimpleModal","DataImportError","DataImportErrorText","err","JsonParseError","JsonParseErrorText","lines","split","forEach","l","vals","DimacsParseError","htmlEncode","DimacsParseErrorText","parseInt","addEdge","DimacsParseErrorNoProgram","d","getGraphData","nodes","v","label","id","toString","UnrecognizedInputError","makeImportTextModal","showFormModal","$modal","values","modal","ImportGraphFromText","Import","Cancel","type","ImportText","extraAttrs","style","Format","optionValues","optionText","makeImportFileModal","files","length","reader","FileReader","onload","event","target","result","getFileExtension","name","readAsText","ImportGraphFromFile","UploadFile","validationFunc","val","$files","get","MustChooseFileError","makeExportFileModal","ExportGraphToFile","initialValue","ExportToJson","onclick","exportToFile","class","clickDismiss","ExportToDimacs","makeExportTextModal","ExportGraphToText","exportToText","document","getElementById","select","execCommand","downloadFile","getDataAsJSON","getDataAsDIMACS","innerHTML","stringify","graph","keepOnlyKeys","edges","g","text","adj","getFullAdjacency","filter","i","indexOf","push","edgeCount","edgeText","from","to","trim","filename","blob","Blob","navigator","msSaveOrOpenBlob","msSaveBlob","a","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","revokeObjectURL"],"sourceRoot":""}
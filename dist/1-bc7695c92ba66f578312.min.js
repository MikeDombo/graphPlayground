(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{105:function(e,o,t){"use strict";t.r(o);var r=t(26),i=t(1);const a=i.a.deepFreeze([{from:1,to:2},{from:2,to:3},{from:3,to:4},{from:4,to:5},{from:5,to:1},{from:6,to:8},{from:7,to:9},{from:7,to:10},{from:8,to:10},{from:9,to:6},{from:1,to:6},{from:2,to:7},{from:3,to:8},{from:4,to:9},{from:5,to:10}]),n=i.a.deepFreeze([{from:1,to:2},{from:2,to:3},{from:2,to:4},{from:3,to:4},{from:3,to:4},{from:4,to:1},{from:4,to:1}]);o.default={graphNames:i.a.deepFreeze(["Petersen","Konigsberg","Complete","Hypercube"]),Petersen:()=>i.a.deepFreeze({edges:a,nodes:r.a.interpolateNodesFromEdges(a),directed:!1,weighted:!1}),Konigsberg:()=>i.a.deepFreeze({edges:n,nodes:r.a.interpolateNodesFromEdges(n),directed:!1,weighted:!1}),Complete:()=>{i.a.showFormModal((e,o)=>{e.modal("hide"),window.main.setData((e=>{let o=[],t=[];for(let r=0;r<e;r++){t.push({id:r,label:r.toString()});for(let t=r+1;t<e;t++)o.push({from:r,to:t})}return{nodes:t,edges:o,directed:!1,weighted:!1}})(o[0]),!1,!0,!0)},"Configurable Complete Graph","Go",[{type:"numeric",initialValue:5,label:"Number of Vertices",validationFunc:e=>e>=0||"Number of vertices must be non-negative"}])},Hypercube:()=>{i.a.showFormModal((e,o)=>{e.modal("hide"),window.main.setData((e=>{let o=[],t=[],r=Math.pow(2,e),a=(e,o)=>e.length<o?a("0"+e,o):e;const n=(e,o)=>{let t=a(e.toString(2),o).split("").reverse(),r=[];for(let e=0;e<o;e++)if("0"===t[e]){let o=t.slice();o[e]="1",r.push(parseInt(o.reverse().join(""),2))}return r};for(let i=0;i<r;i++)t.push({id:i,label:a(i.toString(2),e)}),n(i,e).forEach(e=>{o.push({from:i,to:e})});return i.a.deepFreeze({nodes:t,edges:o,directed:!1,weighted:!1})})(o[0]),!1,!0,!0)},"Configurable Hypercube Graph","Go",[{type:"numeric",initialValue:3,label:"Number of Dimensions",validationFunc:e=>e>=0||"Number of dimensions must be non-negative"}])},Custom:()=>{i.a.showFormModal((e,o)=>{e.modal("hide"),window.main.setData(((e,o=!1,t=!1)=>{let r=[];for(let o=0;o<e;o++)r.push({id:o,label:o.toString()});return i.a.deepFreeze({nodes:r,edges:[],directed:o,weighted:t})})(o[0],o[1],o[2]),!1,!0,!0)},"Configurable Graph","Go",[{type:"numeric",initialValue:0,label:"Number of Vertices",validationFunc:e=>e>=0||"Number of vertices must be non-negative"},{type:"checkbox",initialValue:!1,label:"Directed"},{type:"checkbox",initialValue:!1,label:"Weighted"}])}}}}]);
//# sourceMappingURL=1-bc7695c92ba66f578312.min.js.map
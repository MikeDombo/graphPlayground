{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/graphState.ts","webpack:///./src/js/genericHelpers.ts","webpack:///./src/js/main.ts","webpack:///./src/js/settings.ts","webpack:///./src/js/UIInteractions.ts","webpack:///./src/js/app.ts","webpack:///./src/js/graphHelpers.ts","webpack:///./src/js/GraphAlgorithmWorker.ts","webpack:///./src/js/GraphImmut/EdgeImmut.ts","webpack:///./src/js/GraphImmut/NodeImmut.ts","webpack:///./src/js/GraphImmut/GraphImmut.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","2","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","head","document","getElementsByTagName","script","createElement","charset","timeout","nc","setAttribute","src","p","0","1","jsonpScriptSrc","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","error","Error","request","undefined","setTimeout","appendChild","all","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","window","oldJsonpFunction","slice","getInt","v","parseInt","GraphState","setUpToDate","listOptions","upToDate","forEach","always","indexOf","makeAndPrintProperties","getProperty","updateIfNotUpdated","ignoreDuplicate","a","find","applyFunc","_a","sent","state","graphProperties","recalcLong","directional","settings","getOption","vertices","graph","getNumberOfNodes","edges","getNumberOfEdges","keys","__awaiter","_this","printableProperties","map","_b","_c","printGraphProperties","properties","k","_genericHelpers__WEBPACK_IMPORTED_MODULE_1__","toTitleCase","trim","htmlEncode","getElementById","innerHTML","addEdge","from","to","weight","edgeFrom","edgeTo","main","setData","nodes","clearColorFromNodes","getAllNodes","getAllEdges","addNode","label","x","y","editNode","id","iId","getGraphData","editEdge","newWeight","oldWeight","newGraph","_GraphImmut_GraphImmut__WEBPACK_IMPORTED_MODULE_2__","deleteEdge","deleteNode","color","nodeIDToLabel","getNode","_GraphImmut_NodeImmut__WEBPACK_IMPORTED_MODULE_3__","getLabel","toString","nodeLabelToID","filter","node","toLowerCase","getID","rID","found","getGraphAsDataSet","isWeighted","vis_index_network__WEBPACK_IMPORTED_MODULE_0__","setLocations","locations","newNodes","getAllNodesAsImmutableList","getAttribute","set","getAllEdgesAsImmutableList","isDirected","clearColors","directed","weighted","workerPool","backHistory","forwardHistory","maxHistory","ui","makeAndPrintGraphColoring","makeAndPrintEulerian","getAlgorithms","makeAndPrintIsCyclic","stronglyConnectedComponents","connectedComponents","graphColoring","eulerian","Chromatic Number","Connected Components","Strongly Connected Components","cyclic","defaultCancelCb","$modal","modal","self","deepCopy","deep","clone","copy","options","copyIsArray","isPlainObject","obj","proto","getPrototypeOf","Ctor","constructor","arguments","this","Array","isArray","deepFreeze","freeze","getOwnPropertyNames","prop","isFrozen","sort","arr","compareFunction","datasetToArray","ds","keepOnlyKeys","getFileExtension","filename","split","string","textContent","replace","printout","text","escape","flatten","rotate","max","iterable","reduce","b","Math","str","match","toUpperCase","showSimpleModal","title","body","showFormModal","initialValue","makeFormModal","successText","form","footer","f","jquery__WEBPACK_IMPORTED_MODULE_0__","class","formRow","basicMap","extraAttrs","attrname","validFunc","container","validationFunc","generalValidator","valueMutator","$v","val","valid","removeClass","next","remove","addClass","after","append","checked","for","prepend","clickDismiss","$b","onclick","on","parseFloat","$options_1","optionText","oText","oIndex","optionValues","$footer","tabindex","role","aria-hidden","data-dismiss","aria-label","html","off","last","trigger","first","successCb","cancelCb","vals","hasErrors","each","tagName","attr","files","hasClass","__webpack_exports__","main_self","graphState","visWeightEdgeEdit","callback","genericHelpers","visOptions","interaction","hover","manipulation","_d","_e","_h","$popup","concat","_f","_g","saveData","cancelEdit","confirm","network","_data","fromId","toId","operation","nodeLabelIDValidator","applyColors","graphColors","chromaticNumber","colors","randomColor_default","count","luminosity","G","recalcProps","graphChanged","rearrangeGraph","saveState","changeOption","g","GraphImmut","randomizeNetworkLayoutSeed","getPositions","disableEditMode","enableEditMode","stopLoadingAnimation","isRunning","terminateAllWebWorkers","printGraphAlgorithms","saveStateLocalStorage","getStateForSaving","getElementsByClassName","item","parentElement","classList","add","includes","undo","applyState","redo","newState","firstLoad","currentState","pop","oldKey","then","checkForLocalStorage","localStorage","setItem","JSON","stringify","shuffleNetworkLayout","round","random","layoutEngine","randomSeed","initialRandomSeed","addNetworkListeners","editEdgeMode","lastNetworkClickEvent","addEventListener","contains","deleteSelected","ctrlKey","shiftKey","Settings","removeItem","saveSettings","current","loadSettings","parse","getItem","setAll","setOptions","physics","arrows","editWithoutDrag","option","defaults","resetToDefault","asChangedDirectedWeighted","direction","weights","nodePhysics","makeAndPrintShortestPath","fn","myName","UIInteractions_UIInteractions","printAlreadyRunning","values","source","sink","iStartedProgress","startLoadingAnimation","w","getWorkerIfPossible","cleanup","pathExists","distance","cost","path","send","args","convertToGraphImmut","makeAndPrintComponents","stronglyConnected","UIInteractions_awaiter","cc","componentKey","components","UIInteractions_WorkerProxy","WorkerProxy","listener","worker","postMessage","onmessage","terminate","UIInteractions","display","makeAndPrintFFMCMF","makeAndPrintKruskal","makeAndPrintTopologicalSort","makeAndPrintDirectionalEulerian","registerListeners","makeSimpleClickListener","selector","querySelector","preventDefault","printHelp","printOptions","predefined","default","Petersen","Konigsberg","Complete","Hypercube","Custom","makeImportFileModal","makeImportTextModal","makeExportFileModal","makeExportTextModal","asDirected","asUndirected","asWeighted","asUnweighted","_i","Worker","nextIndex","findIndex","GraphAlgorithmWorker_default","prog","style","printGC","w_1","scc","graphHelpers","findVertexDegreesDirectional","getFullAdjacency","getAllOutDegrees","cb","maxFlow","flowPath","flow","capacity","totalWeight","mst","EdgeImmut","getFrom","getTo","$div","addAlgoToPane","alg","navlink","innerText","index_network","js_UIInteractions","singleton","install","Raven","loadDefault","jsonGraph","app_awaiter","adjacencyMatrix","degrees","out","in","outV","interpolateNodesFromEdges","_newTarget","getWeight","toPlain","NodeImmut","attributes","toReturn","attribute","getAllAttributes","assign","filterNodeExtraAttr","genericEdgesToImmutEdges","nodeMap","newEdges","immutable__WEBPACK_IMPORTED_MODULE_0__","edge","_EdgeImmut__WEBPACK_IMPORTED_MODULE_2__","genericNodesToImmutNodes","floor","_NodeImmut__WEBPACK_IMPORTED_MODULE_1__","nodeNum_1","numNodes","size","numEdges","alignNodeIDs","alignTo","nodeCount","rich","has","deleteAll","foundOneEdge","foundFirst","index","toArray","doubleEdges","addedEdges","getNodeAdjacency","adj","areAdjacent","id1","id2","getEdgesBetween","edgeList","getMinWeightEdgeBetween","minWeight","Infinity","reduceMultiGraph","reducer","multiEdges","uniques","Set","acc","keep","duplicateEdge"],"mappings":"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","file":"bundle-c9a0badc8388937962c2.min.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t2: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \"-\" + {\"0\":\"cb631b5f25faf19724bd\",\"1\":\"8a080730e01b14947bfa\"}[chunkId] + \".min.js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar head = document.getElementsByTagName('head')[0];\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\tvar error = new Error('Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')');\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\thead.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([104,4]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","\"use strict\";\r\n\r\nimport {DataSet, Edge} from 'vis/index-network';\r\nimport help from './genericHelpers';\r\nimport GraphImmut from './GraphImmut/GraphImmut';\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\nimport NodeImmut, {NodeImmutPlain} from \"./GraphImmut/NodeImmut\";\r\n\r\ninterface UpToDateProperties {\r\n    name: string;\r\n    upToDate: boolean;\r\n    type: string;\r\n    always?: boolean;\r\n    applyFunc?: (ignoreDuplicate?: boolean) => any;\r\n    [index: string]: string|boolean|((ignoreDuplicate?: boolean) => any)\r\n}\r\n\r\ninterface GraphProperties {\r\n    vertices: number;\r\n    edges: number;\r\n    eulerian: boolean;\r\n    \"Chromatic Number\": number | null;\r\n    \"Connected Components\": number | null;\r\n    \"Strongly Connected Components\": number | null;\r\n    cyclic: boolean;\r\n\r\n    [index: string]: boolean | number | null;\r\n}\r\n\r\ninterface GraphStateData {\r\n    stronglyConnectedComponents: null | { [key: number]: number };\r\n    connectedComponents: null | { [key: number]: number };\r\n    graphColoring: null | number[];\r\n\r\n    [index: string]: null | number[] | { [key: number]: number };\r\n}\r\n\r\nexport interface AddNodeI {\r\n    id?: number\r\n    label: string;\r\n    x: number;\r\n    y: number;\r\n    color?:string;\r\n}\r\n\r\nexport interface GraphStateHistory {\r\n    upToDate: UpToDateProperties[];\r\n    state: GraphStateData;\r\n    graph: GraphImmut;\r\n    graphProperties: GraphProperties;\r\n    [index: string]: UpToDateProperties[]|GraphStateData|GraphImmut|GraphProperties;\r\n}\r\n\r\nconst getInt = (v: string|number): number => {\r\n    if(typeof v === 'number'){\r\n        return v;\r\n    }\r\n    return parseInt(v);\r\n};\r\n\r\nexport default class GraphState {\r\n    public static workerPool: Worker[] = [];\r\n    public static backHistory: GraphStateHistory[] = [];\r\n    public static forwardHistory: GraphStateHistory[] = [];\r\n    public static maxHistory = 10;\r\n    public static upToDate: UpToDateProperties[] = [\r\n        {\r\n            name: \"Chromatic Number\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {\r\n            name: \"graphColoring\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {name: \"vertices\", upToDate: true, always: true, type: \"property\"},\r\n        {name: \"edges\", upToDate: true, always: true, type: \"property\"},\r\n        {\r\n            name: \"eulerian\", upToDate: false, type: \"property\",\r\n            applyFunc: (i) => {\r\n                return window.ui.makeAndPrintEulerian(i);\r\n            }\r\n        },\r\n        {\r\n            name: \"Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components').applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"connectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components').applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"Strongly Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components').applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"stronglyConnectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components').applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"cyclic\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintIsCyclic();\r\n            }\r\n        },\r\n    ];\r\n    public static state: GraphStateData = {\r\n        stronglyConnectedComponents: null,\r\n        connectedComponents: null,\r\n        graphColoring: null,\r\n    };\r\n    public static graph: GraphImmut = null;\r\n    public static graphProperties: GraphProperties = {\r\n        vertices: 0,\r\n        edges: 0,\r\n        eulerian: false,\r\n        \"Chromatic Number\": null,\r\n        \"Connected Components\": null,\r\n        \"Strongly Connected Components\": null,\r\n        cyclic: false,\r\n    };\r\n\r\n    static setUpToDate(value = false, listOptions?: string[]) {\r\n        const all = listOptions === null || typeof listOptions === \"undefined\";\r\n        let property = false;\r\n        GraphState.upToDate.forEach((v) => {\r\n            if ((!(\"always\" in v) || !v.always) && (all || listOptions.indexOf(v.name) > -1)) {\r\n                v.upToDate = value;\r\n                if (v.type === \"property\") {\r\n                    property = true;\r\n                }\r\n            }\r\n        });\r\n        if (property) {\r\n            GraphState.makeAndPrintProperties();\r\n        }\r\n    }\r\n\r\n    static async getProperty(property: string, updateIfNotUpdated = false, ignoreDuplicate = false): Promise<any> {\r\n        const a = GraphState.upToDate.find((v) => {\r\n            return (\"name\" in v && v.name === property);\r\n        });\r\n        if (!a.upToDate) {\r\n            if (\"applyFunc\" in a && updateIfNotUpdated) {\r\n                await a.applyFunc(ignoreDuplicate);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        if (a.type === \"state\") {\r\n            return Promise.resolve(GraphState.state[property]);\r\n        }\r\n        return Promise.resolve(GraphState.graphProperties[property]);\r\n    }\r\n\r\n    static async makeAndPrintProperties(recalcLong = false) {\r\n        const directional = window.settings.getOption(\"direction\");\r\n\r\n        GraphState.graphProperties.vertices = GraphState.graph.getNumberOfNodes();\r\n        GraphState.graphProperties.edges = GraphState.graph.getNumberOfEdges();\r\n\r\n        if (!directional) {\r\n            await GraphState.getProperty(\"eulerian\", true, true);\r\n        }\r\n\r\n        const p = Object.keys(GraphState.graphProperties);\r\n        if (recalcLong) {\r\n            p.forEach(async (v) => {\r\n                await GraphState.getProperty(v, true);\r\n            });\r\n        }\r\n\r\n        const printableProperties: any = {};\r\n        await Promise.all(p.map(async (v) => {\r\n            printableProperties[v] = await GraphState.getProperty(v);\r\n        }));\r\n\r\n        GraphState.printGraphProperties(printableProperties);\r\n    }\r\n\r\n    static printGraphProperties(properties: any) {\r\n        let p = \"\";\r\n        Object.keys(properties).forEach((k) => {\r\n            if (properties[k] !== null) {\r\n                p += `${help.toTitleCase(k)}: ${properties[k]}\\n`;\r\n            }\r\n        });\r\n        p = p.trim();\r\n        p = help.htmlEncode(p);\r\n        document.getElementById(\"graphProps\").innerHTML = `<p class='nav-link'>${p}</p>`;\r\n    }\r\n\r\n    static addEdge(from: number|string, to: number|string, weight = 0, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        graph = graph.addEdge(edgeFrom, edgeTo, weight);\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[]\r\n        });\r\n    }\r\n\r\n    static addNode(data: AddNodeI, graph = GraphState.graph) {\r\n        graph = graph.addNode({label: data.label, x: data.x, y: data.y});\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[]\r\n        });\r\n    }\r\n\r\n    static editNode(id: number|string, label: string, graph = GraphState.graph) {\r\n        const iId = getInt(id);\r\n        graph = graph.editNode(iId, {label});\r\n        window.main.setData(GraphState.getGraphData(graph), false, false);\r\n    }\r\n\r\n    static editEdge(from: number|string, to: number|string, newWeight: number, oldWeight: number, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        const newGraph = graph.editEdge(edgeFrom, edgeTo, newWeight, oldWeight);\r\n        if (newGraph instanceof GraphImmut) {\r\n            window.main.setData(GraphState.getGraphData(newGraph), false, false);\r\n        }\r\n    }\r\n\r\n    static deleteEdge(from: number|string, to: number|string, weight: number = null, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        graph = graph.deleteEdge(edgeFrom, edgeTo, weight, false);\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[]\r\n        });\r\n    }\r\n\r\n    static deleteNode(id: number|string, graph = GraphState.graph) {\r\n        const iId = getInt(id);\r\n        const newGraph = graph.deleteNode(iId);\r\n        if (newGraph instanceof GraphImmut) {\r\n            window.main.setData({\r\n                nodes: GraphState.clearColorFromNodes(newGraph.getAllNodes() as NodeImmutPlain[]),\r\n                edges: newGraph.getAllEdges() as EdgeImmutPlain[]\r\n            });\r\n        }\r\n    }\r\n\r\n    static clearColorFromNodes(nodes: NodeImmutPlain[]): NodeImmutPlain[] {\r\n        nodes.forEach((v) => {\r\n            v.color = null;\r\n        });\r\n        return nodes;\r\n    }\r\n\r\n    static nodeIDToLabel(id: number, graph = GraphState.graph): string {\r\n        const n = graph.getNode(id, true);\r\n        if (n !== false && n !== null && n instanceof NodeImmut && n.getLabel().trim().length > 0) {\r\n            return n.getLabel().trim();\r\n        }\r\n\r\n        return id.toString();\r\n    }\r\n\r\n    // Preferentially search by ID, label, and case-insensitive label\r\n    static nodeLabelToID(label: string, graph = GraphState.graph) {\r\n        let n = graph.getAllNodes(true) as NodeImmut[];\r\n        n = n.filter((node) => {\r\n            return node.getLabel().toLowerCase() === label.toLowerCase() || node.getID().toString() === label;\r\n        });\r\n\r\n        if (n.length === 0) {\r\n            return -1;\r\n        }\r\n        else if (n.length === 1) {\r\n            return n[0].getID();\r\n        }\r\n\r\n        let rID = -1;\r\n        let found = false;\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getID().toString() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel().toLowerCase() === label.toLowerCase()) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        return rID;\r\n    }\r\n\r\n    // Return graph as a Vis compatible dataset\r\n    static getGraphAsDataSet(graph: GraphImmut): { nodes: DataSet<vis.Node>; edges: DataSet<vis.Edge> } {\r\n        const d = GraphState.getGraphData(graph);\r\n        if (graph.isWeighted()) {\r\n            d.edges.forEach((e) => {\r\n                e.label = e.weight.toString();\r\n            });\r\n        }\r\n\r\n        return {nodes: new DataSet(d.nodes as vis.Node[]), edges: new DataSet(d.edges as vis.Edge[])};\r\n    }\r\n\r\n    static setLocations(locations: {[key: string]: {x: number; y: number}}, graph = GraphState.graph): GraphImmut {\r\n        let newNodes = graph.getAllNodesAsImmutableList();\r\n        Object.keys(locations).forEach((i) => {\r\n            const v = locations[i];\r\n            const node = newNodes.get(parseInt(i));\r\n            // Only change when there is actually a new position\r\n            if (node.getAttribute(\"x\") !== v.x || node.getAttribute(\"y\") !== v.y) {\r\n                // Batch up all changes that we'll be making\r\n                newNodes = newNodes.set(parseInt(i), node.editNode(node.getLabel(), {x: v.x, y: v.y}));\r\n            }\r\n        });\r\n\r\n        return new GraphImmut(newNodes, graph.getAllEdgesAsImmutableList(), graph.isDirected(), graph.isWeighted());\r\n    }\r\n\r\n    static getGraphData(graph = GraphState.graph, clearColors = false): GraphPlain {\r\n        const nodes = graph.getAllNodes() as NodeImmutPlain[];\r\n        return {\r\n            nodes: clearColors ? GraphState.clearColorFromNodes(nodes) : nodes,\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[],\r\n            directed: graph.isDirected(),\r\n            weighted: graph.isWeighted()\r\n        };\r\n    }\r\n}\r\n","\"use strict\";\r\n\r\nimport * as $ from 'jquery';\r\n\r\ndeclare interface ModalFormRow {\r\n    type: string;\r\n    label?: string;\r\n    initialValue?: any;\r\n    id?: string | number;\r\n    extraAttrs?: any;\r\n    validationFunc?: (value?: any, container?: JQuery) => boolean | string;\r\n    clickDismiss?: boolean;\r\n    onclick?: (...args: any[]) => void;\r\n    optionText?: any[];\r\n    optionValues?: any[];\r\n}\r\n\r\ndeclare interface BasicMapType {\r\n    class: string;\r\n    id: string;\r\n    value: any,\r\n\r\n    [key: number]: any,\r\n\r\n    [key: string]: any\r\n}\r\n\r\nconst defaultCancelCb = ($modal: JQuery) => {\r\n    $modal.modal(\"hide\");\r\n};\r\n\r\nconst self = {\r\n    deepCopy(deep: boolean, clone: any, copy: any) {\r\n        const isPlainObject = (obj: any) => {\r\n            if (!obj || {}.toString.call(obj) !== \"[object Object]\") {\r\n                return false;\r\n            }\r\n\r\n            let proto = Object.getPrototypeOf(obj);\r\n\r\n            if (!proto) {\r\n                return true;\r\n            }\r\n\r\n            // Objects with prototype are plain iff they were constructed by a global Object function\r\n            let Ctor = ({}).hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\r\n            return typeof Ctor === \"function\" && ({}).hasOwnProperty.toString.call(Ctor) === ({}).hasOwnProperty.toString.call(Object);\r\n        };\r\n\r\n\r\n        let options, name, src, copyIsArray,\r\n            target = arguments[0] || {},\r\n            i = 1,\r\n            length = arguments.length;\r\n\r\n        // Handle a deep copy situation\r\n        if (typeof target === \"boolean\") {\r\n            deep = target;\r\n\r\n            // Skip the boolean and the target\r\n            target = arguments[i] || {};\r\n            i++;\r\n        }\r\n\r\n        // Handle case when target is a string or something (possible in deep copy)\r\n        if (typeof target !== \"object\" && typeof target !== \"function\") {\r\n            target = {};\r\n        }\r\n\r\n        if (i === length) {\r\n            target = this;\r\n            i--;\r\n        }\r\n\r\n        for (; i < length; i++) {\r\n\r\n            // Only deal with non-null/undefined values\r\n            if ((options = arguments[i]) != null) {\r\n\r\n                // Extend the base object\r\n                for (name in options) {\r\n                    src = target[name];\r\n                    copy = options[name];\r\n\r\n                    // Prevent never-ending loop\r\n                    if (target === copy) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Recurse if we're merging plain objects or arrays\r\n                    if (deep && copy && (isPlainObject(copy) ||\r\n                        (copyIsArray = Array.isArray(copy)))) {\r\n\r\n                        if (copyIsArray) {\r\n                            copyIsArray = false;\r\n                            clone = src && Array.isArray(src) ? src : [];\r\n\r\n                        } else {\r\n                            clone = src && isPlainObject(src) ? src : {};\r\n                        }\r\n\r\n                        // Never move original objects, clone them\r\n                        target[name] = self.deepCopy(deep, clone, copy);\r\n\r\n                        // Don't bring in undefined values\r\n                    } else if (copy !== undefined) {\r\n                        target[name] = copy;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the modified object\r\n        return target;\r\n    },\r\n\r\n    deepFreeze: <T>(o: T): Readonly<T> => {\r\n        Object.freeze(o);\r\n\r\n        Object.getOwnPropertyNames(o).forEach((prop: string | number) => {\r\n            if (o.hasOwnProperty(prop) && (o as any)[prop] !== null\r\n                && (typeof (o as any)[prop] === \"object\" || typeof (o as any)[prop] === \"function\")\r\n                && !Object.isFrozen((o as any)[prop])) {\r\n                self.deepFreeze((o as any)[prop]);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    },\r\n\r\n    sort: <T>(arr: T[], compareFunction: (a: any, b: any) => number): T[] => {\r\n        return [...arr].sort(compareFunction);\r\n    },\r\n\r\n    datasetToArray: (ds: any, key: string): Readonly<any[]> => {\r\n        const r: any[] = [];\r\n        ds.forEach((v: { [index: string]: any }) => {\r\n            r.push(v[key]);\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    keepOnlyKeys: <T>(arr: T[], keys: string[]): Readonly<T[]> => {\r\n        arr = arr.slice();\r\n        arr.forEach((v: any) => {\r\n            const k = Object.keys(v);\r\n            k.forEach((key) => {\r\n                if (keys.indexOf(key) < 0) {\r\n                    delete v[key];\r\n                }\r\n            });\r\n        });\r\n        return self.deepFreeze(arr);\r\n    },\r\n\r\n    getFileExtension: (filename: string): string => {\r\n        return filename.split(\".\").splice(-1)[0];\r\n    },\r\n\r\n    htmlEncode: (string: string): string => {\r\n        const t = document.createElement(\"textarea\");\r\n        t.textContent = string;\r\n        string = t.innerHTML.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>');\r\n        return string;\r\n    },\r\n\r\n    printout: (text: string, escape?: string): void => {\r\n        if (escape) {\r\n            text = this.htmlEncode(escape);\r\n        }\r\n        document.getElementById(\"printout\").innerHTML = text;\r\n    },\r\n\r\n    flatten: <T>(map: { [key: string]: T }): Readonly<T[]> => {\r\n        const r: T[] = [];\r\n        Object.keys(map).forEach((i) => {\r\n            r.push(map[i]);\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    rotate: (map: any): Readonly<any> => {\r\n        const r: any = {};\r\n        Object.keys(map).forEach((i) => {\r\n            if (map[i] in r) {\r\n                r[map[i]].push(i);\r\n            }\r\n            else {\r\n                r[map[i]] = [i];\r\n            }\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    max: (iterable: any[]): number => {\r\n        return iterable.reduce((a, b) => {\r\n            return Math.max(a, b);\r\n        });\r\n    },\r\n\r\n    toTitleCase: (str: string): string => {\r\n        return str.replace(/(?:^|\\s)\\w/g, (match) => {\r\n            return match.toUpperCase();\r\n        });\r\n    },\r\n\r\n    showSimpleModal: (title: string, body: string): void => {\r\n        self.showFormModal(null, title, null, [{type: \"html\", initialValue: body}], null, false);\r\n    },\r\n\r\n    makeFormModal: (title: string, successText: string, form: ModalFormRow[], footer = true): JQuery => {\r\n        const f = $(\"<div>\", {class: \"modal-body form-group\"});\r\n        form.forEach((formRow, i) => {\r\n            if (!(\"initialValue\" in formRow)) {\r\n                formRow.initialValue = \"\";\r\n            }\r\n\r\n            let id = \"form-modal-\" + i;\r\n            if (\"id\" in formRow && formRow.id !== \"\" && formRow.id !== null && typeof formRow.id === \"string\") {\r\n                id = formRow.id;\r\n            }\r\n\r\n            const basicMap: BasicMapType = {class: \"form-control\", id, value: formRow.initialValue};\r\n\r\n            if (\"extraAttrs\" in formRow) {\r\n                Object.keys(formRow.extraAttrs).forEach((attrname) => {\r\n                    if (typeof formRow.extraAttrs[attrname] !== \"function\") {\r\n                        basicMap[attrname] = formRow.extraAttrs[attrname];\r\n                    }\r\n                });\r\n            }\r\n\r\n            let validFunc = (value?: any, container?: JQuery): string | boolean => true;\r\n            if (\"validationFunc\" in formRow) {\r\n                validFunc = formRow.validationFunc;\r\n            }\r\n\r\n            const generalValidator = (event: any, valueMutator: (v: any) => any = null) => {\r\n                const $v = $(event.target);\r\n                let val = $v.val();\r\n                if (valueMutator !== null && typeof valueMutator === \"function\") {\r\n                    val = valueMutator(val);\r\n                }\r\n                const valid = validFunc(val, $v);\r\n\r\n                if (valid === true) {\r\n                    $v.removeClass(\"is-invalid\").next(\"#feedback-\" + i).remove();\r\n                }\r\n                else {\r\n                    $v.addClass(\"is-invalid\");\r\n                    if ($v.next(\"#feedback-\" + i).length === 0) {\r\n                        $v.after($(\"<div>\", {class: \"invalid-feedback\", id: \"feedback-\" + i}).text(valid));\r\n                    }\r\n                }\r\n            };\r\n\r\n            if (formRow.type === \"html\") {\r\n                f.append($(formRow.initialValue));\r\n            }\r\n            else if (formRow.type === \"checkbox\") {\r\n                basicMap.type = \"checkbox\";\r\n                basicMap.class = \"form-check-input\";\r\n                delete basicMap.value;\r\n                if (formRow.initialValue) {\r\n                    basicMap.checked = \"\";\r\n                }\r\n\r\n                f.append($(\"<div>\", {class: \"form-check\"})\r\n                    .append($(\"<label>\", {for: id, class: \"form-check-label\"})\r\n                        .text(formRow.label).prepend($(\"<input>\", basicMap))\r\n                    )\r\n                );\r\n            }\r\n            else {\r\n                f.append($(\"<label>\", {for: id, class: \"col-form-label\"}).text(formRow.label));\r\n\r\n                if (formRow.type === \"button\") {\r\n                    if (\"clickDismiss\" in formRow && formRow.clickDismiss === true) {\r\n                        basicMap.class += \" btn-dismiss\";\r\n                    }\r\n                    const $b = $(\"<button>\", basicMap).text(formRow.initialValue);\r\n                    if (\"onclick\" in formRow && typeof formRow.onclick === \"function\") {\r\n                        $b.on(\"click\", formRow.onclick);\r\n                    }\r\n                    f.append($b);\r\n                }\r\n                else if (formRow.type === \"numeric\") {\r\n                    basicMap.type = \"number\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", (e) => {\r\n                        generalValidator(e, parseFloat);\r\n                    }));\r\n                }\r\n                else if (formRow.type === \"text\") {\r\n                    basicMap.type = \"text\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                }\r\n                else if (formRow.type === \"file\") {\r\n                    basicMap.type = \"file\";\r\n                    basicMap.class = \"form-control-file form-control\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                }\r\n                else if (formRow.type === \"textarea\") {\r\n                    const $b = $(\"<textarea>\", basicMap).on(\"blur validate\", generalValidator);\r\n                    if (\"onclick\" in formRow) {\r\n                        $b.on(\"click\", formRow.onclick);\r\n                    }\r\n                    f.append($b);\r\n                }\r\n                else if (formRow.type === \"select\") {\r\n                    const $options = $(\"<select>\", basicMap);\r\n                    formRow.optionText.forEach((oText, oIndex) => {\r\n                        if (oIndex < formRow.optionValues.length) {\r\n                            $options.append($(\"<option>\", {value: formRow.optionValues[oIndex]}).text(oText));\r\n                        }\r\n                        else {\r\n                            $options.append($(\"<option>\").text(oText));\r\n                        }\r\n                    });\r\n                    f.append($options.on(\"blur validate\", generalValidator));\r\n                }\r\n            }\r\n        });\r\n\r\n        let $footer = $(\"<div>\", {class: \"modal-footer\"})\r\n            .append($(\"<button>\", {class: \"btn btn-success\", type: \"button\"}).text(successText))\r\n            .append($(\"<button>\", {class: \"btn btn-danger btn-cancel\", type: \"button\"}).text(\"Cancel\"));\r\n\r\n        if (footer === false) {\r\n            $footer = null;\r\n        }\r\n\r\n        const $modal = ($(\"<div>\", {class: \"modal fade\", tabindex: \"-1\", role: \"dialog\", \"aria-hidden\": \"true\"}));\r\n        $modal\r\n            .append($(\"<div>\", {class: \"modal-dialog\"})\r\n                .append($(\"<div>\", {class: \"modal-content\"})\r\n                    .append($(\"<div>\", {class: \"modal-header\"})\r\n                        .append($(\"<h5>\", {class: \"modal-title\"}).text(title))\r\n                        .append($(\"<button>\", {class: \"close\", \"data-dismiss\": \"modal\", \"aria-label\": \"close\"})\r\n                            .append($(\"<span>\", {\"aria-hidden\": \"true\"}).html(\"&times;\"))\r\n                        )\r\n                    )\r\n                    .append(f)\r\n                    .append($footer)\r\n                )\r\n            );\r\n        $modal.find(\"input, textarea\").off(\"keyup\").on(\"keyup\", (e) => {\r\n            if (e.key === \"Enter\") {\r\n                $(\".btn-success\").last().trigger(\"click\");\r\n            }\r\n        });\r\n        $modal.on(\"shown.bs.modal\", () => {\r\n            $modal.find(\"input[type='text'], input[type='number'], textarea\").first().trigger(\"focus\");\r\n        });\r\n\r\n        return $modal;\r\n    },\r\n\r\n    showFormModal: (successCb: ($modal: JQuery, vals: any[]) => void,\r\n                    title: string, successText: string, form: ModalFormRow[],\r\n                    cancelCb: ($modal: JQuery) => void = defaultCancelCb, footer = true) => {\r\n        const $modal = self.makeFormModal(title, successText, form, footer);\r\n\r\n        $modal.on(\"click\", \".btn-cancel\", () => {\r\n            if (typeof cancelCb === \"function\") {\r\n                cancelCb($modal);\r\n            }\r\n            else {\r\n                $modal.modal(\"hide\");\r\n            }\r\n        }).on(\"click\", \".btn-dismiss\", () => {\r\n            $modal.modal(\"hide\");\r\n        }).on(\"click\", \".btn-success\", () => {\r\n            const vals: any[] = [];\r\n            let hasErrors = false;\r\n\r\n            $modal.find(\"input, textarea, select\").each((i, v) => {\r\n                const $v = $(v);\r\n\r\n                if (($v as any).tagName === \"SELECT\") {\r\n                    vals.push($v.find(\":selected\").val());\r\n                }\r\n                else if ($v.attr(\"type\") === \"checkbox\") {\r\n                    vals.push($v.prop(\"checked\"));\r\n                }\r\n                else if ($v.attr(\"type\") === \"file\") {\r\n                    vals.push(($v.get(0) as any).files);\r\n                }\r\n                else if ($v.attr(\"type\") === \"number\") {\r\n                    vals.push(parseFloat($v.val() as string));\r\n                }\r\n                else {\r\n                    vals.push($v.val());\r\n                }\r\n\r\n                if ($v.trigger(\"validate\").hasClass(\"is-invalid\")) {\r\n                    hasErrors = true;\r\n                }\r\n\r\n            });\r\n\r\n            if (!hasErrors && typeof successCb === \"function\") {\r\n                successCb($modal, vals);\r\n            }\r\n        }).on(\"hidden.bs.modal\", () => {\r\n            $modal.remove();\r\n        }).modal(\"show\");\r\n    }\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\n\r\nimport help from './genericHelpers';\r\nimport randomColor from 'randomcolor';\r\nimport GraphState, {AddNodeI, GraphStateHistory} from './graphState';\r\nimport GraphImmut from \"./GraphImmut/GraphImmut\";\r\nimport {NodeImmutPlain} from \"./GraphImmut/NodeImmut\";\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\n\r\nexport interface MainI {\r\n    graphState: typeof GraphState;\r\n    container: HTMLElement;\r\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback: Function) => void;\r\n    visOptions: {\r\n        interaction: { hover: boolean };\r\n        manipulation: {\r\n            addNode: (data: AddNodeI, callback: Function) => void;\r\n            editNode: (data: AddNodeI, callback: Function) => void;\r\n            addEdge: (data: VisEdgeInternal, callback?: Function) => void;\r\n            editEdge: (data: VisEdgeInternal, callback: Function) => void;\r\n            deleteEdge: (data: { edges: string[] }, callback?: Function) => void;\r\n            deleteNode: (data: { nodes: string[] }, callback: Function) => void\r\n        }\r\n    };\r\n    cancelEdit: (callback: Function) => void;\r\n    saveData: (data: any, callback: Function, operation: string, label: string) => void;\r\n    nodeLabelIDValidator: (v: string) => (boolean | string);\r\n    applyColors: () => Promise<void>;\r\n    setData: (data: GraphPlain, recalcProps?: boolean, graphChanged?: boolean, rearrangeGraph?: boolean) => void;\r\n    saveState: () => void;\r\n    getStateForSaving: () => GraphStateHistory;\r\n    undo: () => void;\r\n    redo: () => void;\r\n    applyState: (undo?: boolean, newState?: any) => void;\r\n    saveStateLocalStorage: () => void;\r\n    shuffleNetworkLayout: () => void;\r\n    randomizeNetworkLayoutSeed: (network: VisNetworkInternals) => void;\r\n    addNetworkListeners: (network: vis.Network) => void\r\n}\r\n\r\ninterface VisNetworkEvent {\r\n    edges: vis.DataSet<vis.Edge>;\r\n    nodes: vis.DataSet<vis.Node>;\r\n}\r\n\r\ninterface VisNetworkInternals extends vis.Network {\r\n    layoutEngine: {\r\n        randomSeed: number,\r\n        initialRandomSeed: number\r\n    }\r\n}\r\n\r\ninterface VisEditEdgeInternal {\r\n    from: { id: string | number };\r\n    to: { id: string | number };\r\n    label?: string\r\n}\r\n\r\ninterface VisEdgeInternal {\r\n    from: string | number;\r\n    to: string | number;\r\n    id: string;\r\n    label?: string\r\n}\r\n\r\nconst self: MainI = {\r\n    graphState: GraphState,\r\n    container: document.getElementById('network'),\r\n    // Function used to overwrite the edge edit functionality when weights are active\r\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback) => {\r\n        help.showFormModal(($modal, vals) => {\r\n            callback(null);\r\n            $modal.modal(\"hide\");\r\n            const value = parseFloat(vals[0]);\r\n            GraphState.editEdge(data.from.id, data.to.id, value, parseFloat(data.label));\r\n        }, \"Edit Edge\", \"Save\", [\r\n            {\r\n                type: \"numeric\",\r\n                label: \"Weight/Capacity\",\r\n                initialValue: parseFloat(data.label)\r\n            }\r\n        ]);\r\n    },\r\n    visOptions: {\r\n        interaction: {hover: true},\r\n        manipulation: {\r\n            addNode: async (data, callback) => {\r\n                const $popup = help.makeFormModal(\"Add Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: `<p>Node ID: ${await GraphState.getProperty(\"vertices\")}</p>`\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: await GraphState.getProperty(\"vertices\")}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"add\", $popup.find(\"input\").first().val() as string);\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            editNode: (data, callback) => {\r\n                const $popup = help.makeFormModal(\"Edit Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: `<p>Node ID: ${data.id}</p>`\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: data.label}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"editNode\", $popup.find(\"input\").first().val() as string);\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            addEdge: (data, callback) => {\r\n                const apply = () => {\r\n                    if (typeof callback === \"function\") {\r\n                        callback(null);\r\n                    }\r\n                    GraphState.addEdge(data.from, data.to);\r\n                };\r\n                if (data.from === data.to) {\r\n                    if (confirm(\"Do you want to connect the node to itself?\")) {\r\n                        apply();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                apply();\r\n            },\r\n            editEdge: (data, callback) => {\r\n                callback(null);\r\n                self.visOptions.manipulation.deleteEdge({edges: [data.id]});\r\n                self.visOptions.manipulation.addEdge(data);\r\n            },\r\n            deleteEdge: (data, callback) => {\r\n                if (typeof callback === \"function\") {\r\n                    callback(null);\r\n                }\r\n                data.edges.forEach((v: any) => {\r\n                    let weight = null;\r\n                    if (typeof (window.network as any).body.data.edges._data[v].label !== \"undefined\") {\r\n                        weight = parseFloat((window.network as any).body.data.edges._data[v].label);\r\n                    }\r\n\r\n                    GraphState.deleteEdge((window.network as any).body.edges[v].fromId,\r\n                        (window.network as any).body.edges[v].toId, weight);\r\n                });\r\n            },\r\n            deleteNode: (data, callback) => {\r\n                callback(null);\r\n                data.nodes.forEach((v: string) => {\r\n                    GraphState.deleteNode(v);\r\n                });\r\n            },\r\n        },\r\n    },\r\n\r\n    cancelEdit: (callback) => {\r\n        if (typeof callback === \"function\") {\r\n            callback(null);\r\n        }\r\n    },\r\n\r\n    saveData: (data, callback, operation, label) => {\r\n        callback(null);\r\n\r\n        data.label = label;\r\n        if (operation === \"add\") {\r\n            GraphState.addNode(data);\r\n        }\r\n        else if (operation === \"editNode\") {\r\n            GraphState.editNode(data.id, data.label);\r\n        }\r\n    },\r\n\r\n    nodeLabelIDValidator: (v) => {\r\n        if (GraphState.nodeLabelToID(v) > -1) {\r\n            return true;\r\n        }\r\n        return \"Invalid Label or ID\";\r\n    },\r\n\r\n    applyColors: async () => {\r\n        if (window.settings.getOption(\"direction\")) {\r\n            return;\r\n        }\r\n        const graphColors = await GraphState.getProperty(\"graphColoring\", true);\r\n        const chromaticNumber = await GraphState.getProperty(\"Chromatic Number\", true);\r\n\r\n        const colors = randomColor({count: chromaticNumber, luminosity: \"light\"});\r\n        let G = GraphState.graph;\r\n        (G.getAllNodes() as NodeImmutPlain[]).forEach((v) => {\r\n            G = G.editNode(v.id, {color: colors[graphColors[v.id]]});\r\n        });\r\n        self.setData(GraphState.getGraphData(G), false, false);\r\n    },\r\n\r\n    setData: (data, recalcProps = false, graphChanged = true, rearrangeGraph = false) => {\r\n        // Store existing positions in the data if we're supposed to keep the layout\r\n        if (rearrangeGraph) {\r\n            data.nodes.forEach((v) => {\r\n                delete v.x;\r\n                delete v.y;\r\n            });\r\n        }\r\n\r\n        if (graphChanged) {\r\n            self.saveState();\r\n        }\r\n\r\n        if (\"directed\" in data) {\r\n            window.settings.changeOption(\"direction\", data.directed);\r\n        }\r\n        if (\"weighted\" in data) {\r\n            window.settings.changeOption(\"weights\", data.weighted);\r\n        }\r\n        const directional = window.settings.getOption(\"direction\") as boolean;\r\n        const weighted = window.settings.getOption(\"weights\") as boolean;\r\n\r\n        const g = new GraphImmut(data.nodes, data.edges, directional, weighted);\r\n        GraphState.graph = g;\r\n\r\n        // Set a new random seed so that the layout will be different\r\n        self.randomizeNetworkLayoutSeed(window.network as VisNetworkInternals);\r\n        window.network.setData(GraphState.getGraphAsDataSet(g));\r\n        GraphState.graph = GraphState.setLocations(window.network.getPositions());\r\n\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        if (graphChanged) {\r\n            window.ui.stopLoadingAnimation();\r\n            window.ui.isRunning = {};\r\n            window.ui.terminateAllWebWorkers();\r\n            window.ui.printGraphAlgorithms();\r\n            help.printout(\"\");\r\n            GraphState.setUpToDate();\r\n            GraphState.makeAndPrintProperties(recalcProps);\r\n        }\r\n\r\n        self.saveStateLocalStorage();\r\n    },\r\n\r\n    saveState: () => {\r\n        if (GraphState.graph === null) {\r\n            return;\r\n        }\r\n\r\n        if (GraphState.backHistory.length >= GraphState.maxHistory) {\r\n            GraphState.backHistory.shift();\r\n        }\r\n\r\n        GraphState.backHistory.push(self.getStateForSaving());\r\n        GraphState.forwardHistory = [];\r\n        document.getElementsByClassName(\"icon-undo\").item(0).parentElement.parentElement.classList.add(\"active\");\r\n    },\r\n\r\n    getStateForSaving: () => {\r\n        const state: any = {};\r\n        Object.keys(GraphState).forEach((k: string) => {\r\n            const v: any = (GraphState as any)[k];\r\n            if (typeof v !== \"function\") {\r\n                if (typeof v !== \"object\") {\r\n                    state[k] = v;\r\n                }\r\n                else {\r\n                    if (k === \"graph\" && v !== null) {\r\n                        state[k] = v;\r\n                    }\r\n                    if (!k.toLowerCase().includes(\"history\")) {\r\n                        state[k] = help.deepCopy(true, Array.isArray(v) ? [] : {}, v);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return state as GraphStateHistory;\r\n    },\r\n\r\n    undo: () => {\r\n        if (GraphState.backHistory.length > 0) {\r\n            self.applyState(true);\r\n        }\r\n    },\r\n\r\n    redo: () => {\r\n        if (GraphState.forwardHistory.length > 0) {\r\n            self.applyState(false);\r\n        }\r\n    },\r\n\r\n    applyState: (undo = true, newState: GraphStateHistory = null) => {\r\n        const firstLoad = newState !== null;\r\n        const currentState = self.getStateForSaving();\r\n\r\n        if (!firstLoad) {\r\n            if (undo) {\r\n                newState = GraphState.backHistory.pop();\r\n            }\r\n            else {\r\n                newState = GraphState.forwardHistory.pop();\r\n            }\r\n        }\r\n\r\n        //@ts-ignore Ignore accessing private props. I do this because saving the state lost the type of the data\r\n        newState.graph = new GraphImmut(newState.graph.nodes, newState.graph.edges, newState.graph.directed, newState.graph.weighted);\r\n\r\n        window.settings.changeOption(\"direction\", newState.graph.isDirected());\r\n        window.settings.changeOption(\"weights\", newState.graph.isWeighted());\r\n\r\n        GraphState.graph = newState.graph;\r\n\r\n        window.network.setData(GraphState.getGraphAsDataSet(GraphState.graph));\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        window.ui.printGraphAlgorithms();\r\n        help.printout(\"\");\r\n\r\n        Object.keys(newState).forEach((k: string) => {\r\n            const v = newState[k];\r\n            if (typeof v !== \"object\") {\r\n                (GraphState as any)[k] = v;\r\n            }\r\n            else if (!k.toLowerCase().includes(\"history\") && k.toLowerCase() !== \"graph\") {\r\n                if (k.toLowerCase() === \"uptodate\") {\r\n                    Object.keys((GraphState as any)[k]).forEach((oldKey) => {\r\n                        (GraphState as any)[k][oldKey].upToDate = (v as any)[oldKey].upToDate;\r\n                    });\r\n                }\r\n                else {\r\n                    (GraphState as any)[k] = help.deepCopy(true, (GraphState as any)[k], v);\r\n                }\r\n            }\r\n        });\r\n\r\n        GraphState.makeAndPrintProperties().then(() => {\r\n            if (undo && !firstLoad) {\r\n                document.getElementsByClassName(\"icon-redo\").item(0).parentElement.parentElement.classList.add(\"active\");\r\n                if (GraphState.backHistory.length === 0) {\r\n                    document.getElementsByClassName(\"icon-undo\").item(0).parentElement.parentElement.classList.remove(\"active\");\r\n                }\r\n                GraphState.forwardHistory.push(currentState);\r\n            }\r\n            else if (!undo && !firstLoad) {\r\n                document.getElementsByClassName(\"icon-undo\").item(0).parentElement.parentElement.classList.add(\"active\");\r\n                if (GraphState.forwardHistory.length === 0) {\r\n                    document.getElementsByClassName(\"icon-redo\").item(0).parentElement.parentElement.classList.remove(\"active\");\r\n                }\r\n                GraphState.backHistory.push(currentState);\r\n            }\r\n\r\n            self.saveStateLocalStorage();\r\n        });\r\n    },\r\n\r\n    saveStateLocalStorage: () => {\r\n        if (window.settings.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.lastState\", JSON.stringify(self.getStateForSaving()));\r\n        }\r\n    },\r\n\r\n    shuffleNetworkLayout: () => {\r\n        self.setData({\r\n            nodes: GraphState.graph.getAllNodes() as NodeImmutPlain[],\r\n            edges: GraphState.graph.getAllEdges() as EdgeImmutPlain[]\r\n        }, false, false, true);\r\n    },\r\n\r\n    randomizeNetworkLayoutSeed: (network) => {\r\n        const r = Math.round(Math.random() * 1000000);\r\n        network.layoutEngine.randomSeed = r;\r\n        network.layoutEngine.initialRandomSeed = r;\r\n    },\r\n\r\n    addNetworkListeners: (network) => {\r\n        // Enable edit node/edge when double clicking\r\n        network.on(\"doubleClick\", (p: VisNetworkEvent) => {\r\n            if (window.settings.getOption(\"weights\") && \"edges\" in p && p.edges.length === 1) {\r\n                network.editEdgeMode();\r\n            }\r\n            if (\"nodes\" in p && p.nodes.length === 1) {\r\n                network.editNode();\r\n            }\r\n        });\r\n\r\n        // Save locations of nodes after dragging\r\n        network.on(\"dragEnd\", () => {\r\n            GraphState.graph = GraphState.setLocations(network.getPositions());\r\n            self.saveStateLocalStorage(); // Save the new locations as part of the state\r\n        });\r\n\r\n        // Delete nodes/edges when hit \"Delete\"\r\n        let lastNetworkClickEvent: Event = null;\r\n        network.on('click', (event) => {\r\n            lastNetworkClickEvent = event;\r\n        });\r\n\r\n        // Delete key to delete node or edge\r\n        document.addEventListener('keyup', (key) => {\r\n            if (key.key === \"Delete\" && lastNetworkClickEvent !== null) {\r\n                if (self.container.contains((lastNetworkClickEvent as any).event.target)) {\r\n                    if ((\"edges\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).edges.length === 1)\r\n                        || (\"nodes\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).nodes.length === 1)) {\r\n                        network.deleteSelected();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Undo/Redo keyboard commands\r\n        document.addEventListener(\"keydown\", (e) => {\r\n            if ((e.key.toLowerCase() === 'y' && e.ctrlKey) || (e.key.toLowerCase() === 'z' && e.ctrlKey && e.shiftKey)) {\r\n                self.redo();\r\n            }\r\n            else if (e.key.toLowerCase() === 'z' && e.ctrlKey) {\r\n                self.undo();\r\n            }\r\n        });\r\n\r\n        // When clicking off of the network, remove the Delete functionality\r\n        document.addEventListener(\"click\", (e) => {\r\n            if (self.container !== e.target && !self.container.contains(e.target as Node)) {\r\n                lastNetworkClickEvent = null;\r\n            }\r\n        });\r\n    },\r\n\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\nimport GraphState from './graphState';\r\n\r\ninterface SettingsList {\r\n    nodePhysics: boolean;\r\n    direction: boolean;\r\n    weights: boolean;\r\n\r\n    [index: string]: boolean\r\n}\r\n\r\nexport default class Settings {\r\n    private static readonly defaults: SettingsList = {\r\n        nodePhysics: true,\r\n        direction: false,\r\n        weights: false\r\n    };\r\n    private static current: any = {};\r\n\r\n    public static checkForLocalStorage() {\r\n        try {\r\n            const x = '__storage_test__';\r\n            localStorage.setItem(x, x);\r\n            localStorage.removeItem(x);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static saveSettings() {\r\n        if (Settings.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.settings\", JSON.stringify(Settings.current));\r\n        }\r\n    }\r\n\r\n    public static loadSettings() {\r\n        if (Settings.checkForLocalStorage()) {\r\n            Settings.current = JSON.parse(localStorage.getItem(\"graphPlayground.settings\"));\r\n        }\r\n        if (Settings.current === null) {\r\n            Settings.current = {};\r\n        }\r\n        Settings.setAll();\r\n    }\r\n\r\n    public static setAll() {\r\n        window.network.setOptions({nodes: {physics: Settings.getOption(\"nodePhysics\") as boolean}});\r\n        window.network.setOptions({edges: {arrows: {to: Settings.getOption(\"direction\") as boolean}}});\r\n        if (Settings.getOption(\"weights\")) {\r\n            window.network.setOptions({\r\n                manipulation: {\r\n                    editEdge: {\r\n                        editWithoutDrag: window.main.visWeightEdgeEdit\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            window.network.setOptions({manipulation: {editEdge: window.main.visOptions.manipulation.editEdge}});\r\n        }\r\n    }\r\n\r\n    public static changeOption(option: string, value: string | boolean): void {\r\n        Settings.current[option] = value;\r\n        Settings.saveSettings();\r\n        Settings.setAll();\r\n    }\r\n\r\n    public static getOption(option: string): string | boolean {\r\n        if (option in Settings.current) {\r\n            return Settings.current[option];\r\n        }\r\n        return Settings.defaults[option];\r\n    }\r\n\r\n    public static resetToDefault(): void {\r\n        Settings.current = {};\r\n        Settings.saveSettings();\r\n        Settings.setAll();\r\n\r\n        // Reset graph to just a plain graph. Not sure if this should actually happen or not.\r\n        const G = GraphState.graph.asChangedDirectedWeighted(Settings.defaults.direction, Settings.defaults.weights);\r\n        window.main.setData(GraphState.getGraphData(G));\r\n    }\r\n}\r\n","import gHelp from \"./graphHelpers\";\nimport help from \"./genericHelpers\";\nimport GraphState from './graphState';\nimport {FlowResult, MSTResult, ShortestPathResult} from \"./GraphAlgorithms\";\n//@ts-ignore\nimport Worker from 'worker-loader!./GraphAlgorithmWorker';\nimport NodeImmut from \"./GraphImmut/NodeImmut\";\nimport EdgeImmut from \"./GraphImmut/EdgeImmut\";\n\ninterface AlgorithmI {\n    name: string;\n    directional?: boolean;\n    weighted?: boolean;\n    applyFunc: () => any;\n    display: boolean\n}\n\nconst makeAndPrintShortestPath = (title: string,\n                                  fn: string,\n                                  weighted: boolean): void => {\n    const myName = \"Shortest Path\";\n    if(UIInteractions.isRunning[myName]){\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    help.showFormModal(($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const source = GraphState.nodeLabelToID(values[0]);\n            const sink = GraphState.nodeLabelToID(values[1]);\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible((e) => {\n                let a = e.data;\n                w.cleanup();\n                if(iStartedProgress){\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                if (a === false) {\n                    if (title.includes(\"Dijkstra\")) {\n                        help.showSimpleModal(\"Dijkstra Error\", \"<p>The Dijkstra algorithm only works on graphs\" +\n                            \" with totally non-negative edge weights. Please fix the graph so that there are no\" +\n                            \" negative edge weights.</p><p>Alternatively, try the Bellman-Ford algorithm which solves\" +\n                            \" exactly this problem.</p>\");\n                    }\n                    else if (title.includes(\"Bellman\")) {\n                        help.showSimpleModal(\"Bellman-Ford Error\", \"<p>The Bellman-Ford algorithm only works on graphs\" +\n                            \" with no negative edge-weight cycles. Please remove the negative cycle and try again.</p>\");\n                    }\n                    return;\n                }\n\n                a = a as ShortestPathResult;\n\n                let p = `<h3>${title}</h3><hr>No path exists from ${help.htmlEncode(source.toString())} to ${help.htmlEncode(sink.toString())}`;\n\n                if (a.pathExists) {\n                    p = `${title} From ${GraphState.nodeIDToLabel(source)} to `;\n                    p += `${GraphState.nodeIDToLabel(sink)}: ${a.distance}`;\n                    if (weighted) {\n                        p += `\\nWith weighted cost: ${a.cost}`;\n                    }\n                    p += \"\\n\\nUsing Path: \";\n\n                    p = help.htmlEncode(p);\n                    a.path.forEach((v: number) => {\n                        p += `${help.htmlEncode(GraphState.nodeIDToLabel(v))} &rarr; `;\n                    });\n                    p = p.slice(0, -8);\n                    p = `<h3>${title}</h3><hr>${p}`;\n                }\n\n                help.printout(p);\n            });\n            w.send({\n                type: fn,\n                args: [source, sink],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        },\n        title, \"Go\", [\n            {label: \"Start Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator},\n            {label: \"End Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator}\n        ]);\n};\n\nconst makeAndPrintComponents = async (stronglyConnected: boolean): Promise<void> => {\n    let a = null;\n    let cc = \"Connected Components\";\n    let componentKey = \"connectedComponents\";\n\n    if (stronglyConnected) {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        cc = \"Strongly \" + cc;\n        componentKey = \"stronglyConnectedComponents\";\n    }\n    else {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n    }\n\n    if(UIInteractions.isRunning[cc]){\n        UIInteractions.printAlreadyRunning(cc);\n        return Promise.reject(\"Already Running\");\n    }\n    UIInteractions.isRunning[cc] = true;\n\n    const iStartedProgress = UIInteractions.startLoadingAnimation();\n    const w = UIInteractions.getWorkerIfPossible((e) => {\n        a = e.data;\n        w.cleanup();\n\n        GraphState.graphProperties[cc] = a.count;\n        GraphState.setUpToDate(true, [cc, componentKey]);\n        GraphState.state[componentKey] = a.components;\n\n        const components = help.flatten(a.components);\n        let p = `Number of ${cc}: ${a.count}`;\n        p += \"\\n\\n\";\n\n        components.forEach((v, i) => {\n            p += `Vertex ${GraphState.nodeIDToLabel(i)} is in connected component #${v}\\n`;\n        });\n\n        p += `\\n${JSON.stringify(help.rotate(a.components), null, 4)}\\n\\n`;\n        p = `<h3>${cc}</h3><hr>${help.htmlEncode(p)}`;\n\n        if(iStartedProgress){\n            UIInteractions.stopLoadingAnimation();\n        }\n        UIInteractions.isRunning[cc] = false;\n\n        help.printout(p);\n    });\n    w.send({\n        type: componentKey,\n        args: [],\n        graph: window.main.graphState.getGraphData(),\n        convertToGraphImmut: true\n    });\n};\n\nclass WorkerProxy {\n    private readonly worker: Worker;\n    private readonly id: number;\n    private readonly listener: (e: { data: any }) => any;\n\n    constructor(id: number, w: Worker, listener: ((e: { data: any }) => any)) {\n        this.id = id;\n        this.worker = w;\n        this.listener = listener;\n        w.postMessage({type: \"id\", id});\n        w.onmessage = (e: MessageEvent) => {\n            this.listener({data: e.data.data});\n        };\n    }\n\n    public send(data: any) {\n        this.worker.postMessage(data);\n    }\n\n    public cleanup() {\n        this.worker.terminate();\n        GraphState.workerPool[this.id] = null;\n    }\n}\n\nexport default class UIInteractions {\n    public static isRunning: {[index: string]: boolean} = {};\n    static getAlgorithms(): AlgorithmI[] {\n        return [\n            {\n                name: \"Graph Coloring\",\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintGraphColoring,\n                display: true\n            },\n            {\n                name: \"Connected Components\",\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintComponents(false);\n                },\n                display: true\n            },\n            {\n                name: \"Strongly Connected Components\",\n                directional: true,\n                display: true,\n                applyFunc: () => {\n                    makeAndPrintComponents(true);\n                }\n            },\n            {\n                name: \"Breadth-First Shortest Path\",\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(\"Breadth-First Shortest Path\", \"breadthFirstSearch\", false);\n                },\n                display: true\n            },\n            {\n                name: \"Dijkstra Shortest Path\",\n                applyFunc: () => {\n                    makeAndPrintShortestPath(\"Dijkstra Shortest Path\", \"dijkstraSearch\", true);\n                },\n                display: true\n            },\n            {\n                name: \"Bellman-Ford Shortest Path\",\n                weighted: true,\n                directional: true,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(\"Bellman-Ford Shortest Path\", \"bellmanFord\", true);\n                },\n                display: true\n            },\n            {\n                name: \"Ford-Fulkerson\",\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintFFMCMF,\n                display: true\n            },\n            {\n                name: \"Kruskal Minimum Spanning Tree\",\n                weighted: true,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintKruskal,\n                display: true\n            },\n            {\n                name: \"Cyclic\",\n                applyFunc: UIInteractions.makeAndPrintIsCyclic,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Topological Sort\",\n                applyFunc: UIInteractions.makeAndPrintTopologicalSort,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Eulerian\",\n                directional: false,\n                display: false,\n                applyFunc: null\n            },\n            {\n                name: \"Eulerian\",\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintDirectionalEulerian\n            }\n        ] as AlgorithmI[];\n    }\n\n    static registerListeners(): void {\n        const makeSimpleClickListener = (selector: string, fn: () => any) => {\n            document.querySelector(selector).addEventListener(\"click\", (e) => {\n                e.preventDefault();\n                fn();\n            });\n        };\n\n        makeSimpleClickListener(\"#print-help-link\", UIInteractions.printHelp);\n        makeSimpleClickListener(\"#graph-options-link\", UIInteractions.printOptions);\n        makeSimpleClickListener(\"#load-petersen-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            window.main.setData(predefined.Petersen(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-konigsberg-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            window.main.setData(predefined.Konigsberg(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-complete-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            predefined.Complete();\n        });\n        makeSimpleClickListener(\"#load-hypercube-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            predefined.Hypercube();\n        });\n        makeSimpleClickListener(\"#load-custom-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            predefined.Custom();\n        });\n        makeSimpleClickListener(\"#undo-link\", window.main.undo);\n        makeSimpleClickListener(\"#redo-link\", window.main.redo);\n        makeSimpleClickListener(\"#calculate-all-properties-link\", async () => {\n            return GraphState.makeAndPrintProperties(true);\n        });\n        makeSimpleClickListener(\"#new-graph-layout-link\", window.main.shuffleNetworkLayout);\n        makeSimpleClickListener(\"#import-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportFileModal();\n        });\n        makeSimpleClickListener(\"#import-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportTextModal();\n        });\n        makeSimpleClickListener(\"#export-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportFileModal();\n        });\n        makeSimpleClickListener(\"#export-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportTextModal();\n        });\n    }\n\n    static printHelp(): void {\n        help.showSimpleModal(\"Help\", \"<h4>For support see the <a href='https://github.com/MikeDombo/graphPlayground' \" +\n            \"target='_blank'>GitHub repository</a> for guides</h4> <h4>See \" +\n            \"<a href='https://github.com/MikeDombo/graphPlayground/issues' target='_blank'>GitHub issues</a>\" +\n            \" to submit bugs or feature requests.</h4>\");\n    }\n\n    static printOptions(): void {\n        help.showFormModal(\n            ($modal, vals) => {\n                $modal.modal(\"hide\");\n                if (window.settings.getOption(\"nodePhysics\") !== vals[0]) {\n                    window.settings.changeOption(\"nodePhysics\", vals[0]); // Physics\n                }\n                if (window.settings.getOption(\"direction\") !== vals[1]) {\n                    window.settings.changeOption(\"direction\", vals[1]);\n                    let G = GraphState.graph;\n                    G = vals[1] ? G.asDirected(true) : G.asUndirected();\n                    // Clear node coloring because graph color doesn't apply to directed graphs\n                    window.main.setData(GraphState.getGraphData(G, true));\n                }\n                if (window.settings.getOption(\"weights\") !== vals[2]) {\n                    window.settings.changeOption(\"weights\", vals[2]);\n                    let G = GraphState.graph;\n                    G = vals[2] ? G.asWeighted() : G.asUnweighted();\n                    window.main.setData(GraphState.getGraphData(G));\n                }\n            },\n            \"Options\", \"Save\", [\n                {label: \"Graph Physics\", initialValue: window.settings.getOption(\"nodePhysics\"), type: \"checkbox\"},\n                {label: \"Directed Graph\", initialValue: window.settings.getOption(\"direction\"), type: \"checkbox\"},\n                {label: \"Weighted Graph\", initialValue: window.settings.getOption(\"weights\"), type: \"checkbox\"}\n            ], null);\n    }\n\n    static terminateAllWebWorkers(): void {\n        for(const v of GraphState.workerPool){\n            if (v instanceof window.Worker) {\n                v.terminate();\n            }\n        }\n        GraphState.workerPool = [];\n    }\n\n    static getWorkerIfPossible(onmessage: (d: { data: any }) => any): WorkerProxy {\n        let nextIndex = GraphState.workerPool.findIndex((v) => {\n            return v === null || typeof v === 'undefined';\n        });\n        if(nextIndex === -1){\n            nextIndex = GraphState.workerPool.length;\n        }\n\n        const w = new Worker();\n        GraphState.workerPool[nextIndex] = w;\n        return new WorkerProxy(nextIndex, w, onmessage);\n    }\n\n    static startLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\");\n        if(prog.style.display !== \"flex\"){\n            prog.style.display =  \"flex\";\n            return true;\n        }\n        return false;\n    }\n\n    static stopLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\");\n        if(prog.style.display !== \"none\"){\n            prog.style.display =  \"none\";\n        }\n    }\n\n    static printAlreadyRunning(name?: string){\n        let n = \"This task\";\n        if(name){\n            n = name;\n        }\n        help.showSimpleModal(\"Task Already Running\", \"<p>\" + n + \" is already running, please wait for it to finish\" +\n            \" first.</p>\");\n    }\n\n    static makeAndPrintGraphColoring(): Promise<void> {\n        const myName = \"Graph Coloring\";\n        if(UIInteractions.isRunning[myName]){\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(\"Already Running\");\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async (resolve) => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            // Use cached responses when able\n            let a = {\n                chromaticNumber: (await GraphState.getProperty(\"Chromatic Number\")) as number,\n                colors: GraphState.state.graphColoring as {}\n            };\n\n            const printGC = () => {\n                GraphState.graphProperties[\"Chromatic Number\"] = a.chromaticNumber;\n                GraphState.setUpToDate(true, [\"Chromatic Number\", \"graphColoring\"]);\n                (GraphState.state.graphColoring as {}) = a.colors;\n\n                const colors = help.flatten(a.colors);\n                let p = `Number of Vertices: ${colors.length}`;\n                p += `\\nChromatic Number: ${a.chromaticNumber}`;\n                p += \"\\n\\n\";\n\n                colors.forEach((v, i) => {\n                    p += `Vertex ${GraphState.nodeIDToLabel(i)} gets color ${v}\\n`;\n                });\n\n                p += `\\n${JSON.stringify(help.rotate(a.colors), null, 4)}\\n\\n`;\n\n                p = `<h3>Graph Coloring Using Welsh-Powell Algorithm</h3><hr>${help.htmlEncode(p)}`;\n                p += \"<br/><button class='btn btn-primary' onclick='main.applyColors()'>Apply New Colors To Graph</button>\";\n\n                help.printout(p);\n                window.main.applyColors();\n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            if (!(a.chromaticNumber !== null && (await GraphState.getProperty(\"graphColoring\")) !== null)) {\n                const w = UIInteractions.getWorkerIfPossible((e) => {\n                    a = e.data;\n                    printGC();\n                    w.cleanup();\n                    if(iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    UIInteractions.isRunning[myName] = false;\n                    resolve(e.data);\n                });\n                w.send({\n                    type: \"colorNetwork\",\n                    args: [],\n                    graph: window.main.graphState.getGraphData(),\n                    convertToGraphImmut: true\n                });\n            }\n            else {\n                printGC();\n                if(iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n            }\n        });\n    }\n\n    static makeAndPrintDirectionalEulerian(): Promise<void> {\n        const myName = \"Eulerian\";\n        if(UIInteractions.isRunning[myName]){\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(\"Already Running\");\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async (resolve) => {\n            if (!window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible((e) => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                w.cleanup();\n                if(iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n\n            const scc = await GraphState.getProperty(\"stronglyConnectedComponents\", true);\n\n            w.send({\n                type: \"directionalEulerian\",\n                args: [gHelp.findVertexDegreesDirectional(GraphState.graph.getFullAdjacency()), scc]\n            });\n        });\n    }\n\n    static makeAndPrintEulerian(ignoreDuplicate = false): Promise<void> {\n        const myName = \"Eulerian\";\n        if(UIInteractions.isRunning[myName]){\n            if(ignoreDuplicate){\n                return;\n            }\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(\"Already Running\");\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async (resolve) => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve(UIInteractions.makeAndPrintDirectionalEulerian());\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const cc = await GraphState.getProperty(\"connectedComponents\", true);\n\n            const w = UIInteractions.getWorkerIfPossible((e) => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                if(iStartedProgress){\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                w.cleanup();\n                resolve(e.data);\n            });\n            w.send({type: \"hasEulerianCircuit\", args: [GraphState.graph.getAllOutDegrees(), cc]});\n        });\n    }\n\n    static makeAndPrintFFMCMF(): void {\n        if (!window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n        const myName = \"Ford-Fulkerson\";\n        if(UIInteractions.isRunning[myName]){\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        help.showFormModal(async ($modal, values) => {\n                $modal.modal(\"hide\");\n\n                const source = GraphState.nodeLabelToID(values[0]);\n                const sink = GraphState.nodeLabelToID(values[1]);\n\n                let a: (boolean | FlowResult) = null;\n\n                const cb = () => {\n                    let p = `<h3>Ford-Fulkerson</h3><hr>No path exists from `;\n                    p += `${help.htmlEncode(GraphState.nodeIDToLabel(source))} to ${help.htmlEncode(GraphState.nodeIDToLabel(sink))}`;\n\n                    if (a === false) {\n                        help.printout(p);\n                        return;\n                    }\n                    a = a as { maxFlow: number; flowPath: any[] };\n\n                    p = `Ford-Fulkerson MaxFlow-MinCut Max Flow From ${GraphState.nodeIDToLabel(source)} `;\n                    p += `to ${GraphState.nodeIDToLabel(sink)}: ${a.maxFlow}`;\n                    p += \"\\n\\nUsing Capacities:\\n\\n\";\n                    p = help.htmlEncode(p);\n                    a.flowPath.forEach((v) => {\n                        p += `${GraphState.nodeIDToLabel(v.from)}&rarr;${GraphState.nodeIDToLabel(v.to)} using ${v.flow} of ${v.capacity}\\n`;\n                    });\n                    p = p.trim();\n                    p = \"<h3>Ford-Fulkerson MaxFlow-MinCut</h3><hr>\" + p;\n\n                    help.printout(p);\n                };\n\n                const iStartedProgress = UIInteractions.startLoadingAnimation();\n                const w = UIInteractions.getWorkerIfPossible((e) => {\n                    a = e.data;\n                    UIInteractions.isRunning[myName] = false;\n                    cb();\n                    if(iStartedProgress){\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    w.cleanup();\n                });\n                w.send({\n                    type: \"fordFulkerson\",\n                    args: [source, sink],\n                    convertToGraphImmut: true,\n                    graph: window.main.graphState.getGraphData()\n                });\n            },\n            \"Ford-Fulkerson MaxFlow-MinCut\", \"Go\", [\n                {label: \"Source Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator},\n                {label: \"Sink Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator}\n            ]);\n    }\n\n    static makeAndPrintKruskal(): void {\n        if (window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n\n        const myName = \"Kruskal\";\n        if(UIInteractions.isRunning[myName]){\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible((e) => {\n            const a: MSTResult = e.data;\n            w.cleanup();\n\n            let p = `Kruskal's Minimum Spanning Tree Total Weight: ${a.totalWeight}`;\n            p += \"\\n\\nUsing Edges:\\n\\n\";\n            p = help.htmlEncode(p);\n            a.mst.forEach((v) => {\n                //@ts-ignore\n                p += `${GraphState.nodeIDToLabel((new EdgeImmut(v)).getFrom())}&rarr;`;\n                //@ts-ignore\n                p += `${GraphState.nodeIDToLabel((new EdgeImmut(v)).getTo())}\\n`;\n            });\n            p = p.trim();\n            p = `<h3>Kruskal Minimum Spanning Tree</h3><hr>${p}`;\n\n            if(iStartedProgress){\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"kruskal\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static makeAndPrintIsCyclic(): Promise<void> {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const myName = \"Cyclic\";\n        if(UIInteractions.isRunning[myName]){\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(\"Already Running\");\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>((resolve) => {\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible((e) => {\n                GraphState.graphProperties.cyclic = e.data;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                w.cleanup();\n                if(iStartedProgress){\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve();\n            });\n            w.send({\n                type: \"isGraphCyclic\",\n                args: [],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        });\n    }\n\n    static makeAndPrintTopologicalSort(): void {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const myName = \"Topological Sort\";\n        if(UIInteractions.isRunning[myName]){\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible((e) => {\n            const a: boolean | NodeImmut[] = e.data;\n            w.cleanup();\n\n            if(iStartedProgress){\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            if (a === true) {\n                GraphState.graphProperties.cyclic = true;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                help.printout(\"<h3>Topological Sorting Failed</h3><hr>Topological sorting failed because the graph contains a cycle\");\n\n                return;\n            }\n\n            let p = \"Topological Sorting:\\n\\n\";\n            p = help.htmlEncode(p);\n            (a as any[]).forEach((v) => {\n                p += `${GraphState.nodeIDToLabel(v.id)}, `;\n            });\n            p = p.slice(0, -2);\n            p = `<h3>Topological Sorting</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"topologicalSort\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static printGraphAlgorithms(): void {\n        const $div = document.getElementById(\"algorithms-pane\");\n        $div.innerHTML = \"\";\n        const directional = window.settings.getOption(\"direction\");\n        const weighted = window.settings.getOption(\"weights\");\n\n        const addAlgoToPane = (alg: AlgorithmI) => {\n            const navlink = document.createElement('a');\n            navlink.classList.add(\"nav-link\");\n            navlink.setAttribute(\"href\", \"#\");\n            navlink.innerText = alg.name;\n            navlink.addEventListener(\"click\", (e) => {\n                e.preventDefault();\n                alg.applyFunc();\n            });\n\n            $div.appendChild(navlink);\n        };\n\n        const a = UIInteractions.getAlgorithms();\n        a.forEach((alg) => {\n            if (!alg.display) {\n                return;\n            }\n            if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n            else if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n        });\n    }\n}\n","\"use strict\";\r\n\r\nimport 'bootstrap';\r\nimport * as Raven from 'raven-js';\r\nimport {Network} from 'vis/index-network';\r\nimport {default as main, MainI} from './main';\r\nimport Settings from './settings';\r\nimport UI from './UIInteractions';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        main: MainI;\r\n        network: Network;\r\n        settings: typeof Settings;\r\n        ui: typeof UI,\r\n        Raven: Raven.RavenStatic,\r\n        Worker: Function\r\n    }\r\n}\r\n\r\nwindow.main = main;\r\nwindow.network = new Network(main.container, {}, main.visOptions);\r\nwindow.settings = Settings;\r\nwindow.ui = UI;\r\n\r\n// Initialize Sentry.io error logging\r\nRaven.config('https://92aaeee7e2fb4ef4837a2261a029e8ed@sentry.home.mikedombrowski.com/2').install();\r\nwindow.Raven = Raven;\r\n\r\nmain.addNetworkListeners(window.network);\r\n\r\nSettings.loadSettings();\r\n\r\nlet loadDefault = true;\r\nif (Settings.checkForLocalStorage()) {\r\n    const s: string = localStorage.getItem(\"graphPlayground.lastState\");\r\n    if (s !== null) {\r\n        const jsonGraph: any = JSON.parse(s);\r\n        if (\"graph\" in jsonGraph && \"nodes\" in jsonGraph.graph) {\r\n            loadDefault = false;\r\n            main.applyState(false, jsonGraph as {graph: GraphPlain});\r\n        }\r\n    }\r\n}\r\nif (loadDefault) {\r\n    (async () => {\r\n        const predefined = (await import(\"./predefinedGraphs\")).default;\r\n        main.setData(predefined.Petersen(), false, true, true);\r\n    })();\r\n}\r\n\r\nwindow.ui.registerListeners();\r\n","\"use strict\";\r\n\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\nimport {NodeImmutPlain} from \"./GraphImmut/NodeImmut\";\r\n\r\ninterface Degree {\r\n    in: number;\r\n    out: number;\r\n}\r\n\r\nexport default {\r\n    findVertexDegreesDirectional: (adjacencyMatrix: Array<Array<number>>): Degree[] => {\r\n        // Adjacency stores IDs of edges TO\r\n        const degrees: Degree[] = [];\r\n        adjacencyMatrix.forEach((v, i) => {\r\n            if (i in degrees) {\r\n                degrees[i].out += v.length;\r\n            }\r\n            else {\r\n                degrees[i] = {out: v.length, in: 0};\r\n            }\r\n            v.forEach((outV) => {\r\n                if (outV in degrees) {\r\n                    degrees[outV].in += 1;\r\n                }\r\n                else {\r\n                    degrees[outV] = {in: 1, out: 0};\r\n                }\r\n            });\r\n        });\r\n\r\n        return degrees;\r\n    },\r\n\r\n    interpolateNodesFromEdges: (edges: EdgeImmutPlain[]): NodeImmutPlain[] => {\r\n        const nodes: NodeImmutPlain[] = [];\r\n        edges.forEach((v) => {\r\n            nodes[v.from] = {id: v.from, label: \"\" + v.from};\r\n            nodes[v.to] = {id: v.to, label: \"\" + v.to};\r\n        });\r\n\r\n        return nodes;\r\n    },\r\n};\r\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"d8ac74b75a870815243e.worker.js\");\n};","\"use strict\";\n\nexport interface EdgeImmutPlain {\n    label?: string;\n    from: number;\n    to: number;\n    weight: number\n}\n\nexport default class EdgeImmut {\n    private readonly from: Readonly<number>;\n    private readonly to: Readonly<number>;\n    private readonly weight: Readonly<number>;\n\n    constructor(from: number | EdgeImmutPlain, to?: number, weight: any = 1) {\n        if(typeof from === \"object\"){\n            to = from.to;\n            weight = from.weight;\n            from = from.from;\n        }\n\n        this.from = Object.freeze(from);\n        this.to = Object.freeze(to);\n        this.weight = Object.freeze(parseFloat(weight));\n\n        if (new.target === EdgeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getFrom(): Readonly<number> {\n        return this.from;\n    }\n\n    getTo(): Readonly<number> {\n        return this.to;\n    }\n\n    getWeight(): Readonly<number> {\n        return this.weight;\n    }\n\n    toPlain(): { from: Readonly<number>; to: Readonly<number>; weight: Readonly<number> } {\n        return {from: this.from, to: this.to, weight: this.weight};\n    }\n\n    editEdge(newWeight: number): EdgeImmut {\n        return new EdgeImmut(this.getFrom(), this.getTo(), newWeight);\n    }\n}\n","\"use strict\";\n\nexport interface NodeImmutPlain {\n    id: Readonly<number>;\n    label: string;\n\n    [key: string]: any;\n\n    [key: number]: any\n}\n\nexport default class NodeImmut {\n    private readonly id: Readonly<number>;\n    private readonly label: Readonly<string>;\n    private readonly attributes: any;\n\n    constructor(id: any, label: any = null, extraAttrs: null | any = null) {\n        if (label === null) {\n            this.label = id.toString();\n        }\n        else {\n            this.label = label;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach((key) => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.label = Object.freeze(this.label);\n        this.id = Object.freeze(id);\n\n        if (new.target === NodeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    toPlain(): NodeImmutPlain {\n        const toReturn: NodeImmutPlain = {id: this.id, label: this.label};\n        Object.keys(this.attributes).forEach((key) => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    getID(): Readonly<number> {\n        return this.id;\n    }\n\n    getLabel(): Readonly<string> {\n        return this.label;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    editNode(label: any = null, extraAttrs: any = null): NodeImmut {\n        if (label === null) {\n            label = this.getLabel();\n        }\n\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        Object.keys(extraAttrs).forEach((key) => {\n            attributes[key] = extraAttrs[key];\n        });\n\n        return new NodeImmut(this.getID(), label, attributes);\n    }\n}\n","\"use strict\";\n\nimport {List} from 'immutable';\nimport {default as NodeImmut, NodeImmutPlain} from './NodeImmut';\nimport {default as EdgeImmut, EdgeImmutPlain} from './EdgeImmut';\n\ninterface NodeMapping {\n    [key: number]: number\n}\n\nconst filterNodeExtraAttr = (data: any) => {\n    return Object.keys(data)\n        .filter((key) => !([\"label\", \"id\"]).includes(key))\n        .reduce((obj: any, key) => {\n            obj[key] = data[key];\n            return obj;\n        }, {});\n};\n\nconst genericEdgesToImmutEdges = (edges: any, nodeMap: NodeMapping = {}): boolean | List<EdgeImmut> => {\n    if (edges === null) {\n        return false;\n    }\n\n    let newEdges: List<EdgeImmut> = List();\n\n    if (typeof edges === 'object') {\n        edges.forEach((edge: any) => {\n            let weight = 0;\n            let from = 0;\n            let to = 0;\n\n            if (\"weight\" in edge) {\n                weight = parseFloat(edge.weight);\n            }\n            if (\"from\" in edge) {\n                from = nodeMap[edge.from];\n            }\n            if (\"to\" in edge) {\n                to = nodeMap[edge.to];\n            }\n\n            newEdges = newEdges.push(new EdgeImmut(from, to, weight));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return newEdges;\n};\n\nconst genericNodesToImmutNodes = (nodes: any): boolean | { nodes: Readonly<List<NodeImmut>>; map: { [key: number]: number } } => {\n    if (nodes === null) {\n        return false;\n    }\n\n    let newNodes: List<NodeImmut> = List();\n    const nodeMap: NodeMapping = {};\n\n    if (typeof nodes === \"number\") {\n        // Create the nodes\n        for (let i = 0; i < Math.floor(nodes); i++) {\n            newNodes = newNodes.set(i, new NodeImmut(i));\n            nodeMap[i] = i;\n        }\n    }\n    else if (typeof nodes === 'object') {\n        let nodeNum = 0;\n        nodes.forEach((n: any) => {\n            const id = nodeNum++;\n            let label = null;\n            let extraAttrs = null;\n\n            if (\"label\" in n) {\n                label = n.label;\n            }\n            if (\"id\" in n) {\n                nodeMap[n.id] = id;\n                if (\"label\" in n && n.label === n.id.toString()) {\n                    label = id.toString();\n                }\n            }\n            else {\n                nodeMap[id] = id;\n            }\n            if (\"attributes\" in n) {\n                extraAttrs = filterNodeExtraAttr(n.attributes);\n            }\n            else {\n                extraAttrs = filterNodeExtraAttr(n);\n            }\n\n            newNodes = newNodes.set(id, new NodeImmut(id, label, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return {nodes: Object.freeze(newNodes), map: nodeMap};\n};\n\nexport default class GraphImmut {\n    private readonly directed: Readonly<boolean>;\n    private readonly weighted: Readonly<boolean>;\n    private readonly nodes: Readonly<List<NodeImmut>>;\n    private readonly numNodes: Readonly<number>;\n    private readonly edges: Readonly<List<EdgeImmut>>;\n    private readonly numEdges: Readonly<number>;\n\n    constructor(nodes: number | List<NodeImmut> | NodeImmutPlain[],\n                edges: null | List<EdgeImmut> | EdgeImmutPlain[] = null,\n                directed = false, weighted = false) {\n        this.directed = Object.freeze(directed);\n        this.weighted = Object.freeze(weighted);\n        let nodeMap = {};\n\n        // Make Nodes\n        if (typeof nodes === \"number\" || (typeof nodes === \"object\" && !(nodes instanceof List))) {\n            const n = genericNodesToImmutNodes(nodes);\n            if (typeof n !== \"object\") {\n                throw new Error(\"Unable to parse node input!\");\n            }\n            this.nodes = n.nodes;\n            nodeMap = n.map;\n        }\n        else if (nodes instanceof List) {\n            this.nodes = nodes as List<NodeImmut>;\n        }\n        else {\n            throw new Error(\"Illegal type of 'node' input to GraphImmut constructor\");\n        }\n        this.nodes = Object.freeze(this.nodes);\n        this.numNodes = Object.freeze(this.nodes.size);\n\n        // If we are given edges, add them to the graph\n        if (edges !== null && typeof edges === \"object\" && !(edges instanceof List)) {\n            const e = genericEdgesToImmutEdges(edges, nodeMap);\n            if (typeof e !== \"object\") {\n                throw new Error(\"Unable to parse Edge input\");\n            }\n            this.edges = e;\n        }\n        else if (edges instanceof List) {\n            this.edges = edges as List<EdgeImmut>;\n        }\n        else {\n            this.edges = List();\n        }\n        this.edges = Object.freeze(this.edges);\n        this.numEdges = Object.freeze(this.edges.size);\n\n        if (new.target === GraphImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    alignNodeIDs(alignTo = 0): GraphImmut {\n        const nodeMap: NodeMapping = {};\n        let nodeCount = alignTo;\n        let newNodes: List<NodeImmut> = List();\n        this.nodes.forEach((v) => {\n            let label = v.getLabel();\n            if (v.getLabel() === v.getID().toString()) {\n                label = nodeCount.toString();\n            }\n\n            newNodes = newNodes.set(nodeCount, new NodeImmut(nodeCount, label, v.getAllAttributes()));\n            nodeMap[v.getID()] = nodeCount++;\n        });\n\n        let newEdges: List<EdgeImmut> = List();\n        this.edges.forEach((v) => {\n            newEdges = newEdges.push(new EdgeImmut(nodeMap[v.getFrom()], nodeMap[v.getTo()], v.getWeight()));\n        });\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    getNode(id: number, rich = false): NodeImmut | NodeImmutPlain | boolean {\n        if (id >= this.numNodes) {\n            return false;\n        }\n        if (rich) {\n            return this.nodes.get(id);\n        }\n        return this.nodes.get(id).toPlain();\n    }\n\n    addNode(data: any = null): GraphImmut {\n        if (data === null) {\n            data = {};\n        }\n\n        const id = this.numNodes;\n        if (!(\"label\" in data)) {\n            data.label = id.toString();\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n\n        return new GraphImmut(this.nodes.set(id, new NodeImmut(id, data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    editNode(id: number, data: any): any {\n        if (!this.nodes.has(id)) {\n            return false;\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n        if (!(\"label\" in data)) {\n            data.label = (this.getNode(id, true) as NodeImmut).getLabel();\n        }\n        return new GraphImmut(this.nodes.set(id, (this.getNode(id, true) as NodeImmut).editNode(data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    deleteNode(id: number): GraphImmut | boolean {\n        // Make sure the ID exists\n        if (!(id >= 0 && id < this.numNodes)) {\n            return false;\n        }\n\n        const nodeMap: NodeMapping = {}; // Map for old IDs to new ones since we're deleting an entry\n\n        // Remove it from the node list\n        let nodeCount = 0;\n        const newNodes: List<NodeImmut> = this.nodes\n            .filter((n) => {\n                if (n.getID() === id) {\n                    nodeMap[n.getID()] = -1;\n                }\n                else {\n                    nodeMap[n.getID()] = nodeCount++;\n                }\n\n                return n.getID() !== id;\n            })\n            .map((node) => {\n                let label = node.getLabel();\n                if (node.getID().toString() === label) {\n                    label = nodeMap[node.getID()].toString();\n                }\n\n                return new NodeImmut(nodeMap[node.getID()], label, node.getAllAttributes());\n            }) as List<NodeImmut>;\n\n        // Remap edges\n        const newEdges: List<EdgeImmut> = this.edges\n            .filter((edge) => {\n                return !(edge.getFrom() === id || edge.getTo() === id);\n            })\n            .map((edge) => {\n                return new EdgeImmut(nodeMap[edge.getFrom()], nodeMap[edge.getTo()], edge.getWeight());\n            }) as List<EdgeImmut>;\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    addEdge(from: number, to: number, weight: any = 1): GraphImmut {\n        if (!this.weighted) {\n            weight = 1; // Ensure that edge weights are 1 if this is an unweighted graph\n        }\n\n        const newEdges = this.edges.push(new EdgeImmut(from, to, parseFloat(weight)));\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    deleteEdge(from: number, to: number, weight: any = null, deleteAll = true): GraphImmut {\n        if (weight !== null) {\n            weight = parseFloat(weight);\n        }\n\n        let foundOneEdge = false;\n        const newEdges: List<EdgeImmut> = this.edges.filter((edge) => {\n            // If we're not deleting everything and we have found one edge, then do not filter anymore\n            if (foundOneEdge && !deleteAll) {\n                return true;\n            }\n\n            // If we have an exact match\n            if (edge.getFrom() === from && edge.getTo() === to && (weight === null || edge.getWeight() === weight)) {\n                foundOneEdge = true;\n                return false; // Remove this edge\n            }\n\n            // If we are undirected, check for opposing matches\n            if (!this.directed) {\n                if (edge.getFrom() === to && edge.getTo() === from && (weight === null || edge.getWeight() === weight)) {\n                    foundOneEdge = true;\n                    return false; // Remove this edge\n                }\n            }\n\n            return true;\n        }) as List<EdgeImmut>;\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    editEdge(from: number, to: number, newWeight: any, oldWeight: any = null): GraphImmut | boolean {\n        // Editing only makes sense for weighted graphs.\n        // To change from/to, just delete the edge and add a new one\n        if (!this.weighted) {\n            return false;\n        }\n\n        let foundFirst = false;\n\n        if (oldWeight !== null) {\n            oldWeight = parseFloat(oldWeight);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge, index) => {\n            if (foundFirst) {\n                return;\n            }\n            if (edge.getFrom() === from && edge.getTo() === to && (oldWeight === null || edge.getWeight() === oldWeight)) {\n                newEdges = newEdges.set(index, edge.editEdge(parseFloat(newWeight)));\n                foundFirst = true;\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    getAllNodes(rich = false): NodeImmut[] | NodeImmutPlain[] {\n        if (rich) {\n            return this.nodes.toArray();\n        }\n        return this.nodes.map((node) => {\n            return node.toPlain();\n        }).toArray();\n    }\n\n    getAllNodesAsImmutableList(): List<NodeImmut> {\n        return this.nodes;\n    }\n\n    getAllEdgesAsImmutableList(): List<EdgeImmut> {\n        return this.edges;\n    }\n\n    getAllEdges(rich = false): EdgeImmut[] | EdgeImmutPlain[] {\n        if (rich) {\n            return this.edges.toArray();\n        }\n        return this.edges.map((edge) => {\n            return edge.toPlain();\n        }).toArray();\n    }\n\n    getNumberOfNodes(): number {\n        return this.numNodes;\n    }\n\n    getNumberOfEdges(): number {\n        return this.numEdges;\n    }\n\n    getAllOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() in degrees) {\n                degrees[edge.getFrom()]++;\n            }\n            else {\n                degrees[edge.getFrom()] = 1;\n            }\n        });\n\n        return degrees;\n    }\n\n    asWeighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, true);\n    }\n\n    asUnweighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, false);\n    }\n\n    asDirected(doubleEdges = false): GraphImmut {\n        if (!doubleEdges) {\n            return new GraphImmut(this.nodes, this.edges, true, this.weighted);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.getTo(), edge.getFrom(), edge.getWeight()));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, true, this.weighted);\n    }\n\n    asUndirected(): GraphImmut {\n        let newEdges: List<EdgeImmut> = List();\n        const addedEdges: { [key: string]: null } = {};\n\n        this.edges.forEach((edge) => {\n            let from = edge.getFrom();\n            let to = edge.getTo();\n            if (to > from) {\n                from = to;\n                to = edge.getFrom();\n            }\n            if (!(`${from}_${to}` in addedEdges)) {\n                addedEdges[`${from}_${to}`] = null;\n                newEdges = newEdges.push(new EdgeImmut(from, to, edge.getWeight()));\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, false, this.weighted);\n    }\n\n    asChangedDirectedWeighted(directed: boolean, weighted: boolean): GraphImmut {\n        let G: GraphImmut = this;\n        if (directed && !this.directed) {\n            G = this.asDirected();\n        }\n        else if (!directed && this.directed) {\n            G = this.asUndirected();\n        }\n\n        if (weighted && !this.weighted) {\n            G = this.asWeighted();\n        }\n        else if (!weighted && this.weighted) {\n            G = this.asUnweighted();\n        }\n\n        return G;\n    }\n\n    getNodeAdjacency(id: number): number[] {\n        const adj: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() === id) {\n                adj.push(edge.getTo());\n            }\n            else if (!this.directed && edge.getTo() === id) {\n                adj.push(edge.getFrom());\n            }\n        });\n\n        return adj;\n    }\n\n    getFullAdjacency(): number[][] {\n        const adj: number[][] = [];\n        this.nodes.forEach((n) => {\n            adj[n.getID()] = this.getNodeAdjacency(n.getID());\n        });\n\n        return adj;\n    }\n\n    areAdjacent(id1: number, id2: number): boolean {\n        return this.getNodeAdjacency(id1).includes(id2);\n    }\n\n    getEdgesBetween(id1: number, id2: number): EdgeImmut[] {\n        const edgeList: EdgeImmut[] = [];\n        this.edges.forEach((edge) => {\n            if (!this.directed && edge.getFrom() === id2 && edge.getTo() === id1) {\n                edgeList.push(edge);\n            }\n\n            if (edge.getFrom() === id1 && edge.getTo() === id2) {\n                edgeList.push(edge);\n            }\n        });\n\n        return edgeList;\n    }\n\n    getMinWeightEdgeBetween(id1: number, id2: number): number {\n        let minWeight = Infinity;\n        this.getEdgesBetween(id1, id2).forEach((edge) => {\n            if (edge.getWeight() < minWeight) {\n                minWeight = edge.getWeight();\n            }\n        });\n\n        return minWeight;\n    }\n\n    // Take a multigraph and reduce all multiple edges to a single edge, weighted using the reducer\n    reduceMultiGraph(reducer: (a: number, b: number) => number, initialValue?: any): GraphImmut {\n        if (typeof initialValue === \"undefined\") {\n            initialValue = 0;\n        }\n\n        const multiEdges: EdgeImmutPlain[] = [];\n        this.nodes.forEach((node) => {\n            // If we have duplicates\n            const adj = this.getNodeAdjacency(node.getID());\n            const uniques = new Set(adj);\n            if (uniques.size < adj.length) {\n                uniques.forEach((to) => {\n                    const newWeight = this.getEdgesBetween(node.getID(), to).reduce((acc, edge) => {\n                        return reducer(acc, edge.getWeight());\n                    }, initialValue);\n\n                    multiEdges.push({from: node.getID(), to, weight: parseFloat(newWeight)});\n                });\n            }\n        });\n\n        // Remove all multigraph edges and replace them with single new edges\n        let newEdges = this.edges.filter((edge) => {\n            let keep = true;\n            multiEdges.forEach((duplicateEdge) => {\n                if (edge.getFrom() === duplicateEdge.from && edge.getTo() === duplicateEdge.to) {\n                    keep = false;\n                }\n            });\n\n            return keep;\n        }) as List<EdgeImmut>;\n        multiEdges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.from, edge.to, edge.weight));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    isWeighted() {\n        return this.weighted;\n    }\n\n    isDirected() {\n        return this.directed;\n    }\n}\n"],"sourceRoot":""}
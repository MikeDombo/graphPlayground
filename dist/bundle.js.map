{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/app.js","webpack:///./src/js/graphHelpers.js","webpack:///./src/js/GraphImmut/GraphImmut.js","webpack:///./src/js/settings.js","webpack:///./src/js/genericHelpers.js","webpack:///./src/js/dataImportExport.js","webpack:///./src/js/SpanningTree.js","webpack:///./src/js/GraphAlgorithms.js","webpack:///./src/js/UIInteractions.js","webpack:///./src/js/predefinedGraphs.js","webpack:///./src/js/GraphImmut/EdgeImmut.js","webpack:///./src/js/GraphImmut/NodeImmut.js","webpack:///./src/js/graphState.js","webpack:///./src/js/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","2","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","p","jsonpArray","window","oldJsonpFunction","bind","slice","_indexNetwork","main","_main2","default","predefined","_predefinedGraphs2","network","Network","container","visOptions","settings","_settings2","ui","_UIInteractions2","_ravenJs2","config","install","Raven","addNetworkListeners","loadSettings","loadDefault","checkForLocalStorage","localStorage","getItem","JSON","parse","graph","applyState","setData","Petersen","navigator","addEventListener","serviceWorker","register","then","registration","console","log","scope","catch","err","registerListeners","findVertexDegreesDirectional","adjacencyMatrix","degrees","forEach","v","out","in","outV","interpolateNodesFromEdges","edges","nodes","from","id","label","to","_immutable","filterNodeExtraAttr","keys","filter","key","includes","reduce","obj","genericEdgesToImmutEdges","nodeMap","arguments","undefined","newEdges","List","_typeof","edge","weight","parseFloat","_EdgeImmut2","genericNodesToImmutNodes","newNodes","nodeNum","extraAttrs","toString","attributes","set","_NodeImmut2","Math","floor","freeze","map","GraphImmut","directed","weighted","_classCallCheck","this","Error","numNodes","size","numEdges","nodeCount","getLabel","getID","getAllAttributes","getFrom","getTo","getWeight","toPlain","has","getNode","editNode","node","_this","deleteAll","foundOneEdge","newWeight","oldWeight","foundFirst","index","editEdge","toArray","addedEdges","G","asDirected","asUndirected","asWeighted","asUnweighted","_this2","adj","_this3","getNodeAdjacency","id1","id2","_this4","edgeList","minWeight","Infinity","getEdgesBetween","reducer","initialValue","_this5","multiEdges","uniques","Set","acc","keep","duplicateEdge","self","defaults","nodePhysics","direction","weights","current","x","setItem","removeItem","e","saveSettings","stringify","setAll","setOptions","physics","getOption","arrows","manipulation","editWithoutDrag","visWeightEdgeEdit","changeOption","option","resetToDefault","graphState","asChangedDirectedWeighted","getGraphData","_jquery","deepFreeze","getOwnPropertyNames","prop","isFrozen","sort","arr","compareFunction","concat","_toConsumableArray","datasetToArray","ds","keepOnlyKeys","indexOf","getFileExtension","filename","split","htmlEncode","string","_jquery2","text","html","replace","printout","escape","flatten","rotate","max","iterable","a","b","toTitleCase","str","match","toUpperCase","showSimpleModal","title","body","showFormModal","type","makeFormModal","successText","form","footer","f","class","formRow","basicMap","attrname","validFunc","validationFunc","generalValidator","event","valueMutator","$v","target","val","valid","removeClass","next","remove","addClass","after","append","checked","for","prepend","clickDismiss","$b","onclick","on","$options","optionText","oText","oIndex","optionValues","$footer","$modal","tabindex","role","aria-hidden","data-dismiss","aria-label","find","off","last","click","first","focus","successCb","cancelCb","modal","vals","hasErrors","each","tagName","attr","files","trigger","hasClass","importByString","format","toLowerCase","_genericHelpers2","error","_GraphImmut2","parseInt","addEdge","makeImportTextModal","values","style","makeImportFileModal","file","reader","FileReader","onload","readAsText","$files","makeExportFileModal","exportToFile","makeExportTextModal","exportToText","select","document","execCommand","downloadFile","getDataAsJSON","getDataAsDIMACS","g","getFullAdjacency","edgeCount","edgeText","trim","blob","Blob","msSaveOrOpenBlob","msSaveBlob","createElement","href","URL","createObjectURL","download","appendChild","removeChild","revokeObjectURL","_genericHelpers","SpanningTree","V","constructor","union","w","q","root","connected","colorNetwork","nodeArr","getAllNodes","getAllOutDegrees","vertexOrder","colorIndex","currentColor","myGroup","conflict","areAdjacent","colors","chromaticNumber","connectedComponents","components","componentCount","setComponentNum","getNumberOfNodes","depthFirstSearch","count","start","visisted","Stack","pop","nodeID","stronglyConnectedComponents","indices","lowlink","S","strongConnect","min","breadthFirstSearch","startNodeID","targetNodeID","Q","edgeTo","_loop","y","path","reverse","getMinWeightEdgeBetween","pathExists","distance","dijkstraSearch","isDirected","isWeighted","getAllEdges","queue","_nodes","enqueue","priority","dequeue","isEmpty","distances","previous","dist","_loop2","smallest","neighbor","alt","_loop3","cost","bellmanFord","parents","negativeCylce","fordFulkerson","reduceMultiGraph","marked","edgeProperties","capacity","flow","deltaFlow","other","residualCapacity","hasAugmentedPath","vertexAdjacency","bottleneckValue","maxFlow","flowPath","getFlows","kruskal","_SpanningTree2","mst","totalWeight","topologicalSort","adjacency","_graphHelpers2","L","_loop4","nodeN","nodeNConnectedTo","mID","isGraphCyclic","directionalEulerian","directionalDegrees","scc","getProperty","eulerian","component","deg","hasEulerianCircuit","cc","makeAndPrintShortestPath","fn","source","nodeLabelToID","sink","nodeIDToLabel","nodeLabelIDValidator","makeAndPrintComponents","stronglyConnected","componentKey","_GraphAlgorithms2","graphProperties","setUpToDate","state","UIInteractions","directional","applyFunc","makeAndPrintGraphColoring","display","makeAndPrintConnectedComponents","makeAndPrintStronglyConnectedComponents","makeAndPrintBFS","makeAndPrintDijkstra","makeAndPrintBFSP","makeAndPrintFFMCMF","makeAndPrintKruskal","makeAndPrintIsCyclic","makeAndPrintTopologicalSort","makeAndPrintDirectionalEulerian","makeSimpleClickListener","selector","preventDefault","printHelp","printOptions","Konigsberg","Complete","Hypercube","Custom","undo","redo","makeAndPrintProperties","shuffleNetworkLayout","_dataImportExport2","graphColoring","applyColors","t","cyclic","$div","empty","addAlgoToPane","alg","getAlgorithms","petersenEdges","konigsbergEdges","hypercubeGraph","D","pow","pad","input","numBits","inputBits","allDiffer","newNum","join","generateDifferByOne","graphNames","completeGraph","newCustomGraph","EdgeImmut","NodeImmut","toReturn","attribute","assign","backHistory","forwardHistory","maxHistory","upToDate","always","makeAndPrintEulerian","vertices","Chromatic Number","Connected Components","Strongly Connected Components","listOptions","all","updateIfNotUpdated","recalcLong","getNumberOfEdges","printableProperties","printGraphProperties","properties","k","clearColorFromNodes","addNode","deleteEdge","deleteNode","color","rID","found","getGraphAsDataSet","DataSet","setLocations","locations","getAllNodesAsImmutableList","getAttribute","getAllEdgesAsImmutableList","getElementById","callback","interaction","hover","$popup","saveData","cancelEdit","confirm","_data","fromId","toId","operation","graphColors","_randomcolor2","luminosity","recalcProps","graphChanged","saveState","randomizeNetworkLayoutSeed","getPositions","disableEditMode","enableEditMode","printGraphAlgorithms","saveStateLocalStorage","getStateForSaving","parent","extend","Array","isArray","newState","firstLoad","currentState","oldKey","round","random","layoutEngine","randomSeed","initialRandomSeed","editEdgeMode","lastNetworkClickEvent","deleteSelected","keydown","which","ctrlKey","shiftKey"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \tvar installedChunks = {\n \t\t2: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([112,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","\"use strict\";\r\n\r\nimport 'bootstrap';\r\nimport Raven from 'raven-js';\r\nimport {Network} from 'vis/index-network';\r\nimport main from './main';\r\nimport predefined from './predefinedGraphs';\r\nimport settings from './settings';\r\nimport UI from './UIInteractions';\r\n\r\nwindow.main = main;\r\nwindow.predefined = predefined;\r\nwindow.network = new Network(main.container, {}, main.visOptions);\r\nwindow.settings = settings;\r\nwindow.ui = UI;\r\n\r\n// Initialize Sentry.io error logging\r\nRaven.config('https://92aaeee7e2fb4ef4837a2261a029e8ed@sentry.home.mikedombrowski.com/2').install();\r\n\r\nwindow.Raven = Raven;\r\n\r\nmain.addNetworkListeners(window.network);\r\n\r\nsettings.loadSettings();\r\n\r\nlet loadDefault = true;\r\nif (settings.checkForLocalStorage()) {\r\n    let s = localStorage.getItem(\"graphPlayground.lastState\");\r\n    if (s !== null) {\r\n        s = JSON.parse(s);\r\n        if (\"nodes\" in s.graph) {\r\n            loadDefault = false;\r\n            main.applyState(false, s);\r\n        }\r\n    }\r\n}\r\nif (loadDefault) {\r\n    main.setData(predefined.Petersen(), false, true, true);\r\n}\r\n\r\n// Register service worker\r\nif ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', function () {\r\n        navigator.serviceWorker.register('pwaPacked.js').then(function (registration) {\r\n            console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n        }).catch(function (err) {\r\n            console.log('ServiceWorker registration failed: ', err);\r\n        });\r\n    });\r\n}\r\n\r\nwindow.ui.registerListeners();\r\n","\"use strict\";\r\n\r\nexport default {\r\n    findVertexDegreesDirectional: (adjacencyMatrix) => {\r\n        // Adjacency stores IDs of edges TO\r\n        let degrees = [];\r\n        adjacencyMatrix.forEach((v, i) => {\r\n            if (i in degrees) {\r\n                degrees[i].out += v.length;\r\n            }\r\n            else {\r\n                degrees[i] = {out: v.length, in: 0};\r\n            }\r\n            v.forEach((outV) => {\r\n                if (outV in degrees) {\r\n                    degrees[outV].in += 1;\r\n                }\r\n                else {\r\n                    degrees[outV] = {in: 1, out: 0};\r\n                }\r\n            });\r\n        });\r\n\r\n        return degrees;\r\n    },\r\n\r\n    interpolateNodesFromEdges: (edges) => {\r\n        let nodes = [];\r\n        edges.forEach((v) => {\r\n            nodes[v.from] = {id: v.from, label: \"\" + v.from};\r\n            nodes[v.to] = {id: v.to, label: \"\" + v.to};\r\n        });\r\n\r\n        return nodes;\r\n    },\r\n};\r\n","\"use strict\";\n\nimport {List} from \"immutable\";\nimport NodeImmut from './NodeImmut';\nimport EdgeImmut from './EdgeImmut';\n\nconst filterNodeExtraAttr = (data) => {\n    return Object.keys(data)\n                 .filter((key) => !([\"label\", \"id\"]).includes(key))\n                 .reduce((obj, key) => {\n                     obj[key] = data[key];\n                     return obj;\n                 }, {});\n};\n\nconst genericEdgesToImmutEdges = (edges, nodeMap = {}) => {\n    if(edges === null){\n        return false;\n    }\n\n    let newEdges = new List();\n\n    if(typeof edges === 'object') {\n        edges.forEach((edge) => {\n            let weight = 0;\n            let from = 0;\n            let to = 0;\n\n            if (\"weight\" in edge) {\n                weight = parseFloat(edge.weight);\n            }\n            if (\"from\" in edge) {\n                from = nodeMap[edge.from];\n            }\n            if (\"to\" in edge) {\n                to = nodeMap[edge.to];\n            }\n\n            newEdges = newEdges.push(new EdgeImmut(from, to, weight));\n        });\n    }\n    else{\n        return false;\n    }\n\n    return newEdges;\n};\n\nconst genericNodesToImmutNodes = (nodes) => {\n    if(nodes === null){\n       return false;\n    }\n\n    let newNodes = new List();\n    let nodeMap = {};\n\n    if(typeof nodes === 'object'){\n        let nodeNum = 0;\n        nodes.forEach((n) => {\n            let id = nodeNum++;\n            let label = null;\n            let extraAttrs = null;\n\n            if (\"label\" in n) {\n                label = n.label;\n            }\n            if (\"id\" in n){\n                nodeMap[n.id] = id;\n                if (\"label\" in n && n.label === n.id.toString()) {\n                    label = id.toString();\n                }\n            }\n            else {\n                nodeMap[id] = id;\n            }\n            if (\"attributes\" in n) {\n                extraAttrs = filterNodeExtraAttr(n.attributes);\n            }\n            else {\n                extraAttrs = filterNodeExtraAttr(n);\n            }\n\n            newNodes = newNodes.set(id, new NodeImmut(id, label, extraAttrs));\n        });\n    }\n    else if (typeof nodes === \"number\") {\n        // Create the nodes\n        for (let i = 0; i < Math.floor(nodes); i++) {\n            newNodes = newNodes.set(i, new NodeImmut(i));\n            nodeMap[i] = i;\n        }\n    }\n    else{\n        return false;\n    }\n\n    return {nodes: Object.freeze(newNodes), map: nodeMap};\n};\n\nexport default class GraphImmut {\n    constructor (nodes, edges = null, directed = false, weighted = false) {\n        this.directed = Object.freeze(directed);\n        this.weighted = Object.freeze(weighted);\n        let nodeMap = {};\n\n        // Make Nodes\n        if (typeof nodes === \"number\" || (typeof nodes === \"object\" && !(nodes instanceof List))) {\n            let n = genericNodesToImmutNodes(nodes);\n            this.nodes = n.nodes;\n            nodeMap = n.map;\n        }\n        else if(nodes instanceof List){\n            this.nodes = nodes;\n        }\n        else{\n            throw new Error(\"Illegal type of 'node' input to GraphImmut constructor\");\n        }\n        this.nodes = Object.freeze(this.nodes);\n        this.numNodes = Object.freeze(this.nodes.size);\n\n        // If we are given edges, add them to the graph\n        if (typeof edges === \"object\" && !(edges instanceof List)) {\n            this.edges = genericEdgesToImmutEdges(edges, nodeMap);\n        }\n        else if(edges instanceof List){\n            this.edges = edges;\n        }\n        else{\n            this.edges = new List();\n        }\n        this.edges = Object.freeze(this.edges);\n        this.numEdges = Object.freeze(this.edges.size);\n\n        if (new.target === GraphImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    alignNodeIDs (alignTo = 0){\n        let nodeMap = {};\n        let nodeCount = alignTo;\n        let newNodes = new List();\n        this.nodes.forEach((v) => {\n            let label = v.getLabel();\n            if (v.getLabel() === v.getID().toString()) {\n                label = nodeCount.toString();\n            }\n\n            newNodes = newNodes.set(nodeCount, new NodeImmut(nodeCount, label, v.getAllAttributes()));\n            nodeMap[v.getID()] = nodeCount++;\n        });\n\n        let newEdges = new List();\n        this.edges.forEach((v) => {\n            newEdges = newEdges.push(new EdgeImmut(nodeMap[v.getFrom()], nodeMap[v.getTo()], v.getWeight()));\n        });\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    getNode (id, rich = false) {\n        if (rich) {\n            return this.nodes.get(id);\n        }\n        return this.nodes.get(id).toPlain();\n    }\n\n    addNode (data = null) {\n        if (data === null) {\n            data = {};\n        }\n\n        let id = this.numNodes;\n        if (!(\"label\" in data)) {\n            data.label = id.toString();\n        }\n\n        let extraAttrs = filterNodeExtraAttr(data);\n\n        return new GraphImmut(this.nodes.set(id, new NodeImmut(id, data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    editNode (id, data) {\n        if (!this.nodes.has(id)) {\n            return false;\n        }\n\n        let extraAttrs = filterNodeExtraAttr(data);\n        if (!(\"label\" in data)) {\n            data.label = this.getNode(id, true).getLabel();\n        }\n        return new GraphImmut(this.nodes.set(id, this.getNode(id, true).editNode(data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    deleteNode (id) {\n        // Make sure the ID exists\n        if (!(id >= 0 && id < this.numNodes)) {\n            return false;\n        }\n\n        let nodeMap = {}; // Map for old IDs to new ones since we're deleting an entry\n\n        // Remove it from the node list\n        let nodeCount = 0;\n        let newNodes = this.nodes\n                           .filter((n) => {\n                               if (n.getID() === id) {\n                                   nodeMap[n.getID()] = -1;\n                               }\n                               else {\n                                   nodeMap[n.getID()] = nodeCount++;\n                               }\n\n                               return n.getID() !== id;\n                           })\n                           .map((node) => {\n                               let label = node.getLabel();\n                               if (node.getID().toString() === label) {\n                                   label = nodeMap[node.getID()].toString();\n                               }\n\n                               return new NodeImmut(nodeMap[node.getID()], label, node.getAllAttributes());\n                           });\n\n        // Remap edges\n        let newEdges = this.edges\n                           .filter((edge) => {\n                               return !(edge.getFrom() === id || edge.getTo() === id);\n                           })\n                           .map((edge) => {\n                               return new EdgeImmut(nodeMap[edge.getFrom()], nodeMap[edge.getTo()], edge.getWeight());\n                           });\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    addEdge (from, to, weight = 1) {\n        if (!this.weighted) {\n            weight = 1; // Ensure that edge weights are 1 if this is an unweighted graph\n        }\n\n        let newEdges = this.edges.push(new EdgeImmut(from, to, parseFloat(weight)));\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    deleteEdge (from, to, weight = null, deleteAll = true) {\n        if (weight !== null) {\n            weight = parseFloat(weight);\n        }\n\n        let foundOneEdge = false;\n        let newEdges = this.edges.filter((edge) => {\n            // If we're not deleting everything and we have found one edge, then do not filter anymore\n            if (foundOneEdge && !deleteAll) {\n                return true;\n            }\n\n            // If we have an exact match\n            if (edge.getFrom() === from && edge.getTo() === to && (weight === null || edge.getWeight() === weight)) {\n                foundOneEdge = true;\n                return false; // Remove this edge\n            }\n\n            // If we are undirected, check for opposing matches\n            if (!this.directed) {\n                if (edge.getFrom() === to && edge.getTo() === from && (weight === null || edge.getWeight() === weight)) {\n                    foundOneEdge = true;\n                    return false; // Remove this edge\n                }\n            }\n\n            return true;\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    editEdge (from, to, newWeight, oldWeight = null) {\n        // Editing only makes sense for weighted graphs.\n        // To change from/to, just delete the edge and add a new one\n        if (!this.weighted) {\n            return false;\n        }\n\n        let foundFirst = false;\n\n        if (oldWeight !== null) {\n            oldWeight = parseFloat(oldWeight);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge, index) => {\n            if (foundFirst) {\n                return;\n            }\n            if (edge.getFrom() === from && edge.getTo() === to && (oldWeight === null || edge.getWeight() === oldWeight)) {\n                newEdges = newEdges.set(index, edge.editEdge(parseFloat(newWeight)));\n                foundFirst = true;\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    getAllNodes (rich = false) {\n        if (rich) {\n            return this.nodes.toArray();\n        }\n        return this.nodes.map((node) => {\n            return node.toPlain();\n        }).toArray();\n    }\n\n    getAllNodesAsImmutableList () {\n        return this.nodes;\n    }\n\n    getAllEdgesAsImmutableList () {\n        return this.edges;\n    }\n\n    getAllEdges (rich = false) {\n        if (rich) {\n            return this.edges.toArray();\n        }\n        return this.edges.map((edge) => {\n            return edge.toPlain();\n        }).toArray();\n    }\n\n    getNumberOfNodes () {\n        return this.numNodes;\n    }\n\n    getNumberOfEdges () {\n        return this.numEdges;\n    }\n\n    getAllOutDegrees () {\n        let degrees = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() in degrees) {\n                degrees[edge.getFrom()]++;\n            }\n            else {\n                degrees[edge.getFrom()] = 1;\n            }\n        });\n\n        return degrees;\n    }\n\n    asWeighted () {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }), this.directed, true);\n    }\n\n    asUnweighted () {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }), this.directed, false);\n    }\n\n    asDirected (doubleEdges = false) {\n        if (!doubleEdges) {\n            return new GraphImmut(this.nodes, this.edges, true, this.weighted);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.getTo(), edge.getFrom(), edge.getWeight()));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, true, this.weighted);\n    }\n\n    asUndirected () {\n        let newEdges = [];\n        let addedEdges = {};\n\n        this.edges.forEach((edge) => {\n            let from = edge.getFrom();\n            let to = edge.getTo();\n            if (to > from) {\n                from = to;\n                to = edge.getFrom();\n            }\n            if (!(from + \"_\" + to in addedEdges)) {\n                addedEdges[from + \"_\" + to] = null;\n                newEdges.push(new EdgeImmut(from, to, edge.getWeight()));\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, false, this.weighted);\n    }\n\n    asChangedDirectedWeighted (directed, weighted) {\n        let G = this;\n        if(directed && !this.directed){\n            G = this.asDirected();\n        }\n        else if (!directed && this.directed){\n            G = this.asUndirected();\n        }\n\n        if(weighted && !this.weighted){\n            G = this.asWeighted();\n        }\n        else if(!weighted && this.weighted){\n            G = this.asUnweighted();\n        }\n\n        return G;\n    }\n\n    getNodeAdjacency (id) {\n        let adj = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() === id) {\n                adj.push(edge.getTo());\n            }\n            else if (!this.directed && edge.getTo() === id) {\n                adj.push(edge.getFrom());\n            }\n        });\n\n        return adj;\n    }\n\n    getFullAdjacency () {\n        let adj = [];\n        this.nodes.forEach((n) => {\n            adj[n.getID()] = this.getNodeAdjacency(n.getID());\n        });\n\n        return adj;\n    }\n\n    areAdjacent (id1, id2) {\n        return this.getNodeAdjacency(id1).includes(id2);\n    }\n\n    getEdgesBetween (id1, id2) {\n        let edgeList = [];\n        this.edges.forEach((edge) => {\n            if (!this.directed && edge.getFrom() === id2 && edge.getTo() === id1) {\n                edgeList.push(edge);\n            }\n\n            if (edge.getFrom() === id1 && edge.getTo() === id2) {\n                edgeList.push(edge);\n            }\n        });\n\n        return edgeList;\n    }\n\n    getMinWeightEdgeBetween (id1, id2) {\n        let minWeight = Infinity;\n        this.getEdgesBetween(id1, id2).forEach((edge) => {\n            if (edge.getWeight() < minWeight) {\n                minWeight = edge.getWeight();\n            }\n        });\n\n        return minWeight;\n    }\n\n    // Take a multigraph and reduce all multiple edges to a single edge, weighted using the reducer\n    reduceMultiGraph (reducer, initialValue) {\n        if (typeof initialValue === \"undefined\") {\n            initialValue = 0;\n        }\n\n        let multiEdges = [];\n        this.nodes.forEach((node) => {\n            // If we have duplicates\n            let adj = this.getNodeAdjacency(node.getID());\n            let uniques = new Set(adj);\n            if (uniques.size < adj.length) {\n                uniques.forEach((to) => {\n                    let newWeight = this.getEdgesBetween(node.getID(), to).reduce((acc, edge) => {\n                        return reducer(acc, edge.getWeight());\n                    }, initialValue);\n\n                    multiEdges.push({from: node.getID(), to: to, weight: parseFloat(newWeight)});\n                });\n            }\n        });\n\n        // Remove all multigraph edges and replace them with single new edges\n        let newEdges = this.edges.filter((edge) => {\n            let keep = true;\n            multiEdges.forEach((duplicateEdge) => {\n                if (edge.getFrom() === duplicateEdge.from && edge.getTo() === duplicateEdge.to) {\n                    keep = false;\n                }\n            });\n\n            return keep;\n        });\n        multiEdges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.from, edge.to, edge.weight));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    isWeighted () {\n        return this.weighted;\n    }\n\n    isDirected () {\n        return this.directed;\n    }\n}\n","\"use strict\";\r\n\r\nlet self = {\r\n    defaults: {\r\n        nodePhysics: true,\r\n        direction: false,\r\n        weights: false\r\n    },\r\n    current: {},\r\n\r\n    checkForLocalStorage: () => {\r\n        try {\r\n            let x = '__storage_test__';\r\n            localStorage.setItem(x, x);\r\n            localStorage.removeItem(x);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    },\r\n\r\n    saveSettings: () => {\r\n        if (self.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.settings\", JSON.stringify(self.current));\r\n        }\r\n    },\r\n\r\n    loadSettings: () => {\r\n        if (self.checkForLocalStorage()) {\r\n            self.current = JSON.parse(localStorage.getItem(\"graphPlayground.settings\"));\r\n        }\r\n        if (self.current === null) {\r\n            self.current = {};\r\n        }\r\n        self.setAll();\r\n    },\r\n\r\n    setAll: () => {\r\n        window.network.setOptions({nodes: {physics: self.getOption(\"nodePhysics\")}});\r\n        window.network.setOptions({edges: {arrows: {to: self.getOption(\"direction\")}}});\r\n        if (self.getOption(\"weights\")) {\r\n            window.network.setOptions({\r\n                manipulation: {\r\n                    editEdge: {\r\n                        editWithoutDrag: window.main.visWeightEdgeEdit\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            window.network.setOptions({manipulation: {editEdge: window.main.visOptions.manipulation.editEdge}});\r\n        }\r\n    },\r\n\r\n    changeOption: (option, value) => {\r\n        self.current[option] = value;\r\n        self.saveSettings();\r\n        self.setAll();\r\n    },\r\n\r\n    getOption: (option) => {\r\n        if (option in self.current) {\r\n            return self.current[option];\r\n        }\r\n        return self.defaults[option];\r\n    },\r\n\r\n    resetToDefault: () => {\r\n        self.current = {};\r\n        self.saveSettings();\r\n        self.setAll();\r\n\r\n        // Reset graph to just a plain graph. Not sure if this should actually happen or not.\r\n        let G = window.main.graphState.graph.asChangedDirectedWeighted(self.defaults.direction, self.defaults.weights);\r\n        window.main.setData(window.main.graphState.getGraphData(G));\r\n    }\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\n\r\nimport $ from 'jquery';\r\n\r\nlet self = {\r\n    deepFreeze: (o) => {\r\n        Object.freeze(o);\r\n\r\n        Object.getOwnPropertyNames(o).forEach(prop => {\r\n            if (o.hasOwnProperty(prop) && o[prop] !== null\r\n                && (typeof o[prop] === \"object\" || typeof o[prop] === \"function\")\r\n                && !Object.isFrozen(o[prop])) {\r\n                self.deepFreeze(o[prop]);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    },\r\n    sort: (arr, compareFunction) => {\r\n        return [...arr].sort(compareFunction);\r\n    },\r\n    datasetToArray: (ds, key) => {\r\n        let r = [];\r\n        ds.forEach((v) => {\r\n            r.push(v[key]);\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    keepOnlyKeys: (arr, keys) => {\r\n        arr = arr.slice();\r\n        arr.forEach((v) => {\r\n            let k = Object.keys(v);\r\n            k.forEach((key) => {\r\n                if (keys.indexOf(key) < 0) {\r\n                    delete v[key];\r\n                }\r\n            });\r\n        });\r\n        return self.deepFreeze(arr);\r\n    },\r\n\r\n    getFileExtension: (filename) => {\r\n        return filename.split(\".\").splice(-1)[0];\r\n    },\r\n\r\n    htmlEncode: (string) => {\r\n        string = $(\"<div>\").text(string).html();\r\n        string = string.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>');\r\n        return string;\r\n    },\r\n\r\n    printout: (text, escape) => {\r\n        if (escape) {\r\n            text = this.htmlEncode(escape);\r\n        }\r\n        $(\"#printout\").html(text);\r\n    },\r\n\r\n    flatten: (map) => {\r\n        let r = [];\r\n        for (let i in map) {\r\n            if ({}.hasOwnProperty.call(map, i)) {\r\n                r.push(map[i]);\r\n            }\r\n        }\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    rotate: (map) => {\r\n        let r = {};\r\n        for (let i in map) {\r\n            if (map[i] in r) {\r\n                r[map[i]].push(i);\r\n            }\r\n            else {\r\n                r[map[i]] = [i];\r\n            }\r\n        }\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    max: (iterable) => {\r\n        return iterable.reduce((a, b) => {\r\n            return Math.max(a, b);\r\n        });\r\n    },\r\n\r\n    toTitleCase: (str) => {\r\n        return str.replace(/(?:^|\\s)\\w/g, (match) => {\r\n            return match.toUpperCase();\r\n        });\r\n    },\r\n\r\n    showSimpleModal: (title, body) => {\r\n        self.showFormModal(null, title, null, [{type: \"html\", initialValue: body}], null, false);\r\n    },\r\n\r\n    makeFormModal: (title, successText, form, footer = true) => {\r\n        let f = $(\"<div>\", {class: \"modal-body form-group\"});\r\n        form.forEach((formRow, i) => {\r\n            if (!(\"initialValue\" in formRow)) {\r\n                formRow.initialValue = \"\";\r\n            }\r\n\r\n            let id = \"form-modal-\" + i;\r\n            if (\"id\" in formRow && formRow.id !== \"\" && formRow.id !== null && typeof formRow.id === \"string\") {\r\n                id = formRow.id;\r\n            }\r\n\r\n            let basicMap = {class: \"form-control\", id: id, value: formRow.initialValue};\r\n\r\n            if (\"extraAttrs\" in formRow) {\r\n                Object.keys(formRow.extraAttrs).forEach((attrname) => {\r\n                    if (typeof formRow.extraAttrs[attrname] !== \"function\") {\r\n                        basicMap[attrname] = formRow.extraAttrs[attrname];\r\n                    }\r\n                });\r\n            }\r\n\r\n            let validFunc = () => true;\r\n            if (\"validationFunc\" in formRow) {\r\n                validFunc = formRow.validationFunc;\r\n            }\r\n\r\n            let generalValidator = (event, valueMutator = null) => {\r\n                let $v = $(event.target);\r\n                let val = $v.val();\r\n                if (valueMutator !== null && typeof valueMutator === \"function\") {\r\n                    val = valueMutator(val);\r\n                }\r\n                let valid = validFunc(val, $v);\r\n\r\n                if (valid === true) {\r\n                    $v.removeClass(\"is-invalid\").next(\"#feedback-\" + i).remove();\r\n                }\r\n                else {\r\n                    $v.addClass(\"is-invalid\");\r\n                    if ($v.next(\"#feedback-\" + i).length === 0) {\r\n                        $v.after($(\"<div>\", {class: \"invalid-feedback\", id: \"feedback-\" + i}).text(valid));\r\n                    }\r\n                }\r\n            };\r\n\r\n            if (formRow.type === \"html\") {\r\n                f.append($(formRow.initialValue));\r\n            }\r\n            else if (formRow.type === \"checkbox\") {\r\n                basicMap.type = \"checkbox\";\r\n                basicMap.class = \"form-check-input\";\r\n                delete basicMap.value;\r\n                if (formRow.initialValue) {\r\n                    basicMap.checked = \"\";\r\n                }\r\n\r\n                f.append($(\"<div>\", {class: \"form-check\"})\r\n                    .append($(\"<label>\", {for: id, class: \"form-check-label\"})\r\n                        .text(formRow.label).prepend($(\"<input>\", basicMap))\r\n                    )\r\n                );\r\n            }\r\n            else{\r\n                f.append($(\"<label>\", {for: id, class: \"col-form-label\"}).text(formRow.label));\r\n\r\n                if (formRow.type === \"button\") {\r\n                    if (\"clickDismiss\" in formRow && formRow.clickDismiss === true) {\r\n                        basicMap.class += \" btn-dismiss\";\r\n                    }\r\n                    let $b = $(\"<button>\", basicMap).text(formRow.initialValue);\r\n                    if (\"onclick\" in formRow && typeof formRow.onclick === \"function\") {\r\n                        $b.on(\"click\", formRow.onclick);\r\n                    }\r\n                    f.append($b);\r\n                }\r\n                else if (formRow.type === \"numeric\") {\r\n                    basicMap.type = \"number\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", (e) => {\r\n                        generalValidator(e, parseFloat);\r\n                    }));\r\n                }\r\n                else if (formRow.type === \"text\") {\r\n                    basicMap.type = \"text\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                }\r\n                else if (formRow.type === \"file\") {\r\n                    basicMap.type = \"file\";\r\n                    basicMap.class = \"form-control-file form-control\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                }\r\n                else if (formRow.type === \"textarea\") {\r\n                    let $b = $(\"<textarea>\", basicMap).on(\"blur validate\", generalValidator);\r\n                    if (\"onclick\" in formRow) {\r\n                        $b.on(\"click\", formRow.onclick);\r\n                    }\r\n                    f.append($b);\r\n                }\r\n                else if (formRow.type === \"select\") {\r\n                    let $options = $(\"<select>\", basicMap);\r\n                    formRow.optionText.forEach((oText, oIndex) => {\r\n                        if (oIndex < formRow.optionValues.length) {\r\n                            $options.append($(\"<option>\", {value: formRow.optionValues[oIndex]}).text(oText));\r\n                        }\r\n                        else {\r\n                            $options.append($(\"<option>\").text(oText));\r\n                        }\r\n                    });\r\n                    f.append($options.on(\"blur validate\", generalValidator));\r\n                }\r\n            }\r\n        });\r\n\r\n        let $footer = $(\"<div>\", {class: \"modal-footer\"})\r\n            .append($(\"<button>\", {class: \"btn btn-success\", type: \"button\"}).text(successText))\r\n            .append($(\"<button>\", {class: \"btn btn-danger btn-cancel\", type: \"button\"}).text(\"Cancel\"));\r\n\r\n        if (footer === false) {\r\n            $footer = null;\r\n        }\r\n\r\n        let $modal = ($(\"<div>\", {class: \"modal fade\", tabindex: \"-1\", role: \"dialog\", \"aria-hidden\": \"true\"}));\r\n        $modal\r\n            .append($(\"<div>\", {class: \"modal-dialog\"})\r\n                .append($(\"<div>\", {class: \"modal-content\"})\r\n                    .append($(\"<div>\", {class: \"modal-header\"})\r\n                        .append($(\"<h5>\", {class: \"modal-title\"}).text(title))\r\n                        .append($(\"<button>\", {class: \"close\", \"data-dismiss\": \"modal\", \"aria-label\": \"close\"})\r\n                            .append($(\"<span>\", {\"aria-hidden\": \"true\"}).html(\"&times;\"))\r\n                        )\r\n                    )\r\n                    .append(f)\r\n                    .append($footer)\r\n                )\r\n            );\r\n        $modal.find(\"input, textarea\").off(\"keyup\").on(\"keyup\", (e) => {\r\n            if (e.key === \"Enter\") {\r\n                $(\".btn-success\").last().click();\r\n            }\r\n        });\r\n        $modal.on(\"shown.bs.modal\", () => {\r\n            $modal.find(\"input[type='text'], input[type='number'], textarea\").first().focus();\r\n        });\r\n\r\n        return $modal;\r\n    },\r\n\r\n    showFormModal: (successCb, title, successText, form, cancelCb = ($modal) => {\r\n        $modal.modal(\"hide\");\r\n    }, footer = true) => {\r\n        let $modal = self.makeFormModal(title, successText, form, footer);\r\n\r\n        $modal.on(\"click\", \".btn-cancel\", () => {\r\n            if (typeof cancelCb === \"function\") {\r\n                cancelCb($modal);\r\n            }\r\n            else {\r\n                $modal.modal(\"hide\");\r\n            }\r\n        }).on(\"click\", \".btn-dismiss\", () => {\r\n            $modal.modal(\"hide\");\r\n        }).on(\"click\", \".btn-success\", () => {\r\n            let vals = [];\r\n            let hasErrors = false;\r\n\r\n            $modal.find(\"input, textarea, select\").each((i, v) => {\r\n                let $v = $(v);\r\n\r\n                if ($v.tagName === \"SELECT\") {\r\n                    vals.push($v.find(\":selected\").val());\r\n                }\r\n                else if ($v.attr(\"type\") === \"checkbox\") {\r\n                    vals.push($v.prop(\"checked\"));\r\n                }\r\n                else if ($v.attr(\"type\") === \"file\") {\r\n                    vals.push($v.get(0).files);\r\n                }\r\n                else if ($v.attr(\"type\") === \"number\") {\r\n                    vals.push(parseFloat($v.val()));\r\n                }\r\n                else {\r\n                    vals.push($v.val());\r\n                }\r\n\r\n                if ($v.trigger(\"validate\").hasClass(\"is-invalid\")) {\r\n                    hasErrors = true;\r\n                }\r\n\r\n            });\r\n\r\n            if (!hasErrors && typeof successCb === \"function\") {\r\n                successCb($modal, vals);\r\n            }\r\n        }).on(\"hidden.bs.modal\", () => {\r\n            $modal.remove();\r\n        }).modal(\"show\");\r\n    }\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\n\r\nimport $ from 'jquery';\r\nimport help from './genericHelpers';\r\nimport GraphImmut from './GraphImmut/GraphImmut';\r\n\r\nlet self = {\r\n    importByString: (string, format) => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            try {\r\n                let n = JSON.parse(string);\r\n                if (\"nodes\" in n && \"edges\" in n) {\r\n                    window.network.setData({}); // Clear out the existing network in order to import the proper\r\n                    // locations\r\n                    window.main.setData(n, false, true, false);\r\n                }\r\n                else {\r\n                    help.showSimpleModal(\"Data Import Error\", \"<p>The provided input does not conform the the\" +\r\n                        \" import specifications.</p>\");\r\n                }\r\n            }\r\n            catch (err) {\r\n                help.showSimpleModal(\"JSON Parse Error\", \"<p>There was an error parsing your input as JSON.</p>\"\r\n                    + \"<pre>\" + err + \"</pre>\");\r\n            }\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            let lines = string.split(/\\r?\\n/);\r\n            let graph = null;\r\n            let error = false;\r\n            lines.forEach((l) => {\r\n                let vals = l.split(/\\s+/);\r\n                if (vals[0].toLowerCase() === \"p\") {\r\n                    if (vals[1].toLowerCase() !== \"edge\") {\r\n                        help.showSimpleModal(\"DIMACS Parse Error\", \"<p>Sorry, but I only know how to parse\" +\r\n                            \" &quot;edge&quot; formatted DIMACS files.</p>\");\r\n                        error = true;\r\n                        return;\r\n                    }\r\n                    graph = new GraphImmut(parseInt(vals[2]));\r\n                }\r\n                else if (vals[0].toLowerCase() === \"e\" && graph !== null) {\r\n                    graph = graph.addEdge(parseInt(vals[1]) - 1, parseInt(vals[2]) - 1);\r\n                }\r\n            });\r\n\r\n            if (graph === null && !error) {\r\n                help.showSimpleModal(\"DIMACS Parse Error\", \"<p>No program line found!</p>\");\r\n                error = true;\r\n            }\r\n\r\n            if (!error) {\r\n                let d = window.main.graphState.getGraphData(graph);\r\n                d.nodes.forEach((v) => {\r\n                    v.label = v.id.toString();\r\n                });\r\n                window.main.setData(d, false, true, true);\r\n            }\r\n        }\r\n        else {\r\n            help.showSimpleModal(\"Unrecognized Input Format\", \"<p>The format of your input is incorrect.</p>\");\r\n        }\r\n    },\r\n\r\n    makeImportTextModal: () => {\r\n        help.showFormModal(($modal, values) => {\r\n                $modal.modal(\"hide\");\r\n                self.importByString(values[0], values[1]);\r\n            }, \"Import Graph From Text\", \"Import\",\r\n            [{type: \"textarea\", label: \"Input Text\", extraAttrs: {style: \"height: 20vh; min-height:400px;\"}},\r\n                {type: \"select\", label: \"Format\", optionValues: [\"json\", \"dimacs\"], optionText: [\"JSON\", \"DIMACS\"]}\r\n            ]);\r\n    },\r\n\r\n    makeImportFileModal: () => {\r\n        help.showFormModal(($modal, values) => {\r\n                $modal.modal(\"hide\");\r\n\r\n                let files = values[0];\r\n                if (files.length === 1) {\r\n                    let file = files[0];\r\n                    let reader = new FileReader();\r\n                    reader.onload = function (event) {\r\n                        self.importByString(event.target.result, help.getFileExtension(file.name));\r\n                    };\r\n\r\n                    reader.readAsText(file);\r\n                }\r\n            }, \"Import Graph From File\", \"Import\",\r\n            [{\r\n                type: \"file\", label: \"Upload File\", validationFunc: (val, $files) => {\r\n                    let files = $files.get(0).files;\r\n                    if (files.length >= 1) {\r\n                        return true;\r\n                    }\r\n                    return \"You must choose a file first\";\r\n                }\r\n            }]);\r\n    },\r\n\r\n    makeExportFileModal: () => {\r\n        help.showFormModal(null, \"Export Graph To File\", null,\r\n            [{\r\n                type: \"button\",\r\n                initialValue: \"Export to JSON\",\r\n                onclick: () => {self.exportToFile(\"json\");},\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary m-1\"\r\n\r\n                },\r\n                clickDismiss: true\r\n            },\r\n                {\r\n                    type: \"button\",\r\n                    initialValue: \"Export to DIMACS\",\r\n                    onclick: () => {self.exportToFile(\"dimacs\");},\r\n                    extraAttrs: {\r\n                        class: \"btn btn-sm btn-primary\"\r\n                    },\r\n                    clickDismiss: true\r\n                }\r\n            ], null, false);\r\n    },\r\n\r\n    makeExportTextModal: () => {\r\n        help.showFormModal(null, \"Export Graph To Text\", null,\r\n            [{\r\n                type: \"button\",\r\n                initialValue: \"Export to JSON\",\r\n                onclick: () => {self.exportToText(\"json\");},\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary m-1\",\r\n                },\r\n                clickDismiss: false\r\n            },\r\n                {\r\n                    type: \"button\",\r\n                    initialValue: \"Export to DIMACS\",\r\n                    onclick: () => {self.exportToText(\"dimacs\");},\r\n                    extraAttrs: {\r\n                        class: \"btn btn-sm btn-primary\",\r\n                    },\r\n                    clickDismiss: false\r\n                },\r\n                {\r\n                    type: \"textarea\", label: \"\", initialValue: \"\", extraAttrs: {\r\n                        style: \"height: 20vh;\" +\r\n                        \" min-height:400px; white-space:nowrap; margin-top: 1rem;\"\r\n                    },\r\n                    onclick: () => {\r\n                        $(\"#exportedText\").select();\r\n                        document.execCommand(\"copy\");\r\n                    }, id: \"exportedText\"\r\n                }\r\n            ], ($modal) => {\r\n                $modal.modal(\"hide\");\r\n            }, false);\r\n    },\r\n\r\n    exportToFile: (format) => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            self.downloadFile(\"graph.json\", self.getDataAsJSON());\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            self.downloadFile(\"graph.dimacs\", self.getDataAsDIMACS());\r\n        }\r\n    },\r\n\r\n    exportToText: (format) => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            $(\"#exportedText\").text(JSON.stringify(JSON.parse(self.getDataAsJSON()), null, 2));\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            $(\"#exportedText\").text(self.getDataAsDIMACS());\r\n        }\r\n    },\r\n\r\n    getDataAsJSON: () => {\r\n        let d = window.main.graphState.getGraphData(window.main.graphState.graph);\r\n        let nodeKeys = [\"id\", \"label\", \"color\", \"x\", \"y\"];\r\n        let edgeKeys = [\"from\", \"to\", \"weight\"];\r\n        d.nodes = help.keepOnlyKeys(d.nodes, nodeKeys);\r\n        d.edges = help.keepOnlyKeys(d.edges, edgeKeys);\r\n\r\n        return JSON.stringify(d);\r\n    },\r\n\r\n    getDataAsDIMACS: () => {\r\n        // If I add direction, DIMACS cannot be used, it only works for undirected graphs\r\n        let g = window.main.graphState.getGraphData();\r\n        let text = \"c This Graph was generated and exported from Michael Dombrowski's Graph Playground --\" +\r\n            \" https://md100play.github.io/graphPlayground -- https://mikedombrowski.com\\n\";\r\n\r\n        let adj = window.main.graphState.graph.getFullAdjacency();\r\n        adj = adj.filter((v) => {\r\n            return v.length !== 0;\r\n        });\r\n\r\n        let nodes = [];\r\n        adj.forEach((v, i) => {\r\n            if (nodes.indexOf(i + 1) === -1) {\r\n                nodes.push(i + 1);\r\n            }\r\n            v.forEach((n) => {\r\n                if (nodes.indexOf(n + 1) === -1) {\r\n                    nodes.push(n + 1);\r\n                }\r\n            });\r\n        });\r\n\r\n        let edgeCount = 0;\r\n        let edgeText = \"\";\r\n        g.edges.forEach((v) => {\r\n            edgeText += \"e \" + (v.from + 1) + \" \" + (v.to + 1) + \"\\n\";\r\n            edgeCount++;\r\n        });\r\n        edgeText = edgeText.trim();\r\n\r\n        text += \"p edge \" + nodes.length + \" \" + edgeCount + \"\\n\";\r\n        return text + edgeText;\r\n    },\r\n\r\n    downloadFile: (filename, text) => {\r\n        let blob = new Blob([text], {type: 'text/plain'});\r\n        if (window.navigator.msSaveOrOpenBlob) {\r\n            window.navigator.msSaveBlob(blob, filename);\r\n        }\r\n        else {\r\n            let a = window.document.createElement('a');\r\n            a.href = window.URL.createObjectURL(blob);\r\n            a.download = filename;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(blob);\r\n        }\r\n    },\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\n\r\nimport genericH from \"./genericHelpers\";\r\n\r\nlet SpanningTree = function (V) {\r\n    this.id = [];\r\n    for (let v = 0; v < V; v++) {\r\n        this.id.push(v);\r\n    }\r\n};\r\n\r\nSpanningTree.prototype = {\r\n    constructor: SpanningTree,\r\n    union: function (v, w) {\r\n        let q = this.root(v);\r\n        let p = this.root(w);\r\n\r\n        if (p !== q) {\r\n            this.id[p] = q;\r\n        }\r\n    },\r\n\r\n    root: function (q) {\r\n        while (this.id[q] !== q) {\r\n            q = this.id[q];\r\n        }\r\n        return q;\r\n    },\r\n\r\n    connected: function (v, w) {\r\n        return this.root(v) === this.root(w);\r\n    }\r\n};\r\n\r\nexport default genericH.deepFreeze(SpanningTree);\r\n","\"use strict\";\r\n\r\nimport genericH from './genericHelpers';\r\nimport graphH from './graphHelpers';\r\nimport SpanningTree from './SpanningTree';\r\n\r\nlet self = {\r\n    // Welsh-Powell Algorithm\r\n    colorNetwork: (graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        // Get node ID's only\r\n        let nodeArr = genericH.datasetToArray(G.getAllNodes(), \"id\");\r\n\r\n        // Put vertices in array in decreasing order of degree\r\n        let degrees = G.getAllOutDegrees();\r\n        let vertexOrder = genericH.sort(nodeArr, (a, b) => {\r\n            return degrees[a] < degrees[b] ? 1 : degrees[a] === degrees[b] ? 0 : -1;\r\n        });\r\n\r\n        let colorIndex = {};\r\n        let currentColor = 0;\r\n        while (vertexOrder.length > 0) {\r\n            let root = vertexOrder.shift();\r\n            colorIndex[root] = currentColor;\r\n\r\n            let myGroup = [];\r\n            myGroup.push(root);\r\n\r\n            for (let i = 0; i < vertexOrder.length;) {\r\n                let p = vertexOrder[i];\r\n                let conflict = false;\r\n\r\n                for (let j = 0; j < myGroup.length; j++) {\r\n                    if (G.areAdjacent(p, myGroup[j])) {\r\n                        i++;\r\n                        conflict = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (conflict) {\r\n                    continue;\r\n                }\r\n\r\n                colorIndex[p] = currentColor;\r\n                myGroup.push(p);\r\n                vertexOrder.splice(i, 1);\r\n            }\r\n\r\n            currentColor++;\r\n        }\r\n\r\n        let chromaticNumber = genericH.max(genericH.flatten(colorIndex)) + 1;\r\n        return {colors: colorIndex, chromaticNumber: chromaticNumber};\r\n    },\r\n\r\n    connectedComponents: (graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        let components = {};\r\n        let componentCount = 0;\r\n        const setComponentNum = (v) => {\r\n            components[v] = componentCount;\r\n        };\r\n        for (let i = 0; i < G.getNumberOfNodes(); i++) {\r\n            if (!(i in components)) {\r\n                let visited = self.depthFirstSearch(G, i);\r\n                visited.forEach(setComponentNum);\r\n                componentCount++;\r\n            }\r\n        }\r\n\r\n        return {components: components, count: componentCount};\r\n    },\r\n\r\n    depthFirstSearch: (G = window.main.graphState.graph, start) => {\r\n        let visisted = [];\r\n        let Stack = [];\r\n        Stack.push(start);\r\n        while (Stack.length > 0) {\r\n            let v = Stack.pop();\r\n            if (!visisted.includes(v)) {\r\n                visisted.push(v);\r\n                G.getNodeAdjacency(v).forEach((nodeID) => {\r\n                    Stack.push(nodeID);\r\n                });\r\n            }\r\n        }\r\n\r\n        return visisted;\r\n    },\r\n\r\n    // Tarjan's algorithm\r\n    stronglyConnectedComponents: (graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        let index = 0;\r\n        let indices = {};\r\n        let lowlink = {};\r\n        let S = [];\r\n        let components = {};\r\n        let componentCount = 0;\r\n\r\n        let strongConnect = (v) => {\r\n            indices[v] = index;\r\n            lowlink[v] = index++;\r\n            S.push(v);\r\n\r\n            G.getNodeAdjacency(v).forEach((w) => {\r\n                if (!(w in indices)) {\r\n                    strongConnect(w);\r\n                    lowlink[v] = Math.min(lowlink[v], lowlink[w]);\r\n                }\r\n                else if (S.includes(w)) {\r\n                    lowlink[v] = Math.min(lowlink[v], indices[w]);\r\n                }\r\n            });\r\n\r\n            if (lowlink[v] === indices[v]) {\r\n                let w = -1;\r\n                if (S.length > 0) {\r\n                    do {\r\n                        w = S.pop();\r\n                        components[w] = componentCount;\r\n                    }\r\n                    while (w !== v);\r\n                    componentCount++;\r\n                }\r\n            }\r\n        };\r\n\r\n        for (let i = 0; i < G.getNumberOfNodes(); i++) {\r\n            if (!(i in indices)) {\r\n                strongConnect(i);\r\n            }\r\n        }\r\n\r\n        return {components: components, count: componentCount};\r\n    },\r\n\r\n    breadthFirstSearch: (startNodeID, targetNodeID, graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        // Perform the BFS\r\n        let visisted = [];\r\n        let Q = []; // Use Push and Shift for Queue operations\r\n        let edgeTo = {};\r\n\r\n        Q.push(startNodeID);\r\n        while (Q.length > 0) {\r\n            let x = Q.shift();\r\n            if (!visisted.includes(x)) {\r\n                visisted.push(x);\r\n                G.getNodeAdjacency(x).forEach((y) => {\r\n                    if (!visisted.includes(y)) {\r\n                        edgeTo[y] = x;\r\n                        Q.push(y);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        if (visisted.includes(targetNodeID)) {\r\n            // Build the path\r\n            let path = [];\r\n            for (let x = targetNodeID; x !== startNodeID; x = edgeTo[x]) {\r\n                path.push(x);\r\n            }\r\n            path.push(startNodeID);\r\n            path.reverse();\r\n\r\n            // Get the path weight\r\n            let weight = 0;\r\n            for (let i = 0; i < path.length - 1; i++) {\r\n                weight += G.getMinWeightEdgeBetween(path[i], path[i + 1]);\r\n            }\r\n\r\n            return {pathExists: true, path: path, distance: path.length, weight: weight};\r\n        }\r\n\r\n        return {pathExists: false, path: [], distance: -1, weight: -1};\r\n    },\r\n\r\n    dijkstraSearch: (startNodeID, targetNodeID, graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        if (!G.isDirected()) {\r\n            G = G.asDirected(true);\r\n        }\r\n        if (!G.isWeighted()) {\r\n            G = G.asWeighted();\r\n        }\r\n\r\n        let nonNegative = G.getAllEdges(true).find((edge) => {\r\n            return edge.getWeight() < 0;\r\n        });\r\n        if (typeof nonNegative !== \"undefined\") {\r\n            genericH.showSimpleModal(\"Dijkstra Error\", \"<p>The Dijkstra algorithm only works on graphs\" +\r\n                \" with totally non-negative edge weights. Please fix the graph so that there are no\" +\r\n                \" negative edge weights.</p><p>Alternatively, try the Bellman-Ford algorithm which solves\" +\r\n                \" exactly this problem.</p>\");\r\n            return false;\r\n        }\r\n\r\n        // Priority Queue implementation for Dijkstra\r\n        const PriorityQueue = function () {\r\n            this._nodes = [];\r\n\r\n            this.enqueue = function (priority, key) {\r\n                this._nodes.push({key: key, priority: priority});\r\n                this.sort();\r\n            };\r\n            this.dequeue = function () {\r\n                return this._nodes.shift().key;\r\n            };\r\n            this.sort = function () {\r\n                this._nodes.sort(function (a, b) {\r\n                    return a.priority - b.priority;\r\n                });\r\n            };\r\n            this.isEmpty = function () {\r\n                return !this._nodes.length;\r\n            };\r\n        };\r\n\r\n        let queue = new PriorityQueue();\r\n        let distances = {};\r\n        let previous = {};\r\n        let path = [];\r\n\r\n        // Initialize Queue and distances\r\n        G.getAllNodes(true).forEach((node) => {\r\n            let dist = Infinity;\r\n            if (node.getID() === startNodeID) {\r\n                dist = 0;\r\n            }\r\n\r\n            distances[node.getID()] = dist;\r\n            queue.enqueue(dist, node.getID());\r\n            previous[node.getID()] = null;\r\n        });\r\n\r\n        while (!queue.isEmpty()) {\r\n            let smallest = queue.dequeue();\r\n\r\n            if (smallest === targetNodeID) {\r\n                path = [];\r\n                while (previous[smallest] !== null) {\r\n                    path.push(smallest);\r\n                    smallest = previous[smallest];\r\n                }\r\n                break;\r\n            }\r\n\r\n            if (distances[smallest] === Infinity) {\r\n                continue;\r\n            }\r\n\r\n            G.getNodeAdjacency(smallest).forEach((neighbor) => {\r\n                let alt = distances[smallest] + G.getMinWeightEdgeBetween(smallest, neighbor);\r\n\r\n                if (alt < distances[neighbor]) {\r\n                    distances[neighbor] = alt;\r\n                    previous[neighbor] = smallest;\r\n\r\n                    queue.enqueue(alt, neighbor);\r\n                }\r\n            });\r\n        }\r\n\r\n        path.push(startNodeID);\r\n        path.reverse();\r\n\r\n        if (distances[targetNodeID] !== Infinity) {\r\n            return {pathExists: true, path: path, distance: path.length, cost: distances[targetNodeID]};\r\n        }\r\n\r\n\r\n        return {pathExists: false, path: [], distance: -1, cost: 0};\r\n    },\r\n\r\n    bellmanFord: (startNodeID, targetNodeID, graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        let distances = [];\r\n        let parents = [];\r\n\r\n        // Initialize\r\n        G.getAllNodes(true).forEach((node) => {\r\n            distances[node.getID()] = Infinity;\r\n            parents[node.getID()] = null;\r\n        });\r\n\r\n        // Relax Edges\r\n        distances[startNodeID] = 0;\r\n        for (let i = 0; i < G.getNumberOfNodes() - 1; i++) {\r\n            G.getAllEdges(true).forEach((edge) => {\r\n                if (distances[edge.getFrom()] + edge.getWeight() < distances[edge.getTo()]) {\r\n                    distances[edge.getTo()] = distances[edge.getFrom()] + edge.getWeight();\r\n                    parents[edge.getTo()] = edge.getFrom();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Check for negative weight cycles\r\n        let negativeCylce = false;\r\n        G.getAllEdges(true).forEach((edge) => {\r\n            if (distances[edge.getFrom()] + edge.getWeight() < distances[edge.getTo()]) {\r\n                negativeCylce = true;\r\n            }\r\n        });\r\n\r\n        if (distances[targetNodeID] !== Infinity) {\r\n            let path = [targetNodeID];\r\n            while (!path.includes(startNodeID)) {\r\n                path.push(parents[path.slice().pop()]);\r\n            }\r\n            path.reverse();\r\n\r\n            return {pathExists: true, path: path, distance: path.length, cost: distances[targetNodeID]};\r\n        }\r\n\r\n        if (negativeCylce) {\r\n            genericH.showSimpleModal(\"Bellman-Ford Error\", \"<p>The Bellman-Ford algorithm only works on graphs\" +\r\n                \" with no negative edge-weight cycles. Please remove the negative cycle and try again.</p>\");\r\n            return false;\r\n        }\r\n\r\n        return {pathExists: false, path: [], distance: -1, cost: 0};\r\n    },\r\n\r\n    fordFulkerson: (startNodeID, targetNodeID, graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        // Must be a directed graph\r\n        if (!G.isDirected()) {\r\n            return false;\r\n        }\r\n\r\n        // Source == sink\r\n        if (startNodeID === targetNodeID) {\r\n            return false;\r\n        }\r\n\r\n        let bfs = self.breadthFirstSearch(startNodeID, targetNodeID, graphState);\r\n        // No path from source to sink\r\n        if (!bfs.pathExists) {\r\n            return false;\r\n        }\r\n\r\n        // If we have a multigraph, then reduce the graph to have single edges with the sum of the capacities\r\n        G = G.reduceMultiGraph((a, b) => {\r\n            return a + b;\r\n        });\r\n\r\n        let V = G.getNumberOfNodes();\r\n        let value = 0;\r\n        let marked = null;\r\n        let edgeTo = null;\r\n\r\n        let edgeProperties = {};\r\n        G.getAllEdges(true).forEach((edge) => {\r\n            edgeProperties[edge.getFrom() + \"_\" + edge.getTo()] = {\r\n                from: edge.getFrom(),\r\n                to: edge.getTo(),\r\n                capacity: edge.getWeight(),\r\n                flow: 0\r\n            };\r\n        });\r\n\r\n        const other = (e, x) => {\r\n            e = e.split(\"_\");\r\n            let a = parseInt(e[0]);\r\n            let b = parseInt(e[1]);\r\n            return x === a ? b : a;\r\n        };\r\n\r\n        const residualCapacity = (e, x) => {\r\n            let edge = e.split(\"_\");\r\n            let a = parseInt(edge[0]);\r\n            if (x === a) {\r\n                return edgeProperties[e].flow;\r\n            }\r\n            return edgeProperties[e].capacity - edgeProperties[e].flow;\r\n        };\r\n\r\n        const addResidualFlow = (e, x, deltaFlow) => {\r\n            let edge = e.split(\"_\");\r\n            let v = parseInt(edge[0]);\r\n            if (x === v) {\r\n                edgeProperties[e].flow -= deltaFlow;\r\n            }\r\n            else {\r\n                edgeProperties[e].flow += deltaFlow;\r\n            }\r\n        };\r\n\r\n        const hasAugmentedPath = () => {\r\n            marked = [];\r\n            edgeTo = [];\r\n            for (let v = 0; v < V; ++v) {\r\n                marked.push(false);\r\n                edgeTo.push(null);\r\n            }\r\n\r\n            let queue = [];\r\n            queue.push(startNodeID);\r\n\r\n            marked[startNodeID] = true;\r\n            while (queue.length > 0) {\r\n                let v = queue.shift();\r\n                let vertexAdjacency = G.getNodeAdjacency(v);\r\n                for (let i = 0; i < vertexAdjacency.length; i++) {\r\n                    let e = v + \"_\" + vertexAdjacency[i];\r\n                    let w = other(e, v);\r\n                    if (!marked[w] && residualCapacity(e, w) > 0) {\r\n                        edgeTo[w] = e;\r\n                        marked[w] = true;\r\n                        if (w === targetNodeID) {\r\n                            return true;\r\n                        }\r\n\r\n                        queue.push(w);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        while (hasAugmentedPath()) {\r\n            let bottleneckValue = Infinity;\r\n            for (let x = targetNodeID; x !== startNodeID; x = other(edgeTo[x], x)) {\r\n                bottleneckValue = Math.min(bottleneckValue, residualCapacity(edgeTo[x], x));\r\n            }\r\n            for (let x = targetNodeID; x !== startNodeID; x = other(edgeTo[x], x)) {\r\n                addResidualFlow(edgeTo[x], x, bottleneckValue);\r\n            }\r\n            value += bottleneckValue;\r\n        }\r\n\r\n        const getFlows = () => {\r\n            let f = [];\r\n            for (let v = 0; v < V; v++) {\r\n                let vertexAdjacency = G.getNodeAdjacency(v);\r\n                for (let i = 0; i < vertexAdjacency.length; i++) {\r\n                    let e = v + \"_\" + vertexAdjacency[i];\r\n                    if (edgeProperties[e].flow > 0) {\r\n                        f.push(edgeProperties[e]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return f;\r\n        };\r\n\r\n        return {maxFlow: value, flowPath: getFlows()};\r\n    },\r\n\r\n    kruskal: (graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        // If we have a multigraph, reduce it by using the minimum edge weights\r\n        G.reduceMultiGraph(Math.min, Infinity);\r\n\r\n        let Q = G.getAllEdges(true);\r\n\r\n        // Sort edges by weight so that they are added to the tree in the order of lowest possible weight\r\n        Q.sort((a, b) => {\r\n            return a.getWeight() - b.getWeight();\r\n        });\r\n\r\n        let kruskal = [];\r\n        let set = new SpanningTree(G.getNumberOfNodes());\r\n        while (Q.length > 0 && kruskal.length < G.getNumberOfNodes() - 1) {\r\n            let e = Q.shift();\r\n            if (!set.connected(e.getFrom(), e.getTo())) {\r\n                set.union(e.getFrom(), e.getTo());\r\n                kruskal.push(e);\r\n            }\r\n        }\r\n\r\n        // Get the total cost of the MST\r\n        let weight = kruskal.reduce((acc, e) => {\r\n            return acc + e.getWeight();\r\n        }, 0);\r\n\r\n        return {mst: kruskal, totalWeight: weight};\r\n    },\r\n\r\n    topologicalSort: (graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        let adjacency = G.getFullAdjacency();\r\n        let degrees = graphH.findVertexDegreesDirectional(adjacency);\r\n\r\n        let L = [];\r\n        let S = G.getAllNodes(true).filter((n) => {\r\n            return degrees[n.getID()].in === 0;\r\n        });\r\n        let edges = G.getAllEdges(true);\r\n\r\n        while (S.length !== 0) {\r\n            let nodeN = S.pop();\r\n            L.push(nodeN);\r\n\r\n            let nodeNConnectedTo = adjacency[nodeN.getID()];\r\n\r\n            // Remove n to m edges for all nodes m\r\n            edges = edges.filter((edge) => {\r\n                if (edge.getFrom() === nodeN.getID() && nodeNConnectedTo.includes(edge.getTo())) {\r\n                    degrees[edge.getTo()].in--;\r\n                    adjacency[nodeN.getID()] = adjacency[nodeN.getID()].filter((v) => {\r\n                        return v !== edge.getTo();\r\n                    });\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n\r\n            // If m has no more incoming edges, add it to S\r\n            nodeNConnectedTo.forEach((mID) => {\r\n                if (degrees[mID].in === 0) {\r\n                    S.push(G.getNode(mID, true));\r\n                }\r\n            });\r\n        }\r\n\r\n        return edges.length > 0 || L;\r\n    },\r\n\r\n    isGraphCyclic: (graphState = window.main.graphState) => {\r\n        // If the topological sorting returns true, then it failed, so the graph has a cycle\r\n        return self.topologicalSort(graphState) === true;\r\n    },\r\n\r\n    directionalEulerian: (directionalDegrees, graphState = window.main.graphState) => {\r\n        let scc = graphState.getProperty(\"stronglyConnectedComponents\", true);\r\n\r\n        let eulerian = true;\r\n        let component = -1;\r\n        directionalDegrees.forEach((deg, id) => {\r\n            if (deg.in !== deg.out) {\r\n                eulerian = false;\r\n            }\r\n            if (deg.in > 0) {\r\n                if (component === -1) {\r\n                    component = scc[id];\r\n                }\r\n                if (component !== scc[id]) {\r\n                    eulerian = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        return eulerian;\r\n    },\r\n\r\n    hasEulerianCircuit: (degrees, graphState = window.main.graphState) => {\r\n        let oddDegree = degrees.filter((v) => {\r\n            return v % 2 !== 0;\r\n        });\r\n\r\n        // If any nodes have odd degree, we can short-circuit the algorithm because it cannot be Eulerian\r\n        if (oddDegree.length !== 0) {\r\n            return false;\r\n        }\r\n\r\n        let cc = graphState.getProperty(\"connectedComponents\", true);\r\n\r\n        let eulerian = true;\r\n        let component = -1;\r\n        degrees.forEach((v, i) => {\r\n            if (v !== 0) {\r\n                if (component === -1) {\r\n                    component = cc[i];\r\n                }\r\n                if (component !== cc[i]) {\r\n                    eulerian = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        return eulerian;\r\n    },\r\n\r\n};\r\n\r\nexport default self;\r\n","import gAlgo from \"./GraphAlgorithms\";\nimport gHelp from \"./graphHelpers\";\nimport settings from \"./settings\";\nimport help from \"./genericHelpers\";\nimport $ from \"jquery\";\nimport importExport from './dataImportExport';\n\n\nconst makeAndPrintShortestPath = (title, fn, weighted) => {\n    help.showFormModal(($modal, values) => {\n            $modal.modal(\"hide\");\n\n            let source = window.main.graphState.nodeLabelToID(values[0]);\n            let sink = window.main.graphState.nodeLabelToID(values[1]);\n\n            let a = fn(source, sink);\n            if (a === false) {\n                return;\n            }\n\n            let p = \"<h3>\" + title + \"</h3><hr>No path exists from \"\n                + help.htmlEncode(source) + \" to \" + help.htmlEncode(sink);\n\n            if (a.pathExists) {\n                p = title + \" From \" + window.main.graphState.nodeIDToLabel(source) + \" to \";\n                p += window.main.graphState.nodeIDToLabel(sink) + \": \" + a.distance;\n                if (weighted) {\n                    p += \"\\nWith weighted cost: \" + a.cost;\n                }\n                p += \"\\n\\nUsing Path: \";\n\n                p = help.htmlEncode(p);\n                a.path.forEach((v) => {\n                    p += help.htmlEncode(window.main.graphState.nodeIDToLabel(v)) + \" &rarr; \";\n                });\n                p = p.slice(0, -8);\n                p = \"<h3>\" + title + \"</h3><hr>\" + p;\n            }\n\n            help.printout(p);\n        },\n        title, \"Go\", [\n            {label: \"Start Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator},\n            {label: \"End Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator}\n        ]);\n};\n\nconst makeAndPrintComponents = (stronglyConnected) => {\n    let a = null;\n    let cc = \"Connected Components\";\n    let componentKey = \"connectedComponents\";\n\n    if (stronglyConnected) {\n        if (!settings.getOption(\"direction\")) {\n            return;\n        }\n        cc = \"Strongly \" + cc;\n        componentKey = \"stronglyConnectedComponents\";\n        a = gAlgo.stronglyConnectedComponents();\n    }\n    else {\n        if (settings.getOption(\"direction\")) {\n            return;\n        }\n        a = gAlgo.connectedComponents();\n    }\n\n    window.main.graphState.graphProperties[cc] = a.count;\n    window.main.graphState.setUpToDate(true, [cc, componentKey]);\n    window.main.graphState.state[componentKey] = a.components;\n\n    let components = help.flatten(a.components);\n    let p = \"Number of \" + cc + \": \" + a.count;\n    p += \"\\n\\n\";\n\n    components.forEach((v, i) => {\n        p += \"Vertex \" + window.main.graphState.nodeIDToLabel(i) + \" is in connected component #\" + v + \"\\n\";\n    });\n\n    p += \"\\n\" + JSON.stringify(help.rotate(a.components), null, 4) + \"\\n\\n\";\n    p = \"<h3>\" + cc + \"</h3><hr>\" + help.htmlEncode(p);\n\n    help.printout(p);\n};\n\nexport default class UIInteractions {\n    static getAlgorithms () {\n        return [\n            {\n                name: \"Graph Coloring\",\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintGraphColoring,\n                display: true\n            },\n            {\n                name: \"Connected Components\",\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintConnectedComponents,\n                display: true\n            },\n            {\n                name: \"Strongly Connected Components\",\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintStronglyConnectedComponents\n            },\n            {\n                name: \"Breadth-First Shortest Path\",\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintBFS,\n                display: true\n            },\n            {\n                name: \"Dijkstra Shortest Path\",\n                applyFunc: UIInteractions.makeAndPrintDijkstra,\n                display: true\n            },\n            {\n                name: \"Bellman-Ford Shortest Path\",\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintBFSP,\n                display: true\n            },\n            {\n                name: \"Ford-Fulkerson\",\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintFFMCMF,\n                display: true\n            },\n            {\n                name: \"Kruskal Minimum Spanning Tree\",\n                weighted: true,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintKruskal,\n                display: true\n            },\n            {\n                name: \"Cyclic\",\n                applyFunc: UIInteractions.makeAndPrintIsCyclic,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Topological Sort\",\n                applyFunc: UIInteractions.makeAndPrintTopologicalSort,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Eulerian\",\n                directional: false,\n                display: false,\n                applyFunc: null\n            },\n            {\n                name: \"Eulerian\",\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintDirectionalEulerian\n            },\n        ];\n    }\n\n    static registerListeners () {\n        const makeSimpleClickListener = (selector, fn) => {\n            $(selector).on(\"click\", (e) => {\n                e.preventDefault();\n                fn();\n            });\n        };\n\n        makeSimpleClickListener(\"#print-help-link\", UIInteractions.printHelp);\n        makeSimpleClickListener(\"#graph-options-link\", UIInteractions.printOptions);\n        makeSimpleClickListener(\"#load-petersen-link\",\n            () => {\n                window.main.setData(window.predefined.Petersen(), false, true, true);\n            });\n        makeSimpleClickListener(\"#load-konigsberg-link\",\n            () => {\n                window.main.setData(window.predefined.Konigsberg(), false, true, true);\n            });\n        makeSimpleClickListener(\"#load-complete-link\", window.predefined.Complete);\n        makeSimpleClickListener(\"#load-hypercube-link\", window.predefined.Hypercube);\n        makeSimpleClickListener(\"#load-custom-link\", window.predefined.Custom);\n        makeSimpleClickListener(\"#undo-link\", window.main.undo);\n        makeSimpleClickListener(\"#redo-link\", window.main.redo);\n        makeSimpleClickListener(\"#calculate-all-properties-link\",\n            () => {\n                window.main.graphState.makeAndPrintProperties(true);\n            });\n        makeSimpleClickListener(\"#new-graph-layout-link\", window.main.shuffleNetworkLayout);\n        makeSimpleClickListener(\"#import-file-link\", importExport.makeImportFileModal);\n        makeSimpleClickListener(\"#import-text-link\", importExport.makeImportTextModal);\n        makeSimpleClickListener(\"#export-file-link\", importExport.makeExportFileModal);\n        makeSimpleClickListener(\"#export-text-link\", importExport.makeExportTextModal);\n    }\n\n    static printHelp () {\n        help.showSimpleModal(\"Help\",\n            \"<h4>For support see the <a href='https://github.com/MikeDombo/graphPlayground' \" +\n            \"target='_blank'>GitHub repository</a> for guides</h4>\" +\n            \"<h4>See <a href='https://github.com/MikeDombo/graphPlayground/issues'\" +\n            \" target='_blank'>GitHub issues</a> to submit bugs or feature requests.</h4>\");\n    }\n\n    static printOptions () {\n        help.showFormModal(\n            ($modal, vals) => {\n                $modal.modal(\"hide\");\n                if (settings.getOption(\"nodePhysics\") !== vals[0]) {\n                    settings.changeOption(\"nodePhysics\", vals[0]); // Physics\n                }\n                if (settings.getOption(\"direction\") !== vals[1]) {\n                    settings.changeOption(\"direction\", vals[1]);\n                    let G = window.main.graphState.graph;\n                    G = vals[1] ? G.asDirected(true) : G.asUndirected();\n                    // Clear node coloring because graph color doesn't apply to directed graphs\n                    window.main.setData(window.main.graphState.getGraphData(G, true));\n                }\n                if (settings.getOption(\"weights\") !== vals[2]) {\n                    settings.changeOption(\"weights\", vals[2]);\n                    let G = window.main.graphState.graph;\n                    G = vals[2] ? G.asWeighted() : G.asUnweighted();\n                    window.main.setData(window.main.graphState.getGraphData(G));\n                }\n            },\n            \"Options\", \"Save\", [\n                {label: \"Graph Physics\", initialValue: settings.getOption(\"nodePhysics\"), type: \"checkbox\"},\n                {label: \"Directed Graph\", initialValue: settings.getOption(\"direction\"), type: \"checkbox\"},\n                {label: \"Weighted Graph\", initialValue: settings.getOption(\"weights\"), type: \"checkbox\"}\n            ], null);\n    }\n\n    static makeAndPrintGraphColoring () {\n        if (settings.getOption(\"direction\")) {\n            return;\n        }\n\n        // Use cached responses when able\n        let a = {\n            chromaticNumber: window.main.graphState.getProperty(\"Chromatic Number\"),\n            colors: window.main.graphState.state.graphColoring\n        };\n        if (!(a.chromaticNumber !== null && window.main.graphState.getProperty(\"graphColoring\") !== null)) {\n            a = gAlgo.colorNetwork();\n        }\n\n        window.main.graphState.graphProperties[\"Chromatic Number\"] = a.chromaticNumber;\n        window.main.graphState.setUpToDate(true, [\"Chromatic Number\", \"graphColoring\"]);\n        window.main.graphState.state.graphColoring = a.colors;\n\n        let colors = help.flatten(a.colors);\n        let p = \"Number of Vertices: \" + colors.length;\n        p += \"\\nChromatic Number: \" + a.chromaticNumber;\n        p += \"\\n\\n\";\n\n        colors.forEach((v, i) => {\n            p += \"Vertex \" + window.main.graphState.nodeIDToLabel(i) + \" gets color \" + v + \"\\n\";\n        });\n\n        p += \"\\n\" + JSON.stringify(help.rotate(a.colors), null, 4) + \"\\n\\n\";\n\n        p = \"<h3>Graph Coloring Using Welsh-Powell Algorithm</h3><hr>\" + help.htmlEncode(p);\n        p += \"<br/><button class='btn btn-primary' onclick='main.applyColors()'>Apply New Colors To Graph</button>\";\n\n        help.printout(p);\n        window.main.applyColors();\n    }\n\n    static makeAndPrintConnectedComponents () {\n        makeAndPrintComponents(false);\n    }\n\n    static makeAndPrintDirectionalEulerian () {\n        if (!settings.getOption(\"direction\")) {\n            return;\n        }\n        let t = gAlgo.directionalEulerian(gHelp.findVertexDegreesDirectional(window.main.graphState.graph.getFullAdjacency()));\n        window.main.graphState.setUpToDate(true, [\"eulerian\"]);\n        window.main.graphState.graphProperties.eulerian = t;\n    }\n\n    static makeAndPrintEulerian () {\n        if (settings.getOption(\"direction\")) {\n            UIInteractions.makeAndPrintDirectionalEulerian();\n            return;\n        }\n\n        window.main.graphState.setUpToDate(true, [\"eulerian\"]);\n        window.main.graphState.graphProperties.eulerian = gAlgo.hasEulerianCircuit(window.main.graphState.graph.getAllOutDegrees());\n    }\n\n    static makeAndPrintStronglyConnectedComponents () {\n        makeAndPrintComponents(true);\n    }\n\n    static makeAndPrintBFS () {\n        makeAndPrintShortestPath(\"Breadth-First Shortest Path\", gAlgo.breadthFirstSearch);\n    }\n\n    static makeAndPrintDijkstra () {\n        makeAndPrintShortestPath(\"Dijkstra Shortest Path\", gAlgo.dijkstraSearch, true);\n    }\n\n    static makeAndPrintBFSP () {\n        makeAndPrintShortestPath(\"Bellman-Ford Shortest Path\", gAlgo.bellmanFord, true);\n    }\n\n    static makeAndPrintFFMCMF () {\n        if (!settings.getOption(\"direction\") || !settings.getOption(\"weights\")) {\n            return;\n        }\n        help.showFormModal(($modal, values) => {\n                $modal.modal(\"hide\");\n\n                let source = window.main.graphState.nodeLabelToID(values[0]);\n                let sink = window.main.graphState.nodeLabelToID(values[1]);\n\n                let a = gAlgo.fordFulkerson(source, sink);\n\n                let p = \"<h3>Ford-Fulkerson</h3><hr>No path exists from \"\n                    + help.htmlEncode(window.main.graphState.nodeIDToLabel(source))\n                    + \" to \" + help.htmlEncode(window.main.graphState.nodeIDToLabel(sink));\n\n                if (a === false) {\n                    help.printout(p);\n                    return;\n                }\n\n                p = \"Ford-Fulkerson MaxFlow-MinCut Max Flow From \" + window.main.graphState.nodeIDToLabel(source)\n                    + \" to \" + window.main.graphState.nodeIDToLabel(sink) + \": \" + a.maxFlow;\n                p += \"\\n\\nUsing Capacities:\\n\\n\";\n                p = help.htmlEncode(p);\n                a.flowPath.forEach((v) => {\n                    p += window.main.graphState.nodeIDToLabel(v.from) + \"&rarr;\" + window.main.graphState.nodeIDToLabel(v.to)\n                        + \" using \" + v.flow + \" of \" + v.capacity + \" \\n\";\n                });\n                p = p.trim();\n                p = \"<h3>Ford-Fulkerson MaxFlow-MinCut</h3><hr>\" + p;\n\n                help.printout(p);\n            },\n            \"Ford-Fulkerson MaxFlow-MinCut\", \"Go\", [\n                {label: \"Source Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator},\n                {label: \"Sink Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator}\n            ]);\n    }\n\n    static makeAndPrintKruskal () {\n        if (settings.getOption(\"direction\") || !settings.getOption(\"weights\")) {\n            return;\n        }\n\n        let a = gAlgo.kruskal();\n\n        let p = \"Kruskal's Minimum Spanning Tree Total Weight: \" + a.totalWeight;\n        p += \"\\n\\nUsing Edges:\\n\\n\";\n        p = help.htmlEncode(p);\n        a.mst.forEach((v) => {\n            p += window.main.graphState.nodeIDToLabel(v.from) + \"&rarr;\" + window.main.graphState.nodeIDToLabel(v.to) + \" \\n\";\n        });\n        p = p.trim();\n        p = \"<h3>Kruskal Minimum Spanning Tree</h3><hr>\" + p;\n\n        help.printout(p);\n    }\n\n    static makeAndPrintIsCyclic () {\n        if (!settings.getOption(\"direction\")) {\n            return;\n        }\n        window.main.graphState.graphProperties.cyclic = gAlgo.isGraphCyclic();\n        window.main.graphState.setUpToDate(true, [\"cyclic\"]);\n    }\n\n    static makeAndPrintTopologicalSort () {\n        if (!settings.getOption(\"direction\")) {\n            return;\n        }\n\n        let a = gAlgo.topologicalSort();\n\n        if (a === true) {\n            window.main.graphState.graphProperties.cyclic = true;\n            window.main.graphState.setUpToDate(true, [\"cyclic\"]);\n\n            let p = \"Topological sorting failed because the graph contains a cycle\";\n            p = \"<h3>Topological Sorting Failed</h3><hr>\" + p;\n            help.printout(p);\n\n            return;\n        }\n\n        let p = \"Topological Sorting:\\n\\n\";\n        p = help.htmlEncode(p);\n        a.forEach((v) => {\n            p += window.main.graphState.nodeIDToLabel(v.id) + \", \";\n        });\n        p = p.slice(0, -2);\n        p = \"<h3>Topological Sorting</h3><hr>\" + p;\n\n        help.printout(p);\n    }\n\n    static printGraphAlgorithms () {\n        let $div = $(\"#algorithms-pane\");\n        $div.empty();\n        let directional = settings.getOption(\"direction\");\n        let weighted = settings.getOption(\"weights\");\n\n        const addAlgoToPane = (alg) => {\n            $div.append($(\"<a>\", {class: \"nav-link\", href: \"#\"})\n                .text(alg.name).on(\"click\", (e) => {\n                    e.preventDefault();\n                    alg.applyFunc();\n                }));\n        };\n\n        let a = UIInteractions.getAlgorithms();\n        a.forEach((alg) => {\n            if (!alg.display) {\n                return;\n            }\n            if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n            else if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n        });\n    }\n}\n","\"use strict\";\r\n\r\nimport gHelp from './graphHelpers';\r\nimport help from './genericHelpers';\r\n\r\nconst petersenEdges = help.deepFreeze([\r\n    {from: 1, to: 2},\r\n    {from: 2, to: 3},\r\n    {from: 3, to: 4},\r\n    {from: 4, to: 5},\r\n    {from: 5, to: 1},\r\n\r\n    {from: 6, to: 8},\r\n    {from: 7, to: 9},\r\n    {from: 7, to: 10},\r\n    {from: 8, to: 10},\r\n    {from: 9, to: 6},\r\n\r\n    {from: 1, to: 6},\r\n    {from: 2, to: 7},\r\n    {from: 3, to: 8},\r\n    {from: 4, to: 9},\r\n    {from: 5, to: 10}\r\n]);\r\n\r\nconst konigsbergEdges = help.deepFreeze([\r\n    {from: 1, to: 2},\r\n    {from: 2, to: 3},\r\n    {from: 2, to: 4},\r\n    {from: 3, to: 4},\r\n    {from: 3, to: 4},\r\n    {from: 4, to: 1},\r\n    {from: 4, to: 1},\r\n]);\r\n\r\nconst completeGraph = (V) => {\r\n    let edges = [];\r\n    let nodes = [];\r\n\r\n    for (let i = 0; i < V; i++) {\r\n        nodes.push({id: i, label: i.toString()});\r\n        for (let j = i + 1; j < V; j++) {\r\n            edges.push({from: i, to: j});\r\n        }\r\n    }\r\n\r\n    return {nodes: nodes, edges: edges, directed: false, weighted: false};\r\n};\r\n\r\nconst hypercubeGraph = (D) => {\r\n    let edges = [];\r\n    let nodes = [];\r\n\r\n    let numNodes = Math.pow(2, D);\r\n\r\n    let pad = (str, max) => {\r\n        return str.length < max ? pad(\"0\" + str, max) : str;\r\n    };\r\n\r\n    const generateDifferByOne = (input, numBits) => {\r\n        let inputBits = pad((input).toString(2), numBits).split(\"\").reverse();\r\n        let allDiffer = [];\r\n\r\n        // 1 bit difference from input, increasing order, none less than input\r\n        for (let b = 0; b < numBits; b++) {\r\n            if (inputBits[b] === \"0\") {\r\n                let newNum = inputBits.slice();\r\n                newNum[b] = \"1\";\r\n                allDiffer.push(parseInt(newNum.reverse().join(\"\"), 2));\r\n            }\r\n        }\r\n\r\n        return allDiffer;\r\n    };\r\n\r\n    for (let i = 0; i < numNodes; i++) {\r\n        nodes.push({id: i, label: pad(i.toString(2), D)});\r\n        generateDifferByOne(i, D).forEach((j) => {\r\n            edges.push({from: i, to: j});\r\n        });\r\n    }\r\n\r\n    return help.deepFreeze({nodes: nodes, edges: edges, directed: false, weighted: false});\r\n};\r\n\r\nconst newCustomGraph = (V, directed = false, weighted = false) => {\r\n    let nodes = [];\r\n    for (let i = 0; i < V; i++) {\r\n        nodes.push({id: i, label: i.toString()});\r\n    }\r\n\r\n    return help.deepFreeze({nodes: nodes, edges: [], directed: directed, weighted: weighted});\r\n};\r\n\r\nexport default {\r\n    graphNames: help.deepFreeze([\"Petersen\", \"Konigsberg\", \"Complete\", \"Hypercube\"]),\r\n    Petersen: () => (help.deepFreeze({\r\n        edges: petersenEdges,\r\n        nodes: gHelp.interpolateNodesFromEdges(petersenEdges),\r\n        directed: false,\r\n        weighted: false,\r\n    })),\r\n    Konigsberg: () => (help.deepFreeze({\r\n        edges: konigsbergEdges,\r\n        nodes: gHelp.interpolateNodesFromEdges(konigsbergEdges),\r\n        directed: false,\r\n        weighted: false,\r\n    })),\r\n    Complete: () => {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(completeGraph(vals[0]), false, true, true);\r\n            },\r\n            \"Configurable Complete Graph\", \"Go\",\r\n            [{\r\n                type: \"numeric\", initialValue: 5, label: \"Number of Vertices\", validationFunc: (v) => {\r\n                    return v >= 0 || \"Number of vertices must be non-negative\";\r\n                }\r\n            }]);\r\n    },\r\n    Hypercube: () => {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(hypercubeGraph(vals[0]), false, true, true);\r\n            },\r\n            \"Configurable Hypercube Graph\", \"Go\",\r\n            [{\r\n                type: \"numeric\", initialValue: 3, label: \"Number of Dimensions\", validationFunc: (v) => {\r\n                    return v >= 0 || \"Number of dimensions must be non-negative\";\r\n                }\r\n            }]);\r\n    },\r\n    Custom: () => {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(newCustomGraph(vals[0], vals[1], vals[2]), false, true, true);\r\n            },\r\n            \"Configurable Graph\", \"Go\",\r\n            [\r\n                {\r\n                    type: \"numeric\", initialValue: 0, label: \"Number of Vertices\", validationFunc: (v) => {\r\n                        return v >= 0 || \"Number of vertices must be non-negative\";\r\n                    }\r\n                },\r\n                {type: \"checkbox\", initialValue: false, label: \"Directed\"},\r\n                {type: \"checkbox\", initialValue: false, label: \"Weighted\"},\r\n            ]);\r\n    },\r\n};\r\n","\"use strict\";\n\nexport default class EdgeImmut {\n    constructor (from, to, weight = 1) {\n        this.from = Object.freeze(from);\n        this.to = Object.freeze(to);\n        this.weight = Object.freeze(parseFloat(weight));\n\n        if (new.target === EdgeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getFrom () {\n        return this.from;\n    }\n\n    getTo () {\n        return this.to;\n    }\n\n    getWeight () {\n        return this.weight;\n    }\n\n    toPlain () {\n        return {from: this.from, to: this.to, weight: this.weight};\n    }\n\n    editEdge (newWeight) {\n        return new EdgeImmut(this.getFrom(), this.getTo(), newWeight);\n    }\n}\n","\"use strict\";\n\nexport default class NodeImmut {\n    constructor (id, label = null, extraAttrs = null) {\n        this.id = id;\n\n        if (label === null) {\n            this.label = id.toString();\n        }\n        else {\n            this.label = label;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach((key) => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.label = Object.freeze(this.label);\n        this.id = Object.freeze(this.id);\n\n        if (new.target === NodeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    toPlain () {\n        let toReturn = {id: this.id, label: this.label};\n        Object.keys(this.attributes).forEach((key) => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    getID () {\n        return this.id;\n    }\n\n    getLabel () {\n        return this.label;\n    }\n\n    getAttribute (attribute) {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes () {\n        return this.attributes;\n    }\n\n    editNode (label = null, extraAttrs = null) {\n        if (label === null) {\n            label = this.getLabel();\n        }\n\n        // Merge existing and new attributes favoring the new\n        let attributes = Object.assign({}, this.attributes);\n        Object.keys(extraAttrs).forEach((key) => {\n            attributes[key] = extraAttrs[key];\n        });\n\n        return new NodeImmut(this.getID(), label, attributes);\n    }\n}\n","\"use strict\";\r\n\r\nimport $ from 'jquery';\r\nimport {DataSet} from 'vis/index-network';\r\nimport help from './genericHelpers';\r\nimport GraphImmut from './GraphImmut/GraphImmut';\r\n\r\nlet self = {\r\n    backHistory: [],\r\n    forwardHistory: [],\r\n    maxHistory: 10,\r\n    upToDate: [\r\n        {\r\n            name: \"Chromatic Number\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {\r\n            name: \"graphColoring\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {name: \"vertices\", upToDate: true, always: true, type: \"property\"},\r\n        {name: \"edges\", upToDate: true, always: true, type: \"property\"},\r\n        {\r\n            name: \"eulerian\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintEulerian();\r\n            }\r\n        },\r\n        {\r\n            name: \"Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintConnectedComponents();\r\n            }\r\n        },\r\n        {\r\n            name: \"connectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintConnectedComponents();\r\n            }\r\n        },\r\n        {\r\n            name: \"Strongly Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintStronglyConnectedComponents();\r\n            }\r\n        },\r\n        {\r\n            name: \"stronglyConnectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintStronglyConnectedComponents();\r\n            }\r\n        },\r\n        {\r\n            name: \"cyclic\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintIsCyclic();\r\n            }\r\n        },\r\n    ],\r\n    state: {\r\n        stronglyConnectedComponents: null,\r\n        connectedComponents: null,\r\n        graphColoring: null,\r\n    },\r\n    graph: null,\r\n    graphProperties: {\r\n        vertices: 0,\r\n        edges: 0,\r\n        eulerian: false,\r\n        \"Chromatic Number\": null,\r\n        \"Connected Components\": null,\r\n        \"Strongly Connected Components\": null,\r\n        cyclic: false,\r\n    },\r\n\r\n    setUpToDate: (value = false, listOptions) => {\r\n        let all = listOptions === null || typeof listOptions === \"undefined\";\r\n        let property = false;\r\n        self.upToDate.forEach((v) => {\r\n            if ((!(\"always\" in v) || !v.always) && (all || listOptions.indexOf(v.name) > -1)) {\r\n                v.upToDate = value;\r\n                if (v.type === \"property\") {\r\n                    property = true;\r\n                }\r\n            }\r\n        });\r\n        if (property) {\r\n            self.makeAndPrintProperties();\r\n        }\r\n    },\r\n\r\n    getProperty: (property, updateIfNotUpdated = false) => {\r\n        let a = self.upToDate.find((v) => {\r\n            return (\"name\" in v && v.name === property);\r\n        });\r\n        if (!a.upToDate) {\r\n            if (\"applyFunc\" in a && updateIfNotUpdated) {\r\n                a.applyFunc();\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        if (a.type === \"state\") {\r\n            return self.state[property];\r\n        }\r\n        return self.graphProperties[property];\r\n    },\r\n\r\n    makeAndPrintProperties: (recalcLong = false) => {\r\n        let directional = window.settings.getOption(\"direction\");\r\n\r\n        self.graphProperties.vertices = self.graph.getNumberOfNodes();\r\n        self.graphProperties.edges = self.graph.getNumberOfEdges();\r\n\r\n        if (!directional) {\r\n            self.getProperty(\"eulerian\", true);\r\n        }\r\n\r\n        let p = Object.keys(self.graphProperties);\r\n        if (recalcLong) {\r\n            p.forEach((v) => {\r\n                self.getProperty(v, true);\r\n            });\r\n        }\r\n\r\n        let printableProperties = {};\r\n        p.forEach((v) => {\r\n            printableProperties[v] = self.getProperty(v);\r\n        });\r\n        self.printGraphProperties(printableProperties);\r\n    },\r\n\r\n    printGraphProperties: (properties) => {\r\n        let p = \"\";\r\n        Object.keys(properties).forEach((k) => {\r\n            if (properties[k] !== null) {\r\n                p += help.toTitleCase(k) + \": \" + properties[k] + \"\\n\";\r\n            }\r\n        });\r\n        p = p.trim();\r\n        p = help.htmlEncode(p);\r\n        $(\"#graphProps\").html(\"<p class='nav-link'>\" + p + \"</p>\");\r\n    },\r\n\r\n    addEdge: (from, to, weight = 0, graph = self.graph) => {\r\n        graph = graph.addEdge(from, to, weight);\r\n        window.main.setData({nodes: self.clearColorFromNodes(graph.getAllNodes()), edges: graph.getAllEdges()});\r\n    },\r\n\r\n    addNode: (data, graph = self.graph) => {\r\n        graph = graph.addNode({label: data.label, x: data.x, y: data.y});\r\n        window.main.setData({nodes: self.clearColorFromNodes(graph.getAllNodes()), edges: graph.getAllEdges()});\r\n    },\r\n\r\n    editNode: (id, label, graph = self.graph) => {\r\n        graph = graph.editNode(id, {label: label});\r\n        window.main.setData(self.getGraphData(graph), false, false);\r\n    },\r\n\r\n    editEdge: (from, to, newWeight, oldWeight, graph = self.graph) => {\r\n        graph = graph.editEdge(from, to, newWeight, oldWeight);\r\n        window.main.setData(self.getGraphData(graph), false, false);\r\n    },\r\n\r\n    deleteEdge: (from, to, weight = null, graph = self.graph) => {\r\n        graph = graph.deleteEdge(from, to, weight, false);\r\n        window.main.setData({nodes: self.clearColorFromNodes(graph.getAllNodes()), edges: graph.getAllEdges()});\r\n    },\r\n\r\n    deleteNode: (id, graph = self.graph) => {\r\n        graph = graph.deleteNode(id);\r\n        window.main.setData({nodes: self.clearColorFromNodes(graph.getAllNodes()), edges: graph.getAllEdges()});\r\n    },\r\n\r\n    clearColorFromNodes: (nodes) => {\r\n        nodes.forEach((v) => {\r\n            v.color = null;\r\n        });\r\n        return nodes;\r\n    },\r\n\r\n    nodeIDToLabel: (id, graph = self.graph) => {\r\n        let n = graph.getNode(id, true);\r\n        if (n !== false && n !== null && typeof n !== \"undefined\" && n.getLabel().trim().length > 0) {\r\n            return n.getLabel().trim();\r\n        }\r\n\r\n        return id.toString();\r\n    },\r\n\r\n    // Preferentially search by ID, label, and case-insensitive label\r\n    nodeLabelToID: (label, graph = self.graph) => {\r\n        let n = graph.getAllNodes(true);\r\n        n = n.filter((node) => {\r\n            return node.getLabel().toLowerCase() === label.toLowerCase() || node.getID().toString() === label;\r\n        });\r\n\r\n        if (n.length === 0) {\r\n            return -1;\r\n        }\r\n        else if (n.length === 1) {\r\n            return n[0].getID();\r\n        }\r\n\r\n        let rID = -1;\r\n        let found = false;\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getID().toString() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel().toLowerCase() === label.toLowerCase()) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        return rID;\r\n    },\r\n\r\n    // Return graph as a Vis compatible dataset\r\n    getGraphAsDataSet: (graph) => {\r\n        let d = self.getGraphData(graph);\r\n        if (graph.isWeighted()) {\r\n            d.edges.forEach((e) => {\r\n                e.label = e.weight.toString();\r\n            });\r\n        }\r\n\r\n        return {nodes: new DataSet(d.nodes), edges: new DataSet(d.edges)};\r\n    },\r\n\r\n    setLocations: (locations, graph = self.graph) => {\r\n        let newNodes = graph.getAllNodesAsImmutableList();\r\n        Object.keys(locations).forEach((i) => {\r\n            let v = locations[i];\r\n            let node = newNodes.get(i);\r\n            // Only change when there is actually a new position\r\n            if (node.getAttribute(\"x\") !== v.x || node.getAttribute(\"y\") !== v.y) {\r\n                // Batch up all changes that we'll be making\r\n                newNodes = newNodes.set(i, node.editNode(node.getLabel(), {x: v.x, y: v.y}));\r\n            }\r\n        });\r\n\r\n        return new GraphImmut(newNodes, graph.getAllEdgesAsImmutableList(), graph.isDirected(), graph.isWeighted());\r\n    },\r\n\r\n    getGraphData: (graph = self.graph, clearColors = false) => {\r\n        return {\r\n            nodes: clearColors ? self.clearColorFromNodes(graph.getAllNodes()) : graph.getAllNodes(),\r\n            edges: graph.getAllEdges(),\r\n            directed: graph.isDirected(),\r\n            weighted: graph.isWeighted()\r\n        };\r\n    }\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\n\r\nimport $ from 'jquery';\r\nimport help from './genericHelpers';\r\nimport settings from './settings';\r\nimport randomColor from 'randomcolor';\r\nimport graphState from './graphState';\r\nimport GraphImmut from \"./GraphImmut/GraphImmut\";\r\n\r\nlet self = {\r\n    graphState: graphState,\r\n    container: document.getElementById('network'),\r\n    // Function used to overwrite the edge edit functionality when weights are active\r\n    visWeightEdgeEdit: (data, callback) => {\r\n        help.showFormModal(($modal, vals) => {\r\n            callback(null);\r\n            $modal.modal(\"hide\");\r\n            vals = parseFloat(vals[0]);\r\n            self.graphState.editEdge(data.from.id, data.to.id, vals, parseFloat(data.label));\r\n        }, \"Edit Edge\", \"Save\", [\r\n            {\r\n                type: \"numeric\",\r\n                label: \"Weight/Capacity\",\r\n                initialValue: parseFloat(data.label)\r\n            }\r\n        ]);\r\n    },\r\n    visOptions: {\r\n        interaction: {hover: true},\r\n        manipulation: {\r\n            addNode: function (data, callback) {\r\n                let $popup = help.makeFormModal(\"Add Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: \"<p>Node ID: \" + self.graphState.getProperty(\"vertices\") + \"</p>\"\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: self.graphState.getProperty(\"vertices\")}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"add\", $popup.find(\"input\").first().val());\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            editNode: function (data, callback) {\r\n                let $popup = help.makeFormModal(\"Edit Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: \"<p>Node ID: \" + data.id + \"</p>\"\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: data.label}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"editNode\", $popup.find(\"input\").first().val());\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            addEdge: function (data, callback) {\r\n                let apply = function () {\r\n                    if (typeof callback === \"function\") {\r\n                        callback(null);\r\n                    }\r\n                    self.graphState.addEdge(data.from, data.to);\r\n                };\r\n                if (data.from === data.to) {\r\n                    if (confirm(\"Do you want to connect the node to itself?\")) {\r\n                        apply();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                apply();\r\n            },\r\n            editEdge: function (data, callback) {\r\n                callback(null);\r\n                self.visOptions.manipulation.deleteEdge({edges: [data.id]});\r\n                self.visOptions.manipulation.addEdge(data);\r\n            },\r\n            deleteEdge: function (data, callback) {\r\n                if (typeof callback === \"function\") {\r\n                    callback(null);\r\n                }\r\n                data.edges.forEach((v) => {\r\n                    let weight = null;\r\n                    if (typeof window.network.body.data.edges._data[v].label !== \"undefined\") {\r\n                        weight = parseFloat(window.network.body.data.edges._data[v].label);\r\n                    }\r\n\r\n                    self.graphState.deleteEdge(window.network.body.edges[v].fromId,\r\n                        window.network.body.edges[v].toId, weight);\r\n                });\r\n            },\r\n            deleteNode: function (data, callback) {\r\n                callback(null);\r\n                data.nodes.forEach((v) => {\r\n                    self.graphState.deleteNode(v);\r\n                });\r\n            },\r\n        },\r\n    },\r\n\r\n    cancelEdit: (callback) => {\r\n        if (typeof callback === \"function\") {\r\n            callback(null);\r\n        }\r\n    },\r\n\r\n    saveData: (data, callback, operation, label) => {\r\n        data.label = label;\r\n        callback(null);\r\n\r\n        if (operation === \"add\") {\r\n            self.graphState.addNode(data);\r\n        }\r\n        else if (operation === \"editNode\") {\r\n            self.graphState.editNode(data.id, data.label);\r\n        }\r\n    },\r\n\r\n    nodeLabelIDValidator: (v) => {\r\n        if (self.graphState.nodeLabelToID(v) > -1) {\r\n            return true;\r\n        }\r\n        return \"Invalid Label or ID\";\r\n    },\r\n\r\n    applyColors: () => {\r\n        if (settings.getOption(\"direction\")) {\r\n            return;\r\n        }\r\n        let graphColors = self.graphState.getProperty(\"graphColoring\", true);\r\n        let chromaticNumber = self.graphState.getProperty(\"Chromatic Number\", true);\r\n\r\n        let colors = randomColor({count: chromaticNumber, luminosity: \"light\"});\r\n        let G = self.graphState.graph;\r\n        G.getAllNodes().forEach((v) => {\r\n            G = G.editNode(v.id, {color: colors[graphColors[v.id]]});\r\n        });\r\n        self.setData(self.graphState.getGraphData(G), false, false);\r\n    },\r\n\r\n    setData: (data, recalcProps = false, graphChanged = true, rearrangeGraph = false) => {\r\n        // Store existing positions in the data if we're supposed to keep the layout\r\n        if (rearrangeGraph) {\r\n            data.nodes.forEach((v) => {\r\n                delete v.x;\r\n                delete v.y;\r\n            });\r\n        }\r\n\r\n        if (graphChanged) {\r\n            self.saveState();\r\n        }\r\n\r\n        if (\"directed\" in data) {\r\n            settings.changeOption(\"direction\", data.directed);\r\n        }\r\n        if (\"weighted\" in data) {\r\n            settings.changeOption(\"weights\", data.weighted);\r\n        }\r\n        let directional = settings.getOption(\"direction\");\r\n        let weighted = settings.getOption(\"weights\");\r\n\r\n        let g = new GraphImmut(data.nodes, data.edges, directional, weighted);\r\n        self.graphState.graph = g;\r\n\r\n        // Set a new random seed so that the layout will be different\r\n        self.randomizeNetworkLayoutSeed(window.network);\r\n        window.network.setData(self.graphState.getGraphAsDataSet(g));\r\n        self.graphState.graph = self.graphState.setLocations(window.network.getPositions());\r\n\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        if (graphChanged) {\r\n            window.ui.printGraphAlgorithms();\r\n            help.printout(\"\");\r\n            self.graphState.setUpToDate();\r\n            self.graphState.makeAndPrintProperties(recalcProps);\r\n        }\r\n\r\n        self.saveStateLocalStorage();\r\n    },\r\n\r\n    saveState: () => {\r\n        if (self.graphState.graph === null) {\r\n            return;\r\n        }\r\n\r\n        if (self.graphState.backHistory.length >= self.graphState.maxHistory) {\r\n            self.graphState.backHistory.shift();\r\n        }\r\n\r\n        self.graphState.backHistory.push(self.getStateForSaving());\r\n        self.graphState.forwardHistory = [];\r\n        $(\".icon-undo\").parent().parent().addClass(\"active\");\r\n    },\r\n\r\n    getStateForSaving: () => {\r\n        let state = {};\r\n        Object.keys(self.graphState).forEach((k) => {\r\n            let v = self.graphState[k];\r\n            if (typeof v !== \"function\") {\r\n                if (typeof v !== \"object\") {\r\n                    state[k] = v;\r\n                }\r\n                else {\r\n                    if (k === \"graph\" && v !== null) {\r\n                        state[k] = v;\r\n                    }\r\n                    if (!k.toLowerCase().includes(\"history\")) {\r\n                        state[k] = $.extend(true, Array.isArray(v) ? [] : {}, v);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return state;\r\n    },\r\n\r\n    undo: () => {\r\n        if (self.graphState.backHistory.length > 0) {\r\n            self.applyState(true);\r\n        }\r\n    },\r\n\r\n    redo: () => {\r\n        if (self.graphState.forwardHistory.length > 0) {\r\n            self.applyState(false);\r\n        }\r\n    },\r\n\r\n    applyState: (undo = true, newState = null) => {\r\n        let firstLoad = newState !== null;\r\n        let currentState = self.getStateForSaving();\r\n\r\n        if (!firstLoad) {\r\n            if (undo) {\r\n                newState = self.graphState.backHistory.pop();\r\n            }\r\n            else {\r\n                newState = self.graphState.forwardHistory.pop();\r\n            }\r\n        }\r\n\r\n        newState.graph = new GraphImmut(newState.graph.nodes, newState.graph.edges, newState.graph.directed, newState.graph.weighted);\r\n\r\n        settings.changeOption(\"direction\", newState.graph.isDirected());\r\n        settings.changeOption(\"weights\", newState.graph.isWeighted());\r\n\r\n        self.graphState.graph = newState.graph;\r\n\r\n        window.network.setData(self.graphState.getGraphAsDataSet(self.graphState.graph));\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        window.ui.printGraphAlgorithms();\r\n        help.printout(\"\");\r\n\r\n        Object.keys(newState).forEach((k) => {\r\n            let v = newState[k];\r\n            if (typeof v !== \"object\") {\r\n                self.graphState[k] = v;\r\n            }\r\n            else if (!k.toLowerCase().includes(\"history\") && k.toLowerCase() !== \"graph\") {\r\n                if (k.toLowerCase() === \"uptodate\") {\r\n                    Object.keys(self.graphState[k]).forEach((oldKey) => {\r\n                        self.graphState[k][oldKey].upToDate = v[oldKey].upToDate;\r\n                    });\r\n                }\r\n                else {\r\n                    self.graphState[k] = $.extend(true, self.graphState[k], v);\r\n                }\r\n            }\r\n        });\r\n\r\n        self.graphState.makeAndPrintProperties();\r\n        if (undo && !firstLoad) {\r\n            $(\".icon-redo\").parent().parent().addClass(\"active\");\r\n            if (self.graphState.backHistory.length === 0) {\r\n                $(\".icon-undo\").parent().parent().removeClass(\"active\");\r\n            }\r\n            self.graphState.forwardHistory.push(currentState);\r\n        }\r\n        else if (!undo && !firstLoad) {\r\n            $(\".icon-undo\").parent().parent().addClass(\"active\");\r\n            if (self.graphState.forwardHistory.length === 0) {\r\n                $(\".icon-redo\").parent().parent().removeClass(\"active\");\r\n            }\r\n            self.graphState.backHistory.push(currentState);\r\n        }\r\n\r\n        self.saveStateLocalStorage();\r\n    },\r\n\r\n    saveStateLocalStorage: () => {\r\n        if (settings.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.lastState\", JSON.stringify(self.getStateForSaving()));\r\n        }\r\n    },\r\n\r\n    shuffleNetworkLayout: () => {\r\n        self.setData({\r\n            nodes: self.graphState.graph.getAllNodes(),\r\n            edges: self.graphState.graph.getAllEdges()\r\n        }, false, false, true);\r\n    },\r\n\r\n    randomizeNetworkLayoutSeed: (network) => {\r\n        let r = Math.round(Math.random() * 1000000);\r\n        network.layoutEngine.randomSeed = r;\r\n        network.layoutEngine.initialRandomSeed = r;\r\n    },\r\n\r\n    addNetworkListeners: (network) => {\r\n        // Enable edit node/edge when double clicking\r\n        network.on(\"doubleClick\", (p) => {\r\n            if (settings.getOption(\"weights\") && \"edges\" in p && p.edges.length === 1) {\r\n                network.editEdgeMode();\r\n            }\r\n            if (\"nodes\" in p && p.nodes.length === 1) {\r\n                network.editNode();\r\n            }\r\n        });\r\n\r\n        // Save locations of nodes after dragging\r\n        network.on(\"dragEnd\", () => {\r\n            self.graphState.graph = self.graphState.setLocations(network.getPositions());\r\n            self.saveStateLocalStorage(); // Save the new locations as part of the state\r\n        });\r\n\r\n        // Delete nodes/edges when hit \"Delete\"\r\n        let lastNetworkClickEvent = null;\r\n        network.on('click', (event) => {\r\n            lastNetworkClickEvent = event;\r\n        });\r\n\r\n        // Delete key to delete node or edge\r\n        $(document).on('keyup', (key) => {\r\n            if (key.key === \"Delete\" && lastNetworkClickEvent !== null) {\r\n                if ($(self.container).has($(lastNetworkClickEvent.event.target)).length > 0) {\r\n                    if ((\"edges\" in lastNetworkClickEvent && lastNetworkClickEvent.edges.length === 1)\r\n                        || (\"nodes\" in lastNetworkClickEvent && lastNetworkClickEvent.nodes.length === 1)) {\r\n                        if ($(':focus').parents(\".modal\").length === 0) {\r\n                            network.deleteSelected();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Undo/Redo keyboard commands\r\n        $(document).keydown((e) => {\r\n            if ((e.which === 89 && e.ctrlKey) || (e.which === 90 && e.ctrlKey && e.shiftKey)) {\r\n                self.redo();\r\n            }\r\n            else if (e.which === 90 && e.ctrlKey) {\r\n                self.undo();\r\n            }\r\n        });\r\n\r\n        // When clicking off of the network, remove the Delete functionality\r\n        $(document).on(\"click\", (e) => {\r\n            if ($(self.container).has(e.target).length === 0) {\r\n                lastNetworkClickEvent = null;\r\n            }\r\n        });\r\n    },\r\n\r\n};\r\n\r\nexport default self;\r\n"],"sourceRoot":""}
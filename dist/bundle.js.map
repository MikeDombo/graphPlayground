{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/app.js","webpack:///./src/js/graphHelpers.js","webpack:///./src/js/GraphImmut/GraphImmut.js","webpack:///./src/js/settings.js","webpack:///./src/js/genericHelpers.js","webpack:///./src/js/dataImportExport.js","webpack:///./src/js/SpanningTree.js","webpack:///./src/js/GraphAlgorithms.js","webpack:///./src/js/UIInteractions.js","webpack:///./src/js/predefinedGraphs.js","webpack:///./src/js/GraphImmut/EdgeImmut.js","webpack:///./src/js/GraphImmut/NodeImmut.js","webpack:///./src/js/graphState.js","webpack:///./src/js/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","2","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","p","jsonpArray","window","oldJsonpFunction","bind","slice","_indexNetwork","main","_main2","default","predefined","_predefinedGraphs2","network","Network","container","visOptions","settings","_settings2","ui","_UIInteractions2","addNetworkListeners","loadSettings","loadDefault","checkForLocalStorage","localStorage","getItem","JSON","parse","graph","applyState","setData","Petersen","navigator","addEventListener","serviceWorker","register","then","registration","console","log","scope","catch","err","registerListeners","findVertexDegreesDirectional","adjacencyMatrix","degrees","forEach","v","out","in","outV","interpolateNodesFromEdges","edges","nodes","from","id","label","to","_immutable","filterNodeExtraAttr","keys","filter","key","includes","reduce","obj","GraphImmut","arguments","undefined","_this","this","directed","weighted","_classCallCheck","List","numEdges","freeze","numNodes","set","_NodeImmut2","nodeNum","extraAttrs","getLabel","getAllAttributes","attributes","size","edge","weight","parseFloat","_EdgeImmut2","toPlain","toString","has","getNode","editNode","nodeMap","nodeCount","getID","map","node","getFrom","getTo","getWeight","newEdges","_this2","deleteAll","foundOneEdge","newWeight","oldWeight","foundFirst","index","editEdge","toArray","addedEdges","_this3","adj","_this4","getNodeAdjacency","id1","id2","_this5","edgeList","minWeight","Infinity","getEdgesBetween","reducer","initialValue","_this6","multiEdges","uniques","Set","acc","keep","duplicateEdge","self","defaults","nodePhysics","direction","weights","current","x","setItem","removeItem","e","saveSettings","stringify","setAll","setOptions","physics","getOption","arrows","manipulation","editWithoutDrag","visWeightEdgeEdit","changeOption","option","resetToDefault","G","graphState","dataSetToGraph","getAllNodes","getGraphData","_jquery","deepFreeze","getOwnPropertyNames","prop","_typeof","isFrozen","sort","arr","compareFunction","concat","_toConsumableArray","datasetToArray","ds","keepOnlyKeys","indexOf","getFileExtension","filename","split","htmlEncode","string","_jquery2","text","html","replace","printout","escape","flatten","rotate","max","iterable","a","b","Math","toTitleCase","str","match","toUpperCase","showSimpleModal","title","body","showFormModal","type","makeFormModal","successText","form","footer","f","class","formRow","basicMap","attrname","validFunc","validationFunc","generalValidator","event","valueMutator","$v","target","val","valid","removeClass","next","remove","addClass","after","append","checked","for","prepend","clickDismiss","$b","onclick","on","$options","optionText","oText","oIndex","optionValues","$footer","$modal","tabindex","role","aria-hidden","data-dismiss","aria-label","find","off","last","click","first","focus","successCb","cancelCb","modal","vals","hasErrors","each","tagName","attr","files","trigger","hasClass","importByString","format","toLowerCase","_genericHelpers2","error","_GraphImmut2","parseInt","addEdge","makeImportTextModal","values","style","makeImportFileModal","file","reader","FileReader","onload","readAsText","$files","makeExportFileModal","exportToFile","makeExportTextModal","exportToText","select","document","execCommand","downloadFile","getDataAsJSON","getDataAsDIMACS","g","getFullAdjacency","edgeCount","edgeText","trim","blob","Blob","msSaveOrOpenBlob","msSaveBlob","createElement","href","URL","createObjectURL","download","appendChild","removeChild","revokeObjectURL","_genericHelpers","SpanningTree","V","constructor","union","w","q","root","connected","colorNetwork","nodeArr","getAllOutDegrees","vertexOrder","colorIndex","currentColor","myGroup","conflict","areAdjacent","colors","chromaticNumber","connectedComponents","components","componentCount","setComponentNum","getNumberOfNodes","depthFirstSearch","count","start","visisted","Stack","pop","nodeID","stronglyConnectedComponents","indices","lowlink","S","strongConnect","min","breadthFirstSearch","startNodeID","targetNodeID","Q","edgeTo","_loop","y","path","reverse","getMinWeightEdgeBetween","pathExists","distance","dijkstraSearch","isDirected","convertToDirected","isWeighted","convertToWeighted","getAllEdges","queue","_nodes","enqueue","priority","dequeue","isEmpty","distances","previous","dist","_loop2","smallest","neighbor","alt","_loop3","cost","bellmanFord","parents","negativeCylce","fordFulkerson","reduceMultiGraph","marked","edgeProperties","capacity","flow","deltaFlow","other","residualCapacity","hasAugmentedPath","vertexAdjacency","bottleneckValue","maxFlow","flowPath","getFlows","kruskal","_SpanningTree2","mst","totalWeight","topologicalSort","adjacency","_graphHelpers2","L","_loop4","nodeN","nodeNConnectedTo","mID","isGraphCyclic","directionalEulerian","directionalDegrees","scc","getProperty","eulerian","component","deg","hasEulerianCircuit","cc","makeAndPrintShortestPath","fn","source","nodeLabelToID","sink","nodeIDToLabel","nodeLabelIDValidator","makeAndPrintComponents","stronglyConnected","componentKey","_GraphAlgorithms2","graphProperties","setUpToDate","state","UIInteractions","directional","applyFunc","makeAndPrintGraphColoring","display","makeAndPrintConnectedComponents","makeAndPrintStronglyConnectedComponents","makeAndPrintBFS","makeAndPrintDijkstra","makeAndPrintBFSP","makeAndPrintFFMCMF","makeAndPrintKruskal","makeAndPrintIsCyclic","makeAndPrintTopologicalSort","makeAndPrintDirectionalEulerian","makeSimpleClickListener","selector","preventDefault","printHelp","printOptions","Konigsberg","Complete","Hypercube","Custom","undo","redo","makeAndPrintProperties","shuffleNetworkLayout","_dataImportExport2","getGraphAsUndirected","convertToUnWeighted","graphColoring","applyColors","t","cyclic","$div","empty","addAlgoToPane","alg","getAlgorithms","petersenEdges","konigsbergEdges","hypercubeGraph","D","pow","pad","input","numBits","inputBits","allDiffer","newNum","join","generateDifferByOne","graphNames","completeGraph","newCustomGraph","EdgeImmut","NodeImmut","toReturn","attribute","assign","backHistory","forwardHistory","maxHistory","upToDate","always","makeAndPrintEulerian","vertices","Chromatic Number","Connected Components","Strongly Connected Components","listOptions","all","updateIfNotUpdated","recalcLong","getNumberOfEdges","printableProperties","printGraphProperties","properties","k","clearColorFromNodes","addNode","deleteEdge","deleteNode","color","rID","found","getGraphAsDataSet","DataSet","setLocations","locations","alignData","newNodes","thisNode","thisEdge","getElementById","callback","_graphState2","interaction","hover","$popup","saveData","cancelEdit","confirm","_data","fromId","toId","operation","graphColors","_randomcolor2","luminosity","recalcProps","graphChanged","saveState","randomizeNetworkLayoutSeed","getPositions","disableEditMode","enableEditMode","printGraphAlgorithms","saveStateLocalStorage","getStateForSaving","parent","extend","Array","isArray","newState","firstLoad","currentState","oldKey","round","random","layoutEngine","randomSeed","initialRandomSeed","editEdgeMode","lastNetworkClickEvent","deleteSelected","keydown","which","ctrlKey","shiftKey"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \tvar installedChunks = {\n \t\t2: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([104,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","\"use strict\";\r\n\r\nimport 'bootstrap';\r\nimport {Network} from 'vis/index-network';\r\nimport main from './main';\r\nimport predefined from './predefinedGraphs';\r\nimport settings from './settings';\r\nimport UI from './UIInteractions';\r\n\r\nwindow.main = main;\r\nwindow.predefined = predefined;\r\nwindow.network = new Network(main.container, {}, main.visOptions);\r\nwindow.settings = settings;\r\nwindow.ui = UI;\r\n\r\nmain.addNetworkListeners(window.network);\r\n\r\nsettings.loadSettings();\r\n\r\nlet loadDefault = true;\r\nif (settings.checkForLocalStorage()) {\r\n    let s = localStorage.getItem(\"graphPlayground.lastState\");\r\n    if (s !== null) {\r\n        s = JSON.parse(s);\r\n        if (\"nodes\" in s.graph) {\r\n            loadDefault = false;\r\n            main.applyState(false, s);\r\n        }\r\n    }\r\n}\r\nif (loadDefault) {\r\n    main.setData(predefined.Petersen(), false, true, true);\r\n}\r\n\r\n// Register service worker\r\nif ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', function () {\r\n        navigator.serviceWorker.register('pwaPacked.js').then(function (registration) {\r\n            console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n        }).catch(function (err) {\r\n            console.log('ServiceWorker registration failed: ', err);\r\n        });\r\n    });\r\n}\r\n\r\nwindow.ui.registerListeners();\r\n","\"use strict\";\r\n\r\nexport default {\r\n    findVertexDegreesDirectional: (adjacencyMatrix) => {\r\n        // Adjacency stores IDs of edges TO\r\n        let degrees = [];\r\n        adjacencyMatrix.forEach((v, i) => {\r\n            if (i in degrees) {\r\n                degrees[i].out += v.length;\r\n            }\r\n            else {\r\n                degrees[i] = {out: v.length, in: 0};\r\n            }\r\n            v.forEach((outV) => {\r\n                if (outV in degrees) {\r\n                    degrees[outV].in += 1;\r\n                }\r\n                else {\r\n                    degrees[outV] = {in: 1, out: 0};\r\n                }\r\n            });\r\n        });\r\n\r\n        return degrees;\r\n    },\r\n\r\n    interpolateNodesFromEdges: (edges) => {\r\n        let nodes = [];\r\n        edges.forEach((v) => {\r\n            nodes[v.from] = {id: v.from, label: \"\" + v.from};\r\n            nodes[v.to] = {id: v.to, label: \"\" + v.to};\r\n        });\r\n\r\n        return nodes;\r\n    },\r\n};\r\n","\"use strict\";\n\nimport {List} from \"immutable\";\nimport NodeImmut from './NodeImmut';\nimport EdgeImmut from './EdgeImmut';\n\nconst filterNodeExtraAttr = (data) => {\n    return Object.keys(data)\n                 .filter((key) => !([\"label\", \"id\"]).includes(key))\n                 .reduce((obj, key) => {\n                     obj[key] = data[key];\n                     return obj;\n                 }, {});\n};\n\nexport default class GraphImmut {\n    constructor (nodes, edges = null, directed = false, weighted = false) {\n        this.nodes = new List();\n        this.edges = new List();\n        this.numEdges = 0;\n        this.directed = Object.freeze(directed);\n        this.weighted = Object.freeze(weighted);\n\n        if (typeof nodes === \"number\") {\n            this.numNodes = Object.freeze(nodes);\n            // Create the nodes\n            for (let i = 0; i < this.numNodes; i++) {\n                this.nodes = this.nodes.set(i, new NodeImmut(i));\n            }\n        }\n        else {\n            let nodeNum = 0;\n            nodes.forEach((n) => {\n                let id = nodeNum++;\n                let label = null;\n                let extraAttrs = null;\n\n                if (n instanceof NodeImmut) {\n                    label = n.getLabel();\n                    extraAttrs = n.getAllAttributes();\n                }\n                else {\n                    if (\"label\" in n) {\n                        label = n.label;\n                    }\n                    if (\"attributes\" in n) {\n                        extraAttrs = filterNodeExtraAttr(n.attributes);\n                    }\n                    else {\n                        extraAttrs = filterNodeExtraAttr(n);\n                    }\n                }\n\n                this.nodes = this.nodes.set(id, new NodeImmut(id, label, extraAttrs));\n            });\n\n            this.numNodes = Object.freeze(nodeNum);\n        }\n\n        // If we are given edges, add them to the graph\n        if (edges !== null) {\n            this.numEdges = edges instanceof List ? edges.size : edges.length;\n\n            edges.forEach((edge) => {\n                if (edge instanceof EdgeImmut) {\n                    this.edges = this.edges.push(edge);\n                }\n                else {\n                    let weight = 0;\n                    let from = 0;\n                    let to = 0;\n\n                    if (\"weight\" in edge && this.weighted) {\n                        weight = parseFloat(edge.weight);\n                    }\n                    if (\"from\" in edge) {\n                        from = edge.from;\n                    }\n                    if (\"to\" in edge) {\n                        to = edge.to;\n                    }\n\n                    this.edges = this.edges.push(new EdgeImmut(from, to, weight));\n                }\n            });\n        }\n\n        this.numEdges = Object.freeze(this.numEdges);\n\n        if (new.target === GraphImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getNode (id, rich = false) {\n        if (rich) {\n            return this.nodes.get(id);\n        }\n        return this.nodes.get(id).toPlain();\n    }\n\n    addNode (data = null) {\n        if (data === null) {\n            data = {};\n        }\n\n        let id = this.numNodes;\n        if (!(\"label\" in data)) {\n            data.label = id.toString();\n        }\n\n        let extraAttrs = filterNodeExtraAttr(data);\n\n        return new GraphImmut(this.nodes.set(id, new NodeImmut(id, data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    editNode (id, data) {\n        if (!this.nodes.has(id)) {\n            return false;\n        }\n\n        let extraAttrs = filterNodeExtraAttr(data);\n        if (!(\"label\" in data)) {\n            data.label = this.getNode(id, true).getLabel();\n        }\n        return new GraphImmut(this.nodes.set(id, this.getNode(id, true).editNode(data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    deleteNode (id) {\n        // Make sure the ID exists\n        if (!(id >= 0 && id < this.numNodes)) {\n            return false;\n        }\n\n        let nodeMap = {}; // Map for old IDs to new ones since we're deleting an entry\n\n        // Remove it from the node list\n        let nodeCount = 0;\n        let newNodes = this.nodes\n                           .filter((n) => {\n                               if (n.getID() === id) {\n                                   nodeMap[n.getID()] = -1;\n                               }\n                               else {\n                                   nodeMap[n.getID()] = nodeCount++;\n                               }\n\n                               return n.getID() !== id;\n                           })\n                           .map((node) => {\n                               let label = node.getLabel();\n                               if (node.getID().toString() === label) {\n                                   label = nodeMap[node.getID()].toString();\n                               }\n\n                               return new NodeImmut(nodeMap[node.getID()], label, node.getAllAttributes());\n                           });\n\n        // Remap edges\n        let newEdges = this.edges\n                           .filter((edge) => {\n                               return !(edge.getFrom() === id || edge.getTo() === id);\n                           })\n                           .map((edge) => {\n                               return new EdgeImmut(nodeMap[edge.getFrom()], nodeMap[edge.getTo()], edge.getWeight());\n                           });\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    addEdge (from, to, weight = 1) {\n        if (!this.weighted) {\n            weight = 1; // Ensure that edge weights are 1 if this is an unweighted graph\n        }\n\n        let newEdges = this.edges.push(new EdgeImmut(from, to, parseFloat(weight)));\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    deleteEdge (from, to, weight = null, deleteAll = true) {\n        if (weight !== null) {\n            weight = parseFloat(weight);\n        }\n\n        let foundOneEdge = false;\n        let newEdges = this.edges.filter((edge) => {\n            // If we're not deleting everything and we have found one edge, then do not filter anymore\n            if (foundOneEdge && !deleteAll) {\n                return true;\n            }\n\n            // If we have an exact match\n            if (edge.getFrom() === from && edge.getTo() === to && (weight === null || edge.getWeight() === weight)) {\n                foundOneEdge = true;\n                return false; // Remove this edge\n            }\n\n            // If we are undirected, check for opposing matches\n            if (!this.directed) {\n                if (edge.getFrom() === to && edge.getTo() === from && (weight === null || edge.getWeight() === weight)) {\n                    foundOneEdge = true;\n                    return false; // Remove this edge\n                }\n            }\n\n            return true;\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    editEdge (from, to, newWeight, oldWeight = null) {\n        // Editing only makes sense for weighted graphs.\n        // To change from/to, just delete the edge and add a new one\n        if (!this.weighted) {\n            return false;\n        }\n\n        let foundFirst = false;\n\n        if (oldWeight !== null) {\n            oldWeight = parseFloat(oldWeight);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge, index) => {\n            if (foundFirst) {\n                return;\n            }\n            if (edge.getFrom() === from && edge.getTo() === to && (oldWeight === null || edge.getWeight() === oldWeight)) {\n                newEdges = newEdges.set(index, edge.editEdge(parseFloat(newWeight)));\n                foundFirst = true;\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    getAllNodes (rich = false) {\n        if (rich) {\n            return this.nodes.toArray();\n        }\n        return this.nodes.map((node) => {\n            return node.toPlain();\n        }).toArray();\n    }\n\n    getAllEdges (rich = false) {\n        if (rich) {\n            return this.edges.toArray();\n        }\n        return this.edges.map((edge) => {\n            return edge.toPlain();\n        }).toArray();\n    }\n\n    getNumberOfNodes () {\n        return this.numNodes;\n    }\n\n    getNumberOfEdges () {\n        return this.numEdges;\n    }\n\n    getAllOutDegrees () {\n        let degrees = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() in degrees) {\n                degrees[edge.getFrom()]++;\n            }\n            else {\n                degrees[edge.getFrom()] = 1;\n            }\n        });\n\n        return degrees;\n    }\n\n    convertToWeighted () {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }), this.directed, true);\n    }\n\n    convertToUnWeighted () {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }), this.directed, false);\n    }\n\n    convertToDirected (doubleEdges = false) {\n        if (!doubleEdges) {\n            return new GraphImmut(this.nodes, this.edges, true, this.weighted);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.getTo(), edge.getFrom(), edge.getWeight()));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, true, this.weighted);\n    }\n\n    getGraphAsUndirected () {\n        let newEdges = [];\n        let addedEdges = {};\n\n        this.edges.forEach((edge) => {\n            let from = edge.getFrom();\n            let to = edge.getTo();\n            if (to > from) {\n                from = to;\n                to = edge.getFrom();\n            }\n            if (!(from + \"_\" + to in addedEdges)) {\n                addedEdges[from + \"_\" + to] = null;\n                newEdges.push(new EdgeImmut(from, to, edge.getWeight()));\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, false, this.weighted);\n    }\n\n    getNodeAdjacency (id) {\n        let adj = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() === id) {\n                adj.push(edge.getTo());\n            }\n            else if (!this.directed && edge.getTo() === id) {\n                adj.push(edge.getFrom());\n            }\n        });\n\n        return adj;\n    }\n\n    getFullAdjacency () {\n        let adj = [];\n        this.nodes.forEach((n) => {\n            adj[n.getID()] = this.getNodeAdjacency(n.getID());\n        });\n\n        return adj;\n    }\n\n    areAdjacent (id1, id2) {\n        return this.getNodeAdjacency(id1).includes(id2);\n    }\n\n    getEdgesBetween (id1, id2) {\n        let edgeList = [];\n        this.edges.forEach((edge) => {\n            if (!this.directed && edge.getFrom() === id2 && edge.getTo() === id1) {\n                edgeList.push(edge);\n            }\n\n            if (edge.getFrom() === id1 && edge.getTo() === id2) {\n                edgeList.push(edge);\n            }\n        });\n\n        return edgeList;\n    }\n\n    getMinWeightEdgeBetween (id1, id2) {\n        let minWeight = Infinity;\n        this.getEdgesBetween(id1, id2).forEach((edge) => {\n            if (edge.getWeight() < minWeight) {\n                minWeight = edge.getWeight();\n            }\n        });\n\n        return minWeight;\n    }\n\n    // Take a multigraph and reduce all multiple edges to a single edge, weighted using the reducer\n    reduceMultiGraph (reducer, initialValue) {\n        if (typeof initialValue === \"undefined\") {\n            initialValue = 0;\n        }\n\n        let multiEdges = [];\n        this.nodes.forEach((node) => {\n            // If we have duplicates\n            let adj = this.getNodeAdjacency(node.getID());\n            let uniques = new Set(adj);\n            if (uniques.size < adj.length) {\n                uniques.forEach((to) => {\n                    let newWeight = this.getEdgesBetween(node.getID(), to).reduce((acc, edge) => {\n                        return reducer(acc, edge.getWeight());\n                    }, initialValue);\n\n                    multiEdges.push({from: node.getID(), to: to, weight: parseFloat(newWeight)});\n                });\n            }\n        });\n\n        // Remove all multigraph edges and replace them with single new edges\n        let newEdges = this.edges.filter((edge) => {\n            let keep = true;\n            multiEdges.forEach((duplicateEdge) => {\n                if (edge.getFrom() === duplicateEdge.from && edge.getTo() === duplicateEdge.to) {\n                    keep = false;\n                }\n            });\n\n            return keep;\n        });\n        multiEdges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.from, edge.to, edge.weight));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    isWeighted () {\n        return this.weighted;\n    }\n\n    isDirected () {\n        return this.directed;\n    }\n}\n","\"use strict\";\r\n\r\nlet self = {\r\n    defaults: {\r\n        nodePhysics: true,\r\n        direction: false,\r\n        weights: false\r\n    },\r\n    current: {},\r\n\r\n    checkForLocalStorage: () => {\r\n        try {\r\n            let x = '__storage_test__';\r\n            localStorage.setItem(x, x);\r\n            localStorage.removeItem(x);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    },\r\n\r\n    saveSettings: () => {\r\n        if (self.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.settings\", JSON.stringify(self.current));\r\n        }\r\n    },\r\n\r\n    loadSettings: () => {\r\n        if (self.checkForLocalStorage()) {\r\n            self.current = JSON.parse(localStorage.getItem(\"graphPlayground.settings\"));\r\n        }\r\n        if (self.current === null) {\r\n            self.current = {};\r\n        }\r\n        self.setAll();\r\n    },\r\n\r\n    setAll: () => {\r\n        window.network.setOptions({nodes: {physics: self.getOption(\"nodePhysics\")}});\r\n        window.network.setOptions({edges: {arrows: {to: self.getOption(\"direction\")}}});\r\n        if (self.getOption(\"weights\")) {\r\n            window.network.setOptions({\r\n                manipulation: {\r\n                    editEdge: {\r\n                        editWithoutDrag: window.main.visWeightEdgeEdit\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            window.network.setOptions({manipulation: {editEdge: window.main.visOptions.manipulation.editEdge}});\r\n        }\r\n    },\r\n\r\n    changeOption: (option, value) => {\r\n        self.current[option] = value;\r\n        self.saveSettings();\r\n        self.setAll();\r\n    },\r\n\r\n    getOption: (option) => {\r\n        if (option in self.current) {\r\n            return self.current[option];\r\n        }\r\n        return self.defaults[option];\r\n    },\r\n\r\n    resetToDefault: () => {\r\n        self.current = {};\r\n        self.saveSettings();\r\n        self.setAll();\r\n\r\n        // Reset graph to just a plain graph. Not sure if this should actually happen or not.\r\n        let G = window.main.graphState.dataSetToGraph(window.main.graphState.graph.getAllNodes(),\r\n            window.main.graphState.graph.getAllNodes(), self.defaults.direction, self.defaults.weights);\r\n        window.main.setData(window.main.graphState.getGraphData(G));\r\n    }\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\n\r\nimport $ from 'jquery';\r\n\r\nlet self = {\r\n    deepFreeze: (o) => {\r\n        Object.freeze(o);\r\n\r\n        Object.getOwnPropertyNames(o).forEach(prop => {\r\n            if (o.hasOwnProperty(prop) && o[prop] !== null\r\n                && (typeof o[prop] === \"object\" || typeof o[prop] === \"function\")\r\n                && !Object.isFrozen(o[prop])) {\r\n                self.deepFreeze(o[prop]);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    },\r\n    sort: (arr, compareFunction) => {\r\n        return [...arr].sort(compareFunction);\r\n    },\r\n    datasetToArray: (ds, key) => {\r\n        let r = [];\r\n        ds.forEach((v) => {\r\n            r.push(v[key]);\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    keepOnlyKeys: (arr, keys) => {\r\n        arr = arr.slice();\r\n        arr.forEach((v) => {\r\n            let k = Object.keys(v);\r\n            k.forEach((key) => {\r\n                if (keys.indexOf(key) < 0) {\r\n                    delete v[key];\r\n                }\r\n            });\r\n        });\r\n        return self.deepFreeze(arr);\r\n    },\r\n\r\n    getFileExtension: (filename) => {\r\n        return filename.split(\".\").splice(-1)[0];\r\n    },\r\n\r\n    htmlEncode: (string) => {\r\n        string = $(\"<div>\").text(string).html();\r\n        string = string.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>');\r\n        return string;\r\n    },\r\n\r\n    printout: (text, escape) => {\r\n        if (escape) {\r\n            text = this.htmlEncode(escape);\r\n        }\r\n        $(\"#printout\").html(text);\r\n    },\r\n\r\n    flatten: (map) => {\r\n        let r = [];\r\n        for (let i in map) {\r\n            if ({}.hasOwnProperty.call(map, i)) {\r\n                r.push(map[i]);\r\n            }\r\n        }\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    rotate: (map) => {\r\n        let r = {};\r\n        for (let i in map) {\r\n            if (map[i] in r) {\r\n                r[map[i]].push(i);\r\n            }\r\n            else {\r\n                r[map[i]] = [i];\r\n            }\r\n        }\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    max: (iterable) => {\r\n        return iterable.reduce((a, b) => {\r\n            return Math.max(a, b);\r\n        });\r\n    },\r\n\r\n    toTitleCase: (str) => {\r\n        return str.replace(/(?:^|\\s)\\w/g, (match) => {\r\n            return match.toUpperCase();\r\n        });\r\n    },\r\n\r\n    showSimpleModal: (title, body) => {\r\n        self.showFormModal(null, title, null, [{type: \"html\", initialValue: body}], null, false);\r\n    },\r\n\r\n    makeFormModal: (title, successText, form, footer = true) => {\r\n        let f = $(\"<div>\", {class: \"modal-body form-group\"});\r\n        form.forEach((formRow, i) => {\r\n            if (!(\"initialValue\" in formRow)) {\r\n                formRow.initialValue = \"\";\r\n            }\r\n\r\n            let id = \"form-modal-\" + i;\r\n            if (\"id\" in formRow && formRow.id !== \"\" && formRow.id !== null && typeof formRow.id === \"string\") {\r\n                id = formRow.id;\r\n            }\r\n\r\n            let basicMap = {class: \"form-control\", id: id, value: formRow.initialValue};\r\n\r\n            if (\"extraAttrs\" in formRow) {\r\n                Object.keys(formRow.extraAttrs).forEach((attrname) => {\r\n                    if (typeof formRow.extraAttrs[attrname] !== \"function\") {\r\n                        basicMap[attrname] = formRow.extraAttrs[attrname];\r\n                    }\r\n                });\r\n            }\r\n\r\n            let validFunc = () => true;\r\n            if (\"validationFunc\" in formRow) {\r\n                validFunc = formRow.validationFunc;\r\n            }\r\n\r\n            let generalValidator = (event, valueMutator = null) => {\r\n                let $v = $(event.target);\r\n                let val = $v.val();\r\n                if (valueMutator !== null && typeof valueMutator === \"function\") {\r\n                    val = valueMutator(val);\r\n                }\r\n                let valid = validFunc(val, $v);\r\n\r\n                if (valid === true) {\r\n                    $v.removeClass(\"is-invalid\").next(\"#feedback-\" + i).remove();\r\n                }\r\n                else {\r\n                    $v.addClass(\"is-invalid\");\r\n                    if ($v.next(\"#feedback-\" + i).length === 0) {\r\n                        $v.after($(\"<div>\", {class: \"invalid-feedback\", id: \"feedback-\" + i}).text(valid));\r\n                    }\r\n                }\r\n            };\r\n\r\n            if (formRow.type === \"html\") {\r\n                f.append($(formRow.initialValue));\r\n            }\r\n            else if (formRow.type === \"checkbox\") {\r\n                basicMap.type = \"checkbox\";\r\n                basicMap.class = \"form-check-input\";\r\n                delete basicMap.value;\r\n                if (formRow.initialValue) {\r\n                    basicMap.checked = \"\";\r\n                }\r\n\r\n                f.append($(\"<div>\", {class: \"form-check\"})\r\n                    .append($(\"<label>\", {for: id, class: \"form-check-label\"})\r\n                        .text(formRow.label).prepend($(\"<input>\", basicMap))\r\n                    )\r\n                );\r\n            }\r\n            else{\r\n                f.append($(\"<label>\", {for: id, class: \"col-form-label\"}).text(formRow.label));\r\n\r\n                if (formRow.type === \"button\") {\r\n                    if (\"clickDismiss\" in formRow && formRow.clickDismiss === true) {\r\n                        basicMap.class += \" btn-dismiss\";\r\n                    }\r\n                    let $b = $(\"<button>\", basicMap).text(formRow.initialValue);\r\n                    if (\"onclick\" in formRow && typeof formRow.onclick === \"function\") {\r\n                        $b.on(\"click\", formRow.onclick);\r\n                    }\r\n                    f.append($b);\r\n                }\r\n                else if (formRow.type === \"numeric\") {\r\n                    basicMap.type = \"number\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", (e) => {\r\n                        generalValidator(e, parseFloat);\r\n                    }));\r\n                }\r\n                else if (formRow.type === \"text\") {\r\n                    basicMap.type = \"text\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                }\r\n                else if (formRow.type === \"file\") {\r\n                    basicMap.type = \"file\";\r\n                    basicMap.class = \"form-control-file form-control\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                }\r\n                else if (formRow.type === \"textarea\") {\r\n                    let $b = $(\"<textarea>\", basicMap).on(\"blur validate\", generalValidator);\r\n                    if (\"onclick\" in formRow) {\r\n                        $b.on(\"click\", formRow.onclick);\r\n                    }\r\n                    f.append($b);\r\n                }\r\n                else if (formRow.type === \"select\") {\r\n                    let $options = $(\"<select>\", basicMap);\r\n                    formRow.optionText.forEach((oText, oIndex) => {\r\n                        if (oIndex < formRow.optionValues.length) {\r\n                            $options.append($(\"<option>\", {value: formRow.optionValues[oIndex]}).text(oText));\r\n                        }\r\n                        else {\r\n                            $options.append($(\"<option>\").text(oText));\r\n                        }\r\n                    });\r\n                    f.append($options.on(\"blur validate\", generalValidator));\r\n                }\r\n            }\r\n        });\r\n\r\n        let $footer = $(\"<div>\", {class: \"modal-footer\"})\r\n            .append($(\"<button>\", {class: \"btn btn-success\", type: \"button\"}).text(successText))\r\n            .append($(\"<button>\", {class: \"btn btn-danger btn-cancel\", type: \"button\"}).text(\"Cancel\"));\r\n\r\n        if (footer === false) {\r\n            $footer = null;\r\n        }\r\n\r\n        let $modal = ($(\"<div>\", {class: \"modal fade\", tabindex: \"-1\", role: \"dialog\", \"aria-hidden\": \"true\"}));\r\n        $modal\r\n            .append($(\"<div>\", {class: \"modal-dialog\"})\r\n                .append($(\"<div>\", {class: \"modal-content\"})\r\n                    .append($(\"<div>\", {class: \"modal-header\"})\r\n                        .append($(\"<h5>\", {class: \"modal-title\"}).text(title))\r\n                        .append($(\"<button>\", {class: \"close\", \"data-dismiss\": \"modal\", \"aria-label\": \"close\"})\r\n                            .append($(\"<span>\", {\"aria-hidden\": \"true\"}).html(\"&times;\"))\r\n                        )\r\n                    )\r\n                    .append(f)\r\n                    .append($footer)\r\n                )\r\n            );\r\n        $modal.find(\"input, textarea\").off(\"keyup\").on(\"keyup\", (e) => {\r\n            if (e.key === \"Enter\") {\r\n                $(\".btn-success\").last().click();\r\n            }\r\n        });\r\n        $modal.on(\"shown.bs.modal\", () => {\r\n            $modal.find(\"input[type='text'], input[type='number'], textarea\").first().focus();\r\n        });\r\n\r\n        return $modal;\r\n    },\r\n\r\n    showFormModal: (successCb, title, successText, form, cancelCb = ($modal) => {\r\n        $modal.modal(\"hide\");\r\n    }, footer = true) => {\r\n        let $modal = self.makeFormModal(title, successText, form, footer);\r\n\r\n        $modal.on(\"click\", \".btn-cancel\", () => {\r\n            if (typeof cancelCb === \"function\") {\r\n                cancelCb($modal);\r\n            }\r\n            else {\r\n                $modal.modal(\"hide\");\r\n            }\r\n        }).on(\"click\", \".btn-dismiss\", () => {\r\n            $modal.modal(\"hide\");\r\n        }).on(\"click\", \".btn-success\", () => {\r\n            let vals = [];\r\n            let hasErrors = false;\r\n\r\n            $modal.find(\"input, textarea, select\").each((i, v) => {\r\n                let $v = $(v);\r\n\r\n                if ($v.tagName === \"SELECT\") {\r\n                    vals.push($v.find(\":selected\").val());\r\n                }\r\n                else if ($v.attr(\"type\") === \"checkbox\") {\r\n                    vals.push($v.prop(\"checked\"));\r\n                }\r\n                else if ($v.attr(\"type\") === \"file\") {\r\n                    vals.push($v.get(0).files);\r\n                }\r\n                else if ($v.attr(\"type\") === \"number\") {\r\n                    vals.push(parseFloat($v.val()));\r\n                }\r\n                else {\r\n                    vals.push($v.val());\r\n                }\r\n\r\n                if ($v.trigger(\"validate\").hasClass(\"is-invalid\")) {\r\n                    hasErrors = true;\r\n                }\r\n\r\n            });\r\n\r\n            if (!hasErrors && typeof successCb === \"function\") {\r\n                successCb($modal, vals);\r\n            }\r\n        }).on(\"hidden.bs.modal\", () => {\r\n            $modal.remove();\r\n        }).modal(\"show\");\r\n    }\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\n\r\nimport $ from 'jquery';\r\nimport help from './genericHelpers';\r\nimport GraphImmut from './GraphImmut/GraphImmut';\r\n\r\nlet self = {\r\n    importByString: (string, format) => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            try {\r\n                let n = JSON.parse(string);\r\n                if (\"nodes\" in n && \"edges\" in n) {\r\n                    window.network.setData({}); // Clear out the existing network in order to import the proper\r\n                    // locations\r\n                    window.main.setData(n, false, true, false);\r\n                }\r\n                else {\r\n                    help.showSimpleModal(\"Data Import Error\", \"<p>The provided input does not conform the the\" +\r\n                        \" import specifications.</p>\");\r\n                }\r\n            }\r\n            catch (err) {\r\n                help.showSimpleModal(\"JSON Parse Error\", \"<p>There was an error parsing your input as JSON.</p>\"\r\n                    + \"<pre>\" + err + \"</pre>\");\r\n            }\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            let lines = string.split(/\\r?\\n/);\r\n            let graph = null;\r\n            let error = false;\r\n            lines.forEach((l) => {\r\n                let vals = l.split(/\\s+/);\r\n                if (vals[0].toLowerCase() === \"p\") {\r\n                    if (vals[1].toLowerCase() !== \"edge\") {\r\n                        help.showSimpleModal(\"DIMACS Parse Error\", \"<p>Sorry, but I only know how to parse\" +\r\n                            \" &quot;edge&quot; formatted DIMACS files.</p>\");\r\n                        error = true;\r\n                        return;\r\n                    }\r\n                    graph = new GraphImmut(parseInt(vals[2]));\r\n                }\r\n                else if (vals[0].toLowerCase() === \"e\" && graph !== null) {\r\n                    graph = graph.addEdge(parseInt(vals[1]) - 1, parseInt(vals[2]) - 1);\r\n                }\r\n            });\r\n\r\n            if (graph === null && !error) {\r\n                help.showSimpleModal(\"DIMACS Parse Error\", \"<p>No program line found!</p>\");\r\n                error = true;\r\n            }\r\n\r\n            if (!error) {\r\n                let d = window.main.graphState.getGraphData(graph);\r\n                d.nodes.forEach((v) => {\r\n                    v.label = v.id.toString();\r\n                });\r\n                window.main.setData(d, false, true, true);\r\n            }\r\n        }\r\n        else {\r\n            help.showSimpleModal(\"Unrecognized Input Format\", \"<p>The format of your input is incorrect.</p>\");\r\n        }\r\n    },\r\n\r\n    makeImportTextModal: () => {\r\n        help.showFormModal(($modal, values) => {\r\n                $modal.modal(\"hide\");\r\n                self.importByString(values[0], values[1]);\r\n            }, \"Import Graph From Text\", \"Import\",\r\n            [{type: \"textarea\", label: \"Input Text\", extraAttrs: {style: \"height: 20vh; min-height:400px;\"}},\r\n                {type: \"select\", label: \"Format\", optionValues: [\"json\", \"dimacs\"], optionText: [\"JSON\", \"DIMACS\"]}\r\n            ]);\r\n    },\r\n\r\n    makeImportFileModal: () => {\r\n        help.showFormModal(($modal, values) => {\r\n                $modal.modal(\"hide\");\r\n\r\n                let files = values[0];\r\n                if (files.length === 1) {\r\n                    let file = files[0];\r\n                    let reader = new FileReader();\r\n                    reader.onload = function (event) {\r\n                        self.importByString(event.target.result, help.getFileExtension(file.name));\r\n                    };\r\n\r\n                    reader.readAsText(file);\r\n                }\r\n            }, \"Import Graph From File\", \"Import\",\r\n            [{\r\n                type: \"file\", label: \"Upload File\", validationFunc: (val, $files) => {\r\n                    let files = $files.get(0).files;\r\n                    if (files.length >= 1) {\r\n                        return true;\r\n                    }\r\n                    return \"You must choose a file first\";\r\n                }\r\n            }]);\r\n    },\r\n\r\n    makeExportFileModal: () => {\r\n        help.showFormModal(null, \"Export Graph To File\", null,\r\n            [{\r\n                type: \"button\",\r\n                initialValue: \"Export to JSON\",\r\n                onclick: () => {self.exportToFile(\"json\");},\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary m-1\"\r\n\r\n                },\r\n                clickDismiss: true\r\n            },\r\n                {\r\n                    type: \"button\",\r\n                    initialValue: \"Export to DIMACS\",\r\n                    onclick: () => {self.exportToFile(\"dimacs\");},\r\n                    extraAttrs: {\r\n                        class: \"btn btn-sm btn-primary\"\r\n                    },\r\n                    clickDismiss: true\r\n                }\r\n            ], null, false);\r\n    },\r\n\r\n    makeExportTextModal: () => {\r\n        help.showFormModal(null, \"Export Graph To Text\", null,\r\n            [{\r\n                type: \"button\",\r\n                initialValue: \"Export to JSON\",\r\n                onclick: () => {self.exportToText(\"json\");},\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary m-1\",\r\n                },\r\n                clickDismiss: false\r\n            },\r\n                {\r\n                    type: \"button\",\r\n                    initialValue: \"Export to DIMACS\",\r\n                    onclick: () => {self.exportToText(\"dimacs\");},\r\n                    extraAttrs: {\r\n                        class: \"btn btn-sm btn-primary\",\r\n                    },\r\n                    clickDismiss: false\r\n                },\r\n                {\r\n                    type: \"textarea\", label: \"\", initialValue: \"\", extraAttrs: {\r\n                        style: \"height: 20vh;\" +\r\n                        \" min-height:400px; white-space:nowrap; margin-top: 1rem;\"\r\n                    },\r\n                    onclick: () => {\r\n                        $(\"#exportedText\").select();\r\n                        document.execCommand(\"copy\");\r\n                    }, id: \"exportedText\"\r\n                }\r\n            ], ($modal) => {\r\n                $modal.modal(\"hide\");\r\n            }, false);\r\n    },\r\n\r\n    exportToFile: (format) => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            self.downloadFile(\"graph.json\", self.getDataAsJSON());\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            self.downloadFile(\"graph.dimacs\", self.getDataAsDIMACS());\r\n        }\r\n    },\r\n\r\n    exportToText: (format) => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            $(\"#exportedText\").text(JSON.stringify(JSON.parse(self.getDataAsJSON()), null, 2));\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            $(\"#exportedText\").text(self.getDataAsDIMACS());\r\n        }\r\n    },\r\n\r\n    getDataAsJSON: () => {\r\n        let d = window.main.graphState.getGraphData();\r\n        d = window.main.graphState.getGraphData(window.main.graphState.dataSetToGraph(d.nodes, d.edges, d.directed, d.weighted));\r\n        let nodeKeys = [\"id\", \"label\", \"color\", \"x\", \"y\"];\r\n        let edgeKeys = [\"from\", \"to\", \"weight\"];\r\n        d.nodes = help.keepOnlyKeys(d.nodes, nodeKeys);\r\n        d.edges = help.keepOnlyKeys(d.edges, edgeKeys);\r\n\r\n        return JSON.stringify(d);\r\n    },\r\n\r\n    getDataAsDIMACS: () => {\r\n        // If I add direction, DIMACS cannot be used, it only works for undirected graphs\r\n        let g = window.main.graphState.getGraphData();\r\n        let text = \"c This Graph was generated and exported from Michael Dombrowski's Graph Playground --\" +\r\n            \" https://md100play.github.io/graphPlayground -- https://mikedombrowski.com\\n\";\r\n\r\n        let adj = window.main.graphState.graph.getFullAdjacency();\r\n        adj = adj.filter((v) => {\r\n            return v.length !== 0;\r\n        });\r\n\r\n        let nodes = [];\r\n        adj.forEach((v, i) => {\r\n            if (nodes.indexOf(i + 1) === -1) {\r\n                nodes.push(i + 1);\r\n            }\r\n            v.forEach((n) => {\r\n                if (nodes.indexOf(n + 1) === -1) {\r\n                    nodes.push(n + 1);\r\n                }\r\n            });\r\n        });\r\n\r\n        let edgeCount = 0;\r\n        let edgeText = \"\";\r\n        g.edges.forEach((v) => {\r\n            edgeText += \"e \" + (v.from + 1) + \" \" + (v.to + 1) + \"\\n\";\r\n            edgeCount++;\r\n        });\r\n        edgeText = edgeText.trim();\r\n\r\n        text += \"p edge \" + nodes.length + \" \" + edgeCount + \"\\n\";\r\n        return text + edgeText;\r\n    },\r\n\r\n    downloadFile: (filename, text) => {\r\n        let blob = new Blob([text], {type: 'text/plain'});\r\n        if (window.navigator.msSaveOrOpenBlob) {\r\n            window.navigator.msSaveBlob(blob, filename);\r\n        }\r\n        else {\r\n            let a = window.document.createElement('a');\r\n            a.href = window.URL.createObjectURL(blob);\r\n            a.download = filename;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(blob);\r\n        }\r\n    },\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\n\r\nimport genericH from \"./genericHelpers\";\r\n\r\nlet SpanningTree = function (V) {\r\n    this.id = [];\r\n    for (let v = 0; v < V; v++) {\r\n        this.id.push(v);\r\n    }\r\n};\r\n\r\nSpanningTree.prototype = {\r\n    constructor: SpanningTree,\r\n    union: function (v, w) {\r\n        let q = this.root(v);\r\n        let p = this.root(w);\r\n\r\n        if (p !== q) {\r\n            this.id[p] = q;\r\n        }\r\n    },\r\n\r\n    root: function (q) {\r\n        while (this.id[q] !== q) {\r\n            q = this.id[q];\r\n        }\r\n        return q;\r\n    },\r\n\r\n    connected: function (v, w) {\r\n        return this.root(v) === this.root(w);\r\n    }\r\n};\r\n\r\nexport default genericH.deepFreeze(SpanningTree);\r\n","\"use strict\";\r\n\r\nimport genericH from './genericHelpers';\r\nimport graphH from './graphHelpers';\r\nimport SpanningTree from './SpanningTree';\r\n\r\nlet self = {\r\n    // Welsh-Powell Algorithm\r\n    colorNetwork: (graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        // Get node ID's only\r\n        let nodeArr = genericH.datasetToArray(G.getAllNodes(), \"id\");\r\n\r\n        // Put vertices in array in decreasing order of degree\r\n        let degrees = G.getAllOutDegrees();\r\n        let vertexOrder = genericH.sort(nodeArr, (a, b) => {\r\n            return degrees[a] < degrees[b] ? 1 : degrees[a] === degrees[b] ? 0 : -1;\r\n        });\r\n\r\n        let colorIndex = {};\r\n        let currentColor = 0;\r\n        while (vertexOrder.length > 0) {\r\n            let root = vertexOrder.shift();\r\n            colorIndex[root] = currentColor;\r\n\r\n            let myGroup = [];\r\n            myGroup.push(root);\r\n\r\n            for (let i = 0; i < vertexOrder.length;) {\r\n                let p = vertexOrder[i];\r\n                let conflict = false;\r\n\r\n                for (let j = 0; j < myGroup.length; j++) {\r\n                    if (G.areAdjacent(p, myGroup[j])) {\r\n                        i++;\r\n                        conflict = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (conflict) {\r\n                    continue;\r\n                }\r\n\r\n                colorIndex[p] = currentColor;\r\n                myGroup.push(p);\r\n                vertexOrder.splice(i, 1);\r\n            }\r\n\r\n            currentColor++;\r\n        }\r\n\r\n        let chromaticNumber = genericH.max(genericH.flatten(colorIndex)) + 1;\r\n        return {colors: colorIndex, chromaticNumber: chromaticNumber};\r\n    },\r\n\r\n    connectedComponents: (graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        let components = {};\r\n        let componentCount = 0;\r\n        const setComponentNum = (v) => {\r\n            components[v] = componentCount;\r\n        };\r\n        for (let i = 0; i < G.getNumberOfNodes(); i++) {\r\n            if (!(i in components)) {\r\n                let visited = self.depthFirstSearch(G, i);\r\n                visited.forEach(setComponentNum);\r\n                componentCount++;\r\n            }\r\n        }\r\n\r\n        return {components: components, count: componentCount};\r\n    },\r\n\r\n    depthFirstSearch: (G = window.main.graphState.graph, start) => {\r\n        let visisted = [];\r\n        let Stack = [];\r\n        Stack.push(start);\r\n        while (Stack.length > 0) {\r\n            let v = Stack.pop();\r\n            if (!visisted.includes(v)) {\r\n                visisted.push(v);\r\n                G.getNodeAdjacency(v).forEach((nodeID) => {\r\n                    Stack.push(nodeID);\r\n                });\r\n            }\r\n        }\r\n\r\n        return visisted;\r\n    },\r\n\r\n    // Tarjan's algorithm\r\n    stronglyConnectedComponents: (graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        let index = 0;\r\n        let indices = {};\r\n        let lowlink = {};\r\n        let S = [];\r\n        let components = {};\r\n        let componentCount = 0;\r\n\r\n        let strongConnect = (v) => {\r\n            indices[v] = index;\r\n            lowlink[v] = index++;\r\n            S.push(v);\r\n\r\n            G.getNodeAdjacency(v).forEach((w) => {\r\n                if (!(w in indices)) {\r\n                    strongConnect(w);\r\n                    lowlink[v] = Math.min(lowlink[v], lowlink[w]);\r\n                }\r\n                else if (S.includes(w)) {\r\n                    lowlink[v] = Math.min(lowlink[v], indices[w]);\r\n                }\r\n            });\r\n\r\n            if (lowlink[v] === indices[v]) {\r\n                let w = -1;\r\n                if (S.length > 0) {\r\n                    do {\r\n                        w = S.pop();\r\n                        components[w] = componentCount;\r\n                    }\r\n                    while (w !== v);\r\n                    componentCount++;\r\n                }\r\n            }\r\n        };\r\n\r\n        for (let i = 0; i < G.getNumberOfNodes(); i++) {\r\n            if (!(i in indices)) {\r\n                strongConnect(i);\r\n            }\r\n        }\r\n\r\n        return {components: components, count: componentCount};\r\n    },\r\n\r\n    breadthFirstSearch: (startNodeID, targetNodeID, graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        // Perform the BFS\r\n        let visisted = [];\r\n        let Q = []; // Use Push and Shift for Queue operations\r\n        let edgeTo = {};\r\n\r\n        Q.push(startNodeID);\r\n        while (Q.length > 0) {\r\n            let x = Q.shift();\r\n            if (!visisted.includes(x)) {\r\n                visisted.push(x);\r\n                G.getNodeAdjacency(x).forEach((y) => {\r\n                    if (!visisted.includes(y)) {\r\n                        edgeTo[y] = x;\r\n                        Q.push(y);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        if (visisted.includes(targetNodeID)) {\r\n            // Build the path\r\n            let path = [];\r\n            for (let x = targetNodeID; x !== startNodeID; x = edgeTo[x]) {\r\n                path.push(x);\r\n            }\r\n            path.push(startNodeID);\r\n            path.reverse();\r\n\r\n            // Get the path weight\r\n            let weight = 0;\r\n            for (let i = 0; i < path.length - 1; i++) {\r\n                weight += G.getMinWeightEdgeBetween(path[i], path[i + 1]);\r\n            }\r\n\r\n            return {pathExists: true, path: path, distance: path.length, weight: weight};\r\n        }\r\n\r\n        return {pathExists: false, path: [], distance: -1, weight: -1};\r\n    },\r\n\r\n    dijkstraSearch: (startNodeID, targetNodeID, graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        if (!G.isDirected()) {\r\n            G = G.convertToDirected(true);\r\n        }\r\n        if (!G.isWeighted()) {\r\n            G = G.convertToWeighted();\r\n        }\r\n\r\n        let nonNegative = G.getAllEdges(true).find((edge) => {\r\n            return edge.getWeight() < 0;\r\n        });\r\n        if (typeof nonNegative !== \"undefined\") {\r\n            genericH.showSimpleModal(\"Dijkstra Error\", \"<p>The Dijkstra algorithm only works on graphs\" +\r\n                \" with totally non-negative edge weights. Please fix the graph so that there are no\" +\r\n                \" negative edge weights.</p><p>Alternatively, try the Bellman-Ford algorithm which solves\" +\r\n                \" exactly this problem.</p>\");\r\n            return false;\r\n        }\r\n\r\n        // Priority Queue implementation for Dijkstra\r\n        const PriorityQueue = function () {\r\n            this._nodes = [];\r\n\r\n            this.enqueue = function (priority, key) {\r\n                this._nodes.push({key: key, priority: priority});\r\n                this.sort();\r\n            };\r\n            this.dequeue = function () {\r\n                return this._nodes.shift().key;\r\n            };\r\n            this.sort = function () {\r\n                this._nodes.sort(function (a, b) {\r\n                    return a.priority - b.priority;\r\n                });\r\n            };\r\n            this.isEmpty = function () {\r\n                return !this._nodes.length;\r\n            };\r\n        };\r\n\r\n        let queue = new PriorityQueue();\r\n        let distances = {};\r\n        let previous = {};\r\n        let path = [];\r\n\r\n        // Initialize Queue and distances\r\n        G.getAllNodes(true).forEach((node) => {\r\n            let dist = Infinity;\r\n            if (node.getID() === startNodeID) {\r\n                dist = 0;\r\n            }\r\n\r\n            distances[node.getID()] = dist;\r\n            queue.enqueue(dist, node.getID());\r\n            previous[node.getID()] = null;\r\n        });\r\n\r\n        while (!queue.isEmpty()) {\r\n            let smallest = queue.dequeue();\r\n\r\n            if (smallest === targetNodeID) {\r\n                path = [];\r\n                while (previous[smallest] !== null) {\r\n                    path.push(smallest);\r\n                    smallest = previous[smallest];\r\n                }\r\n                break;\r\n            }\r\n\r\n            if (distances[smallest] === Infinity) {\r\n                continue;\r\n            }\r\n\r\n            G.getNodeAdjacency(smallest).forEach((neighbor) => {\r\n                let alt = distances[smallest] + G.getMinWeightEdgeBetween(smallest, neighbor);\r\n\r\n                if (alt < distances[neighbor]) {\r\n                    distances[neighbor] = alt;\r\n                    previous[neighbor] = smallest;\r\n\r\n                    queue.enqueue(alt, neighbor);\r\n                }\r\n            });\r\n        }\r\n\r\n        path.push(startNodeID);\r\n        path.reverse();\r\n\r\n        if (distances[targetNodeID] !== Infinity) {\r\n            return {pathExists: true, path: path, distance: path.length, cost: distances[targetNodeID]};\r\n        }\r\n\r\n\r\n        return {pathExists: false, path: [], distance: -1, cost: 0};\r\n    },\r\n\r\n    bellmanFord: (startNodeID, targetNodeID, graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        let distances = [];\r\n        let parents = [];\r\n\r\n        // Initialize\r\n        G.getAllNodes(true).forEach((node) => {\r\n            distances[node.getID()] = Infinity;\r\n            parents[node.getID()] = null;\r\n        });\r\n\r\n        // Relax Edges\r\n        distances[startNodeID] = 0;\r\n        for (let i = 0; i < G.getNumberOfNodes() - 1; i++) {\r\n            G.getAllEdges(true).forEach((edge) => {\r\n                if (distances[edge.getFrom()] + edge.getWeight() < distances[edge.getTo()]) {\r\n                    distances[edge.getTo()] = distances[edge.getFrom()] + edge.getWeight();\r\n                    parents[edge.getTo()] = edge.getFrom();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Check for negative weight cycles\r\n        let negativeCylce = false;\r\n        G.getAllEdges(true).forEach((edge) => {\r\n            if (distances[edge.getFrom()] + edge.getWeight() < distances[edge.getTo()]) {\r\n                negativeCylce = true;\r\n            }\r\n        });\r\n\r\n        if (distances[targetNodeID] !== Infinity) {\r\n            let path = [targetNodeID];\r\n            while (!path.includes(startNodeID)) {\r\n                path.push(parents[path.slice().pop()]);\r\n            }\r\n            path.reverse();\r\n\r\n            return {pathExists: true, path: path, distance: path.length, cost: distances[targetNodeID]};\r\n        }\r\n\r\n        if (negativeCylce) {\r\n            genericH.showSimpleModal(\"Bellman-Ford Error\", \"<p>The Bellman-Ford algorithm only works on graphs\" +\r\n                \" with no negative edge-weight cycles. Please remove the negative cycle and try again.</p>\");\r\n            return false;\r\n        }\r\n\r\n        return {pathExists: false, path: [], distance: -1, cost: 0};\r\n    },\r\n\r\n    fordFulkerson: (startNodeID, targetNodeID, graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        // Must be a directed graph\r\n        if (!G.isDirected()) {\r\n            return false;\r\n        }\r\n\r\n        // Source == sink\r\n        if (startNodeID === targetNodeID) {\r\n            return false;\r\n        }\r\n\r\n        let bfs = self.breadthFirstSearch(startNodeID, targetNodeID, graphState);\r\n        // No path from source to sink\r\n        if (!bfs.pathExists) {\r\n            return false;\r\n        }\r\n\r\n        // If we have a multigraph, then reduce the graph to have single edges with the sum of the capacities\r\n        G = G.reduceMultiGraph((a, b) => {\r\n            return a + b;\r\n        });\r\n\r\n        let V = G.getNumberOfNodes();\r\n        let value = 0;\r\n        let marked = null;\r\n        let edgeTo = null;\r\n\r\n        let edgeProperties = {};\r\n        G.getAllEdges(true).forEach((edge) => {\r\n            edgeProperties[edge.getFrom() + \"_\" + edge.getTo()] = {\r\n                from: edge.getFrom(),\r\n                to: edge.getTo(),\r\n                capacity: edge.getWeight(),\r\n                flow: 0\r\n            };\r\n        });\r\n\r\n        const other = (e, x) => {\r\n            e = e.split(\"_\");\r\n            let a = parseInt(e[0]);\r\n            let b = parseInt(e[1]);\r\n            return x === a ? b : a;\r\n        };\r\n\r\n        const residualCapacity = (e, x) => {\r\n            let edge = e.split(\"_\");\r\n            let a = parseInt(edge[0]);\r\n            if (x === a) {\r\n                return edgeProperties[e].flow;\r\n            }\r\n            return edgeProperties[e].capacity - edgeProperties[e].flow;\r\n        };\r\n\r\n        const addResidualFlow = (e, x, deltaFlow) => {\r\n            let edge = e.split(\"_\");\r\n            let v = parseInt(edge[0]);\r\n            if (x === v) {\r\n                edgeProperties[e].flow -= deltaFlow;\r\n            }\r\n            else {\r\n                edgeProperties[e].flow += deltaFlow;\r\n            }\r\n        };\r\n\r\n        const hasAugmentedPath = () => {\r\n            marked = [];\r\n            edgeTo = [];\r\n            for (let v = 0; v < V; ++v) {\r\n                marked.push(false);\r\n                edgeTo.push(null);\r\n            }\r\n\r\n            let queue = [];\r\n            queue.push(startNodeID);\r\n\r\n            marked[startNodeID] = true;\r\n            while (queue.length > 0) {\r\n                let v = queue.shift();\r\n                let vertexAdjacency = G.getNodeAdjacency(v);\r\n                for (let i = 0; i < vertexAdjacency.length; i++) {\r\n                    let e = v + \"_\" + vertexAdjacency[i];\r\n                    let w = other(e, v);\r\n                    if (!marked[w] && residualCapacity(e, w) > 0) {\r\n                        edgeTo[w] = e;\r\n                        marked[w] = true;\r\n                        if (w === targetNodeID) {\r\n                            return true;\r\n                        }\r\n\r\n                        queue.push(w);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n        while (hasAugmentedPath()) {\r\n            let bottleneckValue = Infinity;\r\n            for (let x = targetNodeID; x !== startNodeID; x = other(edgeTo[x], x)) {\r\n                bottleneckValue = Math.min(bottleneckValue, residualCapacity(edgeTo[x], x));\r\n            }\r\n            for (let x = targetNodeID; x !== startNodeID; x = other(edgeTo[x], x)) {\r\n                addResidualFlow(edgeTo[x], x, bottleneckValue);\r\n            }\r\n            value += bottleneckValue;\r\n        }\r\n\r\n        const getFlows = () => {\r\n            let f = [];\r\n            for (let v = 0; v < V; v++) {\r\n                let vertexAdjacency = G.getNodeAdjacency(v);\r\n                for (let i = 0; i < vertexAdjacency.length; i++) {\r\n                    let e = v + \"_\" + vertexAdjacency[i];\r\n                    if (edgeProperties[e].flow > 0) {\r\n                        f.push(edgeProperties[e]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return f;\r\n        };\r\n\r\n        return {maxFlow: value, flowPath: getFlows()};\r\n    },\r\n\r\n    kruskal: (graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        // If we have a multigraph, reduce it by using the minimum edge weights\r\n        G.reduceMultiGraph(Math.min, Infinity);\r\n\r\n        let Q = G.getAllEdges(true);\r\n\r\n        // Sort edges by weight so that they are added to the tree in the order of lowest possible weight\r\n        Q.sort((a, b) => {\r\n            return a.getWeight() - b.getWeight();\r\n        });\r\n\r\n        let kruskal = [];\r\n        let set = new SpanningTree(G.getNumberOfNodes());\r\n        while (Q.length > 0 && kruskal.length < G.getNumberOfNodes() - 1) {\r\n            let e = Q.shift();\r\n            if (!set.connected(e.getFrom(), e.getTo())) {\r\n                set.union(e.getFrom(), e.getTo());\r\n                kruskal.push(e);\r\n            }\r\n        }\r\n\r\n        // Get the total cost of the MST\r\n        let weight = kruskal.reduce((acc, e) => {\r\n            return acc + e.getWeight();\r\n        }, 0);\r\n\r\n        return {mst: kruskal, totalWeight: weight};\r\n    },\r\n\r\n    topologicalSort: (graphState = window.main.graphState) => {\r\n        let G = graphState.graph;\r\n\r\n        let adjacency = G.getFullAdjacency();\r\n        let degrees = graphH.findVertexDegreesDirectional(adjacency);\r\n\r\n        let L = [];\r\n        let S = G.getAllNodes(true).filter((n) => {\r\n            return degrees[n.getID()].in === 0;\r\n        });\r\n        let edges = G.getAllEdges(true);\r\n\r\n        while (S.length !== 0) {\r\n            let nodeN = S.pop();\r\n            L.push(nodeN);\r\n\r\n            let nodeNConnectedTo = adjacency[nodeN.getID()];\r\n\r\n            // Remove n to m edges for all nodes m\r\n            edges = edges.filter((edge) => {\r\n                if (edge.getFrom() === nodeN.getID() && nodeNConnectedTo.includes(edge.getTo())) {\r\n                    degrees[edge.getTo()].in--;\r\n                    adjacency[nodeN.getID()] = adjacency[nodeN.getID()].filter((v) => {\r\n                        return v !== edge.getTo();\r\n                    });\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n\r\n            // If m has no more incoming edges, add it to S\r\n            nodeNConnectedTo.forEach((mID) => {\r\n                if (degrees[mID].in === 0) {\r\n                    S.push(G.getNode(mID, true));\r\n                }\r\n            });\r\n        }\r\n\r\n        return edges.length > 0 || L;\r\n    },\r\n\r\n    isGraphCyclic: (graphState = window.main.graphState) => {\r\n        // If the topological sorting returns true, then it failed, so the graph has a cycle\r\n        return self.topologicalSort(graphState) === true;\r\n    },\r\n\r\n    directionalEulerian: (directionalDegrees, graphState = window.main.graphState) => {\r\n        let scc = graphState.getProperty(\"stronglyConnectedComponents\", true);\r\n\r\n        let eulerian = true;\r\n        let component = -1;\r\n        directionalDegrees.forEach((deg, id) => {\r\n            if (deg.in !== deg.out) {\r\n                eulerian = false;\r\n            }\r\n            if (deg.in > 0) {\r\n                if (component === -1) {\r\n                    component = scc[id];\r\n                }\r\n                if (component !== scc[id]) {\r\n                    eulerian = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        return eulerian;\r\n    },\r\n\r\n    hasEulerianCircuit: (degrees, graphState = window.main.graphState) => {\r\n        let oddDegree = degrees.filter((v) => {\r\n            return v % 2 !== 0;\r\n        });\r\n\r\n        // If any nodes have odd degree, we can short-circuit the algorithm because it cannot be Eulerian\r\n        if (oddDegree.length !== 0) {\r\n            return false;\r\n        }\r\n\r\n        let cc = graphState.getProperty(\"connectedComponents\", true);\r\n\r\n        let eulerian = true;\r\n        let component = -1;\r\n        degrees.forEach((v, i) => {\r\n            if (v !== 0) {\r\n                if (component === -1) {\r\n                    component = cc[i];\r\n                }\r\n                if (component !== cc[i]) {\r\n                    eulerian = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        return eulerian;\r\n    },\r\n\r\n};\r\n\r\nexport default self;\r\n","import gAlgo from \"./GraphAlgorithms\";\nimport gHelp from \"./graphHelpers\";\nimport settings from \"./settings\";\nimport help from \"./genericHelpers\";\nimport $ from \"jquery\";\nimport importExport from './dataImportExport';\n\n\nconst makeAndPrintShortestPath = (title, fn, weighted) => {\n    help.showFormModal(($modal, values) => {\n            $modal.modal(\"hide\");\n\n            let source = window.main.graphState.nodeLabelToID(values[0]);\n            let sink = window.main.graphState.nodeLabelToID(values[1]);\n\n            let a = fn(source, sink);\n            if (a === false) {\n                return;\n            }\n\n            let p = \"<h3>\" + title + \"</h3><hr>No path exists from \"\n                + help.htmlEncode(source) + \" to \" + help.htmlEncode(sink);\n\n            if (a.pathExists) {\n                p = title + \" From \" + window.main.graphState.nodeIDToLabel(source) + \" to \";\n                p += window.main.graphState.nodeIDToLabel(sink) + \": \" + a.distance;\n                if (weighted) {\n                    p += \"\\nWith weighted cost: \" + a.cost;\n                }\n                p += \"\\n\\nUsing Path: \";\n\n                p = help.htmlEncode(p);\n                a.path.forEach((v) => {\n                    p += help.htmlEncode(window.main.graphState.nodeIDToLabel(v)) + \" &rarr; \";\n                });\n                p = p.slice(0, -8);\n                p = \"<h3>\" + title + \"</h3><hr>\" + p;\n            }\n\n            help.printout(p);\n        },\n        title, \"Go\", [\n            {label: \"Start Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator},\n            {label: \"End Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator}\n        ]);\n};\n\nconst makeAndPrintComponents = (stronglyConnected) => {\n    let a = null;\n    let cc = \"Connected Components\";\n    let componentKey = \"connectedComponents\";\n\n    if (stronglyConnected) {\n        if (!settings.getOption(\"direction\")) {\n            return;\n        }\n        cc = \"Strongly \" + cc;\n        componentKey = \"stronglyConnectedComponents\";\n        a = gAlgo.stronglyConnectedComponents();\n    }\n    else {\n        if (settings.getOption(\"direction\")) {\n            return;\n        }\n        a = gAlgo.connectedComponents();\n    }\n\n    window.main.graphState.graphProperties[cc] = a.count;\n    window.main.graphState.setUpToDate(true, [cc, componentKey]);\n    window.main.graphState.state[componentKey] = a.components;\n\n    let components = help.flatten(a.components);\n    let p = \"Number of \" + cc + \": \" + a.count;\n    p += \"\\n\\n\";\n\n    components.forEach((v, i) => {\n        p += \"Vertex \" + window.main.graphState.nodeIDToLabel(i) + \" is in connected component #\" + v + \"\\n\";\n    });\n\n    p += \"\\n\" + JSON.stringify(help.rotate(a.components), null, 4) + \"\\n\\n\";\n    p = \"<h3>\" + cc + \"</h3><hr>\" + help.htmlEncode(p);\n\n    help.printout(p);\n};\n\nexport default class UIInteractions {\n    static getAlgorithms () {\n        return [\n            {\n                name: \"Graph Coloring\",\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintGraphColoring,\n                display: true\n            },\n            {\n                name: \"Connected Components\",\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintConnectedComponents,\n                display: true\n            },\n            {\n                name: \"Strongly Connected Components\",\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintStronglyConnectedComponents\n            },\n            {\n                name: \"Breadth-First Shortest Path\",\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintBFS,\n                display: true\n            },\n            {\n                name: \"Dijkstra Shortest Path\",\n                applyFunc: UIInteractions.makeAndPrintDijkstra,\n                display: true\n            },\n            {\n                name: \"Bellman-Ford Shortest Path\",\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintBFSP,\n                display: true\n            },\n            {\n                name: \"Ford-Fulkerson\",\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintFFMCMF,\n                display: true\n            },\n            {\n                name: \"Kruskal Minimum Spanning Tree\",\n                weighted: true,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintKruskal,\n                display: true\n            },\n            {\n                name: \"Cyclic\",\n                applyFunc: UIInteractions.makeAndPrintIsCyclic,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Topological Sort\",\n                applyFunc: UIInteractions.makeAndPrintTopologicalSort,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Eulerian\",\n                directional: false,\n                display: false,\n                applyFunc: null\n            },\n            {\n                name: \"Eulerian\",\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintDirectionalEulerian\n            },\n        ];\n    }\n\n    static registerListeners () {\n        const makeSimpleClickListener = (selector, fn) => {\n            $(selector).on(\"click\", (e) => {\n                e.preventDefault();\n                fn();\n            });\n        };\n\n        makeSimpleClickListener(\"#print-help-link\", UIInteractions.printHelp);\n        makeSimpleClickListener(\"#graph-options-link\", UIInteractions.printOptions);\n        makeSimpleClickListener(\"#load-petersen-link\",\n            () => {\n                window.main.setData(window.predefined.Petersen(), false, true, true);\n            });\n        makeSimpleClickListener(\"#load-konigsberg-link\",\n            () => {\n                window.main.setData(window.predefined.Konigsberg(), false, true, true);\n            });\n        makeSimpleClickListener(\"#load-complete-link\", window.predefined.Complete);\n        makeSimpleClickListener(\"#load-hypercube-link\", window.predefined.Hypercube);\n        makeSimpleClickListener(\"#load-custom-link\", window.predefined.Custom);\n        makeSimpleClickListener(\"#undo-link\", window.main.undo);\n        makeSimpleClickListener(\"#redo-link\", window.main.redo);\n        makeSimpleClickListener(\"#calculate-all-properties-link\",\n            () => {\n                window.main.graphState.makeAndPrintProperties(true);\n            });\n        makeSimpleClickListener(\"#new-graph-layout-link\", window.main.shuffleNetworkLayout);\n        makeSimpleClickListener(\"#import-file-link\", importExport.makeImportFileModal);\n        makeSimpleClickListener(\"#import-text-link\", importExport.makeImportTextModal);\n        makeSimpleClickListener(\"#export-file-link\", importExport.makeExportFileModal);\n        makeSimpleClickListener(\"#export-text-link\", importExport.makeExportTextModal);\n    }\n\n    static printHelp () {\n        help.showSimpleModal(\"Help\",\n            \"<h4>For support see the <a href='https://github.com/MikeDombo/graphPlayground' \" +\n            \"target='_blank'>GitHub repository</a> for guides</h4>\" +\n            \"<h4>See <a href='https://github.com/MikeDombo/graphPlayground/issues'\" +\n            \" target='_blank'>GitHub issues</a> to submit bugs or feature requests.</h4>\");\n    }\n\n    static printOptions () {\n        help.showFormModal(\n            ($modal, vals) => {\n                $modal.modal(\"hide\");\n                if (settings.getOption(\"nodePhysics\") !== vals[0]) {\n                    settings.changeOption(\"nodePhysics\", vals[0]); // Physics\n                }\n                if (settings.getOption(\"direction\") !== vals[1]) {\n                    settings.changeOption(\"direction\", vals[1]);\n                    let G = window.main.graphState.graph;\n                    G = vals[1] ? G.convertToDirected(true) : G.getGraphAsUndirected();\n                    // Clear node coloring because graph color doesn't apply to directed graphs\n                    window.main.setData(window.main.graphState.getGraphData(G, true));\n                }\n                if (settings.getOption(\"weights\") !== vals[2]) {\n                    settings.changeOption(\"weights\", vals[2]);\n                    let G = window.main.graphState.graph;\n                    G = vals[2] ? G.convertToWeighted() : G.convertToUnWeighted();\n                    window.main.setData(window.main.graphState.getGraphData(G));\n                }\n            },\n            \"Options\", \"Save\", [\n                {label: \"Graph Physics\", initialValue: settings.getOption(\"nodePhysics\"), type: \"checkbox\"},\n                {label: \"Directed Graph\", initialValue: settings.getOption(\"direction\"), type: \"checkbox\"},\n                {label: \"Weighted Graph\", initialValue: settings.getOption(\"weights\"), type: \"checkbox\"}\n            ], null);\n    }\n\n    static makeAndPrintGraphColoring () {\n        if (settings.getOption(\"direction\")) {\n            return;\n        }\n\n        // Use cached responses when able\n        let a = {\n            chromaticNumber: window.main.graphState.getProperty(\"Chromatic Number\"),\n            colors: window.main.graphState.state.graphColoring\n        };\n        if (!(a.chromaticNumber !== null && window.main.graphState.getProperty(\"graphColoring\") !== null)) {\n            a = gAlgo.colorNetwork();\n        }\n\n        window.main.graphState.graphProperties[\"Chromatic Number\"] = a.chromaticNumber;\n        window.main.graphState.setUpToDate(true, [\"Chromatic Number\", \"graphColoring\"]);\n        window.main.graphState.state.graphColoring = a.colors;\n\n        let colors = help.flatten(a.colors);\n        let p = \"Number of Vertices: \" + colors.length;\n        p += \"\\nChromatic Number: \" + a.chromaticNumber;\n        p += \"\\n\\n\";\n\n        colors.forEach((v, i) => {\n            p += \"Vertex \" + window.main.graphState.nodeIDToLabel(i) + \" gets color \" + v + \"\\n\";\n        });\n\n        p += \"\\n\" + JSON.stringify(help.rotate(a.colors), null, 4) + \"\\n\\n\";\n\n        p = \"<h3>Graph Coloring Using Welsh-Powell Algorithm</h3><hr>\" + help.htmlEncode(p);\n        p += \"<br/><button class='btn btn-primary' onclick='main.applyColors()'>Apply New Colors To Graph</button>\";\n\n        help.printout(p);\n        window.main.applyColors();\n    }\n\n    static makeAndPrintConnectedComponents () {\n        makeAndPrintComponents(false);\n    }\n\n    static makeAndPrintDirectionalEulerian () {\n        if (!settings.getOption(\"direction\")) {\n            return;\n        }\n        let t = gAlgo.directionalEulerian(gHelp.findVertexDegreesDirectional(window.main.graphState.graph.getFullAdjacency()));\n        window.main.graphState.setUpToDate(true, [\"eulerian\"]);\n        window.main.graphState.graphProperties.eulerian = t;\n    }\n\n    static makeAndPrintEulerian () {\n        if (settings.getOption(\"direction\")) {\n            UIInteractions.makeAndPrintDirectionalEulerian();\n            return;\n        }\n\n        window.main.graphState.setUpToDate(true, [\"eulerian\"]);\n        window.main.graphState.graphProperties.eulerian = gAlgo.hasEulerianCircuit(window.main.graphState.graph.getAllOutDegrees());\n    }\n\n    static makeAndPrintStronglyConnectedComponents () {\n        makeAndPrintComponents(true);\n    }\n\n    static makeAndPrintBFS () {\n        makeAndPrintShortestPath(\"Breadth-First Shortest Path\", gAlgo.breadthFirstSearch);\n    }\n\n    static makeAndPrintDijkstra () {\n        makeAndPrintShortestPath(\"Dijkstra Shortest Path\", gAlgo.dijkstraSearch, true);\n    }\n\n    static makeAndPrintBFSP () {\n        makeAndPrintShortestPath(\"Bellman-Ford Shortest Path\", gAlgo.bellmanFord, true);\n    }\n\n    static makeAndPrintFFMCMF () {\n        if (!settings.getOption(\"direction\") || !settings.getOption(\"weights\")) {\n            return;\n        }\n        help.showFormModal(($modal, values) => {\n                $modal.modal(\"hide\");\n\n                let source = window.main.graphState.nodeLabelToID(values[0]);\n                let sink = window.main.graphState.nodeLabelToID(values[1]);\n\n                let a = gAlgo.fordFulkerson(source, sink);\n\n                let p = \"<h3>Ford-Fulkerson</h3><hr>No path exists from \"\n                    + help.htmlEncode(window.main.graphState.nodeIDToLabel(source))\n                    + \" to \" + help.htmlEncode(window.main.graphState.nodeIDToLabel(sink));\n\n                if (a === false) {\n                    help.printout(p);\n                    return;\n                }\n\n                p = \"Ford-Fulkerson MaxFlow-MinCut Max Flow From \" + window.main.graphState.nodeIDToLabel(source)\n                    + \" to \" + window.main.graphState.nodeIDToLabel(sink) + \": \" + a.maxFlow;\n                p += \"\\n\\nUsing Capacities:\\n\\n\";\n                p = help.htmlEncode(p);\n                a.flowPath.forEach((v) => {\n                    p += window.main.graphState.nodeIDToLabel(v.from) + \"&rarr;\" + window.main.graphState.nodeIDToLabel(v.to)\n                        + \" using \" + v.flow + \" of \" + v.capacity + \" \\n\";\n                });\n                p = p.trim();\n                p = \"<h3>Ford-Fulkerson MaxFlow-MinCut</h3><hr>\" + p;\n\n                help.printout(p);\n            },\n            \"Ford-Fulkerson MaxFlow-MinCut\", \"Go\", [\n                {label: \"Source Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator},\n                {label: \"Sink Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator}\n            ]);\n    }\n\n    static makeAndPrintKruskal () {\n        if (settings.getOption(\"direction\") || !settings.getOption(\"weights\")) {\n            return;\n        }\n\n        let a = gAlgo.kruskal();\n\n        let p = \"Kruskal's Minimum Spanning Tree Total Weight: \" + a.totalWeight;\n        p += \"\\n\\nUsing Edges:\\n\\n\";\n        p = help.htmlEncode(p);\n        a.mst.forEach((v) => {\n            p += window.main.graphState.nodeIDToLabel(v.from) + \"&rarr;\" + window.main.graphState.nodeIDToLabel(v.to) + \" \\n\";\n        });\n        p = p.trim();\n        p = \"<h3>Kruskal Minimum Spanning Tree</h3><hr>\" + p;\n\n        help.printout(p);\n    }\n\n    static makeAndPrintIsCyclic () {\n        if (!settings.getOption(\"direction\")) {\n            return;\n        }\n        window.main.graphState.graphProperties.cyclic = gAlgo.isGraphCyclic();\n        window.main.graphState.setUpToDate(true, [\"cyclic\"]);\n    }\n\n    static makeAndPrintTopologicalSort () {\n        if (!settings.getOption(\"direction\")) {\n            return;\n        }\n\n        let a = gAlgo.topologicalSort();\n\n        if (a === true) {\n            window.main.graphState.graphProperties.cyclic = true;\n            window.main.graphState.setUpToDate(true, [\"cyclic\"]);\n\n            let p = \"Topological sorting failed because the graph contains a cycle\";\n            p = \"<h3>Topological Sorting Failed</h3><hr>\" + p;\n            help.printout(p);\n\n            return;\n        }\n\n        let p = \"Topological Sorting:\\n\\n\";\n        p = help.htmlEncode(p);\n        a.forEach((v) => {\n            p += window.main.graphState.nodeIDToLabel(v.id) + \", \";\n        });\n        p = p.slice(0, -2);\n        p = \"<h3>Topological Sorting</h3><hr>\" + p;\n\n        help.printout(p);\n    }\n\n    static printGraphAlgorithms () {\n        let $div = $(\"#algorithms-pane\");\n        $div.empty();\n        let directional = settings.getOption(\"direction\");\n        let weighted = settings.getOption(\"weights\");\n\n        const addAlgoToPane = (alg) => {\n            $div.append($(\"<a>\", {class: \"nav-link\", href: \"#\"})\n                .text(alg.name).on(\"click\", (e) => {\n                    e.preventDefault();\n                    alg.applyFunc();\n                }));\n        };\n\n        let a = UIInteractions.getAlgorithms();\n        a.forEach((alg) => {\n            if (!alg.display) {\n                return;\n            }\n            if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n            else if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n        });\n    }\n}\n","\"use strict\";\r\n\r\nimport gHelp from './graphHelpers';\r\nimport help from './genericHelpers';\r\n\r\nconst petersenEdges = help.deepFreeze([\r\n    {from: 1, to: 2},\r\n    {from: 2, to: 3},\r\n    {from: 3, to: 4},\r\n    {from: 4, to: 5},\r\n    {from: 5, to: 1},\r\n\r\n    {from: 6, to: 8},\r\n    {from: 7, to: 9},\r\n    {from: 7, to: 10},\r\n    {from: 8, to: 10},\r\n    {from: 9, to: 6},\r\n\r\n    {from: 1, to: 6},\r\n    {from: 2, to: 7},\r\n    {from: 3, to: 8},\r\n    {from: 4, to: 9},\r\n    {from: 5, to: 10}\r\n]);\r\n\r\nconst konigsbergEdges = help.deepFreeze([\r\n    {from: 1, to: 2},\r\n    {from: 2, to: 3},\r\n    {from: 2, to: 4},\r\n    {from: 3, to: 4},\r\n    {from: 3, to: 4},\r\n    {from: 4, to: 1},\r\n    {from: 4, to: 1},\r\n]);\r\n\r\nconst completeGraph = (V) => {\r\n    let edges = [];\r\n    let nodes = [];\r\n\r\n    for (let i = 0; i < V; i++) {\r\n        nodes.push({id: i, label: i.toString()});\r\n        for (let j = i + 1; j < V; j++) {\r\n            edges.push({from: i, to: j});\r\n        }\r\n    }\r\n\r\n    return {nodes: nodes, edges: edges, directed: false, weighted: false};\r\n};\r\n\r\nconst hypercubeGraph = (D) => {\r\n    let edges = [];\r\n    let nodes = [];\r\n\r\n    let numNodes = Math.pow(2, D);\r\n\r\n    let pad = (str, max) => {\r\n        return str.length < max ? pad(\"0\" + str, max) : str;\r\n    };\r\n\r\n    const generateDifferByOne = (input, numBits) => {\r\n        let inputBits = pad((input).toString(2), numBits).split(\"\").reverse();\r\n        let allDiffer = [];\r\n\r\n        // 1 bit difference from input, increasing order, none less than input\r\n        for (let b = 0; b < numBits; b++) {\r\n            if (inputBits[b] === \"0\") {\r\n                let newNum = inputBits.slice();\r\n                newNum[b] = \"1\";\r\n                allDiffer.push(parseInt(newNum.reverse().join(\"\"), 2));\r\n            }\r\n        }\r\n\r\n        return allDiffer;\r\n    };\r\n\r\n    for (let i = 0; i < numNodes; i++) {\r\n        nodes.push({id: i, label: pad(i.toString(2), D)});\r\n        generateDifferByOne(i, D).forEach((j) => {\r\n            edges.push({from: i, to: j});\r\n        });\r\n    }\r\n\r\n    return help.deepFreeze({nodes: nodes, edges: edges, directed: false, weighted: false});\r\n};\r\n\r\nconst newCustomGraph = (V, directed = false, weighted = false) => {\r\n    let nodes = [];\r\n    for (let i = 0; i < V; i++) {\r\n        nodes.push({id: i, label: i.toString()});\r\n    }\r\n\r\n    return help.deepFreeze({nodes: nodes, edges: [], directed: directed, weighted: weighted});\r\n};\r\n\r\nexport default {\r\n    graphNames: help.deepFreeze([\"Petersen\", \"Konigsberg\", \"Complete\", \"Hypercube\"]),\r\n    Petersen: () => (help.deepFreeze({\r\n        edges: petersenEdges,\r\n        nodes: gHelp.interpolateNodesFromEdges(petersenEdges),\r\n        directed: false,\r\n        weighted: false,\r\n    })),\r\n    Konigsberg: () => (help.deepFreeze({\r\n        edges: konigsbergEdges,\r\n        nodes: gHelp.interpolateNodesFromEdges(konigsbergEdges),\r\n        directed: false,\r\n        weighted: false,\r\n    })),\r\n    Complete: () => {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(completeGraph(vals[0]), false, true, true);\r\n            },\r\n            \"Configurable Complete Graph\", \"Go\",\r\n            [{\r\n                type: \"numeric\", initialValue: 5, label: \"Number of Vertices\", validationFunc: (v) => {\r\n                    return v >= 0 || \"Number of vertices must be non-negative\";\r\n                }\r\n            }]);\r\n    },\r\n    Hypercube: () => {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(hypercubeGraph(vals[0]), false, true, true);\r\n            },\r\n            \"Configurable Hypercube Graph\", \"Go\",\r\n            [{\r\n                type: \"numeric\", initialValue: 3, label: \"Number of Dimensions\", validationFunc: (v) => {\r\n                    return v >= 0 || \"Number of dimensions must be non-negative\";\r\n                }\r\n            }]);\r\n    },\r\n    Custom: () => {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(newCustomGraph(vals[0], vals[1], vals[2]), false, true, true);\r\n            },\r\n            \"Configurable Graph\", \"Go\",\r\n            [\r\n                {\r\n                    type: \"numeric\", initialValue: 0, label: \"Number of Vertices\", validationFunc: (v) => {\r\n                        return v >= 0 || \"Number of vertices must be non-negative\";\r\n                    }\r\n                },\r\n                {type: \"checkbox\", initialValue: false, label: \"Directed\"},\r\n                {type: \"checkbox\", initialValue: false, label: \"Weighted\"},\r\n            ]);\r\n    },\r\n};\r\n","\"use strict\";\n\nexport default class EdgeImmut {\n    constructor (from, to, weight = 1) {\n        this.from = Object.freeze(from);\n        this.to = Object.freeze(to);\n        this.weight = Object.freeze(parseFloat(weight));\n\n        if (new.target === EdgeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getFrom () {\n        return this.from;\n    }\n\n    getTo () {\n        return this.to;\n    }\n\n    getWeight () {\n        return this.weight;\n    }\n\n    toPlain () {\n        return {from: this.from, to: this.to, weight: this.weight};\n    }\n\n    editEdge (newWeight) {\n        return new EdgeImmut(this.getFrom(), this.getTo(), newWeight);\n    }\n}\n","\"use strict\";\n\nexport default class NodeImmut {\n    constructor (id, label = null, extraAttrs = null) {\n        this.id = id;\n\n        if (label === null) {\n            this.label = id.toString();\n        }\n        else {\n            this.label = label;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach((key) => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.label = Object.freeze(this.label);\n        this.id = Object.freeze(this.id);\n\n        if (new.target === NodeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    toPlain () {\n        let toReturn = {id: this.id, label: this.label};\n        Object.keys(this.attributes).forEach((key) => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    getID () {\n        return this.id;\n    }\n\n    getLabel () {\n        return this.label;\n    }\n\n    getAttribute (attribute) {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes () {\n        return this.attributes;\n    }\n\n    editNode (label = null, extraAttrs = null) {\n        if (label === null) {\n            label = this.getLabel();\n        }\n\n        // Merge existing and new attributes favoring the new\n        let attributes = Object.assign({}, this.attributes);\n        Object.keys(extraAttrs).forEach((key) => {\n            attributes[key] = extraAttrs[key];\n        });\n\n        return new NodeImmut(this.getID(), label, attributes);\n    }\n}\n","\"use strict\";\r\n\r\nimport $ from 'jquery';\r\nimport {DataSet} from 'vis/index-network';\r\nimport help from './genericHelpers';\r\nimport GraphImmut from './GraphImmut/GraphImmut';\r\n\r\nlet self = {\r\n    backHistory: [],\r\n    forwardHistory: [],\r\n    maxHistory: 10,\r\n    upToDate: [\r\n        {\r\n            name: \"Chromatic Number\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {\r\n            name: \"graphColoring\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {name: \"vertices\", upToDate: true, always: true, type: \"property\"},\r\n        {name: \"edges\", upToDate: true, always: true, type: \"property\"},\r\n        {\r\n            name: \"eulerian\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintEulerian();\r\n            }\r\n        },\r\n        {\r\n            name: \"Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintConnectedComponents();\r\n            }\r\n        },\r\n        {\r\n            name: \"connectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintConnectedComponents();\r\n            }\r\n        },\r\n        {\r\n            name: \"Strongly Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintStronglyConnectedComponents();\r\n            }\r\n        },\r\n        {\r\n            name: \"stronglyConnectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintStronglyConnectedComponents();\r\n            }\r\n        },\r\n        {\r\n            name: \"cyclic\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.makeAndPrintIsCyclic();\r\n            }\r\n        },\r\n    ],\r\n    state: {\r\n        stronglyConnectedComponents: null,\r\n        connectedComponents: null,\r\n        graphColoring: null,\r\n    },\r\n    graph: null,\r\n    graphProperties: {\r\n        vertices: 0,\r\n        edges: 0,\r\n        eulerian: false,\r\n        \"Chromatic Number\": null,\r\n        \"Connected Components\": null,\r\n        \"Strongly Connected Components\": null,\r\n        cyclic: false,\r\n    },\r\n\r\n    setUpToDate: (value = false, listOptions) => {\r\n        let all = listOptions === null || typeof listOptions === \"undefined\";\r\n        let property = false;\r\n        self.upToDate.forEach((v) => {\r\n            if ((!(\"always\" in v) || !v.always) && (all || listOptions.indexOf(v.name) > -1)) {\r\n                v.upToDate = value;\r\n                if (v.type === \"property\") {\r\n                    property = true;\r\n                }\r\n            }\r\n        });\r\n        if (property) {\r\n            self.makeAndPrintProperties();\r\n        }\r\n    },\r\n\r\n    getProperty: (property, updateIfNotUpdated = false) => {\r\n        let a = self.upToDate.find((v) => {\r\n            return (\"name\" in v && v.name === property);\r\n        });\r\n        if (!a.upToDate) {\r\n            if (\"applyFunc\" in a && updateIfNotUpdated) {\r\n                a.applyFunc();\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        if (a.type === \"state\") {\r\n            return self.state[property];\r\n        }\r\n        return self.graphProperties[property];\r\n    },\r\n\r\n    makeAndPrintProperties: (recalcLong = false) => {\r\n        let directional = window.settings.getOption(\"direction\");\r\n\r\n        self.graphProperties.vertices = self.graph.getNumberOfNodes();\r\n        self.graphProperties.edges = self.graph.getNumberOfEdges();\r\n\r\n        if (!directional) {\r\n            self.getProperty(\"eulerian\", true);\r\n        }\r\n\r\n        let p = Object.keys(self.graphProperties);\r\n        if (recalcLong) {\r\n            p.forEach((v) => {\r\n                self.getProperty(v, true);\r\n            });\r\n        }\r\n\r\n        let printableProperties = {};\r\n        p.forEach((v) => {\r\n            printableProperties[v] = self.getProperty(v);\r\n        });\r\n        self.printGraphProperties(printableProperties);\r\n    },\r\n\r\n    printGraphProperties: (properties) => {\r\n        let p = \"\";\r\n        Object.keys(properties).forEach((k) => {\r\n            if (properties[k] !== null) {\r\n                p += help.toTitleCase(k) + \": \" + properties[k] + \"\\n\";\r\n            }\r\n        });\r\n        p = p.trim();\r\n        p = help.htmlEncode(p);\r\n        $(\"#graphProps\").html(\"<p class='nav-link'>\" + p + \"</p>\");\r\n    },\r\n\r\n    addEdge: (from, to, weight = 0, graph = self.graph) => {\r\n        graph = graph.addEdge(from, to, weight);\r\n        window.main.setData({nodes: self.clearColorFromNodes(graph.getAllNodes()), edges: graph.getAllEdges()});\r\n    },\r\n\r\n    addNode: (data, graph = self.graph) => {\r\n        graph = graph.addNode({label: data.label, x: data.x, y: data.y});\r\n        window.main.setData({nodes: self.clearColorFromNodes(graph.getAllNodes()), edges: graph.getAllEdges()});\r\n    },\r\n\r\n    editNode: (id, label, graph = self.graph) => {\r\n        graph = graph.editNode(id, {label: label});\r\n        window.main.setData(self.getGraphData(graph), false, false);\r\n    },\r\n\r\n    editEdge: (from, to, newWeight, oldWeight, graph = self.graph) => {\r\n        graph = graph.editEdge(from, to, newWeight, oldWeight);\r\n        window.main.setData(self.getGraphData(graph), false, false);\r\n    },\r\n\r\n    deleteEdge: (from, to, weight = null, graph = self.graph) => {\r\n        graph = graph.deleteEdge(from, to, weight, false);\r\n        window.main.setData({nodes: self.clearColorFromNodes(graph.getAllNodes()), edges: graph.getAllEdges()});\r\n    },\r\n\r\n    deleteNode: (id, graph = self.graph) => {\r\n        graph = graph.deleteNode(id);\r\n        window.main.setData({nodes: self.clearColorFromNodes(graph.getAllNodes()), edges: graph.getAllEdges()});\r\n    },\r\n\r\n    clearColorFromNodes: (nodes) => {\r\n        nodes.forEach((v) => {\r\n            v.color = null;\r\n        });\r\n        return nodes;\r\n    },\r\n\r\n    nodeIDToLabel: (id, graph = self.graph) => {\r\n        let n = graph.getNode(id, true);\r\n        if (n !== false && n !== null && typeof n !== \"undefined\" && n.getLabel().trim().length > 0) {\r\n            return n.getLabel().trim();\r\n        }\r\n\r\n        return id.toString();\r\n    },\r\n\r\n    // Preferentially search by ID, label, and case-insensitive label\r\n    nodeLabelToID: (label, graph = self.graph) => {\r\n        let n = graph.getAllNodes(true);\r\n        n = n.filter((node) => {\r\n            return node.getLabel().toLowerCase() === label.toLowerCase() || node.getID().toString() === label;\r\n        });\r\n\r\n        if (n.length === 0) {\r\n            return -1;\r\n        }\r\n        else if (n.length === 1) {\r\n            return n[0].getID();\r\n        }\r\n\r\n        let rID = -1;\r\n        let found = false;\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getID().toString() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel().toLowerCase() === label.toLowerCase()) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        return rID;\r\n    },\r\n\r\n    // Return graph as a Vis compatible dataset\r\n    getGraphAsDataSet: (graph) => {\r\n        let d = self.getGraphData(graph);\r\n        if (graph.isWeighted()) {\r\n            d.edges.forEach((e) => {\r\n                e.label = e.weight.toString();\r\n            });\r\n        }\r\n\r\n        return {nodes: new DataSet(d.nodes), edges: new DataSet(d.edges)};\r\n    },\r\n\r\n    setLocations: (locations, graph = self.graph) => {\r\n        Object.keys(locations).forEach((i) => {\r\n            let v = locations[i];\r\n            graph = graph.editNode(i, {x: v.x, y: v.y});\r\n        });\r\n\r\n        return graph;\r\n    },\r\n\r\n    getGraphData: (graph = self.graph, clearColors = false) => {\r\n        return {\r\n            nodes: clearColors ? self.clearColorFromNodes(graph.getAllNodes()) : graph.getAllNodes(),\r\n            edges: graph.getAllEdges(),\r\n            directed: graph.isDirected(),\r\n            weighted: graph.isWeighted()\r\n        };\r\n    },\r\n\r\n    // return graph object built from input nodes and edges\r\n    dataSetToGraph: (nodes, edges, directional = false, weighted = false) => {\r\n        let d = self.alignData(0, nodes, edges);\r\n        return new GraphImmut(d.nodes, d.edges, directional, weighted);\r\n    },\r\n\r\n    // Align ID's of nodes to a start value (typically 0)\r\n    alignData: (start, nodes, edges) => {\r\n        let nodeMap = {};\r\n        let nodeCount = start;\r\n        let newNodes = [];\r\n        nodes.forEach((v) => {\r\n            let label = v.label;\r\n            if (v.label === v.id.toString()) {\r\n                label = nodeCount.toString();\r\n            }\r\n            let thisNode = {id: nodeCount, label: label, color: v.color, x: v.x, y: v.y};\r\n            newNodes.push(thisNode);\r\n            nodeMap[v.id] = nodeCount++;\r\n        });\r\n\r\n        let newEdges = [];\r\n        edges.forEach((v) => {\r\n            let thisEdge = {from: nodeMap[v.from], to: nodeMap[v.to], label: v.label, weight: v.weight};\r\n            newEdges.push(thisEdge);\r\n        });\r\n\r\n        return help.deepFreeze({nodes: newNodes, edges: newEdges});\r\n    },\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\n\r\nimport $ from 'jquery';\r\nimport help from './genericHelpers';\r\nimport settings from './settings';\r\nimport randomColor from 'randomcolor';\r\nimport graphState from './graphState';\r\nimport GraphImmut from \"./GraphImmut/GraphImmut\";\r\n\r\nlet self = {\r\n    graphState: graphState,\r\n    container: document.getElementById('network'),\r\n    // Function used to overwrite the edge edit functionality when weights are active\r\n    visWeightEdgeEdit: (data, callback) => {\r\n        help.showFormModal(($modal, vals) => {\r\n            callback(null);\r\n            $modal.modal(\"hide\");\r\n            vals = parseFloat(vals[0]);\r\n            graphState.editEdge(data.from.id, data.to.id, vals, parseFloat(data.label));\r\n        }, \"Edit Edge\", \"Save\", [\r\n            {\r\n                type: \"numeric\",\r\n                label: \"Weight/Capacity\",\r\n                initialValue: parseFloat(data.label)\r\n            }\r\n        ]);\r\n    },\r\n    visOptions: {\r\n        interaction: {hover: true},\r\n        manipulation: {\r\n            addNode: function (data, callback) {\r\n                let $popup = help.makeFormModal(\"Add Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: \"<p>Node ID: \" + self.graphState.getProperty(\"vertices\") + \"</p>\"\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: self.graphState.getProperty(\"vertices\")}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"add\", $popup.find(\"input\").first().val());\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            editNode: function (data, callback) {\r\n                let $popup = help.makeFormModal(\"Edit Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: \"<p>Node ID: \" + data.id + \"</p>\"\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: data.label}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"editNode\", $popup.find(\"input\").first().val());\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            addEdge: function (data, callback) {\r\n                let apply = function () {\r\n                    if (typeof callback === \"function\") {\r\n                        callback(null);\r\n                    }\r\n                    graphState.addEdge(data.from, data.to);\r\n                };\r\n                if (data.from === data.to) {\r\n                    if (confirm(\"Do you want to connect the node to itself?\")) {\r\n                        apply();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                apply();\r\n            },\r\n            editEdge: function (data, callback) {\r\n                callback(null);\r\n                self.visOptions.manipulation.deleteEdge({edges: [data.id]});\r\n                self.visOptions.manipulation.addEdge(data);\r\n            },\r\n            deleteEdge: function (data, callback) {\r\n                if (typeof callback === \"function\") {\r\n                    callback(null);\r\n                }\r\n                data.edges.forEach((v) => {\r\n                    let weight = null;\r\n                    if (typeof window.network.body.data.edges._data[v].label !== \"undefined\") {\r\n                        weight = parseFloat(window.network.body.data.edges._data[v].label);\r\n                    }\r\n\r\n                    graphState.deleteEdge(window.network.body.edges[v].fromId,\r\n                        window.network.body.edges[v].toId, weight);\r\n                });\r\n            },\r\n            deleteNode: function (data, callback) {\r\n                callback(null);\r\n                data.nodes.forEach((v) => {\r\n                    graphState.deleteNode(v);\r\n                });\r\n            },\r\n        },\r\n    },\r\n\r\n    cancelEdit: (callback) => {\r\n        if (typeof callback === \"function\") {\r\n            callback(null);\r\n        }\r\n    },\r\n\r\n    saveData: (data, callback, operation, label) => {\r\n        data.label = label;\r\n        callback(null);\r\n\r\n        if (operation === \"add\") {\r\n            graphState.addNode(data);\r\n        }\r\n        else if (operation === \"editNode\") {\r\n            graphState.editNode(data.id, data.label);\r\n        }\r\n    },\r\n\r\n    nodeLabelIDValidator: (v) => {\r\n        if (graphState.nodeLabelToID(v) > -1) {\r\n            return true;\r\n        }\r\n        return \"Invalid Label or ID\";\r\n    },\r\n\r\n    applyColors: () => {\r\n        if (settings.getOption(\"direction\")) {\r\n            return;\r\n        }\r\n        let graphColors = graphState.getProperty(\"graphColoring\", true);\r\n        let chromaticNumber = graphState.getProperty(\"Chromatic Number\", true);\r\n\r\n        let colors = randomColor({count: chromaticNumber, luminosity: \"light\"});\r\n        let G = graphState.graph;\r\n        G.getAllNodes().forEach((v) => {\r\n            G = G.editNode(v.id, {color: colors[graphColors[v.id]]});\r\n        });\r\n        self.setData(graphState.getGraphData(G), false, false);\r\n    },\r\n\r\n    setData: (data, recalcProps = false, graphChanged = true, rearrangeGraph = false) => {\r\n        // Store existing positions in the data if we're supposed to keep the layout\r\n        if (rearrangeGraph) {\r\n            data.nodes.forEach((v) => {\r\n                delete v.x;\r\n                delete v.y;\r\n            });\r\n        }\r\n\r\n        if (graphChanged) {\r\n            self.saveState();\r\n        }\r\n\r\n        if (\"directed\" in data) {\r\n            settings.changeOption(\"direction\", data.directed);\r\n        }\r\n        if (\"weighted\" in data) {\r\n            settings.changeOption(\"weights\", data.weighted);\r\n        }\r\n        let directional = settings.getOption(\"direction\");\r\n        let weighted = settings.getOption(\"weights\");\r\n\r\n        let g = graphState.dataSetToGraph(data.nodes, data.edges, directional, weighted);\r\n        graphState.graph = g;\r\n\r\n        // Set a new random seed so that the layout will be different\r\n        self.randomizeNetworkLayoutSeed(window.network);\r\n\r\n        window.network.setData(graphState.getGraphAsDataSet(g));\r\n        self.graphState.graph = self.graphState.setLocations(window.network.getPositions());\r\n\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        if (graphChanged) {\r\n            window.ui.printGraphAlgorithms();\r\n            help.printout(\"\");\r\n            graphState.setUpToDate();\r\n            graphState.makeAndPrintProperties(recalcProps);\r\n        }\r\n\r\n        self.saveStateLocalStorage();\r\n    },\r\n\r\n    saveState: () => {\r\n        if (graphState.graph === null) {\r\n            return;\r\n        }\r\n\r\n        if (graphState.backHistory.length >= graphState.maxHistory) {\r\n            graphState.backHistory.shift();\r\n        }\r\n\r\n        graphState.backHistory.push(self.getStateForSaving());\r\n        graphState.forwardHistory = [];\r\n        $(\".fa-undo\").parent().parent().addClass(\"active\");\r\n    },\r\n\r\n    getStateForSaving: () => {\r\n        let state = {};\r\n        Object.keys(graphState).forEach((k) => {\r\n            let v = graphState[k];\r\n            if (typeof v !== \"function\") {\r\n                if (typeof v !== \"object\") {\r\n                    state[k] = v;\r\n                }\r\n                else {\r\n                    if (k === \"graph\" && v !== null) {\r\n                        state[k] = v;\r\n                    }\r\n                    if (!k.toLowerCase().includes(\"history\")) {\r\n                        state[k] = $.extend(true, Array.isArray(v) ? [] : {}, v);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return state;\r\n    },\r\n\r\n    undo: () => {\r\n        if (graphState.backHistory.length > 0) {\r\n            self.applyState(true);\r\n        }\r\n    },\r\n\r\n    redo: () => {\r\n        if (graphState.forwardHistory.length > 0) {\r\n            self.applyState(false);\r\n        }\r\n    },\r\n\r\n    applyState: (undo = true, newState = null) => {\r\n        let firstLoad = newState !== null;\r\n        let currentState = self.getStateForSaving();\r\n\r\n        if (!firstLoad) {\r\n            if (undo) {\r\n                newState = graphState.backHistory.pop();\r\n            }\r\n            else {\r\n                newState = graphState.forwardHistory.pop();\r\n            }\r\n        }\r\n\r\n        newState.graph = new GraphImmut(newState.graph.nodes, newState.graph.edges, newState.graph.directed, newState.graph.weighted);\r\n\r\n        settings.changeOption(\"direction\", newState.graph.isDirected());\r\n        settings.changeOption(\"weights\", newState.graph.isWeighted());\r\n\r\n        let g = graphState.getGraphAsDataSet(newState.graph);\r\n        graphState.graph = graphState.dataSetToGraph(g.nodes, g.edges, newState.graph.isDirected(), newState.graph.isWeighted());\r\n\r\n        window.network.setData(g);\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        window.ui.printGraphAlgorithms();\r\n        help.printout(\"\");\r\n\r\n        Object.keys(newState).forEach((k) => {\r\n            let v = newState[k];\r\n            if (typeof v !== \"object\") {\r\n                graphState[k] = v;\r\n            }\r\n            else if (!k.toLowerCase().includes(\"history\") && k.toLowerCase() !== \"graph\") {\r\n                if (k.toLowerCase() === \"uptodate\") {\r\n                    Object.keys(graphState[k]).forEach((oldKey) => {\r\n                        graphState[k][oldKey].upToDate = v[oldKey].upToDate;\r\n                    });\r\n                }\r\n                else {\r\n                    graphState[k] = $.extend(true, graphState[k], v);\r\n                }\r\n            }\r\n        });\r\n\r\n        graphState.makeAndPrintProperties();\r\n        if (undo && !firstLoad) {\r\n            $(\".fa-repeat\").parent().parent().addClass(\"active\");\r\n            if (graphState.backHistory.length === 0) {\r\n                $(\".fa-undo\").parent().parent().removeClass(\"active\");\r\n            }\r\n            graphState.forwardHistory.push(currentState);\r\n        }\r\n        else if (!undo && !firstLoad) {\r\n            $(\".fa-undo\").parent().parent().addClass(\"active\");\r\n            if (graphState.forwardHistory.length === 0) {\r\n                $(\".fa-repeat\").parent().parent().removeClass(\"active\");\r\n            }\r\n            graphState.backHistory.push(currentState);\r\n        }\r\n\r\n        self.saveStateLocalStorage();\r\n    },\r\n\r\n    saveStateLocalStorage: () => {\r\n        if (settings.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.lastState\", JSON.stringify(self.getStateForSaving()));\r\n        }\r\n    },\r\n\r\n    shuffleNetworkLayout: () => {\r\n        self.setData({\r\n            nodes: graphState.graph.getAllNodes(),\r\n            edges: graphState.graph.getAllEdges()\r\n        }, false, false, true);\r\n    },\r\n\r\n    randomizeNetworkLayoutSeed: (network) => {\r\n        let r = Math.round(Math.random() * 1000000);\r\n        network.layoutEngine.randomSeed = r;\r\n        network.layoutEngine.initialRandomSeed = r;\r\n    },\r\n\r\n    addNetworkListeners: (network) => {\r\n        // Enable edit node/edge when double clicking\r\n        network.on(\"doubleClick\", (p) => {\r\n            if (settings.getOption(\"weights\") && \"edges\" in p && p.edges.length === 1) {\r\n                network.editEdgeMode();\r\n            }\r\n            if (\"nodes\" in p && p.nodes.length === 1) {\r\n                network.editNode();\r\n            }\r\n        });\r\n\r\n        // Save locations of nodes after dragging\r\n        network.on(\"dragEnd\", () => {\r\n            self.graphState.graph = self.graphState.setLocations(network.getPositions());\r\n            self.saveStateLocalStorage(); // Save the new locations as part of the state\r\n        });\r\n\r\n        // Delete nodes/edges when hit \"Delete\"\r\n        let lastNetworkClickEvent = null;\r\n        network.on('click', (event) => {\r\n            lastNetworkClickEvent = event;\r\n        });\r\n\r\n        // Delete key to delete node or edge\r\n        $(document).on('keyup', (key) => {\r\n            if (key.key === \"Delete\" && lastNetworkClickEvent !== null) {\r\n                if ($(self.container).has($(lastNetworkClickEvent.event.target)).length > 0) {\r\n                    if ((\"edges\" in lastNetworkClickEvent && lastNetworkClickEvent.edges.length === 1)\r\n                        || (\"nodes\" in lastNetworkClickEvent && lastNetworkClickEvent.nodes.length === 1)) {\r\n                        if ($(':focus').parents(\".modal\").length === 0) {\r\n                            network.deleteSelected();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Undo/Redo keyboard commands\r\n        $(document).keydown((e) => {\r\n            if ((e.which === 89 && e.ctrlKey) || (e.which === 90 && e.ctrlKey && e.shiftKey)) {\r\n                self.redo();\r\n            }\r\n            else if (e.which === 90 && e.ctrlKey) {\r\n                self.undo();\r\n            }\r\n        });\r\n\r\n        // When clicking off of the network, remove the Delete functionality\r\n        $(document).on(\"click\", (e) => {\r\n            if ($(self.container).has(e.target).length === 0) {\r\n                lastNetworkClickEvent = null;\r\n            }\r\n        });\r\n    },\r\n\r\n};\r\n\r\nexport default self;\r\n"],"sourceRoot":""}
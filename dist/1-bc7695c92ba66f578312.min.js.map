{"version":3,"sources":["webpack:///./src/js/predefinedGraphs.js"],"names":["petersenEdges","_genericHelpers__WEBPACK_IMPORTED_MODULE_1__","deepFreeze","from","to","konigsbergEdges","__webpack_exports__","graphNames","Petersen","edges","nodes","_graphHelpers__WEBPACK_IMPORTED_MODULE_0__","interpolateNodesFromEdges","directed","weighted","Konigsberg","Complete","showFormModal","$modal","vals","modal","window","main","setData","V","i","push","id","label","toString","j","completeGraph","type","initialValue","validationFunc","v","Hypercube","D","numNodes","Math","pow","pad","str","max","length","generateDifferByOne","input","numBits","inputBits","split","reverse","allDiffer","b","newNum","slice","parseInt","join","forEach","hypercubeGraph","Custom","newCustomGraph"],"mappings":"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","file":"1-bc7695c92ba66f578312.min.js","sourcesContent":["\"use strict\";\r\n\r\nimport gHelp from './graphHelpers';\r\nimport help from './genericHelpers';\r\n\r\nconst petersenEdges = help.deepFreeze([\r\n    {from: 1, to: 2},\r\n    {from: 2, to: 3},\r\n    {from: 3, to: 4},\r\n    {from: 4, to: 5},\r\n    {from: 5, to: 1},\r\n\r\n    {from: 6, to: 8},\r\n    {from: 7, to: 9},\r\n    {from: 7, to: 10},\r\n    {from: 8, to: 10},\r\n    {from: 9, to: 6},\r\n\r\n    {from: 1, to: 6},\r\n    {from: 2, to: 7},\r\n    {from: 3, to: 8},\r\n    {from: 4, to: 9},\r\n    {from: 5, to: 10}\r\n]);\r\n\r\nconst konigsbergEdges = help.deepFreeze([\r\n    {from: 1, to: 2},\r\n    {from: 2, to: 3},\r\n    {from: 2, to: 4},\r\n    {from: 3, to: 4},\r\n    {from: 3, to: 4},\r\n    {from: 4, to: 1},\r\n    {from: 4, to: 1},\r\n]);\r\n\r\nconst completeGraph = (V) => {\r\n    let edges = [];\r\n    let nodes = [];\r\n\r\n    for (let i = 0; i < V; i++) {\r\n        nodes.push({id: i, label: i.toString()});\r\n        for (let j = i + 1; j < V; j++) {\r\n            edges.push({from: i, to: j});\r\n        }\r\n    }\r\n\r\n    return {nodes: nodes, edges: edges, directed: false, weighted: false};\r\n};\r\n\r\nconst hypercubeGraph = (D) => {\r\n    let edges = [];\r\n    let nodes = [];\r\n\r\n    let numNodes = Math.pow(2, D);\r\n\r\n    let pad = (str, max) => {\r\n        return str.length < max ? pad(\"0\" + str, max) : str;\r\n    };\r\n\r\n    const generateDifferByOne = (input, numBits) => {\r\n        let inputBits = pad((input).toString(2), numBits).split(\"\").reverse();\r\n        let allDiffer = [];\r\n\r\n        // 1 bit difference from input, increasing order, none less than input\r\n        for (let b = 0; b < numBits; b++) {\r\n            if (inputBits[b] === \"0\") {\r\n                let newNum = inputBits.slice();\r\n                newNum[b] = \"1\";\r\n                allDiffer.push(parseInt(newNum.reverse().join(\"\"), 2));\r\n            }\r\n        }\r\n\r\n        return allDiffer;\r\n    };\r\n\r\n    for (let i = 0; i < numNodes; i++) {\r\n        nodes.push({id: i, label: pad(i.toString(2), D)});\r\n        generateDifferByOne(i, D).forEach((j) => {\r\n            edges.push({from: i, to: j});\r\n        });\r\n    }\r\n\r\n    return help.deepFreeze({nodes: nodes, edges: edges, directed: false, weighted: false});\r\n};\r\n\r\nconst newCustomGraph = (V, directed = false, weighted = false) => {\r\n    let nodes = [];\r\n    for (let i = 0; i < V; i++) {\r\n        nodes.push({id: i, label: i.toString()});\r\n    }\r\n\r\n    return help.deepFreeze({nodes: nodes, edges: [], directed: directed, weighted: weighted});\r\n};\r\n\r\nexport default {\r\n    graphNames: help.deepFreeze([\"Petersen\", \"Konigsberg\", \"Complete\", \"Hypercube\"]),\r\n    Petersen: () => (help.deepFreeze({\r\n        edges: petersenEdges,\r\n        nodes: gHelp.interpolateNodesFromEdges(petersenEdges),\r\n        directed: false,\r\n        weighted: false,\r\n    })),\r\n    Konigsberg: () => (help.deepFreeze({\r\n        edges: konigsbergEdges,\r\n        nodes: gHelp.interpolateNodesFromEdges(konigsbergEdges),\r\n        directed: false,\r\n        weighted: false,\r\n    })),\r\n    Complete: () => {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(completeGraph(vals[0]), false, true, true);\r\n            },\r\n            \"Configurable Complete Graph\", \"Go\",\r\n            [{\r\n                type: \"numeric\", initialValue: 5, label: \"Number of Vertices\", validationFunc: (v) => {\r\n                    return v >= 0 || \"Number of vertices must be non-negative\";\r\n                }\r\n            }]);\r\n    },\r\n    Hypercube: () => {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(hypercubeGraph(vals[0]), false, true, true);\r\n            },\r\n            \"Configurable Hypercube Graph\", \"Go\",\r\n            [{\r\n                type: \"numeric\", initialValue: 3, label: \"Number of Dimensions\", validationFunc: (v) => {\r\n                    return v >= 0 || \"Number of dimensions must be non-negative\";\r\n                }\r\n            }]);\r\n    },\r\n    Custom: () => {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(newCustomGraph(vals[0], vals[1], vals[2]), false, true, true);\r\n            },\r\n            \"Configurable Graph\", \"Go\",\r\n            [\r\n                {\r\n                    type: \"numeric\", initialValue: 0, label: \"Number of Vertices\", validationFunc: (v) => {\r\n                        return v >= 0 || \"Number of vertices must be non-negative\";\r\n                    }\r\n                },\r\n                {type: \"checkbox\", initialValue: false, label: \"Directed\"},\r\n                {type: \"checkbox\", initialValue: false, label: \"Weighted\"},\r\n            ]);\r\n    },\r\n};\r\n"],"sourceRoot":""}
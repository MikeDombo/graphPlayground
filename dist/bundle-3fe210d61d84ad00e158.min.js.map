{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/graphState.ts","webpack:///./src/js/genericHelpers.ts","webpack:///./src/js/graphHelpers.ts","webpack:///./src/js/main.ts","webpack:///./src/js/settings.ts","webpack:///./src/js/UIInteractions.ts","webpack:///./src/js/app.ts","webpack:///./src/js/GraphAlgorithmWorker.ts","webpack:///./src/js/GraphImmut/NodeImmut.ts","webpack:///./src/js/GraphImmut/EdgeImmut.ts","webpack:///./src/js/GraphImmut/GraphImmut.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","4","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","head","document","getElementsByTagName","script","createElement","charset","timeout","nc","setAttribute","src","p","0","1","setTimeout","onScriptComplete","type","target","event","onerror","onload","clearTimeout","chunk","errorType","realSrc","error","Error","request","undefined","appendChild","all","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","oe","err","console","jsonpArray","window","oldJsonpFunction","bind","slice","getInt","v","parseInt","GraphState","setUpToDate","listOptions","upToDate","forEach","always","indexOf","makeAndPrintProperties","getProperty","updateIfNotUpdated","a","find","applyFunc","state","graphProperties","recalcLong","directional","settings","getOption","vertices","graph","getNumberOfNodes","edges","getNumberOfEdges","_a","sent","keys","__awaiter","_this","printableProperties","map","_b","_c","printGraphProperties","properties","k","_genericHelpers__WEBPACK_IMPORTED_MODULE_2__","toTitleCase","trim","htmlEncode","jquery__WEBPACK_IMPORTED_MODULE_0__","html","addEdge","from","to","weight","edgeFrom","edgeTo","main","setData","nodes","clearColorFromNodes","getAllNodes","getAllEdges","addNode","label","x","y","editNode","id","iId","getGraphData","editEdge","newWeight","oldWeight","newGraph","_GraphImmut_GraphImmut__WEBPACK_IMPORTED_MODULE_3__","deleteEdge","deleteNode","color","nodeIDToLabel","getNode","_GraphImmut_NodeImmut__WEBPACK_IMPORTED_MODULE_4__","getLabel","toString","nodeLabelToID","filter","node","toLowerCase","getID","rID","found","getGraphAsDataSet","isWeighted","vis_index_network__WEBPACK_IMPORTED_MODULE_1__","setLocations","locations","newNodes","getAllNodesAsImmutableList","getAttribute","set","getAllEdgesAsImmutableList","isDirected","clearColors","directed","weighted","backHistory","forwardHistory","maxHistory","ui","makeAndPrintGraphColoring","makeAndPrintEulerian","getAlgorithms","makeAndPrintIsCyclic","stronglyConnectedComponents","connectedComponents","graphColoring","eulerian","Chromatic Number","Connected Components","Strongly Connected Components","cyclic","defaultCancelCb","$modal","modal","self","deepFreeze","freeze","getOwnPropertyNames","prop","isFrozen","sort","arr","compareFunction","datasetToArray","ds","key","keepOnlyKeys","getFileExtension","filename","split","string","text","replace","printout","escape","flatten","rotate","max","iterable","reduce","b","Math","str","match","toUpperCase","showSimpleModal","title","body","showFormModal","initialValue","makeFormModal","successText","form","footer","f","class","formRow","basicMap","extraAttrs","attrname","validFunc","container","validationFunc","generalValidator","valueMutator","$v","val","valid","removeClass","next","remove","addClass","after","append","checked","for","prepend","clickDismiss","$b","onclick","on","parseFloat","$options_1","optionText","oText","oIndex","optionValues","$footer","tabindex","role","aria-hidden","data-dismiss","aria-label","off","last","trigger","first","successCb","cancelCb","vals","hasErrors","each","tagName","attr","files","hasClass","__webpack_exports__","findVertexDegreesDirectional","adjacencyMatrix","degrees","out","in","outV","interpolateNodesFromEdges","main_self","graphState","getElementById","visWeightEdgeEdit","callback","genericHelpers","visOptions","interaction","hover","manipulation","$popup","saveData","cancelEdit","confirm","network","_data","fromId","toId","operation","nodeLabelIDValidator","applyColors","graphColors","chromaticNumber","colors","randomColor_default","count","luminosity","G","recalcProps","graphChanged","rearrangeGraph","saveState","changeOption","g","GraphImmut","randomizeNetworkLayoutSeed","getPositions","disableEditMode","enableEditMode","printGraphAlgorithms","saveStateLocalStorage","getStateForSaving","jquery","parent","includes","Array","isArray","undo","applyState","redo","newState","firstLoad","currentState","pop","oldKey","then","checkForLocalStorage","localStorage","setItem","JSON","stringify","shuffleNetworkLayout","round","random","layoutEngine","randomSeed","initialRandomSeed","addNetworkListeners","editEdgeMode","lastNetworkClickEvent","has","parents","deleteSelected","ctrlKey","shiftKey","Settings","removeItem","saveSettings","current","loadSettings","parse","getItem","setAll","setOptions","physics","arrows","editWithoutDrag","option","defaults","resetToDefault","asChangedDirectedWeighted","direction","weights","nodePhysics","makeAndPrintShortestPath","fn","values","source","sink","w","GraphAlgorithmWorker_default","addEventListener","terminate","pathExists","distance","cost","path","postMessage","args","convertToGraphImmut","makeAndPrintComponents","stronglyConnected","cc","componentKey","components","UIInteractions","display","makeAndPrintFFMCMF","makeAndPrintKruskal","makeAndPrintTopologicalSort","makeAndPrintDirectionalEulerian","registerListeners","this","makeSimpleClickListener","selector","preventDefault","printHelp","printOptions","UIInteractions_awaiter","predefined","default","Petersen","Konigsberg","Complete","Hypercube","Custom","makeImportFileModal","makeImportTextModal","makeExportFileModal","makeExportTextModal","asDirected","asUndirected","asWeighted","asUnweighted","printGC","w_1","scc","graphHelpers","getFullAdjacency","getAllOutDegrees","cb","maxFlow","flowPath","flow","capacity","totalWeight","mst","getFrom","getTo","$div","empty","addAlgoToPane","alg","href","index_network","js_UIInteractions","singleton","install","Raven","loadDefault","jsonGraph","app_awaiter","Worker","NodeImmut","attributes","_newTarget","toPlain","toReturn","attribute","getAllAttributes","assign","EdgeImmut","getWeight","filterNodeExtraAttr","obj","genericEdgesToImmutEdges","nodeMap","newEdges","immutable","edge","GraphImmut_EdgeImmut","genericNodesToImmutNodes","floor","nodeNum_1","GraphImmut_GraphImmut","numNodes","size","numEdges","alignNodeIDs","alignTo","nodeCount","rich","deleteAll","foundOneEdge","foundFirst","index","toArray","doubleEdges","addedEdges","getNodeAdjacency","adj","areAdjacent","id1","id2","getEdgesBetween","edgeList","getMinWeightEdgeBetween","minWeight","Infinity","reduceMultiGraph","reducer","multiEdges","uniques","Set","acc","keep","duplicateEdge"],"mappings":"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","file":"bundle-3fe210d61d84ad00e158.min.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \tvar installedChunks = {\n \t\t4: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar head = document.getElementsByTagName('head')[0];\n \t\t\t\tvar script = document.createElement('script');\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \"-\" + {\"0\":\"c7027e783c58e896ca87\",\"1\":\"4e8843ba0717eff81f36\"}[chunkId] + \".min.js\";\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tfunction onScriptComplete(event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\tvar error = new Error('Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')');\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\thead.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([44,2]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","\"use strict\";\r\n\r\nimport * as $ from 'jquery';\r\nimport {DataSet, Edge} from 'vis/index-network';\r\nimport help from './genericHelpers';\r\nimport GraphImmut from './GraphImmut/GraphImmut';\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\nimport NodeImmut, {NodeImmutPlain} from \"./GraphImmut/NodeImmut\";\r\n\r\ninterface UpToDateProperties {\r\n    name: string;\r\n    upToDate: boolean;\r\n    type: string;\r\n    always?: boolean;\r\n    applyFunc?: () => void;\r\n    [index: string]: string|boolean|(() => void)\r\n}\r\n\r\ninterface GraphProperties {\r\n    vertices: number;\r\n    edges: number;\r\n    eulerian: boolean;\r\n    \"Chromatic Number\": number | null;\r\n    \"Connected Components\": number | null;\r\n    \"Strongly Connected Components\": number | null;\r\n    cyclic: boolean;\r\n\r\n    [index: string]: boolean | number | null;\r\n}\r\n\r\ninterface GraphStateData {\r\n    stronglyConnectedComponents: null | { [key: number]: number };\r\n    connectedComponents: null | { [key: number]: number };\r\n    graphColoring: null | number[];\r\n\r\n    [index: string]: null | number[] | { [key: number]: number };\r\n}\r\n\r\nexport interface AddNodeI {\r\n    id?: number\r\n    label: string;\r\n    x: number;\r\n    y: number;\r\n    color?:string;\r\n}\r\n\r\nexport interface GraphStateHistory {\r\n    upToDate: UpToDateProperties[];\r\n    state: GraphStateData;\r\n    graph: GraphImmut;\r\n    graphProperties: GraphProperties;\r\n    [index: string]: UpToDateProperties[]|GraphStateData|GraphImmut|GraphProperties;\r\n}\r\n\r\nconst getInt = (v: string|number): number => {\r\n    if(typeof v === 'number'){\r\n        return v;\r\n    }\r\n    return parseInt(v);\r\n};\r\n\r\nexport default class GraphState {\r\n    public static backHistory: GraphStateHistory[] = [];\r\n    public static forwardHistory: GraphStateHistory[] = [];\r\n    public static maxHistory = 10;\r\n    public static upToDate: UpToDateProperties[] = [\r\n        {\r\n            name: \"Chromatic Number\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {\r\n            name: \"graphColoring\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {name: \"vertices\", upToDate: true, always: true, type: \"property\"},\r\n        {name: \"edges\", upToDate: true, always: true, type: \"property\"},\r\n        {\r\n            name: \"eulerian\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintEulerian();\r\n            }\r\n        },\r\n        {\r\n            name: \"Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components').applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"connectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components').applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"Strongly Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components').applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"stronglyConnectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components').applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"cyclic\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintIsCyclic();\r\n            }\r\n        },\r\n    ];\r\n    public static state: GraphStateData = {\r\n        stronglyConnectedComponents: null,\r\n        connectedComponents: null,\r\n        graphColoring: null,\r\n    };\r\n    public static graph: GraphImmut = null;\r\n    public static graphProperties: GraphProperties = {\r\n        vertices: 0,\r\n        edges: 0,\r\n        eulerian: false,\r\n        \"Chromatic Number\": null,\r\n        \"Connected Components\": null,\r\n        \"Strongly Connected Components\": null,\r\n        cyclic: false,\r\n    };\r\n\r\n    static setUpToDate(value = false, listOptions?: string[]) {\r\n        const all = listOptions === null || typeof listOptions === \"undefined\";\r\n        let property = false;\r\n        GraphState.upToDate.forEach((v) => {\r\n            if ((!(\"always\" in v) || !v.always) && (all || listOptions.indexOf(v.name) > -1)) {\r\n                v.upToDate = value;\r\n                if (v.type === \"property\") {\r\n                    property = true;\r\n                }\r\n            }\r\n        });\r\n        if (property) {\r\n            GraphState.makeAndPrintProperties();\r\n        }\r\n    }\r\n\r\n    static getProperty(property: string, updateIfNotUpdated = false): any {\r\n        const a = GraphState.upToDate.find((v) => {\r\n            return (\"name\" in v && v.name === property);\r\n        });\r\n        if (!a.upToDate) {\r\n            if (\"applyFunc\" in a && updateIfNotUpdated) {\r\n                a.applyFunc();\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        if (a.type === \"state\") {\r\n            return GraphState.state[property];\r\n        }\r\n        return GraphState.graphProperties[property];\r\n    }\r\n\r\n    static async makeAndPrintProperties(recalcLong = false) {\r\n        const directional = window.settings.getOption(\"direction\");\r\n\r\n        GraphState.graphProperties.vertices = GraphState.graph.getNumberOfNodes();\r\n        GraphState.graphProperties.edges = GraphState.graph.getNumberOfEdges();\r\n\r\n        if (!directional) {\r\n            await GraphState.getProperty(\"eulerian\", true);\r\n        }\r\n\r\n        const p = Object.keys(GraphState.graphProperties);\r\n        if (recalcLong) {\r\n            p.forEach(async (v) => {\r\n                await GraphState.getProperty(v, true);\r\n            });\r\n        }\r\n\r\n        const printableProperties: any = {};\r\n        await Promise.all(p.map(async (v) => {\r\n            printableProperties[v] = await GraphState.getProperty(v);\r\n        }));\r\n\r\n        GraphState.printGraphProperties(printableProperties);\r\n    }\r\n\r\n    static printGraphProperties(properties: any) {\r\n        let p = \"\";\r\n        Object.keys(properties).forEach((k) => {\r\n            if (properties[k] !== null) {\r\n                p += `${help.toTitleCase(k)}: ${properties[k]}\\n`;\r\n            }\r\n        });\r\n        p = p.trim();\r\n        p = help.htmlEncode(p);\r\n        $(\"#graphProps\").html(`<p class='nav-link'>${p}</p>`);\r\n    }\r\n\r\n    static addEdge(from: number|string, to: number|string, weight = 0, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        graph = graph.addEdge(edgeFrom, edgeTo, weight);\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[]\r\n        });\r\n    }\r\n\r\n    static addNode(data: AddNodeI, graph = GraphState.graph) {\r\n        graph = graph.addNode({label: data.label, x: data.x, y: data.y});\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[]\r\n        });\r\n    }\r\n\r\n    static editNode(id: number|string, label: string, graph = GraphState.graph) {\r\n        const iId = getInt(id);\r\n        graph = graph.editNode(iId, {label});\r\n        window.main.setData(GraphState.getGraphData(graph), false, false);\r\n    }\r\n\r\n    static editEdge(from: number|string, to: number|string, newWeight: number, oldWeight: number, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        const newGraph = graph.editEdge(edgeFrom, edgeTo, newWeight, oldWeight);\r\n        if (newGraph instanceof GraphImmut) {\r\n            window.main.setData(GraphState.getGraphData(newGraph), false, false);\r\n        }\r\n    }\r\n\r\n    static deleteEdge(from: number|string, to: number|string, weight: number = null, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        graph = graph.deleteEdge(edgeFrom, edgeTo, weight, false);\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[]\r\n        });\r\n    }\r\n\r\n    static deleteNode(id: number|string, graph = GraphState.graph) {\r\n        const iId = getInt(id);\r\n        const newGraph = graph.deleteNode(iId);\r\n        if (newGraph instanceof GraphImmut) {\r\n            window.main.setData({\r\n                nodes: GraphState.clearColorFromNodes(newGraph.getAllNodes() as NodeImmutPlain[]),\r\n                edges: newGraph.getAllEdges() as EdgeImmutPlain[]\r\n            });\r\n        }\r\n    }\r\n\r\n    static clearColorFromNodes(nodes: NodeImmutPlain[]): NodeImmutPlain[] {\r\n        nodes.forEach((v) => {\r\n            v.color = null;\r\n        });\r\n        return nodes;\r\n    }\r\n\r\n    static nodeIDToLabel(id: number, graph = GraphState.graph): string {\r\n        const n = graph.getNode(id, true);\r\n        if (n !== false && n !== null && n instanceof NodeImmut && n.getLabel().trim().length > 0) {\r\n            return n.getLabel().trim();\r\n        }\r\n\r\n        return id.toString();\r\n    }\r\n\r\n    // Preferentially search by ID, label, and case-insensitive label\r\n    static nodeLabelToID(label: string, graph = GraphState.graph) {\r\n        let n = graph.getAllNodes(true) as NodeImmut[];\r\n        n = n.filter((node) => {\r\n            return node.getLabel().toLowerCase() === label.toLowerCase() || node.getID().toString() === label;\r\n        });\r\n\r\n        if (n.length === 0) {\r\n            return -1;\r\n        }\r\n        else if (n.length === 1) {\r\n            return n[0].getID();\r\n        }\r\n\r\n        let rID = -1;\r\n        let found = false;\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getID().toString() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel().toLowerCase() === label.toLowerCase()) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        return rID;\r\n    }\r\n\r\n    // Return graph as a Vis compatible dataset\r\n    static getGraphAsDataSet(graph: GraphImmut): { nodes: DataSet<vis.Node>; edges: DataSet<vis.Edge> } {\r\n        const d = GraphState.getGraphData(graph);\r\n        if (graph.isWeighted()) {\r\n            d.edges.forEach((e) => {\r\n                e.label = e.weight.toString();\r\n            });\r\n        }\r\n\r\n        return {nodes: new DataSet(d.nodes as vis.Node[]), edges: new DataSet(d.edges as vis.Edge[])};\r\n    }\r\n\r\n    static setLocations(locations: {[key: string]: {x: number; y: number}}, graph = GraphState.graph): GraphImmut {\r\n        let newNodes = graph.getAllNodesAsImmutableList();\r\n        Object.keys(locations).forEach((i) => {\r\n            const v = locations[i];\r\n            const node = newNodes.get(parseInt(i));\r\n            // Only change when there is actually a new position\r\n            if (node.getAttribute(\"x\") !== v.x || node.getAttribute(\"y\") !== v.y) {\r\n                // Batch up all changes that we'll be making\r\n                newNodes = newNodes.set(parseInt(i), node.editNode(node.getLabel(), {x: v.x, y: v.y}));\r\n            }\r\n        });\r\n\r\n        return new GraphImmut(newNodes, graph.getAllEdgesAsImmutableList(), graph.isDirected(), graph.isWeighted());\r\n    }\r\n\r\n    static getGraphData(graph = GraphState.graph, clearColors = false): GraphPlain {\r\n        const nodes = graph.getAllNodes() as NodeImmutPlain[];\r\n        return {\r\n            nodes: clearColors ? GraphState.clearColorFromNodes(nodes) : nodes,\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[],\r\n            directed: graph.isDirected(),\r\n            weighted: graph.isWeighted()\r\n        };\r\n    }\r\n}\r\n","\"use strict\";\r\n\r\nimport * as $ from 'jquery';\r\n\r\ndeclare interface ModalFormRow {\r\n    type: string;\r\n    label?: string;\r\n    initialValue?: any;\r\n    id?: string | number;\r\n    extraAttrs?: any;\r\n    validationFunc?: (value?: any, container?: JQuery) => boolean | string;\r\n    clickDismiss?: boolean;\r\n    onclick?: (...args: any[]) => void;\r\n    optionText?: any[];\r\n    optionValues?: any[];\r\n}\r\n\r\ndeclare interface BasicMapType {\r\n    class: string;\r\n    id: string;\r\n    value: any,\r\n\r\n    [key: number]: any,\r\n\r\n    [key: string]: any\r\n}\r\n\r\nconst defaultCancelCb = ($modal: JQuery) => {\r\n    $modal.modal(\"hide\");\r\n};\r\n\r\nconst self = {\r\n    deepFreeze: <T>(o: T): Readonly<T> => {\r\n        Object.freeze(o);\r\n\r\n        Object.getOwnPropertyNames(o).forEach((prop: string | number) => {\r\n            if (o.hasOwnProperty(prop) && (o as any)[prop] !== null\r\n                && (typeof (o as any)[prop] === \"object\" || typeof (o as any)[prop] === \"function\")\r\n                && !Object.isFrozen((o as any)[prop])) {\r\n                self.deepFreeze((o as any)[prop]);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    },\r\n\r\n    sort: <T>(arr: T[], compareFunction: (a: any, b: any) => number): T[] => {\r\n        return [...arr].sort(compareFunction);\r\n    },\r\n\r\n    datasetToArray: (ds: any, key: string): Readonly<any[]> => {\r\n        const r: any[] = [];\r\n        ds.forEach((v: {[index: string]: any}) => {\r\n            r.push(v[key]);\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    keepOnlyKeys: <T>(arr: T[], keys: string[]): Readonly<T[]> => {\r\n        arr = arr.slice();\r\n        arr.forEach((v: any) => {\r\n            const k = Object.keys(v);\r\n            k.forEach((key) => {\r\n                if (keys.indexOf(key) < 0) {\r\n                    delete v[key];\r\n                }\r\n            });\r\n        });\r\n        return self.deepFreeze(arr);\r\n    },\r\n\r\n    getFileExtension: (filename: string): string => {\r\n        return filename.split(\".\").splice(-1)[0];\r\n    },\r\n\r\n    htmlEncode: (string: string): string => {\r\n        string = $(\"<div>\").text(string).html();\r\n        string = string.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>');\r\n        return string;\r\n    },\r\n\r\n    printout: (text: string, escape?: string): void => {\r\n        if (escape) {\r\n            text = this.htmlEncode(escape);\r\n        }\r\n        $(\"#printout\").html(text);\r\n    },\r\n\r\n    flatten: <T>(map: { [key: string]: T }): Readonly<T[]> => {\r\n        const r: T[] = [];\r\n        Object.keys(map).forEach((i) => {\r\n            r.push(map[i]);\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    rotate: (map: any): Readonly<any> => {\r\n        const r: any = {};\r\n        Object.keys(map).forEach((i) => {\r\n            if (map[i] in r) {\r\n                r[map[i]].push(i);\r\n            }\r\n            else {\r\n                r[map[i]] = [i];\r\n            }\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    max: (iterable: any[]): number => {\r\n        return iterable.reduce((a, b) => {\r\n            return Math.max(a, b);\r\n        });\r\n    },\r\n\r\n    toTitleCase: (str: string): string => {\r\n        return str.replace(/(?:^|\\s)\\w/g, (match) => {\r\n            return match.toUpperCase();\r\n        });\r\n    },\r\n\r\n    showSimpleModal: (title: string, body: string): void => {\r\n        self.showFormModal(null, title, null, [{type: \"html\", initialValue: body}], null, false);\r\n    },\r\n\r\n    makeFormModal: (title: string, successText: string, form: ModalFormRow[], footer = true): JQuery => {\r\n        const f = $(\"<div>\", {class: \"modal-body form-group\"});\r\n        form.forEach((formRow, i) => {\r\n            if (!(\"initialValue\" in formRow)) {\r\n                formRow.initialValue = \"\";\r\n            }\r\n\r\n            let id = \"form-modal-\" + i;\r\n            if (\"id\" in formRow && formRow.id !== \"\" && formRow.id !== null && typeof formRow.id === \"string\") {\r\n                id = formRow.id;\r\n            }\r\n\r\n            const basicMap: BasicMapType = {class: \"form-control\", id, value: formRow.initialValue};\r\n\r\n            if (\"extraAttrs\" in formRow) {\r\n                Object.keys(formRow.extraAttrs).forEach((attrname) => {\r\n                    if (typeof formRow.extraAttrs[attrname] !== \"function\") {\r\n                        basicMap[attrname] = formRow.extraAttrs[attrname];\r\n                    }\r\n                });\r\n            }\r\n\r\n            let validFunc = (value?: any, container?: JQuery): string | boolean => true;\r\n            if (\"validationFunc\" in formRow) {\r\n                validFunc = formRow.validationFunc;\r\n            }\r\n\r\n            const generalValidator = (event: any, valueMutator: (v: any) => any = null) => {\r\n                const $v = $(event.target);\r\n                let val = $v.val();\r\n                if (valueMutator !== null && typeof valueMutator === \"function\") {\r\n                    val = valueMutator(val);\r\n                }\r\n                const valid = validFunc(val, $v);\r\n\r\n                if (valid === true) {\r\n                    $v.removeClass(\"is-invalid\").next(\"#feedback-\" + i).remove();\r\n                }\r\n                else {\r\n                    $v.addClass(\"is-invalid\");\r\n                    if ($v.next(\"#feedback-\" + i).length === 0) {\r\n                        $v.after($(\"<div>\", {class: \"invalid-feedback\", id: \"feedback-\" + i}).text(valid));\r\n                    }\r\n                }\r\n            };\r\n\r\n            if (formRow.type === \"html\") {\r\n                f.append($(formRow.initialValue));\r\n            }\r\n            else if (formRow.type === \"checkbox\") {\r\n                basicMap.type = \"checkbox\";\r\n                basicMap.class = \"form-check-input\";\r\n                delete basicMap.value;\r\n                if (formRow.initialValue) {\r\n                    basicMap.checked = \"\";\r\n                }\r\n\r\n                f.append($(\"<div>\", {class: \"form-check\"})\r\n                    .append($(\"<label>\", {for: id, class: \"form-check-label\"})\r\n                        .text(formRow.label).prepend($(\"<input>\", basicMap))\r\n                    )\r\n                );\r\n            }\r\n            else {\r\n                f.append($(\"<label>\", {for: id, class: \"col-form-label\"}).text(formRow.label));\r\n\r\n                if (formRow.type === \"button\") {\r\n                    if (\"clickDismiss\" in formRow && formRow.clickDismiss === true) {\r\n                        basicMap.class += \" btn-dismiss\";\r\n                    }\r\n                    const $b = $(\"<button>\", basicMap).text(formRow.initialValue);\r\n                    if (\"onclick\" in formRow && typeof formRow.onclick === \"function\") {\r\n                        $b.on(\"click\", formRow.onclick);\r\n                    }\r\n                    f.append($b);\r\n                }\r\n                else if (formRow.type === \"numeric\") {\r\n                    basicMap.type = \"number\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", (e) => {\r\n                        generalValidator(e, parseFloat);\r\n                    }));\r\n                }\r\n                else if (formRow.type === \"text\") {\r\n                    basicMap.type = \"text\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                }\r\n                else if (formRow.type === \"file\") {\r\n                    basicMap.type = \"file\";\r\n                    basicMap.class = \"form-control-file form-control\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                }\r\n                else if (formRow.type === \"textarea\") {\r\n                    const $b = $(\"<textarea>\", basicMap).on(\"blur validate\", generalValidator);\r\n                    if (\"onclick\" in formRow) {\r\n                        $b.on(\"click\", formRow.onclick);\r\n                    }\r\n                    f.append($b);\r\n                }\r\n                else if (formRow.type === \"select\") {\r\n                    const $options = $(\"<select>\", basicMap);\r\n                    formRow.optionText.forEach((oText, oIndex) => {\r\n                        if (oIndex < formRow.optionValues.length) {\r\n                            $options.append($(\"<option>\", {value: formRow.optionValues[oIndex]}).text(oText));\r\n                        }\r\n                        else {\r\n                            $options.append($(\"<option>\").text(oText));\r\n                        }\r\n                    });\r\n                    f.append($options.on(\"blur validate\", generalValidator));\r\n                }\r\n            }\r\n        });\r\n\r\n        let $footer = $(\"<div>\", {class: \"modal-footer\"})\r\n            .append($(\"<button>\", {class: \"btn btn-success\", type: \"button\"}).text(successText))\r\n            .append($(\"<button>\", {class: \"btn btn-danger btn-cancel\", type: \"button\"}).text(\"Cancel\"));\r\n\r\n        if (footer === false) {\r\n            $footer = null;\r\n        }\r\n\r\n        const $modal = ($(\"<div>\", {class: \"modal fade\", tabindex: \"-1\", role: \"dialog\", \"aria-hidden\": \"true\"}));\r\n        $modal\r\n            .append($(\"<div>\", {class: \"modal-dialog\"})\r\n                .append($(\"<div>\", {class: \"modal-content\"})\r\n                    .append($(\"<div>\", {class: \"modal-header\"})\r\n                        .append($(\"<h5>\", {class: \"modal-title\"}).text(title))\r\n                        .append($(\"<button>\", {class: \"close\", \"data-dismiss\": \"modal\", \"aria-label\": \"close\"})\r\n                            .append($(\"<span>\", {\"aria-hidden\": \"true\"}).html(\"&times;\"))\r\n                        )\r\n                    )\r\n                    .append(f)\r\n                    .append($footer)\r\n                )\r\n            );\r\n        $modal.find(\"input, textarea\").off(\"keyup\").on(\"keyup\", (e) => {\r\n            if (e.key === \"Enter\") {\r\n                $(\".btn-success\").last().trigger(\"click\");\r\n            }\r\n        });\r\n        $modal.on(\"shown.bs.modal\", () => {\r\n            $modal.find(\"input[type='text'], input[type='number'], textarea\").first().trigger(\"focus\");\r\n        });\r\n\r\n        return $modal;\r\n    },\r\n\r\n    showFormModal: (successCb: ($modal: JQuery, vals: any[]) => void,\r\n                    title: string, successText: string, form: ModalFormRow[],\r\n                    cancelCb: ($modal: JQuery) => void = defaultCancelCb, footer = true) => {\r\n        const $modal = self.makeFormModal(title, successText, form, footer);\r\n\r\n        $modal.on(\"click\", \".btn-cancel\", () => {\r\n            if (typeof cancelCb === \"function\") {\r\n                cancelCb($modal);\r\n            }\r\n            else {\r\n                $modal.modal(\"hide\");\r\n            }\r\n        }).on(\"click\", \".btn-dismiss\", () => {\r\n            $modal.modal(\"hide\");\r\n        }).on(\"click\", \".btn-success\", () => {\r\n            const vals: any[] = [];\r\n            let hasErrors = false;\r\n\r\n            $modal.find(\"input, textarea, select\").each((i, v) => {\r\n                const $v = $(v);\r\n\r\n                if (($v as any).tagName === \"SELECT\") {\r\n                    vals.push($v.find(\":selected\").val());\r\n                }\r\n                else if ($v.attr(\"type\") === \"checkbox\") {\r\n                    vals.push($v.prop(\"checked\"));\r\n                }\r\n                else if ($v.attr(\"type\") === \"file\") {\r\n                    vals.push(($v.get(0) as any).files);\r\n                }\r\n                else if ($v.attr(\"type\") === \"number\") {\r\n                    vals.push(parseFloat($v.val() as string));\r\n                }\r\n                else {\r\n                    vals.push($v.val());\r\n                }\r\n\r\n                if ($v.trigger(\"validate\").hasClass(\"is-invalid\")) {\r\n                    hasErrors = true;\r\n                }\r\n\r\n            });\r\n\r\n            if (!hasErrors && typeof successCb === \"function\") {\r\n                successCb($modal, vals);\r\n            }\r\n        }).on(\"hidden.bs.modal\", () => {\r\n            $modal.remove();\r\n        }).modal(\"show\");\r\n    }\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\n\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\nimport {NodeImmutPlain} from \"./GraphImmut/NodeImmut\";\r\n\r\ninterface Degree {\r\n    in: number;\r\n    out: number;\r\n}\r\n\r\nexport default {\r\n    findVertexDegreesDirectional: (adjacencyMatrix: Array<Array<number>>): Degree[] => {\r\n        // Adjacency stores IDs of edges TO\r\n        const degrees: Degree[] = [];\r\n        adjacencyMatrix.forEach((v, i) => {\r\n            if (i in degrees) {\r\n                degrees[i].out += v.length;\r\n            }\r\n            else {\r\n                degrees[i] = {out: v.length, in: 0};\r\n            }\r\n            v.forEach((outV) => {\r\n                if (outV in degrees) {\r\n                    degrees[outV].in += 1;\r\n                }\r\n                else {\r\n                    degrees[outV] = {in: 1, out: 0};\r\n                }\r\n            });\r\n        });\r\n\r\n        return degrees;\r\n    },\r\n\r\n    interpolateNodesFromEdges: (edges: EdgeImmutPlain[]): NodeImmutPlain[] => {\r\n        const nodes: NodeImmutPlain[] = [];\r\n        edges.forEach((v) => {\r\n            nodes[v.from] = {id: v.from, label: \"\" + v.from};\r\n            nodes[v.to] = {id: v.to, label: \"\" + v.to};\r\n        });\r\n\r\n        return nodes;\r\n    },\r\n};\r\n","\"use strict\";\r\n\r\nimport * as $ from 'jquery';\r\nimport help from './genericHelpers';\r\nimport randomColor from 'randomcolor';\r\nimport GraphState, {AddNodeI, GraphStateHistory} from './graphState';\r\nimport GraphImmut from \"./GraphImmut/GraphImmut\";\r\nimport {NodeImmutPlain} from \"./GraphImmut/NodeImmut\";\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\n\r\nexport interface MainI {\r\n    graphState: typeof GraphState;\r\n    container: HTMLElement;\r\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback: Function) => void;\r\n    visOptions: {\r\n        interaction: { hover: boolean };\r\n        manipulation: {\r\n            addNode: (data: AddNodeI, callback: Function) => void;\r\n            editNode: (data: AddNodeI, callback: Function) => void;\r\n            addEdge: (data: VisEdgeInternal, callback?: Function) => void;\r\n            editEdge: (data: VisEdgeInternal, callback: Function) => void;\r\n            deleteEdge: (data: { edges: string[] }, callback?: Function) => void;\r\n            deleteNode: (data: { nodes: string[] }, callback: Function) => void\r\n        }\r\n    };\r\n    cancelEdit: (callback: Function) => void;\r\n    saveData: (data: any, callback: Function, operation: string, label: string) => void;\r\n    nodeLabelIDValidator: (v: string) => (boolean | string);\r\n    applyColors: () => Promise<void>;\r\n    setData: (data: GraphPlain, recalcProps?: boolean, graphChanged?: boolean, rearrangeGraph?: boolean) => void;\r\n    saveState: () => void;\r\n    getStateForSaving: () => GraphStateHistory;\r\n    undo: () => void;\r\n    redo: () => void;\r\n    applyState: (undo?: boolean, newState?: any) => void;\r\n    saveStateLocalStorage: () => void;\r\n    shuffleNetworkLayout: () => void;\r\n    randomizeNetworkLayoutSeed: (network: VisNetworkInternals) => void;\r\n    addNetworkListeners: (network: vis.Network) => void\r\n}\r\n\r\ninterface VisNetworkEvent {\r\n    edges: vis.DataSet<vis.Edge>;\r\n    nodes: vis.DataSet<vis.Node>;\r\n}\r\n\r\ninterface VisNetworkInternals extends vis.Network {\r\n    layoutEngine: {\r\n        randomSeed: number,\r\n        initialRandomSeed: number\r\n    }\r\n}\r\n\r\ninterface VisEditEdgeInternal {\r\n    from: { id: string | number };\r\n    to: { id: string | number };\r\n    label?: string\r\n}\r\n\r\ninterface VisEdgeInternal {\r\n    from: string | number;\r\n    to: string | number;\r\n    id: string;\r\n    label?: string\r\n}\r\n\r\nconst self: MainI = {\r\n    graphState: GraphState,\r\n    container: document.getElementById('network'),\r\n    // Function used to overwrite the edge edit functionality when weights are active\r\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback) => {\r\n        help.showFormModal(($modal, vals) => {\r\n            callback(null);\r\n            $modal.modal(\"hide\");\r\n            const value = parseFloat(vals[0]);\r\n            GraphState.editEdge(data.from.id, data.to.id, value, parseFloat(data.label));\r\n        }, \"Edit Edge\", \"Save\", [\r\n            {\r\n                type: \"numeric\",\r\n                label: \"Weight/Capacity\",\r\n                initialValue: parseFloat(data.label)\r\n            }\r\n        ]);\r\n    },\r\n    visOptions: {\r\n        interaction: {hover: true},\r\n        manipulation: {\r\n            addNode: (data, callback) => {\r\n                const $popup = help.makeFormModal(\"Add Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: `<p>Node ID: ${GraphState.getProperty(\"vertices\")}</p>`\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: GraphState.getProperty(\"vertices\")}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"add\", $popup.find(\"input\").first().val() as string);\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            editNode: (data, callback) => {\r\n                const $popup = help.makeFormModal(\"Edit Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: `<p>Node ID: ${data.id}</p>`\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: data.label}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"editNode\", $popup.find(\"input\").first().val() as string);\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            addEdge: (data, callback) => {\r\n                const apply = () => {\r\n                    if (typeof callback === \"function\") {\r\n                        callback(null);\r\n                    }\r\n                    GraphState.addEdge(data.from, data.to);\r\n                };\r\n                if (data.from === data.to) {\r\n                    if (confirm(\"Do you want to connect the node to itself?\")) {\r\n                        apply();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                apply();\r\n            },\r\n            editEdge: (data, callback) => {\r\n                callback(null);\r\n                self.visOptions.manipulation.deleteEdge({edges: [data.id]});\r\n                self.visOptions.manipulation.addEdge(data);\r\n            },\r\n            deleteEdge: (data, callback) => {\r\n                if (typeof callback === \"function\") {\r\n                    callback(null);\r\n                }\r\n                data.edges.forEach((v: any) => {\r\n                    let weight = null;\r\n                    if (typeof (window.network as any).body.data.edges._data[v].label !== \"undefined\") {\r\n                        weight = parseFloat((window.network as any).body.data.edges._data[v].label);\r\n                    }\r\n\r\n                    GraphState.deleteEdge((window.network as any).body.edges[v].fromId,\r\n                        (window.network as any).body.edges[v].toId, weight);\r\n                });\r\n            },\r\n            deleteNode: (data, callback) => {\r\n                callback(null);\r\n                data.nodes.forEach((v: string) => {\r\n                    GraphState.deleteNode(v);\r\n                });\r\n            },\r\n        },\r\n    },\r\n\r\n    cancelEdit: (callback) => {\r\n        if (typeof callback === \"function\") {\r\n            callback(null);\r\n        }\r\n    },\r\n\r\n    saveData: (data, callback, operation, label) => {\r\n        callback(null);\r\n\r\n        data.label = label;\r\n        if (operation === \"add\") {\r\n            GraphState.addNode(data);\r\n        }\r\n        else if (operation === \"editNode\") {\r\n            GraphState.editNode(data.id, data.label);\r\n        }\r\n    },\r\n\r\n    nodeLabelIDValidator: (v) => {\r\n        if (GraphState.nodeLabelToID(v) > -1) {\r\n            return true;\r\n        }\r\n        return \"Invalid Label or ID\";\r\n    },\r\n\r\n    applyColors: async () => {\r\n        if (window.settings.getOption(\"direction\")) {\r\n            return;\r\n        }\r\n        const graphColors = await GraphState.getProperty(\"graphColoring\", true);\r\n        const chromaticNumber = await GraphState.getProperty(\"Chromatic Number\", true);\r\n\r\n        const colors = randomColor({count: chromaticNumber, luminosity: \"light\"});\r\n        let G = GraphState.graph;\r\n        (G.getAllNodes() as NodeImmutPlain[]).forEach((v) => {\r\n            G = G.editNode(v.id, {color: colors[graphColors[v.id]]});\r\n        });\r\n        self.setData(GraphState.getGraphData(G), false, false);\r\n    },\r\n\r\n    setData: (data, recalcProps = false, graphChanged = true, rearrangeGraph = false) => {\r\n        // Store existing positions in the data if we're supposed to keep the layout\r\n        if (rearrangeGraph) {\r\n            data.nodes.forEach((v) => {\r\n                delete v.x;\r\n                delete v.y;\r\n            });\r\n        }\r\n\r\n        if (graphChanged) {\r\n            self.saveState();\r\n        }\r\n\r\n        if (\"directed\" in data) {\r\n            window.settings.changeOption(\"direction\", data.directed);\r\n        }\r\n        if (\"weighted\" in data) {\r\n            window.settings.changeOption(\"weights\", data.weighted);\r\n        }\r\n        const directional = window.settings.getOption(\"direction\") as boolean;\r\n        const weighted = window.settings.getOption(\"weights\") as boolean;\r\n\r\n        const g = new GraphImmut(data.nodes, data.edges, directional, weighted);\r\n        GraphState.graph = g;\r\n\r\n        // Set a new random seed so that the layout will be different\r\n        self.randomizeNetworkLayoutSeed(window.network as VisNetworkInternals);\r\n        window.network.setData(GraphState.getGraphAsDataSet(g));\r\n        GraphState.graph = GraphState.setLocations(window.network.getPositions());\r\n\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        if (graphChanged) {\r\n            window.ui.printGraphAlgorithms();\r\n            help.printout(\"\");\r\n            GraphState.setUpToDate();\r\n            GraphState.makeAndPrintProperties(recalcProps);\r\n        }\r\n\r\n        self.saveStateLocalStorage();\r\n    },\r\n\r\n    saveState: () => {\r\n        if (GraphState.graph === null) {\r\n            return;\r\n        }\r\n\r\n        if (GraphState.backHistory.length >= GraphState.maxHistory) {\r\n            GraphState.backHistory.shift();\r\n        }\r\n\r\n        GraphState.backHistory.push(self.getStateForSaving());\r\n        GraphState.forwardHistory = [];\r\n        $(\".icon-undo\").parent().parent().addClass(\"active\");\r\n    },\r\n\r\n    getStateForSaving: () => {\r\n        const state: any = {};\r\n        Object.keys(GraphState).forEach((k: string) => {\r\n            const v: any = (GraphState as any)[k];\r\n            if (typeof v !== \"function\") {\r\n                if (typeof v !== \"object\") {\r\n                    state[k] = v;\r\n                }\r\n                else {\r\n                    if (k === \"graph\" && v !== null) {\r\n                        state[k] = v;\r\n                    }\r\n                    if (!k.toLowerCase().includes(\"history\")) {\r\n                        state[k] = $.extend(true, Array.isArray(v) ? [] : {}, v);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return state as GraphStateHistory;\r\n    },\r\n\r\n    undo: () => {\r\n        if (GraphState.backHistory.length > 0) {\r\n            self.applyState(true);\r\n        }\r\n    },\r\n\r\n    redo: () => {\r\n        if (GraphState.forwardHistory.length > 0) {\r\n            self.applyState(false);\r\n        }\r\n    },\r\n\r\n    applyState: (undo = true, newState: GraphStateHistory = null) => {\r\n        const firstLoad = newState !== null;\r\n        const currentState = self.getStateForSaving();\r\n\r\n        if (!firstLoad) {\r\n            if (undo) {\r\n                newState = GraphState.backHistory.pop();\r\n            }\r\n            else {\r\n                newState = GraphState.forwardHistory.pop();\r\n            }\r\n        }\r\n\r\n        //@ts-ignore Ignore accessing private props. I do this because saving the state lost the type of the data\r\n        newState.graph = new GraphImmut(newState.graph.nodes, newState.graph.edges, newState.graph.directed, newState.graph.weighted);\r\n\r\n        window.settings.changeOption(\"direction\", newState.graph.isDirected());\r\n        window.settings.changeOption(\"weights\", newState.graph.isWeighted());\r\n\r\n        GraphState.graph = newState.graph;\r\n\r\n        window.network.setData(GraphState.getGraphAsDataSet(GraphState.graph));\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        window.ui.printGraphAlgorithms();\r\n        help.printout(\"\");\r\n\r\n        Object.keys(newState).forEach((k: string) => {\r\n            const v = newState[k];\r\n            if (typeof v !== \"object\") {\r\n                (GraphState as any)[k] = v;\r\n            }\r\n            else if (!k.toLowerCase().includes(\"history\") && k.toLowerCase() !== \"graph\") {\r\n                if (k.toLowerCase() === \"uptodate\") {\r\n                    Object.keys((GraphState as any)[k]).forEach((oldKey) => {\r\n                        (GraphState as any)[k][oldKey].upToDate = (v as any)[oldKey].upToDate;\r\n                    });\r\n                }\r\n                else {\r\n                    (GraphState as any)[k] = $.extend(true, (GraphState as any)[k], v);\r\n                }\r\n            }\r\n        });\r\n\r\n        GraphState.makeAndPrintProperties().then(() => {\r\n            if (undo && !firstLoad) {\r\n                $(\".icon-redo\").parent().parent().addClass(\"active\");\r\n                if (GraphState.backHistory.length === 0) {\r\n                    $(\".icon-undo\").parent().parent().removeClass(\"active\");\r\n                }\r\n                GraphState.forwardHistory.push(currentState);\r\n            }\r\n            else if (!undo && !firstLoad) {\r\n                $(\".icon-undo\").parent().parent().addClass(\"active\");\r\n                if (GraphState.forwardHistory.length === 0) {\r\n                    $(\".icon-redo\").parent().parent().removeClass(\"active\");\r\n                }\r\n                GraphState.backHistory.push(currentState);\r\n            }\r\n\r\n            self.saveStateLocalStorage();\r\n        });\r\n    },\r\n\r\n    saveStateLocalStorage: () => {\r\n        if (window.settings.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.lastState\", JSON.stringify(self.getStateForSaving()));\r\n        }\r\n    },\r\n\r\n    shuffleNetworkLayout: () => {\r\n        self.setData({\r\n            nodes: GraphState.graph.getAllNodes() as NodeImmutPlain[],\r\n            edges: GraphState.graph.getAllEdges() as EdgeImmutPlain[]\r\n        }, false, false, true);\r\n    },\r\n\r\n    randomizeNetworkLayoutSeed: (network) => {\r\n        const r = Math.round(Math.random() * 1000000);\r\n        network.layoutEngine.randomSeed = r;\r\n        network.layoutEngine.initialRandomSeed = r;\r\n    },\r\n\r\n    addNetworkListeners: (network) => {\r\n        // Enable edit node/edge when double clicking\r\n        network.on(\"doubleClick\", (p: VisNetworkEvent) => {\r\n            if (window.settings.getOption(\"weights\") && \"edges\" in p && p.edges.length === 1) {\r\n                network.editEdgeMode();\r\n            }\r\n            if (\"nodes\" in p && p.nodes.length === 1) {\r\n                network.editNode();\r\n            }\r\n        });\r\n\r\n        // Save locations of nodes after dragging\r\n        network.on(\"dragEnd\", () => {\r\n            GraphState.graph = GraphState.setLocations(network.getPositions());\r\n            self.saveStateLocalStorage(); // Save the new locations as part of the state\r\n        });\r\n\r\n        // Delete nodes/edges when hit \"Delete\"\r\n        let lastNetworkClickEvent: JQuery.Event = null;\r\n        network.on('click', (event: JQuery.Event) => {\r\n            lastNetworkClickEvent = event;\r\n        });\r\n\r\n        // Delete key to delete node or edge\r\n        $(document).on('keyup', (key) => {\r\n            if (key.key === \"Delete\" && lastNetworkClickEvent !== null) {\r\n                if ($(self.container).has((lastNetworkClickEvent as any).event.target).length > 0) {\r\n                    if ((\"edges\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).edges.length === 1)\r\n                        || (\"nodes\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).nodes.length === 1)) {\r\n                        if ($(':focus').parents(\".modal\").length === 0) {\r\n                            network.deleteSelected();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Undo/Redo keyboard commands\r\n        $(document).on(\"keydown\", (e) => {\r\n            if ((e.key.toLowerCase() === 'y' && e.ctrlKey) || (e.key.toLowerCase() === 'z' && e.ctrlKey && e.shiftKey)) {\r\n                self.redo();\r\n            }\r\n            else if (e.key.toLowerCase() === 'z' && e.ctrlKey) {\r\n                self.undo();\r\n            }\r\n        });\r\n\r\n        // When clicking off of the network, remove the Delete functionality\r\n        $(document).on(\"click\", (e) => {\r\n            if ($(self.container).has(e.target).length === 0) {\r\n                lastNetworkClickEvent = null;\r\n            }\r\n        });\r\n    },\r\n\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\nimport GraphState from './graphState';\r\n\r\ninterface SettingsList {\r\n    nodePhysics: boolean;\r\n    direction: boolean;\r\n    weights: boolean;\r\n\r\n    [index: string]: boolean\r\n}\r\n\r\nexport default class Settings {\r\n    private static readonly defaults: SettingsList = {\r\n        nodePhysics: true,\r\n        direction: false,\r\n        weights: false\r\n    };\r\n    private static current: any = {};\r\n\r\n    public static checkForLocalStorage() {\r\n        try {\r\n            const x = '__storage_test__';\r\n            localStorage.setItem(x, x);\r\n            localStorage.removeItem(x);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static saveSettings() {\r\n        if (Settings.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.settings\", JSON.stringify(Settings.current));\r\n        }\r\n    }\r\n\r\n    public static loadSettings() {\r\n        if (Settings.checkForLocalStorage()) {\r\n            Settings.current = JSON.parse(localStorage.getItem(\"graphPlayground.settings\"));\r\n        }\r\n        if (Settings.current === null) {\r\n            Settings.current = {};\r\n        }\r\n        Settings.setAll();\r\n    }\r\n\r\n    public static setAll() {\r\n        window.network.setOptions({nodes: {physics: Settings.getOption(\"nodePhysics\") as boolean}});\r\n        window.network.setOptions({edges: {arrows: {to: Settings.getOption(\"direction\") as boolean}}});\r\n        if (Settings.getOption(\"weights\")) {\r\n            window.network.setOptions({\r\n                manipulation: {\r\n                    editEdge: {\r\n                        editWithoutDrag: window.main.visWeightEdgeEdit\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            window.network.setOptions({manipulation: {editEdge: window.main.visOptions.manipulation.editEdge}});\r\n        }\r\n    }\r\n\r\n    public static changeOption(option: string, value: string | boolean): void {\r\n        Settings.current[option] = value;\r\n        Settings.saveSettings();\r\n        Settings.setAll();\r\n    }\r\n\r\n    public static getOption(option: string): string | boolean {\r\n        if (option in Settings.current) {\r\n            return Settings.current[option];\r\n        }\r\n        return Settings.defaults[option];\r\n    }\r\n\r\n    public static resetToDefault(): void {\r\n        Settings.current = {};\r\n        Settings.saveSettings();\r\n        Settings.setAll();\r\n\r\n        // Reset graph to just a plain graph. Not sure if this should actually happen or not.\r\n        const G = GraphState.graph.asChangedDirectedWeighted(Settings.defaults.direction, Settings.defaults.weights);\r\n        window.main.setData(GraphState.getGraphData(G));\r\n    }\r\n}\r\n","import gHelp from \"./graphHelpers\";\nimport help from \"./genericHelpers\";\nimport * as $ from \"jquery\";\nimport GraphState from './graphState';\nimport {FlowResult, MSTResult, ShortestPathResult} from \"./GraphAlgorithms\";\n//@ts-ignore\nimport Worker from 'worker-loader!./GraphAlgorithmWorker';\nimport NodeImmut from \"./GraphImmut/NodeImmut\";\n\ninterface AlgorithmI {\n    name: string;\n    directional?: boolean;\n    weighted?: boolean;\n    applyFunc: () => any;\n    display: boolean\n}\n\nconst makeAndPrintShortestPath = (title: string,\n                                  fn: string,\n                                  weighted: boolean): void => {\n    help.showFormModal(($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const source = GraphState.nodeLabelToID(values[0]);\n            const sink = GraphState.nodeLabelToID(values[1]);\n\n            const w = new Worker();\n            w.addEventListener(\"message\", (e: MessageEvent) => {\n                let a = e.data;\n                w.terminate();\n\n                if (a === false) {\n                    if(title.includes(\"Dijkstra\")){\n                        help.showSimpleModal(\"Dijkstra Error\", \"<p>The Dijkstra algorithm only works on graphs\" +\n                            \" with totally non-negative edge weights. Please fix the graph so that there are no\" +\n                            \" negative edge weights.</p><p>Alternatively, try the Bellman-Ford algorithm which solves\" +\n                            \" exactly this problem.</p>\");\n                    }\n                    else if(title.includes(\"Bellman\")) {\n                        help.showSimpleModal(\"Bellman-Ford Error\", \"<p>The Bellman-Ford algorithm only works on graphs\" +\n                            \" with no negative edge-weight cycles. Please remove the negative cycle and try again.</p>\");\n                    }\n                    return;\n                }\n\n                a = a as ShortestPathResult;\n\n                let p = `<h3>${title}</h3><hr>No path exists from ${help.htmlEncode(source.toString())} to ${help.htmlEncode(sink.toString())}`;\n\n                if (a.pathExists) {\n                    p = `${title} From ${GraphState.nodeIDToLabel(source)} to `;\n                    p += `${GraphState.nodeIDToLabel(sink)}: ${a.distance}`;\n                    if (weighted) {\n                        p += `\\nWith weighted cost: ${a.cost}`;\n                    }\n                    p += \"\\n\\nUsing Path: \";\n\n                    p = help.htmlEncode(p);\n                    a.path.forEach((v: number) => {\n                        p += `${help.htmlEncode(GraphState.nodeIDToLabel(v))} &rarr; `;\n                    });\n                    p = p.slice(0, -8);\n                    p = `<h3>${title}</h3><hr>${p}`;\n                }\n\n                help.printout(p);\n            });\n            w.postMessage({type: fn, args: [source, sink], convertToGraphImmut: true, graph: window.main.graphState.getGraphData()});\n        },\n        title, \"Go\", [\n            {label: \"Start Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator},\n            {label: \"End Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator}\n        ]);\n};\n\nconst makeAndPrintComponents = (stronglyConnected: boolean): void => {\n    let a = null;\n    let cc = \"Connected Components\";\n    let componentKey = \"connectedComponents\";\n\n    if (stronglyConnected) {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        cc = \"Strongly \" + cc;\n        componentKey = \"stronglyConnectedComponents\";\n    }\n    else {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n    }\n\n    const w = new Worker();\n    w.addEventListener(\"message\", (e: MessageEvent) => {\n        a = e.data;\n        w.terminate();\n\n        GraphState.graphProperties[cc] = a.count;\n        GraphState.setUpToDate(true, [cc, componentKey]);\n        GraphState.state[componentKey] = a.components;\n\n        const components = help.flatten(a.components);\n        let p = `Number of ${cc}: ${a.count}`;\n        p += \"\\n\\n\";\n\n        components.forEach((v, i) => {\n            p += `Vertex ${GraphState.nodeIDToLabel(i)} is in connected component #${v}\\n`;\n        });\n\n        p += `\\n${JSON.stringify(help.rotate(a.components), null, 4)}\\n\\n`;\n        p = `<h3>${cc}</h3><hr>${help.htmlEncode(p)}`;\n\n        help.printout(p);\n    });\n    w.postMessage({type: componentKey, args: [], graph: window.main.graphState.getGraphData(), convertToGraphImmut: true});\n};\n\nexport default class UIInteractions {\n    static getAlgorithms(): AlgorithmI[] {\n        return [\n            {\n                name: \"Graph Coloring\",\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintGraphColoring,\n                display: true\n            },\n            {\n                name: \"Connected Components\",\n                directional: false,\n                applyFunc: () => { makeAndPrintComponents(false); },\n                display: true\n            },\n            {\n                name: \"Strongly Connected Components\",\n                directional: true,\n                display: true,\n                applyFunc: () => { makeAndPrintComponents(true); }\n            },\n            {\n                name: \"Breadth-First Shortest Path\",\n                directional: false,\n                applyFunc: () => { makeAndPrintShortestPath(\"Breadth-First Shortest Path\", \"breadthFirstSearch\", false); },\n                display: true\n            },\n            {\n                name: \"Dijkstra Shortest Path\",\n                applyFunc: () => { makeAndPrintShortestPath(\"Dijkstra Shortest Path\", \"dijkstraSearch\", true); },\n                display: true\n            },\n            {\n                name: \"Bellman-Ford Shortest Path\",\n                weighted: true,\n                directional: true,\n                applyFunc: () => { makeAndPrintShortestPath(\"Bellman-Ford Shortest Path\", \"bellmanFord\", true); },\n                display: true\n            },\n            {\n                name: \"Ford-Fulkerson\",\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintFFMCMF,\n                display: true\n            },\n            {\n                name: \"Kruskal Minimum Spanning Tree\",\n                weighted: true,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintKruskal,\n                display: true\n            },\n            {\n                name: \"Cyclic\",\n                applyFunc: UIInteractions.makeAndPrintIsCyclic,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Topological Sort\",\n                applyFunc: UIInteractions.makeAndPrintTopologicalSort,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Eulerian\",\n                directional: false,\n                display: false,\n                applyFunc: null\n            },\n            {\n                name: \"Eulerian\",\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintDirectionalEulerian\n            }\n        ] as AlgorithmI[];\n    }\n\n    static registerListeners(): void {\n        const makeSimpleClickListener = (selector: string, fn: () => any) => {\n            $(selector).on(\"click\", (e) => {\n                e.preventDefault();\n                fn();\n            });\n        };\n\n        makeSimpleClickListener(\"#print-help-link\", UIInteractions.printHelp);\n        makeSimpleClickListener(\"#graph-options-link\", UIInteractions.printOptions);\n        makeSimpleClickListener(\"#load-petersen-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            window.main.setData(predefined.Petersen(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-konigsberg-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            window.main.setData(predefined.Konigsberg(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-complete-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            predefined.Complete();\n        });\n        makeSimpleClickListener(\"#load-hypercube-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            predefined.Hypercube();\n        });\n        makeSimpleClickListener(\"#load-custom-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            predefined.Custom();\n        });\n        makeSimpleClickListener(\"#undo-link\", window.main.undo);\n        makeSimpleClickListener(\"#redo-link\", window.main.redo);\n        makeSimpleClickListener(\"#calculate-all-properties-link\", async () => {\n            return GraphState.makeAndPrintProperties(true);\n        });\n        makeSimpleClickListener(\"#new-graph-layout-link\", window.main.shuffleNetworkLayout);\n        makeSimpleClickListener(\"#import-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportFileModal();\n        });\n        makeSimpleClickListener(\"#import-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportTextModal();\n        });\n        makeSimpleClickListener(\"#export-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportFileModal();\n        });\n        makeSimpleClickListener(\"#export-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportTextModal();\n        });\n    }\n\n    static printHelp(): void {\n        help.showSimpleModal(\"Help\", \"<h4>For support see the <a href='https://github.com/MikeDombo/graphPlayground' \" +\n            \"target='_blank'>GitHub repository</a> for guides</h4> <h4>See \" +\n            \"<a href='https://github.com/MikeDombo/graphPlayground/issues' target='_blank'>GitHub issues</a>\" +\n            \" to submit bugs or feature requests.</h4>\");\n    }\n\n    static printOptions(): void {\n        help.showFormModal(\n            ($modal, vals) => {\n                $modal.modal(\"hide\");\n                if (window.settings.getOption(\"nodePhysics\") !== vals[0]) {\n                    window.settings.changeOption(\"nodePhysics\", vals[0]); // Physics\n                }\n                if (window.settings.getOption(\"direction\") !== vals[1]) {\n                    window.settings.changeOption(\"direction\", vals[1]);\n                    let G = GraphState.graph;\n                    G = vals[1] ? G.asDirected(true) : G.asUndirected();\n                    // Clear node coloring because graph color doesn't apply to directed graphs\n                    window.main.setData(GraphState.getGraphData(G, true));\n                }\n                if (window.settings.getOption(\"weights\") !== vals[2]) {\n                    window.settings.changeOption(\"weights\", vals[2]);\n                    let G = GraphState.graph;\n                    G = vals[2] ? G.asWeighted() : G.asUnweighted();\n                    window.main.setData(GraphState.getGraphData(G));\n                }\n            },\n            \"Options\", \"Save\", [\n                {label: \"Graph Physics\", initialValue: window.settings.getOption(\"nodePhysics\"), type: \"checkbox\"},\n                {label: \"Directed Graph\", initialValue: window.settings.getOption(\"direction\"), type: \"checkbox\"},\n                {label: \"Weighted Graph\", initialValue: window.settings.getOption(\"weights\"), type: \"checkbox\"}\n            ], null);\n    }\n\n    static async makeAndPrintGraphColoring(): Promise<void> {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        // Use cached responses when able\n        let a = {\n            chromaticNumber: (await GraphState.getProperty(\"Chromatic Number\")) as number,\n            colors: GraphState.state.graphColoring as {}\n        };\n\n        const printGC = () => {\n            GraphState.graphProperties[\"Chromatic Number\"] = a.chromaticNumber;\n            GraphState.setUpToDate(true, [\"Chromatic Number\", \"graphColoring\"]);\n            (GraphState.state.graphColoring as {}) = a.colors;\n\n            const colors = help.flatten(a.colors);\n            let p = `Number of Vertices: ${colors.length}`;\n            p += `\\nChromatic Number: ${a.chromaticNumber}`;\n            p += \"\\n\\n\";\n\n            colors.forEach((v, i) => {\n                p += `Vertex ${GraphState.nodeIDToLabel(i)} gets color ${v}\\n`;\n            });\n\n            p += `\\n${JSON.stringify(help.rotate(a.colors), null, 4)}\\n\\n`;\n\n            p = `<h3>Graph Coloring Using Welsh-Powell Algorithm</h3><hr>${help.htmlEncode(p)}`;\n            p += \"<br/><button class='btn btn-primary' onclick='main.applyColors()'>Apply New Colors To Graph</button>\";\n\n            help.printout(p);\n            window.main.applyColors();\n        };\n\n        if (!(a.chromaticNumber !== null && (await GraphState.getProperty(\"graphColoring\")) !== null)) {\n            const w = new Worker();\n            w.addEventListener(\"message\", (e: MessageEvent) => {\n                a = e.data;\n                printGC();\n                w.terminate();\n            });\n            w.postMessage({type: \"colorNetwork\", args: [], graph: window.main.graphState.getGraphData(), convertToGraphImmut: true});\n        }\n        else {\n            printGC();\n        }\n    }\n\n    static async makeAndPrintDirectionalEulerian(): Promise<void> {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        const w = new Worker();\n        w.addEventListener(\"message\", (e: MessageEvent) => {\n            GraphState.graphProperties.eulerian = e.data;\n            GraphState.setUpToDate(true, [\"eulerian\"]);\n            w.terminate();\n        });\n        const scc = await GraphState.getProperty(\"stronglyConnectedComponents\", true);\n        w.postMessage({type: \"directionalEulerian\", args: [gHelp.findVertexDegreesDirectional(GraphState.graph.getFullAdjacency()), scc]});\n    }\n\n    static async makeAndPrintEulerian(): Promise<void> {\n        if (window.settings.getOption(\"direction\")) {\n            return UIInteractions.makeAndPrintDirectionalEulerian();\n        }\n\n        const cc = await GraphState.getProperty(\"connectedComponents\", true);\n\n        const w = new Worker();\n        w.addEventListener(\"message\", (e: MessageEvent) => {\n            GraphState.graphProperties.eulerian = e.data;\n            GraphState.setUpToDate(true, [\"eulerian\"]);\n            w.terminate();\n        });\n        w.postMessage({type: \"hasEulerianCircuit\", args: [GraphState.graph.getAllOutDegrees(), cc]});\n    }\n\n    static makeAndPrintFFMCMF(): void {\n        if (!window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n        help.showFormModal(async ($modal, values) => {\n                $modal.modal(\"hide\");\n\n                const source = GraphState.nodeLabelToID(values[0]);\n                const sink = GraphState.nodeLabelToID(values[1]);\n\n                let a: (boolean | FlowResult) = null;\n\n                const cb = () => {\n                    let p = `<h3>Ford-Fulkerson</h3><hr>No path exists from ${help.htmlEncode(GraphState.nodeIDToLabel(source))} to ${help.htmlEncode(GraphState.nodeIDToLabel(sink))}`;\n\n                    if (a === false) {\n                        help.printout(p);\n                        return;\n                    }\n                    a = a as { maxFlow: number; flowPath: any[] };\n\n                    p = `Ford-Fulkerson MaxFlow-MinCut Max Flow From ${GraphState.nodeIDToLabel(source)} to ${GraphState.nodeIDToLabel(sink)}: ${a.maxFlow}`;\n                    p += \"\\n\\nUsing Capacities:\\n\\n\";\n                    p = help.htmlEncode(p);\n                    a.flowPath.forEach((v) => {\n                        p += `${GraphState.nodeIDToLabel(v.from)}&rarr;${GraphState.nodeIDToLabel(v.to)} using ${v.flow} of ${v.capacity}\\n`;\n                    });\n                    p = p.trim();\n                    p = \"<h3>Ford-Fulkerson MaxFlow-MinCut</h3><hr>\" + p;\n\n                    help.printout(p);\n                };\n\n                const w = new Worker();\n                w.addEventListener(\"message\", (e: MessageEvent) => {\n                    a = e.data;\n                    cb();\n                    w.terminate();\n                });\n                w.postMessage({type: \"fordFulkerson\", args: [source, sink], convertToGraphImmut: true, graph: window.main.graphState.getGraphData()});\n            },\n            \"Ford-Fulkerson MaxFlow-MinCut\", \"Go\", [\n                {label: \"Source Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator},\n                {label: \"Sink Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator}\n            ]);\n    }\n\n    static makeAndPrintKruskal(): void {\n        if (window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n\n        const w = new Worker();\n        w.addEventListener(\"message\", (e: MessageEvent) => {\n            const a: MSTResult = e.data;\n            w.terminate();\n\n            let p = `Kruskal's Minimum Spanning Tree Total Weight: ${a.totalWeight}`;\n            p += \"\\n\\nUsing Edges:\\n\\n\";\n            p = help.htmlEncode(p);\n            a.mst.forEach((v) => {\n                p += `${GraphState.nodeIDToLabel(v.getFrom())}&rarr;${GraphState.nodeIDToLabel(v.getTo())}\\n`;\n            });\n            p = p.trim();\n            p = `<h3>Kruskal Minimum Spanning Tree</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n        w.postMessage({type: \"kruskal\", args: [], convertToGraphImmut: true, graph: window.main.graphState.getGraphData()});\n    }\n\n    static makeAndPrintIsCyclic(): void {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const w = new Worker();\n        w.addEventListener(\"message\", (e: MessageEvent) => {\n            GraphState.graphProperties.cyclic = e.data;\n            GraphState.setUpToDate(true, [\"cyclic\"]);\n            w.terminate();\n        });\n        w.postMessage({type: \"isGraphCyclic\", args: [], convertToGraphImmut: true, graph: window.main.graphState.getGraphData()});\n    }\n\n    static makeAndPrintTopologicalSort(): void {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const w = new Worker();\n        w.addEventListener(\"message\", (e: MessageEvent) => {\n            const a: boolean | NodeImmut[] = e.data;\n            w.terminate();\n\n            if (a === true) {\n                GraphState.graphProperties.cyclic = true;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                help.printout(\"<h3>Topological Sorting Failed</h3><hr>Topological sorting failed because the graph contains a cycle\");\n\n                return;\n            }\n\n            let p = \"Topological Sorting:\\n\\n\";\n            p = help.htmlEncode(p);\n            (a as any[]).forEach((v) => {\n                p += `${GraphState.nodeIDToLabel(v.id)}, `;\n            });\n            p = p.slice(0, -2);\n            p = `<h3>Topological Sorting</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n        w.postMessage({type: \"topologicalSort\", args: [], convertToGraphImmut: true, graph: window.main.graphState.getGraphData()});\n    }\n\n    static printGraphAlgorithms(): void {\n        const $div = $(\"#algorithms-pane\");\n        $div.empty();\n        const directional = window.settings.getOption(\"direction\");\n        const weighted = window.settings.getOption(\"weights\");\n\n        const addAlgoToPane = (alg: AlgorithmI) => {\n            $div.append($(\"<a>\", {class: \"nav-link\", href: \"#\"})\n                .text(alg.name).on(\"click\", (e) => {\n                    e.preventDefault();\n                    alg.applyFunc();\n                }));\n        };\n\n        const a = UIInteractions.getAlgorithms();\n        a.forEach((alg) => {\n            if (!alg.display) {\n                return;\n            }\n            if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n            else if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n        });\n    }\n}\n","\"use strict\";\r\n\r\nimport 'bootstrap';\r\nimport * as Raven from 'raven-js';\r\nimport {Network} from 'vis/index-network';\r\nimport {default as main, MainI} from './main';\r\nimport Settings from './settings';\r\nimport UI from './UIInteractions';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        main: MainI;\r\n        network: Network;\r\n        settings: typeof Settings;\r\n        ui: typeof UI,\r\n        Raven: Raven.RavenStatic\r\n    }\r\n}\r\n\r\nwindow.main = main;\r\nwindow.network = new Network(main.container, {}, main.visOptions);\r\nwindow.settings = Settings;\r\nwindow.ui = UI;\r\n\r\n// Initialize Sentry.io error logging\r\nRaven.config('https://92aaeee7e2fb4ef4837a2261a029e8ed@sentry.home.mikedombrowski.com/2').install();\r\nwindow.Raven = Raven;\r\n\r\nmain.addNetworkListeners(window.network);\r\n\r\nSettings.loadSettings();\r\n\r\nlet loadDefault = true;\r\nif (Settings.checkForLocalStorage()) {\r\n    const s: string = localStorage.getItem(\"graphPlayground.lastState\");\r\n    if (s !== null) {\r\n        const jsonGraph: any = JSON.parse(s);\r\n        if (\"graph\" in jsonGraph && \"nodes\" in jsonGraph.graph) {\r\n            loadDefault = false;\r\n            main.applyState(false, jsonGraph as {graph: GraphPlain});\r\n        }\r\n    }\r\n}\r\nif (loadDefault) {\r\n    (async () => {\r\n        const predefined = (await import(\"./predefinedGraphs\")).default;\r\n        main.setData(predefined.Petersen(), false, true, true);\r\n    })();\r\n}\r\n\r\nwindow.ui.registerListeners();\r\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"ce4a2433ce8f94fcfe6a.worker.js\");\n};","\"use strict\";\n\nexport interface NodeImmutPlain {\n    id: Readonly<number>;\n    label: string;\n\n    [key: string]: any;\n\n    [key: number]: any\n}\n\nexport default class NodeImmut {\n    private readonly id: Readonly<number>;\n    private readonly label: Readonly<string>;\n    private readonly attributes: any;\n\n    constructor(id: any, label: any = null, extraAttrs: null | any = null) {\n        if (label === null) {\n            this.label = id.toString();\n        }\n        else {\n            this.label = label;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach((key) => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.label = Object.freeze(this.label);\n        this.id = Object.freeze(id);\n\n        if (new.target === NodeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    toPlain(): NodeImmutPlain {\n        const toReturn: NodeImmutPlain = {id: this.id, label: this.label};\n        Object.keys(this.attributes).forEach((key) => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    getID(): Readonly<number> {\n        return this.id;\n    }\n\n    getLabel(): Readonly<string> {\n        return this.label;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    editNode(label: any = null, extraAttrs: any = null): NodeImmut {\n        if (label === null) {\n            label = this.getLabel();\n        }\n\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        Object.keys(extraAttrs).forEach((key) => {\n            attributes[key] = extraAttrs[key];\n        });\n\n        return new NodeImmut(this.getID(), label, attributes);\n    }\n}\n","\"use strict\";\n\nexport interface EdgeImmutPlain {\n    label?: string;\n    from: number;\n    to: number;\n    weight: number\n}\n\nexport default class EdgeImmut {\n    private readonly from: Readonly<number>;\n    private readonly to: Readonly<number>;\n    private readonly weight: Readonly<number>;\n\n    constructor(from: number, to: number, weight: any = 1) {\n        this.from = Object.freeze(from);\n        this.to = Object.freeze(to);\n        this.weight = Object.freeze(parseFloat(weight));\n\n        if (new.target === EdgeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getFrom(): Readonly<number> {\n        return this.from;\n    }\n\n    getTo(): Readonly<number> {\n        return this.to;\n    }\n\n    getWeight(): Readonly<number> {\n        return this.weight;\n    }\n\n    toPlain(): { from: Readonly<number>; to: Readonly<number>; weight: Readonly<number> } {\n        return {from: this.from, to: this.to, weight: this.weight};\n    }\n\n    editEdge(newWeight: number): EdgeImmut {\n        return new EdgeImmut(this.getFrom(), this.getTo(), newWeight);\n    }\n}\n","\"use strict\";\n\nimport {List} from 'immutable';\nimport {default as NodeImmut, NodeImmutPlain} from './NodeImmut';\nimport {default as EdgeImmut, EdgeImmutPlain} from './EdgeImmut';\n\ninterface NodeMapping {\n    [key: number]: number\n}\n\nconst filterNodeExtraAttr = (data: any) => {\n    return Object.keys(data)\n        .filter((key) => !([\"label\", \"id\"]).includes(key))\n        .reduce((obj: any, key) => {\n            obj[key] = data[key];\n            return obj;\n        }, {});\n};\n\nconst genericEdgesToImmutEdges = (edges: any, nodeMap: NodeMapping = {}): boolean | List<EdgeImmut> => {\n    if (edges === null) {\n        return false;\n    }\n\n    let newEdges: List<EdgeImmut> = List();\n\n    if (typeof edges === 'object') {\n        edges.forEach((edge: any) => {\n            let weight = 0;\n            let from = 0;\n            let to = 0;\n\n            if (\"weight\" in edge) {\n                weight = parseFloat(edge.weight);\n            }\n            if (\"from\" in edge) {\n                from = nodeMap[edge.from];\n            }\n            if (\"to\" in edge) {\n                to = nodeMap[edge.to];\n            }\n\n            newEdges = newEdges.push(new EdgeImmut(from, to, weight));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return newEdges;\n};\n\nconst genericNodesToImmutNodes = (nodes: any): boolean | { nodes: Readonly<List<NodeImmut>>; map: { [key: number]: number } } => {\n    if (nodes === null) {\n        return false;\n    }\n\n    let newNodes: List<NodeImmut> = List();\n    const nodeMap: NodeMapping = {};\n\n    if (typeof nodes === \"number\") {\n        // Create the nodes\n        for (let i = 0; i < Math.floor(nodes); i++) {\n            newNodes = newNodes.set(i, new NodeImmut(i));\n            nodeMap[i] = i;\n        }\n    }\n    else if (typeof nodes === 'object') {\n        let nodeNum = 0;\n        nodes.forEach((n: any) => {\n            const id = nodeNum++;\n            let label = null;\n            let extraAttrs = null;\n\n            if (\"label\" in n) {\n                label = n.label;\n            }\n            if (\"id\" in n) {\n                nodeMap[n.id] = id;\n                if (\"label\" in n && n.label === n.id.toString()) {\n                    label = id.toString();\n                }\n            }\n            else {\n                nodeMap[id] = id;\n            }\n            if (\"attributes\" in n) {\n                extraAttrs = filterNodeExtraAttr(n.attributes);\n            }\n            else {\n                extraAttrs = filterNodeExtraAttr(n);\n            }\n\n            newNodes = newNodes.set(id, new NodeImmut(id, label, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return {nodes: Object.freeze(newNodes), map: nodeMap};\n};\n\nexport default class GraphImmut {\n    private readonly directed: Readonly<boolean>;\n    private readonly weighted: Readonly<boolean>;\n    private readonly nodes: Readonly<List<NodeImmut>>;\n    private readonly numNodes: Readonly<number>;\n    private readonly edges: Readonly<List<EdgeImmut>>;\n    private readonly numEdges: Readonly<number>;\n\n    constructor(nodes: number | List<NodeImmut> | NodeImmutPlain[],\n                edges: null | List<EdgeImmut> | EdgeImmutPlain[] = null,\n                directed = false, weighted = false) {\n        this.directed = Object.freeze(directed);\n        this.weighted = Object.freeze(weighted);\n        let nodeMap = {};\n\n        // Make Nodes\n        if (typeof nodes === \"number\" || (typeof nodes === \"object\" && !(nodes instanceof List))) {\n            const n = genericNodesToImmutNodes(nodes);\n            if (typeof n !== \"object\") {\n                throw new Error(\"Unable to parse node input!\");\n            }\n            this.nodes = n.nodes;\n            nodeMap = n.map;\n        }\n        else if (nodes instanceof List) {\n            this.nodes = nodes as List<NodeImmut>;\n        }\n        else {\n            throw new Error(\"Illegal type of 'node' input to GraphImmut constructor\");\n        }\n        this.nodes = Object.freeze(this.nodes);\n        this.numNodes = Object.freeze(this.nodes.size);\n\n        // If we are given edges, add them to the graph\n        if (edges !== null && typeof edges === \"object\" && !(edges instanceof List)) {\n            const e = genericEdgesToImmutEdges(edges, nodeMap);\n            if (typeof e !== \"object\") {\n                throw new Error(\"Unable to parse Edge input\");\n            }\n            this.edges = e;\n        }\n        else if (edges instanceof List) {\n            this.edges = edges as List<EdgeImmut>;\n        }\n        else {\n            this.edges = List();\n        }\n        this.edges = Object.freeze(this.edges);\n        this.numEdges = Object.freeze(this.edges.size);\n\n        if (new.target === GraphImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    alignNodeIDs(alignTo = 0): GraphImmut {\n        const nodeMap: NodeMapping = {};\n        let nodeCount = alignTo;\n        let newNodes: List<NodeImmut> = List();\n        this.nodes.forEach((v) => {\n            let label = v.getLabel();\n            if (v.getLabel() === v.getID().toString()) {\n                label = nodeCount.toString();\n            }\n\n            newNodes = newNodes.set(nodeCount, new NodeImmut(nodeCount, label, v.getAllAttributes()));\n            nodeMap[v.getID()] = nodeCount++;\n        });\n\n        let newEdges: List<EdgeImmut> = List();\n        this.edges.forEach((v) => {\n            newEdges = newEdges.push(new EdgeImmut(nodeMap[v.getFrom()], nodeMap[v.getTo()], v.getWeight()));\n        });\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    getNode(id: number, rich = false): NodeImmut | NodeImmutPlain | boolean {\n        if (id >= this.numNodes) {\n            return false;\n        }\n        if (rich) {\n            return this.nodes.get(id);\n        }\n        return this.nodes.get(id).toPlain();\n    }\n\n    addNode(data: any = null): GraphImmut {\n        if (data === null) {\n            data = {};\n        }\n\n        const id = this.numNodes;\n        if (!(\"label\" in data)) {\n            data.label = id.toString();\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n\n        return new GraphImmut(this.nodes.set(id, new NodeImmut(id, data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    editNode(id: number, data: any): any {\n        if (!this.nodes.has(id)) {\n            return false;\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n        if (!(\"label\" in data)) {\n            data.label = (this.getNode(id, true) as NodeImmut).getLabel();\n        }\n        return new GraphImmut(this.nodes.set(id, (this.getNode(id, true) as NodeImmut).editNode(data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    deleteNode(id: number): GraphImmut | boolean {\n        // Make sure the ID exists\n        if (!(id >= 0 && id < this.numNodes)) {\n            return false;\n        }\n\n        const nodeMap: NodeMapping = {}; // Map for old IDs to new ones since we're deleting an entry\n\n        // Remove it from the node list\n        let nodeCount = 0;\n        const newNodes: List<NodeImmut> = this.nodes\n            .filter((n) => {\n                if (n.getID() === id) {\n                    nodeMap[n.getID()] = -1;\n                }\n                else {\n                    nodeMap[n.getID()] = nodeCount++;\n                }\n\n                return n.getID() !== id;\n            })\n            .map((node) => {\n                let label = node.getLabel();\n                if (node.getID().toString() === label) {\n                    label = nodeMap[node.getID()].toString();\n                }\n\n                return new NodeImmut(nodeMap[node.getID()], label, node.getAllAttributes());\n            }) as List<NodeImmut>;\n\n        // Remap edges\n        const newEdges: List<EdgeImmut> = this.edges\n            .filter((edge) => {\n                return !(edge.getFrom() === id || edge.getTo() === id);\n            })\n            .map((edge) => {\n                return new EdgeImmut(nodeMap[edge.getFrom()], nodeMap[edge.getTo()], edge.getWeight());\n            }) as List<EdgeImmut>;\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    addEdge(from: number, to: number, weight: any = 1): GraphImmut {\n        if (!this.weighted) {\n            weight = 1; // Ensure that edge weights are 1 if this is an unweighted graph\n        }\n\n        const newEdges = this.edges.push(new EdgeImmut(from, to, parseFloat(weight)));\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    deleteEdge(from: number, to: number, weight: any = null, deleteAll = true): GraphImmut {\n        if (weight !== null) {\n            weight = parseFloat(weight);\n        }\n\n        let foundOneEdge = false;\n        const newEdges: List<EdgeImmut> = this.edges.filter((edge) => {\n            // If we're not deleting everything and we have found one edge, then do not filter anymore\n            if (foundOneEdge && !deleteAll) {\n                return true;\n            }\n\n            // If we have an exact match\n            if (edge.getFrom() === from && edge.getTo() === to && (weight === null || edge.getWeight() === weight)) {\n                foundOneEdge = true;\n                return false; // Remove this edge\n            }\n\n            // If we are undirected, check for opposing matches\n            if (!this.directed) {\n                if (edge.getFrom() === to && edge.getTo() === from && (weight === null || edge.getWeight() === weight)) {\n                    foundOneEdge = true;\n                    return false; // Remove this edge\n                }\n            }\n\n            return true;\n        }) as List<EdgeImmut>;\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    editEdge(from: number, to: number, newWeight: any, oldWeight: any = null): GraphImmut | boolean {\n        // Editing only makes sense for weighted graphs.\n        // To change from/to, just delete the edge and add a new one\n        if (!this.weighted) {\n            return false;\n        }\n\n        let foundFirst = false;\n\n        if (oldWeight !== null) {\n            oldWeight = parseFloat(oldWeight);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge, index) => {\n            if (foundFirst) {\n                return;\n            }\n            if (edge.getFrom() === from && edge.getTo() === to && (oldWeight === null || edge.getWeight() === oldWeight)) {\n                newEdges = newEdges.set(index, edge.editEdge(parseFloat(newWeight)));\n                foundFirst = true;\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    getAllNodes(rich = false): NodeImmut[] | NodeImmutPlain[] {\n        if (rich) {\n            return this.nodes.toArray();\n        }\n        return this.nodes.map((node) => {\n            return node.toPlain();\n        }).toArray();\n    }\n\n    getAllNodesAsImmutableList(): List<NodeImmut> {\n        return this.nodes;\n    }\n\n    getAllEdgesAsImmutableList(): List<EdgeImmut> {\n        return this.edges;\n    }\n\n    getAllEdges(rich = false): EdgeImmut[] | EdgeImmutPlain[] {\n        if (rich) {\n            return this.edges.toArray();\n        }\n        return this.edges.map((edge) => {\n            return edge.toPlain();\n        }).toArray();\n    }\n\n    getNumberOfNodes(): number {\n        return this.numNodes;\n    }\n\n    getNumberOfEdges(): number {\n        return this.numEdges;\n    }\n\n    getAllOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() in degrees) {\n                degrees[edge.getFrom()]++;\n            }\n            else {\n                degrees[edge.getFrom()] = 1;\n            }\n        });\n\n        return degrees;\n    }\n\n    asWeighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, true);\n    }\n\n    asUnweighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, false);\n    }\n\n    asDirected(doubleEdges = false): GraphImmut {\n        if (!doubleEdges) {\n            return new GraphImmut(this.nodes, this.edges, true, this.weighted);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.getTo(), edge.getFrom(), edge.getWeight()));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, true, this.weighted);\n    }\n\n    asUndirected(): GraphImmut {\n        let newEdges: List<EdgeImmut> = List();\n        const addedEdges: { [key: string]: null } = {};\n\n        this.edges.forEach((edge) => {\n            let from = edge.getFrom();\n            let to = edge.getTo();\n            if (to > from) {\n                from = to;\n                to = edge.getFrom();\n            }\n            if (!(`${from}_${to}` in addedEdges)) {\n                addedEdges[`${from}_${to}`] = null;\n                newEdges = newEdges.push(new EdgeImmut(from, to, edge.getWeight()));\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, false, this.weighted);\n    }\n\n    asChangedDirectedWeighted(directed: boolean, weighted: boolean): GraphImmut {\n        let G: GraphImmut = this;\n        if (directed && !this.directed) {\n            G = this.asDirected();\n        }\n        else if (!directed && this.directed) {\n            G = this.asUndirected();\n        }\n\n        if (weighted && !this.weighted) {\n            G = this.asWeighted();\n        }\n        else if (!weighted && this.weighted) {\n            G = this.asUnweighted();\n        }\n\n        return G;\n    }\n\n    getNodeAdjacency(id: number): number[] {\n        const adj: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() === id) {\n                adj.push(edge.getTo());\n            }\n            else if (!this.directed && edge.getTo() === id) {\n                adj.push(edge.getFrom());\n            }\n        });\n\n        return adj;\n    }\n\n    getFullAdjacency(): number[][] {\n        const adj: number[][] = [];\n        this.nodes.forEach((n) => {\n            adj[n.getID()] = this.getNodeAdjacency(n.getID());\n        });\n\n        return adj;\n    }\n\n    areAdjacent(id1: number, id2: number): boolean {\n        return this.getNodeAdjacency(id1).includes(id2);\n    }\n\n    getEdgesBetween(id1: number, id2: number): EdgeImmut[] {\n        const edgeList: EdgeImmut[] = [];\n        this.edges.forEach((edge) => {\n            if (!this.directed && edge.getFrom() === id2 && edge.getTo() === id1) {\n                edgeList.push(edge);\n            }\n\n            if (edge.getFrom() === id1 && edge.getTo() === id2) {\n                edgeList.push(edge);\n            }\n        });\n\n        return edgeList;\n    }\n\n    getMinWeightEdgeBetween(id1: number, id2: number): number {\n        let minWeight = Infinity;\n        this.getEdgesBetween(id1, id2).forEach((edge) => {\n            if (edge.getWeight() < minWeight) {\n                minWeight = edge.getWeight();\n            }\n        });\n\n        return minWeight;\n    }\n\n    // Take a multigraph and reduce all multiple edges to a single edge, weighted using the reducer\n    reduceMultiGraph(reducer: (a: number, b: number) => number, initialValue?: any): GraphImmut {\n        if (typeof initialValue === \"undefined\") {\n            initialValue = 0;\n        }\n\n        const multiEdges: EdgeImmutPlain[] = [];\n        this.nodes.forEach((node) => {\n            // If we have duplicates\n            const adj = this.getNodeAdjacency(node.getID());\n            const uniques = new Set(adj);\n            if (uniques.size < adj.length) {\n                uniques.forEach((to) => {\n                    const newWeight = this.getEdgesBetween(node.getID(), to).reduce((acc, edge) => {\n                        return reducer(acc, edge.getWeight());\n                    }, initialValue);\n\n                    multiEdges.push({from: node.getID(), to, weight: parseFloat(newWeight)});\n                });\n            }\n        });\n\n        // Remove all multigraph edges and replace them with single new edges\n        let newEdges = this.edges.filter((edge) => {\n            let keep = true;\n            multiEdges.forEach((duplicateEdge) => {\n                if (edge.getFrom() === duplicateEdge.from && edge.getTo() === duplicateEdge.to) {\n                    keep = false;\n                }\n            });\n\n            return keep;\n        }) as List<EdgeImmut>;\n        multiEdges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.from, edge.to, edge.weight));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    isWeighted() {\n        return this.weighted;\n    }\n\n    isDirected() {\n        return this.directed;\n    }\n}\n"],"sourceRoot":""}
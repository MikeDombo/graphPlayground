{"version":3,"sources":["webpack:///./src/js/dataImportExport.js"],"names":["self","importByString","string","format","toLowerCase","n","JSON","parse","window","network","setData","main","_genericHelpers__WEBPACK_IMPORTED_MODULE_1__","showSimpleModal","err","graph","error","split","forEach","l","vals","_GraphImmut_GraphImmut__WEBPACK_IMPORTED_MODULE_2__","parseInt","addEdge","d","graphState","getGraphData","nodes","v","label","id","toString","makeImportTextModal","showFormModal","$modal","values","modal","type","extraAttrs","style","optionValues","optionText","makeImportFileModal","files","length","file","reader","FileReader","onload","event","target","result","getFileExtension","name","readAsText","validationFunc","val","$files","get","makeExportFileModal","initialValue","onclick","exportToFile","class","clickDismiss","makeExportTextModal","exportToText","jquery__WEBPACK_IMPORTED_MODULE_0___default","select","document","execCommand","downloadFile","getDataAsJSON","getDataAsDIMACS","text","stringify","keepOnlyKeys","edges","g","adj","getFullAdjacency","filter","i","indexOf","push","edgeCount","edgeText","from","to","trim","filename","blob","Blob","navigator","msSaveOrOpenBlob","msSaveBlob","a","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","revokeObjectURL","__webpack_exports__"],"mappings":"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","file":"2-6f4f83028e3791be6066.min.js","sourcesContent":["\"use strict\";\r\n\r\nimport $ from 'jquery';\r\nimport help from './genericHelpers';\r\nimport GraphImmut from './GraphImmut/GraphImmut';\r\n\r\nlet self = {\r\n    importByString: (string, format) => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            try {\r\n                let n = JSON.parse(string);\r\n                if (\"nodes\" in n && \"edges\" in n) {\r\n                    window.network.setData({}); // Clear out the existing network in order to import the proper\r\n                    // locations\r\n                    window.main.setData(n, false, true, false);\r\n                }\r\n                else {\r\n                    help.showSimpleModal(\"Data Import Error\", \"<p>The provided input does not conform the the\" +\r\n                        \" import specifications.</p>\");\r\n                }\r\n            }\r\n            catch (err) {\r\n                help.showSimpleModal(\"JSON Parse Error\", \"<p>There was an error parsing your input as JSON.</p>\"\r\n                    + \"<pre>\" + err + \"</pre>\");\r\n            }\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            let lines = string.split(/\\r?\\n/);\r\n            let graph = null;\r\n            let error = false;\r\n            lines.forEach((l) => {\r\n                let vals = l.split(/\\s+/);\r\n                if (vals[0].toLowerCase() === \"p\") {\r\n                    if (vals[1].toLowerCase() !== \"edge\") {\r\n                        help.showSimpleModal(\"DIMACS Parse Error\", \"<p>Sorry, but I only know how to parse\" +\r\n                            \" &quot;edge&quot; formatted DIMACS files.</p>\");\r\n                        error = true;\r\n                        return;\r\n                    }\r\n                    graph = new GraphImmut(parseInt(vals[2]));\r\n                }\r\n                else if (vals[0].toLowerCase() === \"e\" && graph !== null) {\r\n                    graph = graph.addEdge(parseInt(vals[1]) - 1, parseInt(vals[2]) - 1);\r\n                }\r\n            });\r\n\r\n            if (graph === null && !error) {\r\n                help.showSimpleModal(\"DIMACS Parse Error\", \"<p>No program line found!</p>\");\r\n                error = true;\r\n            }\r\n\r\n            if (!error) {\r\n                let d = window.main.graphState.getGraphData(graph);\r\n                d.nodes.forEach((v) => {\r\n                    v.label = v.id.toString();\r\n                });\r\n                window.main.setData(d, false, true, true);\r\n            }\r\n        }\r\n        else {\r\n            help.showSimpleModal(\"Unrecognized Input Format\", \"<p>The format of your input is incorrect.</p>\");\r\n        }\r\n    },\r\n\r\n    makeImportTextModal: () => {\r\n        help.showFormModal(($modal, values) => {\r\n                $modal.modal(\"hide\");\r\n                self.importByString(values[0], values[1]);\r\n            }, \"Import Graph From Text\", \"Import\",\r\n            [{type: \"textarea\", label: \"Input Text\", extraAttrs: {style: \"height: 20vh; min-height:400px;\"}},\r\n                {type: \"select\", label: \"Format\", optionValues: [\"json\", \"dimacs\"], optionText: [\"JSON\", \"DIMACS\"]}\r\n            ]);\r\n    },\r\n\r\n    makeImportFileModal: () => {\r\n        help.showFormModal(($modal, values) => {\r\n                $modal.modal(\"hide\");\r\n\r\n                let files = values[0];\r\n                if (files.length === 1) {\r\n                    let file = files[0];\r\n                    let reader = new FileReader();\r\n                    reader.onload = function (event) {\r\n                        self.importByString(event.target.result, help.getFileExtension(file.name));\r\n                    };\r\n\r\n                    reader.readAsText(file);\r\n                }\r\n            }, \"Import Graph From File\", \"Import\",\r\n            [{\r\n                type: \"file\", label: \"Upload File\", validationFunc: (val, $files) => {\r\n                    let files = $files.get(0).files;\r\n                    if (files.length >= 1) {\r\n                        return true;\r\n                    }\r\n                    return \"You must choose a file first\";\r\n                }\r\n            }]);\r\n    },\r\n\r\n    makeExportFileModal: () => {\r\n        help.showFormModal(null, \"Export Graph To File\", null,\r\n            [{\r\n                type: \"button\",\r\n                initialValue: \"Export to JSON\",\r\n                onclick: () => {self.exportToFile(\"json\");},\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary m-1\"\r\n\r\n                },\r\n                clickDismiss: true\r\n            },\r\n                {\r\n                    type: \"button\",\r\n                    initialValue: \"Export to DIMACS\",\r\n                    onclick: () => {self.exportToFile(\"dimacs\");},\r\n                    extraAttrs: {\r\n                        class: \"btn btn-sm btn-primary\"\r\n                    },\r\n                    clickDismiss: true\r\n                }\r\n            ], null, false);\r\n    },\r\n\r\n    makeExportTextModal: () => {\r\n        help.showFormModal(null, \"Export Graph To Text\", null,\r\n            [{\r\n                type: \"button\",\r\n                initialValue: \"Export to JSON\",\r\n                onclick: () => {self.exportToText(\"json\");},\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary m-1\",\r\n                },\r\n                clickDismiss: false\r\n            },\r\n                {\r\n                    type: \"button\",\r\n                    initialValue: \"Export to DIMACS\",\r\n                    onclick: () => {self.exportToText(\"dimacs\");},\r\n                    extraAttrs: {\r\n                        class: \"btn btn-sm btn-primary\",\r\n                    },\r\n                    clickDismiss: false\r\n                },\r\n                {\r\n                    type: \"textarea\", label: \"\", initialValue: \"\", extraAttrs: {\r\n                        style: \"height: 20vh;\" +\r\n                        \" min-height:400px; white-space:nowrap; margin-top: 1rem;\"\r\n                    },\r\n                    onclick: () => {\r\n                        $(\"#exportedText\").select();\r\n                        document.execCommand(\"copy\");\r\n                    }, id: \"exportedText\"\r\n                }\r\n            ], ($modal) => {\r\n                $modal.modal(\"hide\");\r\n            }, false);\r\n    },\r\n\r\n    exportToFile: (format) => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            self.downloadFile(\"graph.json\", self.getDataAsJSON());\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            self.downloadFile(\"graph.dimacs\", self.getDataAsDIMACS());\r\n        }\r\n    },\r\n\r\n    exportToText: (format) => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            $(\"#exportedText\").text(JSON.stringify(JSON.parse(self.getDataAsJSON()), null, 2));\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            $(\"#exportedText\").text(self.getDataAsDIMACS());\r\n        }\r\n    },\r\n\r\n    getDataAsJSON: () => {\r\n        let d = window.main.graphState.getGraphData(window.main.graphState.graph);\r\n        let nodeKeys = [\"id\", \"label\", \"color\", \"x\", \"y\"];\r\n        let edgeKeys = [\"from\", \"to\", \"weight\"];\r\n        d.nodes = help.keepOnlyKeys(d.nodes, nodeKeys);\r\n        d.edges = help.keepOnlyKeys(d.edges, edgeKeys);\r\n\r\n        return JSON.stringify(d);\r\n    },\r\n\r\n    getDataAsDIMACS: () => {\r\n        // If I add direction, DIMACS cannot be used, it only works for undirected graphs\r\n        let g = window.main.graphState.getGraphData();\r\n        let text = \"c This Graph was generated and exported from Michael Dombrowski's Graph Playground --\" +\r\n            \" https://md100play.github.io/graphPlayground -- https://mikedombrowski.com\\n\";\r\n\r\n        let adj = window.main.graphState.graph.getFullAdjacency();\r\n        adj = adj.filter((v) => {\r\n            return v.length !== 0;\r\n        });\r\n\r\n        let nodes = [];\r\n        adj.forEach((v, i) => {\r\n            if (nodes.indexOf(i + 1) === -1) {\r\n                nodes.push(i + 1);\r\n            }\r\n            v.forEach((n) => {\r\n                if (nodes.indexOf(n + 1) === -1) {\r\n                    nodes.push(n + 1);\r\n                }\r\n            });\r\n        });\r\n\r\n        let edgeCount = 0;\r\n        let edgeText = \"\";\r\n        g.edges.forEach((v) => {\r\n            edgeText += \"e \" + (v.from + 1) + \" \" + (v.to + 1) + \"\\n\";\r\n            edgeCount++;\r\n        });\r\n        edgeText = edgeText.trim();\r\n\r\n        text += \"p edge \" + nodes.length + \" \" + edgeCount + \"\\n\";\r\n        return text + edgeText;\r\n    },\r\n\r\n    downloadFile: (filename, text) => {\r\n        let blob = new Blob([text], {type: 'text/plain'});\r\n        if (window.navigator.msSaveOrOpenBlob) {\r\n            window.navigator.msSaveBlob(blob, filename);\r\n        }\r\n        else {\r\n            let a = window.document.createElement('a');\r\n            a.href = window.URL.createObjectURL(blob);\r\n            a.download = filename;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(blob);\r\n        }\r\n    },\r\n};\r\n\r\nexport default self;\r\n"],"sourceRoot":""}
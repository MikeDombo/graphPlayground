{"version":3,"sources":["webpack:///./src/js/predefinedGraphs.ts"],"names":["petersenEdges","_genericHelpers__WEBPACK_IMPORTED_MODULE_1__","deepFreeze","from","to","weight","konigsbergEdges","hypercubeGraph","D","edges","nodes","numNodes","Math","pow","pad","str","max","length","i","push","id","label","toString","input","numBits","inputBits","split","reverse","allDiffer","b","newNum","slice","parseInt","join","generateDifferByOne","forEach","j","directed","weighted","PredefinedGraphs","Petersen","_graphHelpers__WEBPACK_IMPORTED_MODULE_0__","interpolateNodesFromEdges","Konigsberg","Complete","showFormModal","$modal","vals","modal","window","main","setData","V","completeGraph","type","initialValue","validationFunc","v","Hypercube","Custom","newCustomGraph"],"mappings":"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","file":"0-cb631b5f25faf19724bd.min.js","sourcesContent":["\"use strict\";\r\n\r\nimport gHelp from './graphHelpers';\r\nimport help from './genericHelpers';\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\nimport {NodeImmutPlain} from \"./GraphImmut/NodeImmut\";\r\n\r\nconst petersenEdges = help.deepFreeze([\r\n    {from: 1, to: 2, weight: 1},\r\n    {from: 2, to: 3, weight: 1},\r\n    {from: 3, to: 4, weight: 1},\r\n    {from: 4, to: 5, weight: 1},\r\n    {from: 5, to: 1, weight: 1},\r\n\r\n    {from: 6, to: 8, weight: 1},\r\n    {from: 7, to: 9, weight: 1},\r\n    {from: 7, to: 10, weight: 1},\r\n    {from: 8, to: 10, weight: 1},\r\n    {from: 9, to: 6, weight: 1},\r\n\r\n    {from: 1, to: 6, weight: 1},\r\n    {from: 2, to: 7, weight: 1},\r\n    {from: 3, to: 8, weight: 1},\r\n    {from: 4, to: 9, weight: 1},\r\n    {from: 5, to: 10, weight: 1}\r\n]) as EdgeImmutPlain[];\r\n\r\nconst konigsbergEdges = help.deepFreeze([\r\n    {from: 1, to: 2, weight: 1},\r\n    {from: 2, to: 3, weight: 1},\r\n    {from: 2, to: 4, weight: 1},\r\n    {from: 3, to: 4, weight: 1},\r\n    {from: 3, to: 4, weight: 1},\r\n    {from: 4, to: 1, weight: 1},\r\n    {from: 4, to: 1, weight: 1},\r\n]) as EdgeImmutPlain[];\r\n\r\nconst completeGraph = (V: number): Readonly<GraphPlain> => {\r\n    const edges = [];\r\n    const nodes = [];\r\n\r\n    for (let i = 0; i < V; i++) {\r\n        nodes.push({id: i, label: i.toString()});\r\n        for (let j = i + 1; j < V; j++) {\r\n            edges.push({from: i, to: j});\r\n        }\r\n    }\r\n\r\n    return help.deepFreeze({nodes, edges, directed: false, weighted: false} as GraphPlain);\r\n};\r\n\r\nconst hypercubeGraph = (D: number): Readonly<GraphPlain> => {\r\n    const edges: EdgeImmutPlain[] = [];\r\n    const nodes: NodeImmutPlain[] = [];\r\n\r\n    const numNodes = Math.pow(2, D);\r\n\r\n    const pad = (str: string, max: number): string => {\r\n        return str.length < max ? pad(\"0\" + str, max) : str;\r\n    };\r\n\r\n    const generateDifferByOne = (input: number, numBits: number) => {\r\n        const inputBits = pad((input).toString(2), numBits).split(\"\").reverse();\r\n        const allDiffer = [];\r\n\r\n        // 1 bit difference from input, increasing order, none less than input\r\n        for (let b = 0; b < numBits; b++) {\r\n            if (inputBits[b] === \"0\") {\r\n                const newNum = inputBits.slice();\r\n                newNum[b] = \"1\";\r\n                newNum.reverse();\r\n                allDiffer.push(parseInt(newNum.join(\"\"), 2));\r\n            }\r\n        }\r\n\r\n        return allDiffer;\r\n    };\r\n\r\n    for (let i = 0; i < numNodes; i++) {\r\n        nodes.push({id: i, label: pad(i.toString(2), D)});\r\n        generateDifferByOne(i, D).forEach((j) => {\r\n            edges.push({from: i, to: j, weight: 1});\r\n        });\r\n    }\r\n\r\n    return help.deepFreeze({nodes, edges, directed: false, weighted: false} as GraphPlain);\r\n};\r\n\r\nconst newCustomGraph = (V: number, directed = false, weighted = false): Readonly<GraphPlain> => {\r\n    const nodes = [];\r\n    for (let i = 0; i < V; i++) {\r\n        nodes.push({id: i, label: i.toString()});\r\n    }\r\n\r\n    return help.deepFreeze({nodes, edges: [], directed, weighted} as GraphPlain);\r\n};\r\n\r\nexport default class PredefinedGraphs {\r\n    public static Petersen(): Readonly<GraphPlain> {\r\n        return help.deepFreeze({\r\n            edges: petersenEdges,\r\n            nodes: gHelp.interpolateNodesFromEdges(petersenEdges),\r\n            directed: false,\r\n            weighted: false,\r\n        });\r\n    }\r\n\r\n    public static Konigsberg(): Readonly<GraphPlain> {\r\n        return help.deepFreeze({\r\n            edges: konigsbergEdges,\r\n            nodes: gHelp.interpolateNodesFromEdges(konigsbergEdges),\r\n            directed: false,\r\n            weighted: false,\r\n        });\r\n    }\r\n\r\n    public static Complete(): void {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(completeGraph(vals[0]), false, true, true);\r\n            },\r\n            \"Configurable Complete Graph\", \"Go\",\r\n            [{\r\n                type: \"numeric\", initialValue: 5, label: \"Number of Vertices\", validationFunc: (v) => {\r\n                    return v >= 0 || \"Number of vertices must be non-negative\";\r\n                }\r\n            }]);\r\n    }\r\n\r\n    public static Hypercube(): void {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(hypercubeGraph(vals[0]), false, true, true);\r\n            },\r\n            \"Configurable Hypercube Graph\", \"Go\",\r\n            [{\r\n                type: \"numeric\", initialValue: 3, label: \"Number of Dimensions\", validationFunc: (v) => {\r\n                    return v >= 0 || \"Number of dimensions must be non-negative\";\r\n                }\r\n            }]);\r\n    }\r\n\r\n    public static Custom(): void {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(newCustomGraph(vals[0], vals[1], vals[2]), false, true, true);\r\n            },\r\n            \"Configurable Graph\", \"Go\",\r\n            [\r\n                {\r\n                    type: \"numeric\", initialValue: 0, label: \"Number of Vertices\", validationFunc: (v) => {\r\n                        return v >= 0 || \"Number of vertices must be non-negative\";\r\n                    }\r\n                },\r\n                {type: \"checkbox\", initialValue: false, label: \"Directed\"},\r\n                {type: \"checkbox\", initialValue: false, label: \"Weighted\"},\r\n            ]);\r\n    }\r\n}\r\n"],"sourceRoot":""}
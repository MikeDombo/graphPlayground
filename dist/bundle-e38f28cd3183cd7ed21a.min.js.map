{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/graphState.ts","webpack:///./src/js/util/genericHelpers.ts","webpack:///./src/js/main.ts","webpack:///./src/js/settings.ts","webpack:///./src/js/UIInteractions.ts","webpack:///./src/js/app.ts","webpack:///./src/js/util/graphHelpers.ts","webpack:///./src/js/workers/GraphAlgorithmWorker.ts","webpack:///./src/js/classes/GraphImmut/EdgeImmut.ts","webpack:///./src/js/classes/GraphImmut/GraphImmut.ts","webpack:///./src/js/classes/GraphImmut/NodeImmut.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","2","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","p","0","1","jsonpScriptSrc","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","undefined","setTimeout","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","window","oldJsonpFunction","slice","vis_index_network__WEBPACK_IMPORTED_MODULE_0__","_util_genericHelpers__WEBPACK_IMPORTED_MODULE_1__","_classes_GraphImmut_GraphImmut__WEBPACK_IMPORTED_MODULE_2__","_classes_GraphImmut_NodeImmut__WEBPACK_IMPORTED_MODULE_3__","getInt","v","parseInt","GraphState","setUpToDate","listOptions","upToDate","forEach","always","indexOf","makeAndPrintProperties","getProperty","updateIfNotUpdated","ignoreDuplicate","a","find","applyFunc","_a","sent","state","graphProperties","recalcLong","directional","settings","getOption","vertices","graph","getNumberOfNodes","edges","getNumberOfEdges","keys","__awaiter","_this","printableProperties","map","_b","_c","printGraphProperties","properties","k","toTitleCase","trim","htmlEncode","getElementById","innerHTML","addEdge","from","to","weight","edgeFrom","edgeTo","main","setData","nodes","clearColorFromNodes","getAllNodes","clearColorFromEdges","getAllEdges","addNode","label","x","y","editNode","id","iId","getGraphData","editEdge","newWeight","oldWeight","newGraph","deleteEdge","deleteNode","color","nodeIDToLabel","getNode","getLabel","toString","nodeLabelToID","filter","node","toLowerCase","getID","rID","found","getGraphAsDataSet","isWeighted","setLocations","locations","newNodes","getAllNodesAsImmutableList","getAttribute","set","getAllEdgesAsImmutableList","isDirected","clearNodeColors","clearEdgeColors","directed","weighted","workerPool","backHistory","forwardHistory","maxHistory","ui","makeAndPrintGraphColoring","makeAndPrintEulerian","getAlgorithms","makeAndPrintIsCyclic","stronglyConnectedComponents","connectedComponents","graphColoring","eulerian","Chromatic Number","Connected Components","Strongly Connected Components","cyclic","__webpack_exports__","jquery__WEBPACK_IMPORTED_MODULE_0__","defaultCancelCb","$modal","modal","self","deepCopy","deep","clone","copy","options","copyIsArray","isPlainObject","obj","proto","getPrototypeOf","Ctor","constructor","arguments","this","Array","isArray","deepFreeze","freeze","getOwnPropertyNames","prop","isFrozen","sort","arr","compareFunction","datasetToArray","ds","keepOnlyKeys","getFileExtension","filename","split","string","textContent","replace","printout","text","escape","flatten","rotate","max","iterable","reduce","b","Math","str","match","toUpperCase","showSimpleModal","title","body","showFormModal","initialValue","makeFormModal","successText","form","footer","f","class","formRow","basicMap","extraAttrs","attrname","validFunc","validationFunc","generalValidator","valueMutator","$v","val","valid","removeClass","next","remove","addClass","after","append","checked","for","prepend","clickDismiss","$b","onclick","on","parseFloat","$options_1","optionText","oText","oIndex","optionValues","$footer","tabindex","role","aria-hidden","data-dismiss","aria-label","html","off","last","trigger","first","successCb","cancelCb","vals","hasErrors","each","tagName","attr","files","hasClass","main_self","graphState","container","visWeightEdgeEdit","callback","genericHelpers","visOptions","interaction","hover","manipulation","_d","_e","_h","$popup","concat","_f","_g","saveData","cancelEdit","confirm","network","_data","fromId","toId","operation","nodeLabelIDValidator","applyColors","graphColors","chromaticNumber","colors","randomColor_default","count","luminosity","G","recalcProps","graphChanged","rearrangeGraph","saveState","changeOption","g","GraphImmut","randomizeNetworkLayoutSeed","getPositions","disableEditMode","enableEditMode","stopLoadingAnimation","isRunning","terminateAllWebWorkers","printGraphAlgorithms","saveStateLocalStorage","getStateForSaving","getElementsByClassName","item","parentElement","classList","add","includes","undo","applyState","redo","newState","firstLoad","currentState","pop","oldKey","then","checkForLocalStorage","localStorage","setItem","JSON","stringify","shuffleNetworkLayout","round","random","layoutEngine","randomSeed","initialRandomSeed","addNetworkListeners","editEdgeMode","lastNetworkClickEvent","addEventListener","contains","deleteSelected","ctrlKey","shiftKey","Settings","removeItem","saveSettings","current","loadSettings","getItem","parse","setAll","setOptions","physics","arrows","editWithoutDrag","option","defaults","nodePhysics","direction","weights","makeAndPrintShortestPath","fn","myName","UIInteractions_UIInteractions","printAlreadyRunning","values","source","sink","iStartedProgress","startLoadingAnimation","w","getWorkerIfPossible","cleanup","pathExists","distance","cost","G_1","path","send","args","convertToGraphImmut","makeAndPrintComponents","stronglyConnected","UIInteractions_awaiter","cc","componentKey","components","UIInteractions_WorkerProxy","WorkerProxy","listener","worker","postMessage","onmessage","terminate","UIInteractions","display","makeAndPrintFFMCMF","makeAndPrintKruskal","makeAndPrintTopologicalSort","makeAndPrintDirectionalEulerian","registerListeners","makeSimpleClickListener","selector","querySelector","preventDefault","printHelp","printOptions","predefined","default","Petersen","Konigsberg","Complete","Hypercube","Custom","makeImportFileModal","makeImportTextModal","makeExportFileModal","makeExportTextModal","asDirected","asUndirected","asWeighted","asUnweighted","_i","Worker","nextIndex","findIndex","GraphAlgorithmWorker_default","prog","style","printGC","w_1","scc","graphHelpers","findVertexDegreesDirectional","getFullAdjacency","getAllOutDegrees","cb","maxFlow","flowPath","flow","capacity","totalWeight","mst","EdgeImmut","getFrom","getTo","$div","addAlgoToPane","alg","navlink","innerText","js_UIInteractions","index_network","singleton","install","Raven","loadDefault","jsonGraph","app_awaiter","adjacencyMatrix","degrees","out","in","outV","interpolateNodesFromEdges","attributes","_newTarget","getWeight","attribute","getAllAttributes","toPlain","toReturn","assign","immutable__WEBPACK_IMPORTED_MODULE_0__","_NodeImmut__WEBPACK_IMPORTED_MODULE_1__","_EdgeImmut__WEBPACK_IMPORTED_MODULE_2__","filterExtraAttr","labels","filterNodeExtraAttr","filterEdgeExtraAttr","genericEdgesToImmutEdges","nodeMap","newEdges","edge","genericNodesToImmutNodes","floor","nodeNum_1","numNodes","size","numEdges","rich","has","nodeCount","deleteAll","foundOneEdge","foundFirst","index","toArray","_","doubleEdges","addedEdges","asChangedDirectedWeighted","getNodeAdjacency","adj","areAdjacent","id1","id2","getEdgesBetween","edgeList","getMinWeightEdgeBetween","minWeight","Infinity","reduceMultiGraph","reducer","min","multiEdges","uniques","Set","acc","keep","duplicateEdge","NodeImmut"],"mappings":"aACA,SAAAA,EAAAC,GAQA,IAPA,IAMAC,EAAAC,EANAC,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAIAM,EAAA,EAAAC,EAAA,GACQD,EAAAH,EAAAK,OAAoBF,IAC5BJ,EAAAC,EAAAG,GACAG,EAAAP,IACAK,EAAAG,KAAAD,EAAAP,GAAA,IAEAO,EAAAP,GAAA,EAEA,IAAAD,KAAAG,EACAO,OAAAC,UAAAC,eAAAC,KAAAV,EAAAH,KACAc,EAAAd,GAAAG,EAAAH,IAKA,IAFAe,KAAAhB,GAEAO,EAAAC,QACAD,EAAAU,OAAAV,GAOA,OAHAW,EAAAR,KAAAS,MAAAD,EAAAb,GAAA,IAGAe,IAEA,SAAAA,IAEA,IADA,IAAAC,EACAf,EAAA,EAAiBA,EAAAY,EAAAV,OAA4BF,IAAA,CAG7C,IAFA,IAAAgB,EAAAJ,EAAAZ,GACAiB,GAAA,EACAC,EAAA,EAAkBA,EAAAF,EAAAd,OAA2BgB,IAAA,CAC7C,IAAAC,EAAAH,EAAAE,GACA,IAAAf,EAAAgB,KAAAF,GAAA,GAEAA,IACAL,EAAAQ,OAAApB,IAAA,GACAe,EAAAM,IAAAC,EAAAN,EAAA,KAIA,OAAAD,EAIA,IAAAQ,EAAA,GAKApB,EAAA,CACAqB,EAAA,GAGAZ,EAAA,GAQA,SAAAS,EAAA1B,GAGA,GAAA4B,EAAA5B,GACA,OAAA4B,EAAA5B,GAAA8B,QAGA,IAAAC,EAAAH,EAAA5B,GAAA,CACAK,EAAAL,EACAgC,GAAA,EACAF,QAAA,IAUA,OANAhB,EAAAd,GAAAa,KAAAkB,EAAAD,QAAAC,IAAAD,QAAAJ,GAGAK,EAAAC,GAAA,EAGAD,EAAAD,QAKAJ,EAAAO,EAAA,SAAAhC,GACA,IAAAiC,EAAA,GAKAC,EAAA3B,EAAAP,GACA,OAAAkC,EAGA,GAAAA,EACAD,EAAAzB,KAAA0B,EAAA,QACK,CAEL,IAAAC,EAAA,IAAAC,QAAA,SAAAC,EAAAC,GACAJ,EAAA3B,EAAAP,GAAA,CAAAqC,EAAAC,KAEAL,EAAAzB,KAAA0B,EAAA,GAAAC,GAGA,IACAI,EADAC,EAAAC,SAAAC,cAAA,UAGAF,EAAAG,QAAA,QACAH,EAAAI,QAAA,IACAnB,EAAAoB,IACAL,EAAAM,aAAA,QAAArB,EAAAoB,IAEAL,EAAAO,IA1DA,SAAA/C,GACA,OAAAyB,EAAAuB,EAAA,OAA0ChD,OAAA,KAA6BiD,EAAA,uBAAAC,EAAA,wBAAsDlD,GAAA,UAyD7HmD,CAAAnD,GAGA,IAAAoD,EAAA,IAAAC,MACAd,EAAA,SAAAe,GAEAd,EAAAe,QAAAf,EAAAgB,OAAA,KACAC,aAAAb,GACA,IAAAc,EAAAnD,EAAAP,GACA,OAAA0D,EAAA,CACA,GAAAA,EAAA,CACA,IAAAC,EAAAL,IAAA,SAAAA,EAAAM,KAAA,UAAAN,EAAAM,MACAC,EAAAP,KAAAQ,QAAAR,EAAAQ,OAAAf,IACAK,EAAAW,QAAA,iBAAA/D,EAAA,cAAA2D,EAAA,KAAAE,EAAA,IACAT,EAAAY,KAAA,iBACAZ,EAAAQ,KAAAD,EACAP,EAAAa,QAAAJ,EACAH,EAAA,GAAAN,GAEA7C,EAAAP,QAAAkE,IAGA,IAAAtB,EAAAuB,WAAA,WACA5B,EAAA,CAAwBqB,KAAA,UAAAE,OAAAtB,KAClB,MACNA,EAAAe,QAAAf,EAAAgB,OAAAjB,EACAE,SAAA2B,KAAAC,YAAA7B,GAGA,OAAAJ,QAAAkC,IAAArC,IAIAR,EAAA8C,EAAA1D,EAGAY,EAAA+C,EAAA7C,EAGAF,EAAAgD,EAAA,SAAA5C,EAAAmC,EAAAU,GACAjD,EAAAkD,EAAA9C,EAAAmC,IACAvD,OAAAmE,eAAA/C,EAAAmC,EAAA,CAA0Ca,YAAA,EAAAC,IAAAJ,KAK1CjD,EAAAsD,EAAA,SAAAlD,GACA,oBAAAmD,eAAAC,aACAxE,OAAAmE,eAAA/C,EAAAmD,OAAAC,YAAA,CAAwDC,MAAA,WAExDzE,OAAAmE,eAAA/C,EAAA,cAAiDqD,OAAA,KAQjDzD,EAAA0D,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAzD,EAAAyD,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAA7E,OAAA8E,OAAA,MAGA,GAFA9D,EAAAsD,EAAAO,GACA7E,OAAAmE,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAzD,EAAAgD,EAAAa,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIA7D,EAAAiE,EAAA,SAAA5D,GACA,IAAA4C,EAAA5C,KAAAuD,WACA,WAA2B,OAAAvD,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAL,EAAAgD,EAAAC,EAAA,IAAAA,GACAA,GAIAjD,EAAAkD,EAAA,SAAAgB,EAAAC,GAAsD,OAAAnF,OAAAC,UAAAC,eAAAC,KAAA+E,EAAAC,IAGtDnE,EAAAuB,EAAA,GAGAvB,EAAAoE,GAAA,SAAAC,GAA8D,MAApBC,QAAA3C,MAAA0C,GAAoBA,GAE9D,IAAAE,EAAAC,OAAA,aAAAA,OAAA,iBACAC,EAAAF,EAAAxF,KAAAiF,KAAAO,GACAA,EAAAxF,KAAAX,EACAmG,IAAAG,QACA,QAAA/F,EAAA,EAAgBA,EAAA4F,EAAA1F,OAAuBF,IAAAP,EAAAmG,EAAA5F,IACvC,IAAAU,EAAAoF,EAIAlF,EAAAR,KAAA,SAEAU,qCC5NA,IAAAkF,EAAA3E,EAAA,IAAA4E,EAAA5E,EAAA,GAAA6E,EAAA7E,EAAA,GAAA8E,EAAA9E,EAAA,+yCAsDM+E,EAAS,SAACC,GACZ,MAAgB,iBAANA,EACCA,EAEJC,SAASD,IAGpBE,EAAA,oBAAAA,KAyTA,OAhPWA,EAAAC,YAAP,SAAmB1B,EAAe2B,QAAf,IAAA3B,OAAA,GACf,IAAMZ,EAAMuC,QACRjB,GAAW,EACfe,EAAWG,SAASC,QAAQ,SAACN,GAClB,WAAYA,GAAOA,EAAEO,UAAY1C,GAAOuC,EAAaI,QAAQR,EAAEzC,OAAS,KAC3EyC,EAAEK,SAAW5B,EACE,aAAXuB,EAAE7C,OACFgC,GAAW,MAInBA,GACAe,EAAWO,0BAINP,EAAAQ,YAAb,SAAyBvB,EAAkBwB,EAA4BC,eAA5B,IAAAD,OAAA,QAA4B,IAAAC,OAAA,iGAC7DC,EAAIX,EAAWG,SAASS,KAAK,SAACd,GAChC,MAAQ,SAAUA,GAAKA,EAAEzC,OAAS4B,KAE/BkB,SAAH,MACI,cAAeQ,GAA4B,mBAAhBA,EAAEE,WAA4BJ,EACzD,GAAME,EAAEE,UAAUH,IADlB,oBACAI,EAAAC,oBAGA,SAAO,aAGf,MAAe,UAAXJ,EAAE1D,KACF,GAAOxB,QAAQC,QAAQsE,EAAWgB,MAAM/B,KAE5C,GAAOxD,QAAQC,QAAQsE,EAAWiB,gBAAgBhC,WAGzCe,EAAAO,uBAAb,SAAoCW,eAAA,IAAAA,OAAA,4GAC1BC,EAAc7B,OAAO8B,SAASC,UAAU,aAE9CrB,EAAWiB,gBAAgBK,SAAWtB,EAAWuB,MAAMC,mBACvDxB,EAAWiB,gBAAgBQ,MAAQzB,EAAWuB,MAAMG,mBAE/CP,EAAD,MACA,GAAMnB,EAAWQ,YAAY,YAAY,GAAM,WAA/CM,EAAAC,wBAWJ,OARM1E,EAAIvC,OAAO6H,KAAK3B,EAAWiB,iBAC7BC,GACA7E,EAAE+D,QAAQ,SAAON,GAAC,OAAA8B,EAAAC,OAAA,qEACd,SAAM7B,EAAWQ,YAAYV,GAAG,kBAAhCgB,EAAAC,kBAIFe,EAA2B,GACjC,GAAMrG,QAAQkC,IAAItB,EAAE0F,IAAI,SAAOjC,GAAC,OAAA8B,EAAAC,OAAA,6EACH,OAAzBf,EAAAgB,EAAoBE,EAAAlC,EAAK,GAAME,EAAWQ,YAAYV,kBAAtDgB,EAAAkB,GAAyBC,EAAAlB,kCAD7BD,EAAAC,OAIAf,EAAWkC,qBAAqBJ,aAG7B9B,EAAAkC,qBAAP,SAA4BC,GACxB,IAAI9F,EAAI,GACRvC,OAAO6H,KAAKQ,GAAY/B,QAAQ,SAACgC,GACP,OAAlBD,EAAWC,KACX/F,GAAQqD,EAAA,EAAK2C,YAAYD,GAAE,KAAKD,EAAWC,GAAE,QAGrD/F,EAAIA,EAAEiG,OACNjG,EAAIqD,EAAA,EAAK6C,WAAWlG,GACpBP,SAAS0G,eAAe,cAAeC,UAAY,uBAAuBpG,EAAC,QAGxE2D,EAAA0C,QAAP,SAAeC,EAAqBC,EAAmBC,EAAYtB,QAAZ,IAAAsB,MAAA,QAAY,IAAAtB,MAAQvB,EAAWuB,OAClF,IAAMuB,EAAWjD,EAAO8C,GAClBI,EAASlD,EAAO+C,GACtBrB,EAAQA,EAAMmB,QAAQI,EAAUC,EAAQF,GACxCvD,OAAO0D,KAAKC,QAAQ,CAChBC,MAAOlD,EAAWmD,oBAAoB5B,EAAM6B,eAC5C3B,MAAOzB,EAAWqD,oBAAoB9B,EAAM+B,kBAI7CtD,EAAAuD,QAAP,SAAepK,EAAgBoI,QAAA,IAAAA,MAAQvB,EAAWuB,OAC9CA,EAAQA,EAAMgC,QAAQ,CAACC,MAAOrK,EAAKqK,MAAOC,EAAGtK,EAAKsK,EAAGC,EAAGvK,EAAKuK,IAC7DpE,OAAO0D,KAAKC,QAAQ,CAChBC,MAAOlD,EAAWmD,oBAAoB5B,EAAM6B,eAC5C3B,MAAOzB,EAAWqD,oBAAoB9B,EAAM+B,kBAI7CtD,EAAA2D,SAAP,SAAgBC,EAAmBJ,EAAejC,QAAA,IAAAA,MAAQvB,EAAWuB,OACjE,IAAMsC,EAAMhE,EAAO+D,GACnBrC,EAAQA,EAAMoC,SAASE,EAAK,CAACL,MAAKA,IAClClE,OAAO0D,KAAKC,QAAQjD,EAAW8D,aAAavC,IAAQ,GAAO,IAGxDvB,EAAA+D,SAAP,SAAgBpB,EAAuBC,EACvBoB,EAAmBC,EAAmB1C,QAAA,IAAAA,MAAQvB,EAAWuB,OACrE,IAAMuB,EAAWjD,EAAO8C,GAClBI,EAASlD,EAAO+C,GAChBsB,EAAW3C,EAAMwC,SAASjB,EAAUC,EAAQiB,EAAWC,GACzDC,aAAoBvE,EAAA,GACpBL,OAAO0D,KAAKC,QAAQjD,EAAW8D,aAAaI,IAAW,GAAO,IAI/DlE,EAAAmE,WAAP,SAAkBxB,EAAqBC,EAAmBC,EAAwCtB,QAAxC,IAAAsB,MAAA,WAAwC,IAAAtB,MAAQvB,EAAWuB,OACjH,IAAMuB,EAAWjD,EAAO8C,GAClBI,EAASlD,EAAO+C,GACtBrB,EAAQA,EAAM4C,WAAWrB,EAAUC,EAAQF,GAAQ,GACnDvD,OAAO0D,KAAKC,QAAQ,CAChBC,MAAOlD,EAAWmD,oBAAoB5B,EAAM6B,eAC5C3B,MAAOzB,EAAWqD,oBAAoB9B,EAAM+B,kBAI7CtD,EAAAoE,WAAP,SAAkBR,EAAmBrC,QAAA,IAAAA,MAAQvB,EAAWuB,OACpD,IAAMsC,EAAMhE,EAAO+D,GACbM,EAAW3C,EAAM6C,WAAWP,GAC9BK,aAAoBvE,EAAA,GACpBL,OAAO0D,KAAKC,QAAQ,CAChBC,MAAOlD,EAAWmD,oBAAoBe,EAASd,eAC/C3B,MAAOzB,EAAWqD,oBAAoB9B,EAAM+B,kBAKjDtD,EAAAmD,oBAAP,SAA2BD,GAIvB,OAHAA,EAAM9C,QAAQ,SAACN,GACXA,EAAEuE,MAAQ,OAEPnB,GAGJlD,EAAAqD,oBAAP,SAA2B5B,GAIvB,OAHAA,EAAMrB,QAAQ,SAACN,UACJA,EAAEuE,QAEN5C,GAGJzB,EAAAsE,cAAP,SAAqBV,EAAYrC,QAAA,IAAAA,MAAQvB,EAAWuB,OAChD,IAAMxC,EAAIwC,EAAMgD,QAAQX,GAAI,GAC5B,OAAU,IAAN7E,GAAqB,OAANA,GAAcA,aAAaa,EAAA,GAAab,EAAEyF,WAAWlC,OAAO3I,OAAS,EAC7EoF,EAAEyF,WAAWlC,OAGjBsB,EAAGa,YAIPzE,EAAA0E,cAAP,SAAqBlB,EAAejC,QAAA,IAAAA,MAAQvB,EAAWuB,OACnD,IAAIxC,EAAIwC,EAAM6B,aAAY,GAK1B,GAAiB,KAJjBrE,EAAIA,EAAE4F,OAAO,SAACC,GACV,OAAOA,EAAKJ,WAAWK,gBAAkBrB,EAAMqB,eAAiBD,EAAKE,QAAQL,aAAejB,KAG1F7J,OACF,OAAQ,EAEP,GAAiB,IAAboF,EAAEpF,OACP,OAAOoF,EAAE,GAAG+F,QAGhB,IAAIC,GAAO,EACPC,GAAQ,EASZ,OAPAjG,EAAEqB,QAAQ,SAACwE,GACFI,GAASJ,EAAKE,QAAQL,aAAejB,IACtCuB,EAAMH,EAAKE,QACXE,GAAQ,KAIZA,EACOD,GAGXhG,EAAEqB,QAAQ,SAACwE,GACFI,GAASJ,EAAKJ,aAAehB,IAC9BuB,EAAMH,EAAKE,QACXE,GAAQ,KAIZA,EACOD,GAGXhG,EAAEqB,QAAQ,SAACwE,GACFI,GAASJ,EAAKJ,WAAWK,gBAAkBrB,EAAMqB,gBAClDE,EAAMH,EAAKE,QACXE,GAAQ,KAITD,KAIJ/E,EAAAiF,kBAAP,SAAyB1D,GACrB,IAAMzD,EAAIkC,EAAW8D,aAAavC,GAYlC,OAXIA,EAAM2D,cACNpH,EAAE2D,MAAMrB,QAAQ,SAAC/E,GACbA,EAAEmI,MAAQnI,EAAEwH,OAAO4B,aAG3B3G,EAAE2D,MAAMrB,QAAQ,SAAC/E,GACV,UAAWA,IACVA,EAAEgJ,MAAQ,CAACA,MAAOhJ,EAAEgJ,UAIrB,CAACnB,MAAO,IAAIzD,EAAA,QAAQ3B,EAAEoF,OAAsBzB,MAAO,IAAIhC,EAAA,QAAQ3B,EAAE2D,SAGrEzB,EAAAmF,aAAP,SAAoBC,EAAoD7D,QAAA,IAAAA,MAAQvB,EAAWuB,OACvF,IAAI8D,EAAW9D,EAAM+D,6BAWrB,OAVAxL,OAAO6H,KAAKyD,GAAWhF,QAAQ,SAAC3G,GAC5B,IAAMqG,EAAIsF,EAAU3L,GACdmL,EAAOS,EAASlH,IAAI4B,SAAStG,IAE/BmL,EAAKW,aAAa,OAASzF,EAAE2D,GAAKmB,EAAKW,aAAa,OAASzF,EAAE4D,IAE/D2B,EAAWA,EAASG,IAAIzF,SAAStG,GAAImL,EAAKjB,SAASiB,EAAKJ,WAAY,CAACf,EAAG3D,EAAE2D,EAAGC,EAAG5D,EAAE4D,QAInF,IAAI/D,EAAA,EAAW0F,EAAU9D,EAAMkE,6BAA8BlE,EAAMmE,aAAcnE,EAAM2D,eAG3FlF,EAAA8D,aAAP,SAAoBvC,EAA0BoE,EAAyBC,QAAnD,IAAArE,MAAQvB,EAAWuB,YAAO,IAAAoE,OAAA,QAAyB,IAAAC,OAAA,GACnE,IAAM1C,EAAQ3B,EAAM6B,cACd3B,EAAQF,EAAM+B,cACpB,MAAO,CACHJ,MAAOyC,EAAkB3F,EAAWmD,oBAAoBD,GAASA,EACjEzB,MAAOmE,EAAkB5F,EAAWqD,oBAAoB5B,GAASA,EACjEoE,SAAUtE,EAAMmE,aAChBI,SAAUvE,EAAM2D,eArTVlF,EAAA+F,WAA8B,GAC9B/F,EAAAgG,YAAmC,GACnChG,EAAAiG,eAAsC,GACtCjG,EAAAkG,WAAa,GACblG,EAAAG,SAAiC,CAC3C,CACI9C,KAAM,mBAAoB8C,UAAU,EAAOlD,KAAM,WACjD4D,UAAW,WACP,OAAOvB,OAAO6G,GAAGC,8BAGzB,CACI/I,KAAM,gBAAiB8C,UAAU,EAAOlD,KAAM,QAC9C4D,UAAW,WACP,OAAOvB,OAAO6G,GAAGC,8BAGzB,CAAC/I,KAAM,WAAY8C,UAAU,EAAME,QAAQ,EAAMpD,KAAM,YACvD,CAACI,KAAM,QAAS8C,UAAU,EAAME,QAAQ,EAAMpD,KAAM,YACpD,CACII,KAAM,WAAY8C,UAAU,EAAOlD,KAAM,WACzC4D,UAAW,SAACpH,GACR,OAAO6F,OAAO6G,GAAGE,qBAAqB5M,KAG9C,CACI4D,KAAM,uBAAwB8C,UAAU,EAAOlD,KAAM,WACrD4D,UAAW,WACPvB,OAAO6G,GAAGG,gBAAgB1F,KAAK,SAACd,GAAM,MAAW,yBAAXA,EAAEzC,OAAkCwD,cAGlF,CACIxD,KAAM,sBAAuB8C,UAAU,EAAOlD,KAAM,QACpD4D,UAAW,WACPvB,OAAO6G,GAAGG,gBAAgB1F,KAAK,SAACd,GAAM,MAAW,yBAAXA,EAAEzC,OAAkCwD,cAGlF,CACIxD,KAAM,gCAAiC8C,UAAU,EAAOlD,KAAM,WAC9D4D,UAAW,WACPvB,OAAO6G,GAAGG,gBAAgB1F,KAAK,SAACd,GAAM,MAAW,kCAAXA,EAAEzC,OAA2CwD,cAG3F,CACIxD,KAAM,8BAA+B8C,UAAU,EAAOlD,KAAM,QAC5D4D,UAAW,WACPvB,OAAO6G,GAAGG,gBAAgB1F,KAAK,SAACd,GAAM,MAAW,kCAAXA,EAAEzC,OAA2CwD,cAG3F,CACIxD,KAAM,SAAU8C,UAAU,EAAOlD,KAAM,WACvC4D,UAAW,WACP,OAAOvB,OAAO6G,GAAGI,0BAIfvG,EAAAgB,MAAwB,CAClCwF,4BAA6B,KAC7BC,oBAAqB,KACrBC,cAAe,MAGL1G,EAAAiB,gBAAmC,CAC7CK,SAAU,EACVG,MAAO,EACPkF,UAAU,EACVC,mBAAoB,KACpBC,uBAAwB,KACxBC,gCAAiC,KACjCC,QAAQ,GAmPhB/G,EAzTA,GAAqBgH,EAAA,oCC7DrB,IAAAC,EAAAnM,EAAA,GA2BMoM,EAAkB,SAACC,GACrBA,EAAOC,MAAM,SAGXC,EAAO,CACTC,SAAA,SAASC,EAAeC,EAAYC,GAChC,IAmBIC,EACArK,EACAjB,EACAuL,EAtBEC,EAAgB,SAACC,GACnB,IAAKA,GAAiC,oBAA1B,GAAGpD,SAASxK,KAAK4N,GACzB,OAAO,EAGX,IAAIC,EAAQhO,OAAOiO,eAAeF,GAElC,IAAKC,EACD,OAAO,EAIX,IAAIE,EAAO,GAAGhO,eAAeC,KAAK6N,EAAO,gBAAkBA,EAAMG,YACjE,MACoB,mBAATD,GACP,GAAGhO,eAAeyK,SAASxK,KAAK+N,KAAU,GAAGhO,eAAeyK,SAASxK,KAAKH,SAQ9EqD,EAAS+K,UAAU,IAAM,GACzBzO,EAAI,EACJE,EAASuO,UAAUvO,OAqBvB,IAlBsB,kBAAXwD,IACPoK,EAAOpK,EAGPA,EAAS+K,UAAUzO,IAAM,GACzBA,KAIkB,iBAAX0D,GAAyC,mBAAXA,IACrCA,EAAS,IAGT1D,IAAME,IACNwD,EAASgL,KACT1O,KAGGA,EAAIE,EAAQF,IAEf,GAAgC,OAA3BiO,EAAUQ,UAAUzO,IAErB,IAAK4D,KAAQqK,EACTtL,EAAMe,EAAOE,GAITF,KAHJsK,EAAOC,EAAQrK,MAQXkK,GAAQE,IAASG,EAAcH,KAAUE,EAAcS,MAAMC,QAAQZ,MACjEE,GACAA,GAAc,EACdH,EAAQpL,GAAOgM,MAAMC,QAAQjM,GAAOA,EAAM,IAE1CoL,EAAQpL,GAAOwL,EAAcxL,GAAOA,EAAM,GAI9Ce,EAAOE,GAAQgK,EAAKC,SAASC,EAAMC,EAAOC,SAG1BlK,IAATkK,IACPtK,EAAOE,GAAQoK,IAO/B,OAAOtK,GAGXmL,WAAY,SAAItK,GAcZ,OAbAlE,OAAOyO,OAAOvK,GAEdlE,OAAO0O,oBAAoBxK,GAAGoC,QAAQ,SAACqI,IAE/BzK,EAAEhE,eAAeyO,IACI,OAApBzK,EAAUyK,IACkB,iBAApBzK,EAAUyK,IAAkD,mBAApBzK,EAAUyK,IAC1D3O,OAAO4O,SAAU1K,EAAUyK,KAE5BpB,EAAKiB,WAAYtK,EAAUyK,MAI5BzK,GAGX2K,KAAM,SAAIC,EAAUC,GAChB,OAAWD,EAAGpJ,QAAEmJ,KAAKE,IAGzBC,eAAgB,SAACC,EAASlK,GACtB,IAAMT,EAAW,GAIjB,OAHA2K,EAAG3I,QAAQ,SAACN,GACR1B,EAAEvE,KAAKiG,EAAEjB,MAENwI,EAAKiB,WAAWlK,IAG3B4K,aAAc,SAAIJ,EAAUjH,GAUxB,OATAiH,EAAMA,EAAIpJ,SACNY,QAAQ,SAACN,GACChG,OAAO6H,KAAK7B,GACpBM,QAAQ,SAAAvB,GACF8C,EAAKrB,QAAQzB,GAAO,UACbiB,EAAEjB,OAIdwI,EAAKiB,WAAWM,IAG3BK,iBAAkB,SAACC,GACf,OAAOA,EAASC,MAAM,KAAKtO,QAAQ,GAAG,IAG1C0H,WAAY,SAAC6G,GACT,IAAM5K,EAAI1C,SAASC,cAAc,YAGjC,OAFAyC,EAAE6K,YAAcD,EAChBA,EAAS5K,EAAEiE,UAAU6G,QAAQ,kBAAmB,UAIpDC,SAAU,SAACC,EAAcC,GACjBA,IACAD,EAAOnC,EAAK9E,WAAWkH,IAE3B3N,SAAS0G,eAAe,YAAaC,UAAY+G,GAGrDE,QAAS,SAAI3H,GACT,IAAM3D,EAAS,GAIf,OAHAtE,OAAO6H,KAAKI,GAAK3B,QAAQ,SAAA3G,GACrB2E,EAAEvE,KAAKkI,EAAItI,MAER4N,EAAKiB,WAAWlK,IAG3BuL,OAAQ,SAAC5H,GACL,IAAM3D,EAAS,GAQf,OAPAtE,OAAO6H,KAAKI,GAAK3B,QAAQ,SAAA3G,GACjBsI,EAAItI,KAAM2E,EACVA,EAAE2D,EAAItI,IAAII,KAAKJ,GAEf2E,EAAE2D,EAAItI,IAAM,CAACA,KAGd4N,EAAKiB,WAAWlK,IAG3BwL,IAAK,SAACC,GACF,OAAOA,EAASC,OAAO,SAACnJ,EAAGoJ,GACvB,OAAOC,KAAKJ,IAAIjJ,EAAGoJ,MAI3B1H,YAAa,SAAC4H,GACV,OAAOA,EAAIX,QAAQ,cAAe,SAAAY,GAC9B,OAAOA,EAAMC,iBAIrBC,gBAAiB,SAACC,EAAeC,GAC7BjD,EAAKkD,cAAc,KAAMF,EAAO,KAAM,CAAC,CAAEpN,KAAM,OAAQuN,aAAcF,IAAS,MAAM,IAGxFG,cAAe,SAACJ,EAAeK,EAA4BC,EAAsBC,QAAA,IAAAA,OAAA,GAC7E,IAAMC,EAAI5D,EAAE,QAAS,CAAE6D,MAAO,0BAC9BH,EAAKvK,QAAQ,SAAC2K,EAAStR,GACb,iBAAkBsR,IACpBA,EAAQP,aAAe,IAG3B,IAAI5G,EAAK,cAAgBnK,EACrB,OAAQsR,GAA0B,KAAfA,EAAQnH,IAA4B,OAAfmH,EAAQnH,IAAqC,iBAAfmH,EAAQnH,KAC9EA,EAAKmH,EAAQnH,IAGjB,IAAMoH,EAAyB,CAAEF,MAAO,eAAgBlH,GAAEA,EAAErF,MAAOwM,EAAQP,cAEvE,eAAgBO,GAChBjR,OAAO6H,KAAKoJ,EAAQE,YAAY7K,QAAQ,SAAA8K,GACQ,mBAAjCH,EAAQE,WAAWC,KAC1BF,EAASE,GAAYH,EAAQE,WAAWC,MAKpD,IAAIC,EAA8C,WAAM,UACpD,mBAAoBJ,GAA6C,mBAA3BA,EAAQK,iBAC9CD,EAAYJ,EAAQK,gBAGxB,IAAMC,EAAmB,SAAC1O,EAAY2O,QAAA,IAAAA,MAAA,MAClC,IAAMC,EAAKtE,EAAEtK,EAAMQ,QACfqO,EAAMD,EAAGC,MACQ,OAAjBF,GAAiD,mBAAjBA,IAChCE,EAAMF,EAAaE,IAEvB,IAAMC,EAAQN,EAAWK,EAAKD,IAEhB,IAAVE,EACAF,EAAGG,YAAY,cACVC,KAAK,aAAelS,GACpBmS,UAELL,EAAGM,SAAS,cAC6B,IAArCN,EAAGI,KAAK,aAAelS,GAAGE,QAC1B4R,EAAGO,MAAM7E,EAAE,QAAS,CAAE6D,MAAO,mBAAoBlH,GAAI,YAAcnK,IAAK+P,KAAKiC,MAKzF,GAAqB,SAAjBV,EAAQ9N,KACR4N,EAAEkB,OAAO9E,EAAE8D,EAAQP,oBAChB,GAAqB,aAAjBO,EAAQ9N,KACf+N,EAAS/N,KAAO,WAChB+N,EAASF,MAAQ,0BACVE,EAASzM,MACZwM,EAAQP,eACRQ,EAASgB,QAAU,IAGvBnB,EAAEkB,OACE9E,EAAE,QAAS,CAAE6D,MAAO,eAAgBiB,OAChC9E,EAAE,UAAW,CAAEgF,IAAKrI,EAAIkH,MAAO,qBAC1BtB,KAAKuB,EAAQvH,OACb0I,QAAQjF,EAAE,UAAW+D,WAMlC,GAFAH,EAAEkB,OAAO9E,EAAE,UAAW,CAAEgF,IAAKrI,EAAIkH,MAAO,mBAAoBtB,KAAKuB,EAAQvH,QAEpD,WAAjBuH,EAAQ9N,KAAmB,CACvB,iBAAkB8N,IAAoC,IAAzBA,EAAQoB,eACrCnB,EAASF,OAAS,gBAEtB,IAAMsB,EAAKnF,EAAE,WAAY+D,GAAUxB,KAAKuB,EAAQP,cAC5C,YAAaO,GAAsC,mBAApBA,EAAQsB,SACvCD,EAAGE,GAAG,QAASvB,EAAQsB,SAE3BxB,EAAEkB,OAAOK,QACN,GAAqB,YAAjBrB,EAAQ9N,KACf+N,EAAS/N,KAAO,SAChB4N,EAAEkB,OACE9E,EAAE,UAAW+D,GAAUsB,GAAG,gBAAiB,SAAAjR,GACvCgQ,EAAiBhQ,EAAGkR,oBAGzB,GAAqB,SAAjBxB,EAAQ9N,KACf+N,EAAS/N,KAAO,OAChB4N,EAAEkB,OAAO9E,EAAE,UAAW+D,GAAUsB,GAAG,gBAAiBjB,SACjD,GAAqB,SAAjBN,EAAQ9N,KACf+N,EAAS/N,KAAO,OAChB+N,EAASF,MAAQ,iCACjBD,EAAEkB,OAAO9E,EAAE,UAAW+D,GAAUsB,GAAG,gBAAiBjB,SACjD,GAAqB,aAAjBN,EAAQ9N,KAAqB,CAC9BmP,EAAKnF,EAAE,aAAc+D,GAAUsB,GAAG,gBAAiBjB,GACrD,YAAaN,GACbqB,EAAGE,GAAG,QAASvB,EAAQsB,SAE3BxB,EAAEkB,OAAOK,QACN,GAAqB,WAAjBrB,EAAQ9N,KAAmB,CAClC,IAAMuP,EAAWvF,EAAE,WAAY+D,GAC/BD,EAAQ0B,WAAYrM,QAAQ,SAACsM,EAAOC,GAC5BA,EAAS5B,EAAQ6B,aAAcjT,OAC/B6S,EAAST,OAAO9E,EAAE,WAAY,CAAE1I,MAAOwM,EAAQ6B,aAAcD,KAAWnD,KAAKkD,IAE7EF,EAAST,OAAO9E,EAAE,YAAYuC,KAAKkD,MAG3C7B,EAAEkB,OAAOS,EAASF,GAAG,gBAAiBjB,OAKlD,IAAIwB,EAAsC5F,EAAE,QAAS,CAAE6D,MAAO,iBACzDiB,OAAO9E,EAAE,WAAY,CAAE6D,MAAO,kBAAmB7N,KAAM,WAAYuM,KAAKkB,IACxEqB,OAAO9E,EAAE,WAAY,CAAE6D,MAAO,4BAA6B7N,KAAM,WAAYuM,KAAK,YAExE,IAAXoB,IACAiC,EAAU,MAGd,IAAM1F,EAASF,EAAE,QAAS,CAAE6D,MAAO,aAAcgC,SAAU,KAAMC,KAAM,SAAUC,cAAe,SAoChG,OAnCA7F,EAAO4E,OACH9E,EAAE,QAAS,CAAE6D,MAAO,iBAAkBiB,OAClC9E,EAAE,QAAS,CAAE6D,MAAO,kBACfiB,OACG9E,EAAE,QAAS,CAAE6D,MAAO,iBACfiB,OAAO9E,EAAE,OAAQ,CAAE6D,MAAO,gBAAiBtB,KAAKa,IAChD0B,OACG9E,EAAE,WAAY,CACV6D,MAAO,QACPmC,eAAgB,QAChBC,aAAc,UACfnB,OAAO9E,EAAE,SAAU,CAAE+F,cAAe,SAAUG,KAAK,cAGjEpB,OAAOlB,GACPkB,OAAOc,KAGpB1F,EACKvG,KAAK,mBACLwM,IAAI,SACJd,GAAG,QAAS,SAAAjR,GACK,UAAVA,EAAEwD,KACFoI,EAAE,gBACGoG,OACAC,QAAQ,WAGzBnG,EAAOmF,GAAG,iBAAkB,WACxBnF,EACKvG,KAAK,sDACL2M,QACAD,QAAQ,WAGVnG,GAGXoD,cAAe,SACXiD,EACAnD,EACAK,EACAC,EACA8C,EACA7C,QADA,IAAA6C,MAAAvG,QACA,IAAA0D,OAAA,GAEA,IAAMzD,EAASE,EAAKoD,cAAcJ,EAAOK,EAAaC,EAAMC,GAE5DzD,EACKmF,GAAG,QAAS,cAAe,WACA,mBAAbmB,EACPA,EAAStG,GAETA,EAAOC,MAAM,UAGpBkF,GAAG,QAAS,eAAgB,WACzBnF,EAAOC,MAAM,UAEhBkF,GAAG,QAAS,eAAgB,WACzB,IAAMoB,EAAc,GAChBC,GAAY,EAEhBxG,EAAOvG,KAAK,2BAA2BgN,KAAK,SAACnU,EAAGqG,GAC5C,IAAMyL,EAAKtE,EAAEnH,GAEe,WAAvByL,EAAWsC,QACZH,EAAK7T,KAAK0R,EAAG3K,KAAK,aAAa4K,OACJ,aAApBD,EAAGuC,KAAK,QACfJ,EAAK7T,KAAK0R,EAAG9C,KAAK,YACS,SAApB8C,EAAGuC,KAAK,QACfJ,EAAK7T,KAAM0R,EAAGpN,IAAI,GAAW4P,OACF,WAApBxC,EAAGuC,KAAK,QACfJ,EAAK7T,KAAK0S,WAAWhB,EAAGC,QAExBkC,EAAK7T,KAAK0R,EAAGC,OAGbD,EAAG+B,QAAQ,YAAYU,SAAS,gBAChCL,GAAY,KAIfA,GAAkC,mBAAdH,GACrBA,EAAUrG,EAAQuG,KAGzBpB,GAAG,kBAAmB,WACnBnF,EAAOyE,WAEVxE,MAAM,UAIJJ,EAAA,y5CCvWTiH,EAAc,CAChBC,WAAYA,EAAA,EACZC,UAAWrS,SAAS0G,eAAe,WAEnC4L,kBAAmB,SAACjV,EAA2BkV,GAC3CC,EAAA,EAAK/D,cAAc,SAACpD,EAAQuG,GACxBW,EAAS,MACTlH,EAAOC,MAAM,QACb,IAAM7I,EAAQgO,WAAWmB,EAAK,IAC9BQ,EAAA,EAAWnK,SAAS5K,EAAKwJ,KAAKiB,GAAIzK,EAAKyJ,GAAGgB,GAAIrF,EAAOgO,WAAWpT,EAAKqK,SACtE,YAAa,OAAQ,CACpB,CACIvG,KAAM,UACNuG,MAAO,kBACPgH,aAAc+B,WAAWpT,EAAKqK,WAI1C+K,WAAY,CACRC,YAAa,CAACC,OAAO,GACrBC,aAAc,CACVnL,QAAS,SAAOpK,EAAMkV,GAAQ,OAAAzM,OAvF1CrE,OAuF0C,yFAIW,OAHtByE,GAAAlB,EAAAwN,EAAA,GAAK7D,iBAAc,WAAY,WAEtCxN,KAAM,yBACuB,GAAMiR,EAAA,EAAW1N,YAAY,oBAEjB,WAFzCmO,EAAAnE,aAAcoE,EAAeC,EAAA9N,OAAwC,cAExE9D,KAAM,OAAQuG,MAAO,SAAuB,GAAM0K,EAAA,EAAW1N,YAAY,2BALxEsO,EAAS9M,EAAA1H,MAAAwG,EAAAmB,EAAA8M,OAAA,CAAAC,EAAAD,OAAA,EAKoBE,EAAAzE,aAAcqE,EAAA9N,OAAwCkO,SAGlF3C,GAAG,QAAS,eAAgB,WAC/BwC,EAAO1H,MAAM,QACb6G,EAAKiB,SAAS/V,EAAMkV,EAAU,MAAOS,EAAOlO,KAAK,SAAS2M,QAAQ/B,SACnEc,GAAG,QAAS,cAAe,WAC1BwC,EAAO1H,MAAM,QACb6G,EAAKkB,WAAWd,KACjB/B,GAAG,kBAAmB,WACrBwC,EAAOlD,SACPqC,EAAKkB,WAAWd,KACjBjH,MAAM,kBAEbzD,SAAU,SAACxK,EAAMkV,GACb,IAAMS,EAASR,EAAA,EAAK7D,cAAc,YAAa,OAAQ,CACnD,CACIxN,KAAM,OACNuN,aAAc,eAAerR,EAAKyK,GAAE,QAExC,CAAC3G,KAAM,OAAQuG,MAAO,QAASgH,aAAcrR,EAAKqK,SAGtDsL,EAAOxC,GAAG,QAAS,eAAgB,WAC/BwC,EAAO1H,MAAM,QACb6G,EAAKiB,SAAS/V,EAAMkV,EAAU,WAAYS,EAAOlO,KAAK,SAAS2M,QAAQ/B,SACxEc,GAAG,QAAS,cAAe,WAC1BwC,EAAO1H,MAAM,QACb6G,EAAKkB,WAAWd,KACjB/B,GAAG,kBAAmB,WACrBwC,EAAOlD,SACPqC,EAAKkB,WAAWd,KACjBjH,MAAM,SAEb1E,QAAS,SAACvJ,EAAMkV,GACZ,IAAM/T,EAAQ,WACc,mBAAb+T,GACPA,EAAS,MAEbH,EAAA,EAAWxL,QAAQvJ,EAAKwJ,KAAMxJ,EAAKyJ,KAEnCzJ,EAAKwJ,OAASxJ,EAAKyJ,GAOvBtI,IANQ8U,QAAQ,+CACR9U,KAOZyJ,SAAU,SAAC5K,EAAMkV,GACbA,EAAS,MACTJ,EAAKM,WAAWG,aAAavK,WAAW,CAAC1C,MAAO,CAACtI,EAAKyK,MACtDqK,EAAKM,WAAWG,aAAahM,QAAQvJ,IAEzCgL,WAAY,SAAChL,EAAMkV,GACS,mBAAbA,GACPA,EAAS,MAEblV,EAAKsI,MAAMrB,QAAQ,SAACN,GAChB,IAAI+C,EAAS,UACyD,IAA1DvD,OAAO+P,QAAgB/E,KAAKnR,KAAKsI,MAAM6N,MAAMxP,GAAG0D,QACxDX,EAAS0J,WAAYjN,OAAO+P,QAAgB/E,KAAKnR,KAAKsI,MAAM6N,MAAMxP,GAAG0D,QAGzE0K,EAAA,EAAW/J,WAAY7E,OAAO+P,QAAgB/E,KAAK7I,MAAM3B,GAAGyP,OACvDjQ,OAAO+P,QAAgB/E,KAAK7I,MAAM3B,GAAG0P,KAAM3M,MAGxDuB,WAAY,SAACjL,EAAMkV,GACfA,EAAS,MACTlV,EAAK+J,MAAM9C,QAAQ,SAACN,GAChBoO,EAAA,EAAW9J,WAAWtE,QAMtCqP,WAAY,SAACd,GACe,mBAAbA,GACPA,EAAS,OAIjBa,SAAU,SAAC/V,EAAMkV,EAAUoB,EAAWjM,GAClC6K,EAAS,MAETlV,EAAKqK,MAAQA,EACK,QAAdiM,EACAvB,EAAA,EAAW3K,QAAQpK,GAEA,aAAdsW,GACLvB,EAAA,EAAWvK,SAASxK,EAAKyK,GAAIzK,EAAKqK,QAI1CkM,qBAAsB,SAAC5P,GACnB,OAAIoO,EAAA,EAAWxJ,cAAc5E,IAAM,GAG5B,uBAGX6P,YAAa,kBAAA/N,OApMjBrE,OAoMiB,iFACT,OAAI+B,OAAO8B,SAASC,UAAU,aAC1B,IAEgB,GAAM6M,EAAA,EAAW1N,YAAY,iBAAiB,WAC1C,OADlBoP,EAAc9O,EAAAC,OACI,GAAMmN,EAAA,EAAW1N,YAAY,oBAAoB,kBAAnEqP,EAAkB/O,EAAAC,OAElB+O,EAASC,IAAY,CAACC,MAAOH,EAAiBI,WAAY,WAC5DC,EAAIhC,EAAA,EAAW3M,OAChB6B,cAAmChD,QAAQ,SAACN,GAC3CoQ,EAAIA,EAAEvM,SAAS7D,EAAE8D,GAAI,CAACS,MAAOyL,EAAOF,EAAY9P,EAAE8D,SAEtDqK,EAAKhL,QAAQiL,EAAA,EAAWpK,aAAaoM,IAAI,GAAO,aAGpDjN,QAAS,SAAC9J,EAAMgX,EAAqBC,EAAqBC,QAA1C,IAAAF,OAAA,QAAqB,IAAAC,OAAA,QAAqB,IAAAC,OAAA,GAElDA,GACAlX,EAAK+J,MAAM9C,QAAQ,SAACN,UACTA,EAAE2D,SACF3D,EAAE4D,IAIb0M,GACAnC,EAAKqC,YAGL,aAAcnX,QAAiC,IAAlBA,EAAK0M,UAClCvG,OAAO8B,SAASmP,aAAa,YAAapX,EAAK0M,UAE/C,aAAc1M,QAAiC,IAAlBA,EAAK2M,UAClCxG,OAAO8B,SAASmP,aAAa,UAAWpX,EAAK2M,UAEjD,IAAM3E,EAAc7B,OAAO8B,SAASC,UAAU,aACxCyE,EAAWxG,OAAO8B,SAASC,UAAU,WAErCmP,EAAI,IAAIC,EAAA,EAAWtX,EAAK+J,MAAO/J,EAAKsI,MAAON,EAAa2E,GAC9DoI,EAAA,EAAW3M,MAAQiP,EAGnBvC,EAAKyC,2BAA2BpR,OAAO+P,SACvC/P,OAAO+P,QAAQpM,QAAQiL,EAAA,EAAWjJ,kBAAkBuL,IACpDtC,EAAA,EAAW3M,MAAQ2M,EAAA,EAAW/I,aAAa7F,OAAO+P,QAAQsB,gBAE1DrR,OAAO+P,QAAQuB,kBACftR,OAAO+P,QAAQwB,iBAEXT,IACA9Q,OAAO6G,GAAG2K,uBACVxR,OAAO6G,GAAG4K,UAAY,GACtBzR,OAAO6G,GAAG6K,yBACV1R,OAAO6G,GAAG8K,uBACV3C,EAAA,EAAK/E,SAAS,IACd2E,EAAA,EAAWjO,cACXiO,EAAA,EAAW3N,uBAAuB4P,IAGtClC,EAAKiD,yBAGTZ,UAAW,WACkB,OAArBpC,EAAA,EAAW3M,QAIX2M,EAAA,EAAWlI,YAAYrM,QAAUuU,EAAA,EAAWhI,YAC5CgI,EAAA,EAAWlI,YAAY5L,QAG3B8T,EAAA,EAAWlI,YAAYnM,KAAKoU,EAAKkD,qBACjCjD,EAAA,EAAWjI,eAAiB,GAC5BnK,SAASsV,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAeC,UAAUC,IAAI,YAGvGL,kBAAmB,WACf,IAAMnQ,EAAa,GAkBnB,OAjBAlH,OAAO6H,KAAKuM,EAAA,GAAY9N,QAAQ,SAACgC,GAC7B,IAAMtC,EAAUoO,EAAA,EAAmB9L,GAClB,mBAANtC,IACU,iBAANA,EACPkB,EAAMoB,GAAKtC,GAGD,UAANsC,GAAuB,OAANtC,IACjBkB,EAAMoB,GAAKtC,GAEVsC,EAAEyC,cAAc4M,SAAS,aAC1BzQ,EAAMoB,GAAKkM,EAAA,EAAKhH,UAAS,EAAMc,MAAMC,QAAQvI,GAAK,GAAK,GAAIA,QAMpEkB,GAGX0Q,KAAM,WACExD,EAAA,EAAWlI,YAAYrM,OAAS,GAChCsU,EAAK0D,YAAW,IAIxBC,KAAM,WACE1D,EAAA,EAAWjI,eAAetM,OAAS,GACnCsU,EAAK0D,YAAW,IAIxBA,WAAY,SAACD,EAAaG,QAAb,IAAAH,OAAA,QAAa,IAAAG,MAAA,MACtB,IAAMC,EAAyB,OAAbD,EACZE,EAAe9D,EAAKkD,oBAErBW,IAEGD,EADAH,EACWxD,EAAA,EAAWlI,YAAYgM,MAGvB9D,EAAA,EAAWjI,eAAe+L,OAK7CH,EAAStQ,MAAQ,IAAIkP,EAAA,EAAWoB,EAAStQ,MAAM2B,MAAO2O,EAAStQ,MAAME,MAAOoQ,EAAStQ,MAAMsE,SAAUgM,EAAStQ,MAAMuE,UAEpHxG,OAAO8B,SAASmP,aAAa,YAAasB,EAAUtQ,MAAMmE,cAC1DpG,OAAO8B,SAASmP,aAAa,UAAWsB,EAAUtQ,MAAM2D,cAExDgJ,EAAA,EAAW3M,MAAQsQ,EAAUtQ,MAE7BjC,OAAO+P,QAAQpM,QAAQiL,EAAA,EAAWjJ,kBAAkBiJ,EAAA,EAAW3M,QAC/DjC,OAAO+P,QAAQuB,kBACftR,OAAO+P,QAAQwB,iBAEfvR,OAAO6G,GAAG8K,uBACV3C,EAAA,EAAK/E,SAAS,IAEdzP,OAAO6H,KAAKkQ,GAAWzR,QAAQ,SAACgC,GAC5B,IAAMtC,EAAI+R,EAAUzP,GACH,iBAANtC,EACNoO,EAAA,EAAmB9L,GAAKtC,EAEnBsC,EAAEyC,cAAc4M,SAAS,YAAkC,UAApBrP,EAAEyC,gBACvB,aAApBzC,EAAEyC,cACF/K,OAAO6H,KAAMuM,EAAA,EAAmB9L,IAAIhC,QAAQ,SAAC6R,GACxC/D,EAAA,EAAmB9L,GAAG6P,GAAQ9R,SAAYL,EAAUmS,GAAQ9R,WAIhE+N,EAAA,EAAmB9L,GAAKkM,EAAA,EAAKhH,UAAS,EAAO4G,EAAA,EAAmB9L,GAAItC,MAKjFoO,EAAA,EAAW3N,yBAAyB2R,KAAK,WACjCR,IAASI,GACThW,SAASsV,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAeC,UAAUC,IAAI,UAC7D,IAAlCtD,EAAA,EAAWlI,YAAYrM,QACvBmC,SAASsV,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAeC,UAAU3F,OAAO,UAE1GsC,EAAA,EAAWjI,eAAepM,KAAKkY,IAEzBL,GAASI,IACfhW,SAASsV,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAeC,UAAUC,IAAI,UAC1D,IAArCtD,EAAA,EAAWjI,eAAetM,QAC1BmC,SAASsV,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAeC,UAAU3F,OAAO,UAE1GsC,EAAA,EAAWlI,YAAYnM,KAAKkY,IAGhC9D,EAAKiD,2BAIbA,sBAAuB,WACf5R,OAAO8B,SAAS+Q,wBAChBC,aAAaC,QAAQ,4BAA6BC,KAAKC,UAAUtE,EAAKkD,uBAI9EqB,qBAAsB,WAClBvE,EAAKhL,QAAQ,CACTC,MAAOgL,EAAA,EAAW3M,MAAM6B,cACxB3B,MAAOyM,EAAA,EAAW3M,MAAM+B,gBACzB,GAAO,GAAO,IAGrBoN,2BAA4B,SAACrB,GACzB,IAAMjR,EAAI4L,KAAKyI,MAAsB,IAAhBzI,KAAK0I,UAC1BrD,EAAQsD,aAAaC,WAAaxU,EAClCiR,EAAQsD,aAAaE,kBAAoBzU,GAG7C0U,oBAAqB,SAACzD,GAElBA,EAAQ/C,GAAG,cAAe,SAACjQ,GACnBiD,OAAO8B,SAASC,UAAU,YAAc,UAAWhF,GAAwB,IAAnBA,EAAEoF,MAAM9H,QAChE0V,EAAQ0D,eAER,UAAW1W,GAAwB,IAAnBA,EAAE6G,MAAMvJ,QACxB0V,EAAQ1L,aAKhB0L,EAAQ/C,GAAG,UAAW,WAClB4B,EAAA,EAAW3M,MAAQ2M,EAAA,EAAW/I,aAAakK,EAAQsB,gBACnD1C,EAAKiD,0BAIT,IAAI8B,EAAoC,KACxC3D,EAAQ/C,GAAG,QAAS,SAAC3P,GACjBqW,EAAwBrW,IAI5Bb,SAASmX,iBAAiB,QAAS,SAACpU,GAChB,WAAZA,EAAIA,KAA8C,OAA1BmU,GACpB/E,EAAKE,UAAU+E,SAAUF,EAA8BrW,MAAMQ,UACxD,UAAW6V,GAAyE,IAA/CA,EAA8BvR,MAAM9H,QACtE,UAAWqZ,GAAyE,IAA/CA,EAA8B9P,MAAMvJ,SAC7E0V,EAAQ8D,mBAOxBrX,SAASmX,iBAAiB,UAAW,SAAC5X,GACL,MAAxBA,EAAEwD,IAAIgG,eAAyBxJ,EAAE+X,SAAqC,MAAxB/X,EAAEwD,IAAIgG,eAAyBxJ,EAAE+X,SAAW/X,EAAEgY,SAC7FpF,EAAK2D,OAEwB,MAAxBvW,EAAEwD,IAAIgG,eAAyBxJ,EAAE+X,SACtCnF,EAAKyD,SAKb5V,SAASmX,iBAAiB,QAAS,SAAC5X,GAC5B4S,EAAKE,YAAc9S,EAAE8B,QAAW8Q,EAAKE,UAAU+E,SAAS7X,EAAE8B,UAC1D6V,EAAwB,UAOzBhQ,EAAA,ECnbM5B,EAArB,oBAAAkS,KAoEA,OA5DkBA,EAAAnB,qBAAd,WACI,IACI,IAAM1O,EAAI,mBAGV,OAFA2O,aAAaC,QAAQ5O,EAAGA,GACxB2O,aAAamB,WAAW9P,IACjB,EACT,MAAOpI,GACL,OAAO,IAIDiY,EAAAE,aAAd,WACQF,EAASnB,wBACTC,aAAaC,QAAQ,2BAA4BC,KAAKC,UAAUe,EAASG,WAInEH,EAAAI,aAAd,WACI,GAAIJ,EAASnB,uBAAwB,CACjC,IAAM/Q,EAAWgR,aAAauB,QAAQ,4BAElCL,EAASG,QADI,OAAbrS,EACmBA,EAEAkR,KAAKsB,MAAMxS,GAGb,OAArBkS,EAASG,UACTH,EAASG,QAAU,IAEvBH,EAASO,UAGCP,EAAAO,OAAd,WACIvU,OAAO+P,QAAQyE,WAAW,CAAE5Q,MAAO,CAAE6Q,QAAST,EAASjS,UAAU,kBACjE/B,OAAO+P,QAAQyE,WAAW,CAAErS,MAAO,CAAEuS,OAAQ,CAAEpR,GAAI0Q,EAASjS,UAAU,iBAClEiS,EAASjS,UAAU,WACnB/B,OAAO+P,QAAQyE,WAAW,CACtBpF,aAAc,CACV3K,SAAU,CACNkQ,gBAAiB3U,OAAO0D,KAAKoL,sBAKzC9O,OAAO+P,QAAQyE,WAAW,CAAEpF,aAAc,CAAE3K,SAAUzE,OAAO0D,KAAKuL,WAAWG,aAAa3K,aAIpFuP,EAAA/C,aAAd,SAA2B2D,EAAgB3V,GACvC+U,EAASG,QAAQS,GAAU3V,EAC3B+U,EAASE,eACTF,EAASO,UAGCP,EAAAjS,UAAd,SAAwB6S,GACpB,OAAIA,KAAUZ,EAASG,QACZH,EAASG,QAAQS,GAErBZ,EAASa,SAASD,IAjELZ,EAAAa,SAAyB,CAC7CC,aAAa,EACbC,WAAW,EACXC,SAAS,GAEEhB,EAAAG,QAAe,GA8DlCH,EApEA,+0CCSMiB,EAA2B,SAAClK,EAAemK,EAAY1O,GACzD,IAAM2O,EAAS,gBACXC,EAAe3D,UAAU0D,GACzBC,EAAeC,oBAAoBF,IAGvCC,EAAe3D,UAAU0D,IAAU,EAEnCnG,EAAA,EAAK/D,cACD,SAACpD,EAAQyN,GACLzN,EAAOC,MAAM,QAEb,IAAMyN,EAAS3G,EAAA,EAAWxJ,cAAckQ,EAAO,IACzCE,EAAO5G,EAAA,EAAWxJ,cAAckQ,EAAO,IAEvCG,EAAmBL,EAAeM,wBAClCC,EAAIP,EAAeQ,oBAAoB,SAAA7Z,GACzC,IAAIsF,EAAItF,EAAElC,KAOV,GANA8b,EAAEE,UACEJ,GACAL,EAAe5D,uBAEnB4D,EAAe3D,UAAU0D,IAAU,GAEzB,IAAN9T,EAAJ,CAmBAA,EAAIA,EAEJ,IAAItE,EAAI,OAAOgO,EAAK,gCAAgCiE,EAAA,EAAK/L,WACrDsS,EAAOpQ,YACV,OAAO6J,EAAA,EAAK/L,WAAWuS,EAAKrQ,YAE7B,GAAI9D,EAAEyU,WAAY,CACd/Y,EAAOgO,EAAK,SAAS6D,EAAA,EAAW5J,cAAcuQ,GAAO,OACrDxY,GAAQ6R,EAAA,EAAW5J,cAAcwQ,GAAK,KAAKnU,EAAE0U,SACzCvP,IACAzJ,GAAK,yBAAyBsE,EAAE2U,MAEpCjZ,GAAK,mBAELA,EAAIiS,EAAA,EAAK/L,WAAWlG,GACpB,IAAIkF,EAAQ2M,EAAA,EAAWpK,aAAaoK,EAAA,EAAW3M,OAAO,GAAO,GACzDgU,EAAI,IAAI9E,EAAA,EAAWlP,EAAM2B,MAAO3B,EAAME,MAAOF,EAAMsE,SAAUtE,EAAMuE,UACvEnF,EAAE6U,KAAKpV,QAAQ,SAACN,EAAWrG,GACvB4C,GAAQiS,EAAA,EAAK/L,WAAW2L,EAAA,EAAW5J,cAAcxE,IAAG,WAChDrG,EAAI,IACJ8b,EAAIA,EAAExR,SAASpD,EAAE6U,KAAK/b,EAAI,GAAIqG,EAAG,KAAM,KAAM,cAGrDoO,EAAA,EAAW3M,MAAQgU,EACnBjW,OAAO0D,KAAKC,QAAQiL,EAAA,EAAWpK,aAAayR,IAAI,GAAO,GAAO,GAC9DlZ,EAAIA,EAAEmD,MAAM,GAAI,GAChBnD,EAAI,OAAOgO,EAAK,YAAYhO,EAGhCiS,EAAA,EAAK/E,SAASlN,QA/CNgO,EAAMoH,SAAS,YACfnD,EAAA,EAAKlE,gBACD,iBACA,sPAKGC,EAAMoH,SAAS,YACtBnD,EAAA,EAAKlE,gBACD,qBACA,iJAsChB6K,EAAEQ,KAAK,CACHxY,KAAMuX,EACNkB,KAAM,CAACb,EAAQC,GACfa,qBAAqB,EACrBpU,MAAOjC,OAAO0D,KAAKkL,WAAWpK,kBAGtCuG,EACA,KACA,CACI,CACI7G,MAAO,aACPvG,KAAM,OACNmO,eAAgB9L,OAAO0D,KAAK0M,sBAEhC,CACIlM,MAAO,WACPvG,KAAM,OACNmO,eAAgB9L,OAAO0D,KAAK0M,0BAMtCkG,EAAyB,SAAOC,GAA0B,OAAAC,OApHhEvY,OAoHgE,4DAK5D,GAJIoD,EAAI,KACJoV,EAAK,uBACLC,EAAe,sBAEfH,EAAmB,CACnB,IAAKvW,OAAO8B,SAASC,UAAU,aAC3B,UAEJ0U,EAAK,YAAcA,EACnBC,EAAe,mCAEf,GAAI1W,OAAO8B,SAASC,UAAU,aAC1B,UAIR,OAAIqT,EAAe3D,UAAUgF,IACzBrB,EAAeC,oBAAoBoB,GACnC,GAAOta,QAAQE,OAAO,sBAE1B+Y,EAAe3D,UAAUgF,IAAM,EAEzBhB,EAAmBL,EAAeM,yBAClCC,EAAIP,EAAeQ,oBAAoB,SAAA7Z,GACzCsF,EAAItF,EAAElC,KACN8b,EAAEE,UAEFjH,EAAA,EAAWjN,gBAAgB8U,GAAMpV,EAAEqP,MACnC9B,EAAA,EAAWjO,aAAY,EAAM,CAAC8V,EAAIC,IAClC9H,EAAA,EAAWlN,MAAMgV,GAAgBrV,EAAEsV,WAEnC,IAAMA,EAAa3H,EAAA,EAAK5E,QAAQ/I,EAAEsV,YAC9B5Z,EAAI,aAAa0Z,EAAE,KAAKpV,EAAEqP,MAC9B3T,GAAK,OAEL4Z,EAAW7V,QAAQ,SAACN,EAAGrG,GACnB4C,GAAK,UAAU6R,EAAA,EAAW5J,cAAc7K,GAAE,+BAA+BqG,EAAC,OAG9EzD,GAAK,KAAKiW,KAAKC,UAAUjE,EAAA,EAAK3E,OAAOhJ,EAAEsV,YAAa,KAAM,GAAE,OAC5D5Z,EAAI,OAAO0Z,EAAE,YAAYzH,EAAA,EAAK/L,WAAWlG,GAErC0Y,GACAL,EAAe5D,uBAEnB4D,EAAe3D,UAAUgF,IAAM,EAE/BzH,EAAA,EAAK/E,SAASlN,MAEhBoZ,KAAK,CACHxY,KAAM+Y,EACNN,KAAM,GACNnU,MAAOjC,OAAO0D,KAAKkL,WAAWpK,eAC9B6R,qBAAqB,cAI7BO,EAAA,WAKI,SAAAC,EAAYvS,EAAYqR,EAAWmB,GAAnC,IAAAvU,EAAAsG,KACIA,KAAKvE,GAAKA,EACVuE,KAAKkO,OAASpB,EACd9M,KAAKiO,SAAWA,EAChBnB,EAAEqB,YAAY,CAAErZ,KAAM,KAAM2G,GAAEA,IAC9BqR,EAAEsB,UAAY,SAAClb,GACXwG,EAAKuU,SAAS,CAAEjd,KAAMkC,EAAElC,KAAKA,QAYzC,OARWgd,EAAApc,UAAA0b,KAAP,SAAYtc,GACRgP,KAAKkO,OAAOC,YAAYnd,IAGrBgd,EAAApc,UAAAob,QAAP,WACIhN,KAAKkO,OAAOG,YACZtI,EAAA,EAAWnI,WAAWoC,KAAKvE,IAAM,MAEzCuS,EAvBA,GAyBAzB,EAAA,oBAAA+B,KAynBA,OAvnBWA,EAAAnQ,cAAP,WACI,MAAO,CACH,CACIjJ,KAAM,iBACN8D,aAAa,EACbN,UAAW4V,EAAerQ,0BAC1BsQ,SAAS,GAEb,CACIrZ,KAAM,uBACN8D,aAAa,EACbN,UAAW,WACP+U,GAAuB,IAE3Bc,SAAS,GAEb,CACIrZ,KAAM,gCACN8D,aAAa,EACbuV,SAAS,EACT7V,UAAW,WACP+U,GAAuB,KAG/B,CACIvY,KAAM,8BACN8D,aAAa,EACbN,UAAW,WACP0T,EAAyB,8BAA+B,sBAAsB,IAElFmC,SAAS,GAEb,CACIrZ,KAAM,yBACNwD,UAAW,WACP0T,EAAyB,yBAA0B,kBAAkB,IAEzEmC,SAAS,GAEb,CACIrZ,KAAM,6BACNyI,UAAU,EACV3E,aAAa,EACbN,UAAW,WACP0T,EAAyB,6BAA8B,eAAe,IAE1EmC,SAAS,GAEb,CACIrZ,KAAM,iBACNyI,UAAU,EACV3E,aAAa,EACbN,UAAW4V,EAAeE,mBAC1BD,SAAS,GAEb,CACIrZ,KAAM,gCACNyI,UAAU,EACV3E,aAAa,EACbN,UAAW4V,EAAeG,oBAC1BF,SAAS,GAEb,CACIrZ,KAAM,SACNwD,UAAW4V,EAAelQ,qBAC1BpF,aAAa,EACbuV,SAAS,GAEb,CACIrZ,KAAM,mBACNwD,UAAW4V,EAAeI,4BAC1B1V,aAAa,EACbuV,SAAS,GAEb,CACIrZ,KAAM,WACN8D,aAAa,EACbuV,SAAS,EACT7V,UAAW,MAEf,CACIxD,KAAM,WACN8D,aAAa,EACbuV,SAAS,EACT7V,UAAW4V,EAAeK,mCAK/BL,EAAAM,kBAAP,eAAAlV,EAAAsG,KACU6O,EAA0B,SAACC,EAAkBzC,GAC/C1Y,SAASob,cAAcD,GAAWhE,iBAAiB,QAAS,SAAA5X,GACxDA,EAAE8b,iBACF3C,OAIRwC,EAAwB,mBAAoBP,EAAeW,WAC3DJ,EAAwB,sBAAuBP,EAAeY,cAC9DL,EAAwB,sBAAuB,kBAAAlB,EAAAjU,OAAA,2EACvB,SAAM/G,EAAAO,EAAA,GAAA6W,KAAApX,EAAAgE,KAAA,0BAApBwY,EAAcxW,EAAAC,OAAyCwW,QAC7DjY,OAAO0D,KAAKC,QAAQqU,EAAWE,YAAY,GAAO,GAAM,cAE5DR,EAAwB,wBAAyB,kBAAAlB,EAAAjU,OAAA,2EACzB,SAAM/G,EAAAO,EAAA,GAAA6W,KAAApX,EAAAgE,KAAA,0BAApBwY,EAAcxW,EAAAC,OAAyCwW,QAC7DjY,OAAO0D,KAAKC,QAAQqU,EAAWG,cAAc,GAAO,GAAM,cAE9DT,EAAwB,sBAAuB,kBAAAlB,EAAAjU,OAAA,qEACvB,SAAM/G,EAAAO,EAAA,GAAA6W,KAAApX,EAAAgE,KAAA,0BAANgC,EAAAC,OAAyCwW,QAClDG,sBAEfV,EAAwB,uBAAwB,kBAAAlB,EAAAjU,OAAA,qEACxB,SAAM/G,EAAAO,EAAA,GAAA6W,KAAApX,EAAAgE,KAAA,0BAANgC,EAAAC,OAAyCwW,QAClDI,uBAEfX,EAAwB,oBAAqB,kBAAAlB,EAAAjU,OAAA,qEACrB,SAAM/G,EAAAO,EAAA,GAAA6W,KAAApX,EAAAgE,KAAA,0BAANgC,EAAAC,OAAyCwW,QAClDK,oBAEfZ,EAAwB,aAAc1X,OAAO0D,KAAK0O,MAClDsF,EAAwB,aAAc1X,OAAO0D,KAAK4O,MAClDoF,EAAwB,iCAAkC,kBAAAlB,EAAAjU,OAAA,8CACtD,SAAOqM,EAAA,EAAW3N,wBAAuB,UAE7CyW,EAAwB,yBAA0B1X,OAAO0D,KAAKwP,sBAC9DwE,EAAwB,oBAAqB,kBAAAlB,EAAAjU,OAAA,qEAC5B,SAAM/G,EAAAO,EAAA,GAAA6W,KAAApX,EAAAgE,KAAA,0BAANgC,EAAAC,OAAoCwW,QAC7CM,iCAERb,EAAwB,oBAAqB,kBAAAlB,EAAAjU,OAAA,qEAC5B,SAAM/G,EAAAO,EAAA,GAAA6W,KAAApX,EAAAgE,KAAA,0BAANgC,EAAAC,OAAoCwW,QAC7CO,iCAERd,EAAwB,oBAAqB,kBAAAlB,EAAAjU,OAAA,qEAC5B,SAAM/G,EAAAO,EAAA,GAAA6W,KAAApX,EAAAgE,KAAA,0BAANgC,EAAAC,OAAoCwW,QAC7CQ,iCAERf,EAAwB,oBAAqB,kBAAAlB,EAAAjU,OAAA,qEAC5B,SAAM/G,EAAAO,EAAA,GAAA6W,KAAApX,EAAAgE,KAAA,0BAANgC,EAAAC,OAAoCwW,QAC7CS,kCAILvB,EAAAW,UAAP,WACI9I,EAAA,EAAKlE,gBACD,OACA,0RAODqM,EAAAY,aAAP,WACI/I,EAAA,EAAK/D,cACD,SAACpD,EAAQuG,GAKL,GAJAvG,EAAOC,MAAM,QACT9H,OAAO8B,SAASC,UAAU,iBAAmBqM,EAAK,IAClDpO,OAAO8B,SAASmP,aAAa,cAAe7C,EAAK,IAEjDpO,OAAO8B,SAASC,UAAU,eAAiBqM,EAAK,GAAI,CACpDpO,OAAO8B,SAASmP,aAAa,YAAa7C,EAAK,IAC/C,IAAIwC,EAAIhC,EAAA,EAAW3M,MACnB2O,EAAIxC,EAAK,GAAKwC,EAAE+H,YAAW,GAAQ/H,EAAEgI,eAErC5Y,OAAO0D,KAAKC,QAAQiL,EAAA,EAAWpK,aAAaoM,GAAG,IAEnD,GAAI5Q,OAAO8B,SAASC,UAAU,aAAeqM,EAAK,GAAI,CAClDpO,OAAO8B,SAASmP,aAAa,UAAW7C,EAAK,IACzCwC,EAAIhC,EAAA,EAAW3M,MACnB2O,EAAIxC,EAAK,GAAKwC,EAAEiI,aAAejI,EAAEkI,eACjC9Y,OAAO0D,KAAKC,QAAQiL,EAAA,EAAWpK,aAAaoM,MAGpD,UACA,OACA,CACI,CACI1M,MAAO,gBACPgH,aAAclL,OAAO8B,SAASC,UAAU,eACxCpE,KAAM,YAEV,CACIuG,MAAO,iBACPgH,aAAclL,OAAO8B,SAASC,UAAU,aACxCpE,KAAM,YAEV,CACIuG,MAAO,iBACPgH,aAAclL,OAAO8B,SAASC,UAAU,WACxCpE,KAAM,aAGd,OAIDwZ,EAAAzF,uBAAP,WACI,IAAgB,IAAAqH,EAAA,EAAAvX,EAAAoN,EAAA,EAAWnI,WAAXsS,EAAAvX,EAAAnH,OAAA0e,IAAuB,CAAlC,IAAMvY,EAACgB,EAAAuX,GACE,OAANvY,GAAcA,aAAaR,OAAOgZ,QAClCxY,EAAE0W,YAGVtI,EAAA,EAAWnI,WAAa,IAGrB0Q,EAAAvB,oBAAP,SAA2BqB,GACvB,IAAIgC,EAAYrK,EAAA,EAAWnI,WAAWyS,UAAU,SAAA1Y,GAC5C,OAAOA,WAEQ,IAAfyY,IACAA,EAAYrK,EAAA,EAAWnI,WAAWpM,QAGtC,IAAMsb,EAAI,IAAIwD,EAAA9X,EAEd,OADAuN,EAAA,EAAWnI,WAAWwS,GAAatD,EAC5B,IAAIiB,EAAYqC,EAAWtD,EAAGsB,IAGlCE,EAAAzB,sBAAP,WACI,IAAM0D,EAAO5c,SAAS0G,eAAe,gBACrC,MAA2B,SAAvBkW,EAAKC,MAAMjC,UACXgC,EAAKC,MAAMjC,QAAU,QACd,IAKRD,EAAA3F,qBAAP,WACI,IAAM4H,EAAO5c,SAAS0G,eAAe,gBACV,SAAvBkW,EAAKC,MAAMjC,UACXgC,EAAKC,MAAMjC,QAAU,SAItBD,EAAA9B,oBAAP,SAA2BtX,GACvB,IAAI0B,EAAI,YACJ1B,IACA0B,EAAI1B,GAERiR,EAAA,EAAKlE,gBACD,uBACA,MAAQrL,EAAI,iEAIb0X,EAAArQ,0BAAP,eAAAvE,EAAAsG,KACUsM,EAAS,iBACf,OAAIgC,EAAe1F,UAAU0D,IACzBgC,EAAe9B,oBAAoBF,GAC5BhZ,QAAQE,OAAO,qBAE1B8a,EAAe1F,UAAU0D,IAAU,EAE5B,IAAIhZ,QAAc,SAAMC,GAAO,OAAAoa,EAAAjU,OAAA,qFAClC,OAAIvC,OAAO8B,SAASC,UAAU,cAC1BoV,EAAe1F,UAAU0D,IAAU,EACnC,GAAO/Y,YAKW,GAAMwS,EAAA,EAAW1N,YAAY,oCAA/CM,EAAA+O,gBAAkB5N,EAAAlB,OAClBD,EAAAgP,OAAQ5B,EAAA,EAAWlN,MAAM0F,cAFzB/F,IAKEiY,EAAU,WACZ1K,EAAA,EAAWjN,gBAAgB,oBAAsBN,EAAEkP,gBACnD3B,EAAA,EAAWjO,aAAY,EAAM,CAAC,mBAAoB,kBACjDiO,EAAA,EAAWlN,MAAM0F,cAAuB/F,EAAEmP,OAE3C,IAAMA,EAASxB,EAAA,EAAK5E,QAAQ/I,EAAEmP,QAC1BzT,EAAI,uBAAuByT,EAAOnW,OACtC0C,GAAK,uBAAuBsE,EAAEkP,gBAC9BxT,GAAK,OAELyT,EAAO1P,QAAQ,SAACN,EAAGrG,GACf4C,GAAK,UAAU6R,EAAA,EAAW5J,cAAc7K,GAAE,eAAeqG,EAAC,OAG9DzD,GAAK,KAAKiW,KAAKC,UAAUjE,EAAA,EAAK3E,OAAOhJ,EAAEmP,QAAS,KAAM,GAAE,OAExDzT,EAAI,2DAA2DiS,EAAA,EAAK/L,WAAWlG,GAC/EA,GACI,uGAEJiS,EAAA,EAAK/E,SAASlN,GACdiD,OAAO0D,KAAK2M,eAGVoF,EAAmB0B,EAAezB,yBAElChT,EAAsB,OAAtBrB,EAAEkP,iBAA6B,GAAM3B,EAAA,EAAW1N,YAAY,kBAA5D,aAA8BwB,EAAoD,OAAnDC,EAAAlB,+BAAhC,GAkBD6X,IACI7D,GACA0B,EAAe3F,yBAnBb+H,EAAIpC,EAAevB,oBAAoB,SAAA7Z,GACzCsF,EAAItF,EAAElC,KACNyf,IACAC,EAAE1D,UACEJ,GACA0B,EAAe3F,uBAEnB2F,EAAe1F,UAAU0D,IAAU,EACnC/Y,EAAQL,EAAElC,SAEZsc,KAAK,CACHxY,KAAM,eACNyY,KAAM,GACNnU,MAAOjC,OAAO0D,KAAKkL,WAAWpK,eAC9B6R,qBAAqB,iBAW9Bc,EAAAK,gCAAP,eAAAjV,EAAAsG,KACUsM,EAAS,WACf,OAAIgC,EAAe1F,UAAU0D,IACzBgC,EAAe9B,oBAAoBF,GAC5BhZ,QAAQE,OAAO,qBAE1B8a,EAAe1F,UAAU0D,IAAU,EAE5B,IAAIhZ,QAAc,SAAMC,GAAO,OAAAoa,EAAAjU,OAAA,+EAClC,OAAKvC,OAAO8B,SAASC,UAAU,cAKzB0T,EAAmB0B,EAAezB,wBAClCC,EAAIwB,EAAevB,oBAAoB,SAAA7Z,GACzC6S,EAAA,EAAWjN,gBAAgB0F,SAAWtL,EAAElC,KACxC+U,EAAA,EAAWjO,aAAY,EAAM,CAAC,aAC9BgV,EAAEE,UACEJ,GACA0B,EAAe3F,uBAEnB2F,EAAe1F,UAAU0D,IAAU,EACnC/Y,EAAQL,EAAElC,QAGF,GAAM+U,EAAA,EAAW1N,YAAY,+BAA+B,MAhBpEiW,EAAe1F,UAAU0D,IAAU,EACnC,GAAO/Y,oBAeLod,EAAMhY,EAAAC,OAEZkU,EAAEQ,KAAK,CACHxY,KAAM,sBACNyY,KAAM,CAACqD,EAAA,EAAMC,6BAA6B9K,EAAA,EAAW3M,MAAM0X,oBAAqBH,kBAKrFrC,EAAApQ,qBAAP,SAA4B3F,GAA5B,IAAAmB,EAAAsG,UAA4B,IAAAzH,OAAA,GACxB,IAAM+T,EAAS,WACf,OAAIgC,EAAe1F,UAAU0D,GACrB/T,EACOjF,QAAQC,WAEnB+a,EAAe9B,oBAAoBF,GAC5BhZ,QAAQE,OAAO,qBAE1B8a,EAAe1F,UAAU0D,IAAU,EAE5B,IAAIhZ,QAAc,SAAMC,GAAO,OAAAoa,EAAAjU,OAAA,+EAClC,OAAIvC,OAAO8B,SAASC,UAAU,cAC1BoV,EAAe1F,UAAU0D,IAAU,EACnC,GAAO/Y,EAAQ+a,EAAeK,sCAG5B/B,EAAmB0B,EAAezB,wBAC7B,GAAM9G,EAAA,EAAW1N,YAAY,uBAAuB,mBAAzDuV,EAAKjV,EAAAC,QAELkU,EAAIwB,EAAevB,oBAAoB,SAAA7Z,GACzC6S,EAAA,EAAWjN,gBAAgB0F,SAAWtL,EAAElC,KACxC+U,EAAA,EAAWjO,aAAY,EAAM,CAAC,aAC1B8U,GACA0B,EAAe3F,uBAEnB2F,EAAe1F,UAAU0D,IAAU,EACnCQ,EAAEE,UACFzZ,EAAQL,EAAElC,SAEZsc,KAAK,CACHxY,KAAM,qBACNyY,KAAM,CAACxH,EAAA,EAAW3M,MAAM2X,mBAAoBnD,kBAKjDU,EAAAE,mBAAP,eAAA9U,EAAAsG,KACI,GAAK7I,OAAO8B,SAASC,UAAU,cAAiB/B,OAAO8B,SAASC,UAAU,WAA1E,CAGA,IAAMoT,EAAS,iBACXgC,EAAe1F,UAAU0D,GACzBgC,EAAe9B,oBAAoBF,IAGvCgC,EAAe1F,UAAU0D,IAAU,EAEnCnG,EAAA,EAAK/D,cACD,SAAOpD,EAAQyN,GAAM,OAAAkB,EAAAjU,OAAA,qEACjBsF,EAAOC,MAAM,QAEPyN,EAAS3G,EAAA,EAAWxJ,cAAckQ,EAAO,IACzCE,EAAO5G,EAAA,EAAWxJ,cAAckQ,EAAO,IAEzCjU,EAAiC,KAE/BwY,EAAK,WACP,IAAI9c,EAAI,kDACRA,GAAQiS,EAAA,EAAK/L,WAAW2L,EAAA,EAAW5J,cAAcuQ,IAAQ,OAAOvG,EAAA,EAAK/L,WACjE2L,EAAA,EAAW5J,cAAcwQ,KAGnB,IAANnU,GAIJA,EAAIA,EAEJtE,EAAI,+CAA+C6R,EAAA,EAAW5J,cAAcuQ,GAAO,IACnFxY,GAAK,MAAM6R,EAAA,EAAW5J,cAAcwQ,GAAK,KAAKnU,EAAEyY,QAChD/c,GAAK,4BACLA,EAAIiS,EAAA,EAAK/L,WAAWlG,GACpBsE,EAAE0Y,SAASjZ,QAAQ,SAAAN,GACfzD,GAAQ6R,EAAA,EAAW5J,cAAcxE,EAAE6C,MAAK,SAASuL,EAAA,EAAW5J,cAAcxE,EAAE8C,IAAG,UAC3E9C,EAAEwZ,KAAI,OACHxZ,EAAEyZ,SAAQ,OAGrBld,EAAI,8CADJA,EAAIA,EAAEiG,QAGNgM,EAAA,EAAK/E,SAASlN,IAjBViS,EAAA,EAAK/E,SAASlN,IAoBhB0Y,EAAmB0B,EAAezB,yBAClCC,EAAIwB,EAAevB,oBAAoB,SAAA7Z,GACzCsF,EAAItF,EAAElC,KACNsd,EAAe1F,UAAU0D,IAAU,EACnC0E,IACIpE,GACA0B,EAAe3F,uBAEnBmE,EAAEE,aAEJM,KAAK,CACHxY,KAAM,gBACNyY,KAAM,CAACb,EAAQC,GACfa,qBAAqB,EACrBpU,MAAOjC,OAAO0D,KAAKkL,WAAWpK,0BAGtC,gCACA,KACA,CACI,CACIN,MAAO,cACPvG,KAAM,OACNmO,eAAgB9L,OAAO0D,KAAK0M,sBAEhC,CACIlM,MAAO,YACPvG,KAAM,OACNmO,eAAgB9L,OAAO0D,KAAK0M,2BAMrC+G,EAAAG,oBAAP,WACI,IAAItX,OAAO8B,SAASC,UAAU,cAAiB/B,OAAO8B,SAASC,UAAU,WAAzE,CAKA,GAAIoV,EAAe1F,UAAgB,QAC/B0F,EAAe9B,oBAFJ,eACf,CAIA8B,EAAe1F,UAAgB,SAAI,EAEnC,IAAMgE,EAAmB0B,EAAezB,wBAClCC,EAAIwB,EAAevB,oBAAoB,SAAA7Z,GACzC,IAAMsF,EAAetF,EAAElC,KACvB8b,EAAEE,UAEF,IAAI9Y,EAAI,iDAAiDsE,EAAE6Y,YAC3Dnd,GAAK,uBACLA,EAAIiS,EAAA,EAAK/L,WAAWlG,GACpBsE,EAAE8Y,IAAIrZ,QAAQ,SAAAN,GACVzD,GAAQ6R,EAAA,EAAW5J,cAAc,IAAIoV,EAAA,EAAU5Z,GAAG6Z,WAAU,SAC5Dtd,GAAQ6R,EAAA,EAAW5J,cAAc,IAAIoV,EAAA,EAAU5Z,GAAG8Z,SAAQ,OAG9Dvd,EAAI,8CADJA,EAAIA,EAAEiG,QAGFyS,GACA0B,EAAe3F,uBAEnB2F,EAAe1F,UAAgB,SAAI,EAEnCzC,EAAA,EAAK/E,SAASlN,KAElB4Y,EAAEQ,KAAK,CACHxY,KAAM,UACNyY,KAAM,GACNC,qBAAqB,EACrBpU,MAAOjC,OAAO0D,KAAKkL,WAAWpK,oBAI/B2S,EAAAlQ,qBAAP,WACI,IAAKjH,OAAO8B,SAASC,UAAU,aAC3B,OAAO5F,QAAQC,UAInB,OAAI+a,EAAe1F,UAAgB,QAC/B0F,EAAe9B,oBAFJ,UAGJlZ,QAAQE,OAAO,qBAE1B8a,EAAe1F,UAAgB,QAAI,EAE5B,IAAItV,QAAc,SAAAC,GACrB,IAAMqZ,EAAmB0B,EAAezB,wBAClCC,EAAIwB,EAAevB,oBAAoB,SAAA7Z,GACzC6S,EAAA,EAAWjN,gBAAgB8F,OAAS1L,EAAElC,KACtC+U,EAAA,EAAWjO,aAAY,EAAM,CAAC,WAC9BgV,EAAEE,UACEJ,GACA0B,EAAe3F,uBAEnB2F,EAAe1F,UAAgB,QAAI,EACnCrV,MAEJuZ,EAAEQ,KAAK,CACHxY,KAAM,gBACNyY,KAAM,GACNC,qBAAqB,EACrBpU,MAAOjC,OAAO0D,KAAKkL,WAAWpK,qBAKnC2S,EAAAI,4BAAP,WACI,GAAKvX,OAAO8B,SAASC,UAAU,aAA/B,CAIA,IAAMoT,EAAS,mBACf,GAAIgC,EAAe1F,UAAU0D,GACzBgC,EAAe9B,oBAAoBF,OADvC,CAIAgC,EAAe1F,UAAU0D,IAAU,EAEnC,IAAMM,EAAmB0B,EAAezB,wBAClCC,EAAIwB,EAAevB,oBAAoB,SAAA7Z,GACzC,IAAMsF,EAA2BtF,EAAElC,KAQnC,GAPA8b,EAAEE,UAEEJ,GACA0B,EAAe3F,uBAEnB2F,EAAe1F,UAAU0D,IAAU,GAEzB,IAAN9T,EAOA,OANAuN,EAAA,EAAWjN,gBAAgB8F,QAAS,EACpCmH,EAAA,EAAWjO,aAAY,EAAM,CAAC,gBAC9BqO,EAAA,EAAK/E,SACD,wGAMR,IAAIlN,EAAI,2BACRA,EAAIiS,EAAA,EAAK/L,WAAWlG,GACnBsE,EAAYP,QAAQ,SAAAN,GACjBzD,GAAQ6R,EAAA,EAAW5J,cAAcxE,EAAE8D,IAAG,OAG1CvH,EAAI,oCADJA,EAAIA,EAAEmD,MAAM,GAAI,IAGhB8O,EAAA,EAAK/E,SAASlN,KAElB4Y,EAAEQ,KAAK,CACHxY,KAAM,kBACNyY,KAAM,GACNC,qBAAqB,EACrBpU,MAAOjC,OAAO0D,KAAKkL,WAAWpK,oBAI/B2S,EAAAxF,qBAAP,WACI,IAAM4I,EAAO/d,SAAS0G,eAAe,mBACrCqX,EAAKpX,UAAY,GACjB,IAAMtB,EAAc7B,OAAO8B,SAASC,UAAU,aACxCyE,EAAWxG,OAAO8B,SAASC,UAAU,WAErCyY,EAAgB,SAACC,GACnB,IAAMC,EAAUle,SAASC,cAAc,KACvCie,EAAQzI,UAAUC,IAAI,YACtBwI,EAAQ7d,aAAa,OAAQ,KAC7B6d,EAAQC,UAAYF,EAAI1c,KACxB2c,EAAQ/G,iBAAiB,QAAS,SAAA5X,GAC9BA,EAAE8b,iBACF4C,EAAIlZ,cAGRgZ,EAAKnc,YAAYsc,IAGXvD,EAAenQ,gBACvBlG,QAAQ,SAAA2Z,GACDA,EAAIrD,UAGJ,gBAAiBqD,GAAOA,EAAI5Y,cAAgBA,KAAkB,gBAAiB4Y,KAC3E,aAAcA,GAAOA,EAAIjU,WAAaA,IAAe,aAAciU,GACpED,EAAcC,KAEV,aAAcA,GAAOA,EAAIjU,WAAaA,IAAe,aAAciU,KACtE,gBAAiBA,GAAOA,EAAI5Y,cAAgBA,IAAkB,gBAAiB4Y,GAChFD,EAAcC,OAnnBhBtD,EAAA1F,UAA0C,GAwnB5D0F,EAznBA,GAAqByD,EAAA,8yCClLrB5a,OAAO0D,KAAOA,EACd1D,OAAO+P,QAAU,IAAI8K,EAAA,QAAQnX,EAAKmL,UAAW,GAAInL,EAAKuL,YACtDjP,OAAO8B,SAAWA,EAClB9B,OAAO6G,GAAK+T,EAGZE,EAAA,OAAa,6EAA6EC,UAC1F/a,OAAOgb,MAAQF,EAEfpX,EAAK8P,oBAAoBxT,OAAO+P,SAEhCjO,EAASsS,eAET,IAAI6G,GAAc,EAClB,GAAInZ,EAAS+Q,uBAAwB,CACjC,IAAMpX,EAAIqX,aAAauB,QAAQ,6BAC/B,GAAU,OAAN5Y,EAAY,CACZ,IAAMyf,EAAiBlI,KAAKsB,MAAM7Y,GAC9B,UAAWyf,GAAa,UAAWA,EAAUjZ,QAC7CgZ,GAAc,EACdvX,EAAK2O,YAAW,EAAO6I,KAI/BD,GACCE,OA9CLld,OA8CK,2EACuB,SAAMzC,EAAAO,EAAA,GAAA6W,KAAApX,EAAAgE,KAAA,0BAApBwY,EAAcxW,EAAAC,OAAyCwW,QAC7DvU,EAAKC,QAAQqU,EAAWE,YAAY,GAAO,GAAM,YAIzDlY,OAAO6G,GAAG4Q,qDC1CK/P,EAAA,GACXgS,6BAA8B,SAAC0B,GAE3B,IAAMC,EAAoB,GAkB1B,OAjBAD,EAAgBta,QAAQ,SAACN,EAAGrG,GACpBA,KAAKkhB,EACLA,EAAQlhB,GAAGmhB,KAAO9a,EAAEnG,OAGpBghB,EAAQlhB,GAAK,CAACmhB,IAAK9a,EAAEnG,OAAQkhB,GAAI,GAErC/a,EAAEM,QAAQ,SAAC0a,GACHA,KAAQH,EACRA,EAAQG,GAAMD,IAAM,EAGpBF,EAAQG,GAAQ,CAACD,GAAI,EAAGD,IAAK,OAKlCD,GAGXI,0BAA2B,SAACtZ,GACxB,IAAMyB,EAA0B,GAMhC,OALAzB,EAAMrB,QAAQ,SAACN,GACXoD,EAAMpD,EAAE6C,MAAQ,CAACiB,GAAI9D,EAAE6C,KAAMa,MAAO1D,EAAE6C,KAAK8B,YAC3CvB,EAAMpD,EAAE8C,IAAM,CAACgB,GAAI9D,EAAE8C,GAAIY,MAAO1D,EAAE8C,GAAG6B,cAGlCvB,wBCzCf/H,EAAAD,QAAA,WACA,WAAAod,OAAoBxd,EAAAuB,EAAuB,mECY3C,IAAAqd,EAAA,WAMI,SAAAA,EAAY/W,EAA+BC,EAAaC,EAA6BoI,0BAArFpJ,EAAAsG,UAAwD,IAAAtF,MAAA,QAA6B,IAAAoI,MAAA,MAC7D,iBAATtI,IACPsI,EAAanR,OAAO6H,KAAKgB,GACpBgC,OAAO,SAAA9F,GAAO,OAAC,CAAC,OAAQ,KAAM,UAAU4S,SAAS5S,KACjDiL,OAAO,SAACjC,EAAUhJ,GAEf,OADAgJ,EAAIhJ,GAAwB8D,EAAM9D,GAC3BgJ,GACR,IAEPjF,EAAKD,EAAKC,GACVC,EAASF,EAAKE,OACdF,EAAOA,EAAKA,MAGhBwF,KAAK6S,WAAa,GACC,OAAf/P,GAA6C,iBAAfA,GAC9BnR,OAAO6H,KAAKsJ,GAAY7K,QAAQ,SAAAvB,GAC5BgD,EAAKmZ,WAAWnc,GAAO/E,OAAOyO,OAAO0C,EAAWpM,MAIxDsJ,KAAK6S,WAAalhB,OAAOyO,OAAOJ,KAAK6S,YACrC7S,KAAKxF,KAAO7I,OAAOyO,OAAO5F,GAC1BwF,KAAKvF,GAAK9I,OAAOyO,OAAO3F,GACxBuF,KAAKtF,OAAS/I,OAAOyO,OAAOgE,WAAW1J,IAEnCoY,IAAevB,GACf5f,OAAOyO,OAAOJ,MAqD1B,OAjDIuR,EAAA3f,UAAA4f,QAAA,WACI,OAAOxR,KAAKxF,MAGhB+W,EAAA3f,UAAA6f,MAAA,WACI,OAAOzR,KAAKvF,IAGhB8W,EAAA3f,UAAAmhB,UAAA,WACI,OAAO/S,KAAKtF,QAGhB6W,EAAA3f,UAAAwL,aAAA,SAAa4V,GACT,OAAIA,KAAahT,KAAK6S,WACX7S,KAAK6S,WAAWG,GAGpB,MAGXzB,EAAA3f,UAAAqhB,iBAAA,WACI,OAAOjT,KAAK6S,YAGhBtB,EAAA3f,UAAAshB,QAAA,eAAAxZ,EAAAsG,KACUmT,EAA2B,CAAE3Y,KAAMwF,KAAKxF,KAAMC,GAAIuF,KAAKvF,GAAIC,OAAQsF,KAAKtF,QAO9E,OANA/I,OAAO6H,KAAKwG,KAAK6S,YAAY5a,QAAQ,SAAAvB,GAC3BA,KAAOyc,IACTA,EAASzc,GAAOgD,EAAKmZ,WAAWnc,MAIjCyc,GAGX5B,EAAA3f,UAAAgK,SAAA,SAASC,EAA0BiH,QAAA,IAAAA,MAAA,IAE/B,IAAM+P,EAAalhB,OAAOyhB,OAAO,GAAIpT,KAAK6S,YAK1C,OAJAlhB,OAAO6H,KAAKsJ,GAAY7K,QAAQ,SAAAvB,GAC5Bmc,EAAWnc,GAAOoM,EAAWpM,KAG1B,IAAI6a,EACPvR,KAAKwR,UACLxR,KAAKyR,QACS,OAAd5V,EAAqBmE,KAAK+S,YAAclX,EACxCgX,IAGZtB,EAtFA,yCCbA,IAAA8B,EAAA1gB,EAAA,GAAA2gB,EAAA3gB,EAAA,GAAA4gB,EAAA5gB,EAAA,GAUM6gB,EAAkB,SAACxiB,EAAWyiB,GAChC,OAAO9hB,OAAO6H,KAAKxI,GACdwL,OAAO,SAAC9F,GAAQ,OAAC,EAAS4S,SAAS5S,KACnCiL,OAAO,SAACjC,EAAUhJ,GAEf,OADAgJ,EAAIhJ,GAAO1F,EAAK0F,GACTgJ,GACR,KAGLgU,EAAsB,SAAC1iB,GACzB,OAAOwiB,EAAgBxiB,EAAM,CAAC,QAAS,QAGrC2iB,EAAsB,SAAC3iB,GACzB,OAAOwiB,EAAgBxiB,EAAM,CAAC,OAAQ,KAAM,YAG1C4iB,EAA2B,SAACta,EAAYua,GAC1C,QAD0C,IAAAA,MAAA,IAC5B,OAAVva,EACA,OAAO,EAGX,IAAIwa,EAA4BniB,OAAA0hB,EAAA,EAAA1hB,GAEhC,MAAqB,iBAAV2H,IACPA,EAAMrB,QAAQ,SAAC8b,GACX,IAAIrZ,EAAS,EACTF,EAAO,EACPC,EAAK,EACLqI,EAAa,GAEb,WAAYiR,IACZrZ,EAAS0J,WAAW2P,EAAKrZ,SAEzB,SAAUqZ,IACVvZ,EAAOqZ,EAAQE,EAAKvZ,OAEpB,OAAQuZ,IACRtZ,EAAKoZ,EAAQE,EAAKtZ,KAGlBqI,EAAa6Q,EADb,eAAgBI,EACiBA,EAAKlB,WAGLkB,GAGrCD,EAAWA,EAASpiB,KAAK,IAAI6hB,EAAA,EAAU/Y,EAAMC,EAAIC,EAAQoI,MAO1DgR,IAGLE,EAA2B,SAACjZ,GAC9B,GAAc,OAAVA,EACA,OAAO,EAGX,IAAImC,EAA4BvL,OAAA0hB,EAAA,EAAA1hB,GAC1BkiB,EAAuB,GAE7B,GAAqB,iBAAV9Y,EAEP,IAAK,IAAIzJ,EAAI,EAAGA,EAAIuQ,KAAKoS,MAAMlZ,GAAQzJ,IACnC4L,EAAWA,EAASG,IAAI/L,EAAG,IAAIgiB,EAAA,EAAUhiB,IACzCuiB,EAAQviB,GAAKA,MAGhB,IAAqB,iBAAVyJ,EA8BZ,OAAO,EA7BP,IAAImZ,EAAU,EACdnZ,EAAM9C,QAAQ,SAACrB,GACX,IAAM6E,EAAKyY,IACP7Y,EAAQ,KACRyH,EAAa,KAEb,UAAWlM,IACXyE,EAAQzE,EAAEyE,OAEV,OAAQzE,GACRid,EAAQjd,EAAE6E,IAAMA,EACZ,UAAW7E,GAAKA,EAAEyE,QAAUzE,EAAE6E,GAAGa,aACjCjB,EAAQI,EAAGa,aAIfuX,EAAQpY,GAAMA,EAGdqH,EAAa4Q,EADb,eAAgB9c,EACiBA,EAAEic,WAGFjc,GAGrCsG,EAAWA,EAASG,IAAI5B,EAAI,IAAI6X,EAAA,EAAU7X,EAAIJ,EAAOyH,MAO7D,MAAO,CAAC/H,MAAOpJ,OAAOyO,OAAOlD,GAAWtD,IAAKia,IAGjDvL,EAAA,WAQI,SAAAA,EAAYvN,EACAzB,EACAoE,EAAkBC,+BADlB,IAAArE,MAAA,WACA,IAAAoE,OAAA,QAAkB,IAAAC,OAAA,GAC1BqC,KAAKtC,SAAW/L,OAAOyO,OAAO1C,GAC9BsC,KAAKrC,SAAWhM,OAAOyO,OAAOzC,GAC9B,IAAIkW,EAAU,GAGd,GAAqB,iBAAV9Y,IAAwC,iBAAVA,GAAwBA,aAAiBsY,EAAA,GAQ7E,MAAItY,aAAiBsY,EAAA,GAItB,MAAM,IAAI9e,MAAM,0DAHhByL,KAAKjF,MAAQA,MATyE,CACtF,IAAMnE,EAAIod,EAAyBjZ,GACnC,GAAiB,iBAANnE,EACP,MAAM,IAAIrC,MAAM,+BAEpByL,KAAKjF,MAAQnE,EAAEmE,MACf8Y,EAAUjd,EAAEgD,IAYhB,GAJAoG,KAAKjF,MAAQpJ,OAAOyO,OAAOJ,KAAKjF,OAChCiF,KAAKmU,SAAWxiB,OAAOyO,OAAOJ,KAAKjF,MAAMqZ,MAG3B,OAAV9a,GAAmC,iBAAVA,GAAwBA,aAAiB+Z,EAAA,EAO7D/Z,aAAiB+Z,EAAA,EACtBrT,KAAK1G,MAAQA,EAGb0G,KAAK1G,MAAQ3H,OAAA0hB,EAAA,EAAA1hB,OAX4D,CACzE,IAAMuB,EAAI0gB,EAAyBta,EAAOua,GAC1C,GAAiB,iBAAN3gB,EACP,MAAM,IAAIqB,MAAM,8BAEpByL,KAAK1G,MAAQpG,EAQjB8M,KAAK1G,MAAQ3H,OAAOyO,OAAOJ,KAAK1G,OAChC0G,KAAKqU,SAAW1iB,OAAOyO,OAAOJ,KAAK1G,MAAM8a,MAErCtB,IAAexK,GACf3W,OAAOyO,OAAOJ,MAyX1B,OArXIsI,EAAA1W,UAAAwK,QAAA,SAAQX,EAAY6Y,GAChB,QADgB,IAAAA,OAAA,GACZ7Y,GAAMuE,KAAKmU,SACX,OAAO,EAEX,IAAM1X,EAAOuD,KAAKjF,MAAM/E,IAAIyF,GAC5B,YAAmB,IAATgB,IAGN6X,EACO7X,EAEJA,EAAKyW,YAGhB5K,EAAA1W,UAAAwJ,QAAA,SAAQpK,QAAA,IAAAA,MAAA,MACS,OAATA,IACAA,EAAO,IAGX,IAAMyK,EAAKuE,KAAKmU,SACV,UAAWnjB,IACbA,EAAKqK,MAAQI,EAAGa,YAGpB,IAAMwG,EAAa4Q,EAAoB1iB,GAEvC,OAAO,IAAIsX,EAAWtI,KAAKjF,MAAMsC,IAAI5B,EAAI,IAAI6X,EAAA,EAAU7X,EAAIzK,EAAKqK,MAAOyH,IACnE9C,KAAK1G,MAAO0G,KAAKtC,SAAUsC,KAAKrC,WAGxC2K,EAAA1W,UAAA4J,SAAA,SAASC,EAAYzK,GACjB,IAAKgP,KAAKjF,MAAMwZ,IAAI9Y,GAChB,OAAO,EAGX,IAAMqH,EAAa4Q,EAAoB1iB,GAIvC,MAHM,UAAWA,IACbA,EAAKqK,MAAS2E,KAAK5D,QAAQX,GAAI,GAAoBY,YAEhD,IAAIiM,EAAWtI,KAAKjF,MAAMsC,IAAI5B,EAAKuE,KAAK5D,QAAQX,GAAI,GAAoBD,SAASxK,EAAKqK,MAAOyH,IAChG9C,KAAK1G,MAAO0G,KAAKtC,SAAUsC,KAAKrC,WAGxC2K,EAAA1W,UAAAqK,WAAA,SAAWR,GAEP,KAAMA,GAAM,GAAKA,EAAKuE,KAAKmU,UACvB,OAAO,EAGX,IAAMN,EAAuB,GAGzBW,EAAY,EA8BhB,OAAO,IAAIlM,EA7BuBtI,KAAKjF,MAClCyB,OAAO,SAAC5F,GAQL,OAPIA,EAAE+F,UAAYlB,EACdoY,EAAQjd,EAAE+F,UAAY,EAGtBkX,EAAQjd,EAAE+F,SAAW6X,IAGlB5d,EAAE+F,UAAYlB,IAExB7B,IAAI,SAAC6C,GACF,IAAIpB,EAAQoB,EAAKJ,WAKjB,OAJII,EAAKE,QAAQL,aAAejB,IAC5BA,EAAQwY,EAAQpX,EAAKE,SAASL,YAG3B,IAAIgX,EAAA,EAAUO,EAAQpX,EAAKE,SAAUtB,EAAOoB,EAAKwW,sBAI9BjT,KAAK1G,MAClCkD,OAAO,SAACuX,GACL,QAASA,EAAKvC,YAAc/V,GAAMsY,EAAKtC,UAAYhW,KAEtD7B,IAAI,SAACma,GACF,OAAO,IAAIR,EAAA,EAAUM,EAAQE,EAAKvC,WAAYqC,EAAQE,EAAKtC,SAAUsC,EAAKhB,YAAagB,EAAKd,sBAG1DjT,KAAKtC,SAAUsC,KAAKrC,WAGlE2K,EAAA1W,UAAA2I,QAAA,SAAQC,EAAcC,EAAYC,QAAA,IAAAA,MAAA,GACzBsF,KAAKrC,WACNjD,EAAS,GAGb,IAAMoZ,EAAW9T,KAAK1G,MAAM5H,KAAK,IAAI6hB,EAAA,EAAU/Y,EAAMC,EAAI2J,WAAW1J,KACpE,OAAO,IAAI4N,EAAWtI,KAAKjF,MAAO+Y,EAAU9T,KAAKtC,SAAUsC,KAAKrC,WAGpE2K,EAAA1W,UAAAoK,WAAA,SAAWxB,EAAcC,EAAYC,EAAoB+Z,GAAzD,IAAA/a,EAAAsG,UAAqC,IAAAtF,MAAA,WAAoB,IAAA+Z,OAAA,GACtC,OAAX/Z,IACAA,EAAS0J,WAAW1J,IAGxB,IAAIga,GAAe,EACbZ,EAA4B9T,KAAK1G,MAAMkD,OAAO,SAACuX,GAEjD,SAAIW,GAAiBD,MAKjBV,EAAKvC,YAAchX,GAAQuZ,EAAKtC,UAAYhX,GAAkB,OAAXC,GAAmBqZ,EAAKhB,cAAgBrY,OAM1FhB,EAAKgE,UACFqW,EAAKvC,YAAc/W,GAAMsZ,EAAKtC,UAAYjX,GAAoB,OAAXE,GAAmBqZ,EAAKhB,cAAgBrY,KAN/Fga,GAAe,GACR,MAcf,OAAO,IAAIpM,EAAWtI,KAAKjF,MAAO+Y,EAAU9T,KAAKtC,SAAUsC,KAAKrC,WAGpE2K,EAAA1W,UAAAgK,SAAA,SAASpB,EAAcC,EAAYoB,EAAgBC,EAAuBI,GAA1E,IAAAxC,EAAAsG,UAAmD,IAAAlE,MAAA,WAAuB,IAAAI,MAAA,MACtE,IAAIyY,GAAa,EAEC,OAAd7Y,IACAA,EAAYsI,WAAWtI,IAG3B,IAAIgY,EAAW9T,KAAK1G,MAsBpB,OArBA0G,KAAK1G,MAAMrB,QAAQ,SAAC8b,EAAMa,GAClBD,KAIEZ,EAAKvC,YAAchX,GAAQuZ,EAAKtC,UAAYhX,IACzCf,EAAK6D,cAAgBwW,EAAKvC,YAAc/W,GAAMsZ,EAAKtC,UAAYjX,IAClD,OAAdsB,GAAsBiY,EAAKhB,cAAgBjX,IAG3CgY,EADU,OAAV5X,EACW4X,EAASzW,IAAIuX,EACpBb,EAAKnY,SAAuB,OAAdC,EAAqB,KAAOuI,WAAWvI,GACjD,CAACK,MAAOA,KAGL4X,EAASzW,IAAIuX,EAAOb,EAAKnY,SAAuB,OAAdC,EAAqB,KAAOuI,WAAWvI,KAExF8Y,GAAa,KAId,IAAIrM,EAAWtI,KAAKjF,MAAO+Y,EAAU9T,KAAKtC,SAAUsC,KAAKrC,WAGpE2K,EAAA1W,UAAAqJ,YAAA,SAAYqZ,GACR,YADQ,IAAAA,OAAA,GACJA,EACOtU,KAAKjF,MAAM8Z,UAEf7U,KAAKjF,MAAMnB,IAAI,SAAC6C,GACnB,OAAOA,EAAKyW,YACb2B,WAGPvM,EAAA1W,UAAAuL,2BAAA,WACI,OAAO6C,KAAKjF,OAGhBuN,EAAA1W,UAAA0L,2BAAA,WACI,OAAO0C,KAAK1G,OAGhBgP,EAAA1W,UAAAuJ,YAAA,SAAYmZ,GACR,YADQ,IAAAA,OAAA,GACJA,EACOtU,KAAK1G,MAAMub,UAEf7U,KAAK1G,MAAMM,IAAI,SAACma,GACnB,OAAOA,EAAKb,YACb2B,WAGPvM,EAAA1W,UAAAyH,iBAAA,WACI,OAAO2G,KAAKmU,UAGhB7L,EAAA1W,UAAA2H,iBAAA,WACI,OAAOyG,KAAKqU,UAGhB/L,EAAA1W,UAAAmf,iBAAA,WACI,IAAMyB,EAAoB,GAa1B,OAZAxS,KAAKjF,MAAM9C,QAAQ,SAAC6c,EAAGxjB,GACnBkhB,EAAQlhB,GAAK,IAEjB0O,KAAK1G,MAAMrB,QAAQ,SAAC8b,GACZvB,EAAQlJ,SAASyK,EAAKvC,WACtBgB,EAAQuB,EAAKvC,aAGbgB,EAAQuB,EAAKvC,WAAa,IAI3BgB,GAGXlK,EAAA1W,UAAAoe,WAAA,WACI,OAAO,IAAI1H,EAAWtI,KAAKjF,MAAOiF,KAAK1G,MAAMM,IAAI,SAACma,GAC9C,OAAOA,EAAKnY,SAAS,KACFoE,KAAKtC,UAAU,IAG1C4K,EAAA1W,UAAAqe,aAAA,WACI,OAAO,IAAI3H,EAAWtI,KAAKjF,MAAOiF,KAAK1G,MAAMM,IAAI,SAACma,GAC9C,OAAOA,EAAKnY,SAAS,KACFoE,KAAKtC,UAAU,IAG1C4K,EAAA1W,UAAAke,WAAA,SAAWiF,GACP,QADO,IAAAA,OAAA,IACFA,EACD,OAAO,IAAIzM,EAAWtI,KAAKjF,MAAOiF,KAAK1G,OAAO,EAAM0G,KAAKrC,UAG7D,IAAImW,EAAW9T,KAAK1G,MAKpB,OAJA0G,KAAK1G,MAAMrB,QAAQ,SAAC8b,GAChBD,EAAWA,EAASpiB,KAAK,IAAI6hB,EAAA,EAAUQ,EAAKtC,QAASsC,EAAKvC,UAAWuC,EAAKhB,YAAagB,EAAKd,uBAGzF,IAAI3K,EAAWtI,KAAKjF,MAAO+Y,GAAU,EAAM9T,KAAKrC,WAG3D2K,EAAA1W,UAAAme,aAAA,WACI,IAAI+D,EAA4BniB,OAAA0hB,EAAA,EAAA1hB,GAC1BqjB,EAAsC,GAe5C,OAbAhV,KAAK1G,MAAMrB,QAAQ,SAAC8b,GAChB,IAAIvZ,EAAOuZ,EAAKvC,UACZ/W,EAAKsZ,EAAKtC,QACVhX,EAAKD,IACLA,EAAOC,EACPA,EAAKsZ,EAAKvC,WAELhX,EAAI,IAAIC,KAAQua,IACrBA,EAAcxa,EAAI,IAAIC,GAAQ,KAC9BqZ,EAAWA,EAASpiB,KAAK,IAAI6hB,EAAA,EAAU/Y,EAAMC,EAAIsZ,EAAKhB,YAAagB,EAAKd,wBAIzE,IAAI3K,EAAWtI,KAAKjF,MAAO+Y,GAAU,EAAO9T,KAAKrC,WAG5D2K,EAAA1W,UAAAqjB,0BAAA,SAA0BvX,EAAmBC,GACzC,IAAIoK,EAAgB/H,KAepB,OAdItC,IAAasC,KAAKtC,SAClBqK,EAAIA,EAAE+H,cAEApS,GAAYsC,KAAKtC,WACvBqK,EAAIA,EAAEgI,gBAGNpS,IAAaqC,KAAKrC,SAClBoK,EAAIA,EAAEiI,cAEArS,GAAYqC,KAAKrC,WACvBoK,EAAIA,EAAEkI,gBAGHlI,GAGXO,EAAA1W,UAAAsjB,iBAAA,SAAiBzZ,GAAjB,IAAA/B,EAAAsG,KACUmV,EAAgB,GAUtB,OATAnV,KAAK1G,MAAMrB,QAAQ,SAAC8b,GACZA,EAAKvC,YAAc/V,EACnB0Z,EAAIzjB,KAAKqiB,EAAKtC,SAER/X,EAAKgE,UAAYqW,EAAKtC,UAAYhW,GACxC0Z,EAAIzjB,KAAKqiB,EAAKvC,aAIf2D,GAGX7M,EAAA1W,UAAAkf,iBAAA,eAAApX,EAAAsG,KACUmV,EAAkB,GAKxB,OAJAnV,KAAKjF,MAAM9C,QAAQ,SAACrB,GAChBue,EAAIve,EAAE+F,SAAWjD,EAAKwb,iBAAiBte,EAAE+F,WAGtCwY,GAGX7M,EAAA1W,UAAAwjB,YAAA,SAAYC,EAAaC,GACrB,OAAOtV,KAAKkV,iBAAiBG,GAAK/L,SAASgM,IAG/ChN,EAAA1W,UAAA2jB,gBAAA,SAAgBF,EAAaC,GAA7B,IAAA5b,EAAAsG,KACUwV,EAAwB,GAC9B,OAAIH,GAAOrV,KAAKmU,UAAYmB,GAAOtV,KAAKmU,SAC7BqB,GAGXxV,KAAK1G,MAAMrB,QAAQ,SAAC8b,GACXra,EAAKgE,UAAYqW,EAAKvC,YAAc8D,GAAOvB,EAAKtC,UAAY4D,GAC7DG,EAAS9jB,KAAKqiB,GAGdA,EAAKvC,YAAc6D,GAAOtB,EAAKtC,UAAY6D,GAC3CE,EAAS9jB,KAAKqiB,KAIfyB,IAGXlN,EAAA1W,UAAA6jB,wBAAA,SAAwBJ,EAAaC,GACjC,IAAII,EAAYC,IAOhB,OANA3V,KAAKuV,gBAAgBF,EAAKC,GAAKrd,QAAQ,SAAC8b,GAChCA,EAAKhB,YAAc2C,IACnBA,EAAY3B,EAAKhB,eAIlB2C,GAIXpN,EAAA1W,UAAAgkB,iBAAA,SAAiBC,EAAsDxT,GAAvE,IAAA3I,EAAAsG,UAAiB,IAAA6V,MAA4ChU,KAAKiU,UAAK,IAAAzT,MAAAsT,KACnE,IAAMI,EAA+B,GACrC/V,KAAKjF,MAAM9C,QAAQ,SAACwE,GAEhB,IAAM0Y,EAAMzb,EAAKwb,iBAAiBzY,EAAKE,SACjCqZ,EAAU,IAAIC,IAAId,GACpBa,EAAQ5B,KAAOe,EAAI3jB,QACnBwkB,EAAQ/d,QAAQ,SAACwC,GACb,IAAMoB,EAAYnC,EAAK6b,gBAAgB9Y,EAAKE,QAASlC,GAAIkH,OAAO,SAACuU,EAAKnC,GAClE,OAAO8B,EAAQK,EAAKnC,EAAKhB,cAC1B1Q,GAEH0T,EAAWrkB,KAAK,CAAC8I,KAAMiC,EAAKE,QAASlC,GAAEA,EAAEC,OAAQ0J,WAAWvI,SAMxE,IAAIiY,EAAW9T,KAAK1G,MAAMkD,OAAO,SAACuX,GAC9B,IAAIoC,GAAO,EAOX,OANAJ,EAAW9d,QAAQ,SAACme,GACZrC,EAAKvC,YAAc4E,EAAc5b,MAAQuZ,EAAKtC,UAAY2E,EAAc3b,KACxE0b,GAAO,KAIRA,IAMX,OAJAJ,EAAW9d,QAAQ,SAAC8b,GAChBD,EAAWA,EAASpiB,KAAK,IAAI6hB,EAAA,EAAUQ,EAAKvZ,KAAMuZ,EAAKtZ,GAAIsZ,EAAKrZ,WAG7D,IAAI4N,EAAWtI,KAAKjF,MAAO+Y,EAAU9T,KAAKtC,SAAUsC,KAAKrC,WAGpE2K,EAAA1W,UAAAmL,WAAA,WACI,OAAOiD,KAAKrC,UAGhB2K,EAAA1W,UAAA2L,WAAA,WACI,OAAOyC,KAAKtC,UAEpB4K,EA5aA,yCC7GA,IAAA+N,EAAA,WAKI,SAAAA,EAAY5a,EAASJ,EAA6ByH,0BAAlDpJ,EAAAsG,UAAqB,IAAA3E,MAAA,WAA6B,IAAAyH,MAAA,MAE1C9C,KAAK3E,MADK,OAAVA,EACaI,EAAGa,WAEHjB,EAGjB2E,KAAK6S,WAAa,GACC,OAAf/P,GAA6C,iBAAfA,GAC9BnR,OAAO6H,KAAKsJ,GAAY7K,QAAQ,SAAAvB,GAC5BgD,EAAKmZ,WAAWnc,GAAO/E,OAAOyO,OAAO0C,EAAWpM,MAIxDsJ,KAAK6S,WAAalhB,OAAOyO,OAAOJ,KAAK6S,YACrC7S,KAAK3E,MAAQ1J,OAAOyO,OAAOJ,KAAK3E,OAChC2E,KAAKvE,GAAK9J,OAAOyO,OAAO3E,GAEpBqX,IAAeuD,GACf1kB,OAAOyO,OAAOJ,MAkD1B,OA9CIqW,EAAAzkB,UAAAshB,QAAA,eAAAxZ,EAAAsG,KACUmT,EAA2B,CAAE1X,GAAIuE,KAAKvE,GAAIJ,MAAO2E,KAAK3E,OAO5D,OANA1J,OAAO6H,KAAKwG,KAAK6S,YAAY5a,QAAQ,SAAAvB,GAC3BA,KAAOyc,IACTA,EAASzc,GAAOgD,EAAKmZ,WAAWnc,MAIjCyc,GAGXkD,EAAAzkB,UAAA+K,MAAA,WACI,OAAOqD,KAAKvE,IAGhB4a,EAAAzkB,UAAAyK,SAAA,WACI,OAAO2D,KAAK3E,OAGhBgb,EAAAzkB,UAAAwL,aAAA,SAAa4V,GACT,OAAIA,KAAahT,KAAK6S,WACX7S,KAAK6S,WAAWG,GAGpB,MAGXqD,EAAAzkB,UAAAqhB,iBAAA,WACI,OAAOjT,KAAK6S,YAGhBwD,EAAAzkB,UAAA4J,SAAA,SAASH,EAAmByH,QAAnB,IAAAzH,MAAA,WAAmB,IAAAyH,MAAA,MACV,OAAVzH,IACAA,EAAQ2E,KAAK3D,YAIjB,IAAMwW,EAAalhB,OAAOyhB,OAAO,GAAIpT,KAAK6S,YAO1C,OANmB,OAAf/P,GACAnR,OAAO6H,KAAKsJ,GAAY7K,QAAQ,SAAAvB,GAC5Bmc,EAAWnc,GAAOoM,EAAWpM,KAI9B,IAAI2f,EAAUrW,KAAKrD,QAAStB,EAAOwX,IAElDwD,EA1EA","file":"bundle-e38f28cd3183cd7ed21a.min.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t2: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \"-\" + {\"0\":\"3a744190d19a6f9cd294\",\"1\":\"bf4850476c5650accac1\"}[chunkId] + \".min.js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([104,4]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","\"use strict\";\r\n\r\nimport {DataSet} from 'vis/index-network';\r\nimport help from './util/genericHelpers';\r\nimport GraphImmut from './classes/GraphImmut/GraphImmut';\r\nimport {EdgeImmutPlain} from \"./classes/GraphImmut/EdgeImmut\";\r\nimport NodeImmut, {NodeImmutPlain} from \"./classes/GraphImmut/NodeImmut\";\r\nimport {GraphPlain} from \"./util/predefinedGraphs\";\r\n\r\ninterface UpToDateProperties {\r\n    name: string;\r\n    upToDate: boolean;\r\n    type: string;\r\n    always?: boolean;\r\n    applyFunc?: (ignoreDuplicate?: boolean) => any;\r\n    [index: string]: undefined|string|boolean|((ignoreDuplicate?: boolean) => any)\r\n}\r\n\r\ninterface GraphProperties {\r\n    vertices: number;\r\n    edges: number;\r\n    eulerian: boolean;\r\n    \"Chromatic Number\": number | null;\r\n    \"Connected Components\": number | null;\r\n    \"Strongly Connected Components\": number | null;\r\n    cyclic: boolean;\r\n\r\n    [index: string]: boolean | number | null;\r\n}\r\n\r\ninterface GraphStateData {\r\n    stronglyConnectedComponents: null | { [key: number]: number };\r\n    connectedComponents: null | { [key: number]: number };\r\n    graphColoring: null | number[];\r\n\r\n    [index: string]: null | number[] | { [key: number]: number };\r\n}\r\n\r\nexport interface AddNodeI {\r\n    id?: number\r\n    label: string;\r\n    x: number;\r\n    y: number;\r\n    color?:string;\r\n}\r\n\r\nexport interface GraphStateHistory {\r\n    upToDate: UpToDateProperties[];\r\n    state: GraphStateData;\r\n    graph: GraphImmut;\r\n    graphProperties: GraphProperties;\r\n    [index: string]: UpToDateProperties[]|GraphStateData|GraphImmut|GraphProperties;\r\n}\r\n\r\nconst getInt = (v: string|number): number => {\r\n    if(typeof v === 'number'){\r\n        return v;\r\n    }\r\n    return parseInt(v);\r\n};\r\n\r\nexport default class GraphState {\r\n    public static workerPool: (Worker|null)[] = [];\r\n    public static backHistory: GraphStateHistory[] = [];\r\n    public static forwardHistory: GraphStateHistory[] = [];\r\n    public static maxHistory = 10;\r\n    public static upToDate: UpToDateProperties[] = [\r\n        {\r\n            name: \"Chromatic Number\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {\r\n            name: \"graphColoring\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {name: \"vertices\", upToDate: true, always: true, type: \"property\"},\r\n        {name: \"edges\", upToDate: true, always: true, type: \"property\"},\r\n        {\r\n            name: \"eulerian\", upToDate: false, type: \"property\",\r\n            applyFunc: (i) => {\r\n                return window.ui.makeAndPrintEulerian(i);\r\n            }\r\n        },\r\n        {\r\n            name: \"Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components')!.applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"connectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components')!.applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"Strongly Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components')!.applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"stronglyConnectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components')!.applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"cyclic\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintIsCyclic();\r\n            }\r\n        },\r\n    ];\r\n    public static state: GraphStateData = {\r\n        stronglyConnectedComponents: null,\r\n        connectedComponents: null,\r\n        graphColoring: null,\r\n    };\r\n    public static graph: GraphImmut;\r\n    public static graphProperties: GraphProperties = {\r\n        vertices: 0,\r\n        edges: 0,\r\n        eulerian: false,\r\n        \"Chromatic Number\": null,\r\n        \"Connected Components\": null,\r\n        \"Strongly Connected Components\": null,\r\n        cyclic: false,\r\n    };\r\n\r\n    static setUpToDate(value = false, listOptions?: string[]) {\r\n        const all = listOptions === null || typeof listOptions === \"undefined\";\r\n        let property = false;\r\n        GraphState.upToDate.forEach((v) => {\r\n            if ((!(\"always\" in v) || !v.always) && (all || listOptions!.indexOf(v.name) > -1)) {\r\n                v.upToDate = value;\r\n                if (v.type === \"property\") {\r\n                    property = true;\r\n                }\r\n            }\r\n        });\r\n        if (property) {\r\n            GraphState.makeAndPrintProperties();\r\n        }\r\n    }\r\n\r\n    static async getProperty(property: string, updateIfNotUpdated = false, ignoreDuplicate = false): Promise<any> {\r\n        const a = GraphState.upToDate.find((v) => {\r\n            return (\"name\" in v && v.name === property);\r\n        })!;\r\n        if (!a.upToDate) {\r\n            if (\"applyFunc\" in a && typeof a.applyFunc === \"function\" && updateIfNotUpdated) {\r\n                await a.applyFunc(ignoreDuplicate);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        if (a.type === \"state\") {\r\n            return Promise.resolve(GraphState.state[property]);\r\n        }\r\n        return Promise.resolve(GraphState.graphProperties[property]);\r\n    }\r\n\r\n    static async makeAndPrintProperties(recalcLong = false) {\r\n        const directional = window.settings.getOption(\"direction\");\r\n\r\n        GraphState.graphProperties.vertices = GraphState.graph.getNumberOfNodes();\r\n        GraphState.graphProperties.edges = GraphState.graph.getNumberOfEdges();\r\n\r\n        if (!directional) {\r\n            await GraphState.getProperty(\"eulerian\", true, true);\r\n        }\r\n\r\n        const p = Object.keys(GraphState.graphProperties);\r\n        if (recalcLong) {\r\n            p.forEach(async (v) => {\r\n                await GraphState.getProperty(v, true);\r\n            });\r\n        }\r\n\r\n        const printableProperties: any = {};\r\n        await Promise.all(p.map(async (v) => {\r\n            printableProperties[v] = await GraphState.getProperty(v);\r\n        }));\r\n\r\n        GraphState.printGraphProperties(printableProperties);\r\n    }\r\n\r\n    static printGraphProperties(properties: any) {\r\n        let p = \"\";\r\n        Object.keys(properties).forEach((k) => {\r\n            if (properties[k] !== null) {\r\n                p += `${help.toTitleCase(k)}: ${properties[k]}\\n`;\r\n            }\r\n        });\r\n        p = p.trim();\r\n        p = help.htmlEncode(p);\r\n        document.getElementById(\"graphProps\")!.innerHTML = `<p class='nav-link'>${p}</p>`;\r\n    }\r\n\r\n    static addEdge(from: number|string, to: number|string, weight = 0, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        graph = graph.addEdge(edgeFrom, edgeTo, weight);\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: GraphState.clearColorFromEdges(graph.getAllEdges() as EdgeImmutPlain[])\r\n        });\r\n    }\r\n\r\n    static addNode(data: AddNodeI, graph = GraphState.graph) {\r\n        graph = graph.addNode({label: data.label, x: data.x, y: data.y});\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: GraphState.clearColorFromEdges(graph.getAllEdges() as EdgeImmutPlain[])\r\n        });\r\n    }\r\n\r\n    static editNode(id: number|string, label: string, graph = GraphState.graph) {\r\n        const iId = getInt(id);\r\n        graph = graph.editNode(iId, {label});\r\n        window.main.setData(GraphState.getGraphData(graph), false, false);\r\n    }\r\n\r\n    static editEdge(from: number | string, to: number | string,\r\n                    newWeight: number, oldWeight: number, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        const newGraph = graph.editEdge(edgeFrom, edgeTo, newWeight, oldWeight);\r\n        if (newGraph instanceof GraphImmut) {\r\n            window.main.setData(GraphState.getGraphData(newGraph), false, false);\r\n        }\r\n    }\r\n\r\n    static deleteEdge(from: number|string, to: number|string, weight: (undefined|null|number) = null, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        graph = graph.deleteEdge(edgeFrom, edgeTo, weight, false);\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: GraphState.clearColorFromEdges(graph.getAllEdges() as EdgeImmutPlain[])\r\n        });\r\n    }\r\n\r\n    static deleteNode(id: number|string, graph = GraphState.graph) {\r\n        const iId = getInt(id);\r\n        const newGraph = graph.deleteNode(iId);\r\n        if (newGraph instanceof GraphImmut) {\r\n            window.main.setData({\r\n                nodes: GraphState.clearColorFromNodes(newGraph.getAllNodes() as NodeImmutPlain[]),\r\n                edges: GraphState.clearColorFromEdges(graph.getAllEdges() as EdgeImmutPlain[])\r\n            });\r\n        }\r\n    }\r\n\r\n    static clearColorFromNodes(nodes: NodeImmutPlain[]): NodeImmutPlain[] {\r\n        nodes.forEach((v) => {\r\n            v.color = null;\r\n        });\r\n        return nodes;\r\n    }\r\n\r\n    static clearColorFromEdges(edges: EdgeImmutPlain[]): EdgeImmutPlain[] {\r\n        edges.forEach((v) => {\r\n            delete v.color;\r\n        });\r\n        return edges;\r\n    }\r\n\r\n    static nodeIDToLabel(id: number, graph = GraphState.graph): string {\r\n        const n = graph.getNode(id, true);\r\n        if (n !== false && n !== null && n instanceof NodeImmut && n.getLabel().trim().length > 0) {\r\n            return n.getLabel().trim();\r\n        }\r\n\r\n        return id.toString();\r\n    }\r\n\r\n    // Preferentially search by ID, label, and case-insensitive label\r\n    static nodeLabelToID(label: string, graph = GraphState.graph) {\r\n        let n = graph.getAllNodes(true) as NodeImmut[];\r\n        n = n.filter((node) => {\r\n            return node.getLabel().toLowerCase() === label.toLowerCase() || node.getID().toString() === label;\r\n        });\r\n\r\n        if (n.length === 0) {\r\n            return -1;\r\n        }\r\n        else if (n.length === 1) {\r\n            return n[0].getID();\r\n        }\r\n\r\n        let rID = -1;\r\n        let found = false;\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getID().toString() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel().toLowerCase() === label.toLowerCase()) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        return rID;\r\n    }\r\n\r\n    // Return graph as a Vis compatible dataset\r\n    static getGraphAsDataSet(graph: GraphImmut): { nodes: DataSet<vis.Node>; edges: DataSet<vis.Edge> } {\r\n        const d = GraphState.getGraphData(graph);\r\n        if (graph.isWeighted()) {\r\n            d.edges.forEach((e) => {\r\n                e.label = e.weight.toString();\r\n            });\r\n        }\r\n        d.edges.forEach((e) => {\r\n            if('color' in e) {\r\n                e.color = {color: e.color};\r\n            }\r\n        });\r\n\r\n        return {nodes: new DataSet(d.nodes as vis.Node[]), edges: new DataSet(d.edges as vis.Edge[])};\r\n    }\r\n\r\n    static setLocations(locations: {[key: string]: {x: number; y: number}}, graph = GraphState.graph): GraphImmut {\r\n        let newNodes = graph.getAllNodesAsImmutableList();\r\n        Object.keys(locations).forEach((i) => {\r\n            const v = locations[i];\r\n            const node = newNodes.get(parseInt(i))!;\r\n            // Only change when there is actually a new position\r\n            if (node.getAttribute(\"x\") !== v.x || node.getAttribute(\"y\") !== v.y) {\r\n                // Batch up all changes that we'll be making\r\n                newNodes = newNodes.set(parseInt(i), node.editNode(node.getLabel(), {x: v.x, y: v.y}));\r\n            }\r\n        });\r\n\r\n        return new GraphImmut(newNodes, graph.getAllEdgesAsImmutableList(), graph.isDirected(), graph.isWeighted());\r\n    }\r\n\r\n    static getGraphData(graph = GraphState.graph, clearNodeColors = false, clearEdgeColors = false): GraphPlain {\r\n        const nodes = graph.getAllNodes() as NodeImmutPlain[];\r\n        const edges = graph.getAllEdges() as EdgeImmutPlain[];\r\n        return {\r\n            nodes: clearNodeColors ? GraphState.clearColorFromNodes(nodes) : nodes,\r\n            edges: clearEdgeColors ? GraphState.clearColorFromEdges(edges) : edges,\r\n            directed: graph.isDirected(),\r\n            weighted: graph.isWeighted()\r\n        };\r\n    }\r\n}\r\n","\"use strict\";\r\n\r\nimport * as $ from \"jquery\";\r\n\r\ndeclare interface ModalFormRow {\r\n    type: string;\r\n    label?: string;\r\n    initialValue?: any;\r\n    id?: string | number;\r\n    extraAttrs?: any;\r\n    validationFunc?: (value: any, container: JQuery) => boolean | string;\r\n    clickDismiss?: boolean;\r\n    onclick?: (...args: any[]) => void;\r\n    optionText?: any[];\r\n    optionValues?: any[];\r\n}\r\n\r\ndeclare interface BasicMapType {\r\n    class: string;\r\n    id: string;\r\n    value: any;\r\n\r\n    [key: number]: any;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst defaultCancelCb = ($modal: JQuery) => {\r\n    $modal.modal(\"hide\");\r\n};\r\n\r\nconst self = {\r\n    deepCopy(deep: boolean, clone: any, copy: any) {\r\n        const isPlainObject = (obj: any) => {\r\n            if (!obj || {}.toString.call(obj) !== \"[object Object]\") {\r\n                return false;\r\n            }\r\n\r\n            let proto = Object.getPrototypeOf(obj);\r\n\r\n            if (!proto) {\r\n                return true;\r\n            }\r\n\r\n            // Objects with prototype are plain iff they were constructed by a global Object function\r\n            let Ctor = {}.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\r\n            return (\r\n                typeof Ctor === \"function\" &&\r\n                {}.hasOwnProperty.toString.call(Ctor) === {}.hasOwnProperty.toString.call(Object)\r\n            );\r\n        };\r\n\r\n        let options,\r\n            name,\r\n            src,\r\n            copyIsArray,\r\n            target = arguments[0] || {},\r\n            i = 1,\r\n            length = arguments.length;\r\n\r\n        // Handle a deep copy situation\r\n        if (typeof target === \"boolean\") {\r\n            deep = target;\r\n\r\n            // Skip the boolean and the target\r\n            target = arguments[i] || {};\r\n            i++;\r\n        }\r\n\r\n        // Handle case when target is a string or something (possible in deep copy)\r\n        if (typeof target !== \"object\" && typeof target !== \"function\") {\r\n            target = {};\r\n        }\r\n\r\n        if (i === length) {\r\n            target = this;\r\n            i--;\r\n        }\r\n\r\n        for (; i < length; i++) {\r\n            // Only deal with non-null/undefined values\r\n            if ((options = arguments[i]) != null) {\r\n                // Extend the base object\r\n                for (name in options) {\r\n                    src = target[name];\r\n                    copy = options[name];\r\n\r\n                    // Prevent never-ending loop\r\n                    if (target === copy) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Recurse if we're merging plain objects or arrays\r\n                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\r\n                        if (copyIsArray) {\r\n                            copyIsArray = false;\r\n                            clone = src && Array.isArray(src) ? src : [];\r\n                        } else {\r\n                            clone = src && isPlainObject(src) ? src : {};\r\n                        }\r\n\r\n                        // Never move original objects, clone them\r\n                        target[name] = self.deepCopy(deep, clone, copy);\r\n\r\n                        // Don't bring in undefined values\r\n                    } else if (copy !== undefined) {\r\n                        target[name] = copy;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the modified object\r\n        return target;\r\n    },\r\n\r\n    deepFreeze: <T extends Object>(o: T): Readonly<T> => {\r\n        Object.freeze(o);\r\n\r\n        Object.getOwnPropertyNames(o).forEach((prop: string | number) => {\r\n            if (\r\n                o.hasOwnProperty(prop) &&\r\n                (o as any)[prop] !== null &&\r\n                (typeof (o as any)[prop] === \"object\" || typeof (o as any)[prop] === \"function\") &&\r\n                !Object.isFrozen((o as any)[prop])\r\n            ) {\r\n                self.deepFreeze((o as any)[prop]);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    },\r\n\r\n    sort: <T>(arr: T[], compareFunction: (a: any, b: any) => number): T[] => {\r\n        return [...arr].sort(compareFunction);\r\n    },\r\n\r\n    datasetToArray: (ds: any, key: string): Readonly<any[]> => {\r\n        const r: any[] = [];\r\n        ds.forEach((v: { [index: string]: any }) => {\r\n            r.push(v[key]);\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    keepOnlyKeys: <T>(arr: T[], keys: string[]): Readonly<T[]> => {\r\n        arr = arr.slice();\r\n        arr.forEach((v: any) => {\r\n            const k = Object.keys(v);\r\n            k.forEach(key => {\r\n                if (keys.indexOf(key) < 0) {\r\n                    delete v[key];\r\n                }\r\n            });\r\n        });\r\n        return self.deepFreeze(arr);\r\n    },\r\n\r\n    getFileExtension: (filename: string): string => {\r\n        return filename.split(\".\").splice(-1)[0];\r\n    },\r\n\r\n    htmlEncode: (string: string): string => {\r\n        const t = document.createElement(\"textarea\");\r\n        t.textContent = string;\r\n        string = t.innerHTML.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\");\r\n        return string;\r\n    },\r\n\r\n    printout: (text: string, escape?: string): void => {\r\n        if (escape) {\r\n            text = self.htmlEncode(escape);\r\n        }\r\n        document.getElementById(\"printout\")!.innerHTML = text;\r\n    },\r\n\r\n    flatten: <T>(map: { [key: string]: T }): Readonly<T[]> => {\r\n        const r: T[] = [];\r\n        Object.keys(map).forEach(i => {\r\n            r.push(map[i]);\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    rotate: (map: { [key: string]: any }): Readonly<any> => {\r\n        const r: any = {};\r\n        Object.keys(map).forEach(i => {\r\n            if (map[i] in r) {\r\n                r[map[i]].push(i);\r\n            } else {\r\n                r[map[i]] = [i];\r\n            }\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    max: (iterable: any[]): number => {\r\n        return iterable.reduce((a, b) => {\r\n            return Math.max(a, b);\r\n        });\r\n    },\r\n\r\n    toTitleCase: (str: string): string => {\r\n        return str.replace(/(?:^|\\s)\\w/g, match => {\r\n            return match.toUpperCase();\r\n        });\r\n    },\r\n\r\n    showSimpleModal: (title: string, body: string): void => {\r\n        self.showFormModal(null, title, null, [{ type: \"html\", initialValue: body }], null, false);\r\n    },\r\n\r\n    makeFormModal: (title: string, successText: string | null, form: ModalFormRow[], footer = true): JQuery => {\r\n        const f = $(\"<div>\", { class: \"modal-body form-group\" });\r\n        form.forEach((formRow, i) => {\r\n            if (!(\"initialValue\" in formRow)) {\r\n                formRow.initialValue = \"\";\r\n            }\r\n\r\n            let id = \"form-modal-\" + i;\r\n            if (\"id\" in formRow && formRow.id !== \"\" && formRow.id !== null && typeof formRow.id === \"string\") {\r\n                id = formRow.id;\r\n            }\r\n\r\n            const basicMap: BasicMapType = { class: \"form-control\", id, value: formRow.initialValue };\r\n\r\n            if (\"extraAttrs\" in formRow) {\r\n                Object.keys(formRow.extraAttrs).forEach(attrname => {\r\n                    if (typeof formRow.extraAttrs[attrname] !== \"function\") {\r\n                        basicMap[attrname] = formRow.extraAttrs[attrname];\r\n                    }\r\n                });\r\n            }\r\n\r\n            let validFunc: typeof formRow[\"validationFunc\"] = () => true;\r\n            if (\"validationFunc\" in formRow && typeof formRow.validationFunc === \"function\") {\r\n                validFunc = formRow.validationFunc;\r\n            }\r\n\r\n            const generalValidator = (event: any, valueMutator: null | ((v: any) => any) = null) => {\r\n                const $v = $(event.target);\r\n                let val = $v.val();\r\n                if (valueMutator !== null && typeof valueMutator === \"function\") {\r\n                    val = valueMutator(val);\r\n                }\r\n                const valid = validFunc!(val, $v);\r\n\r\n                if (valid === true) {\r\n                    $v.removeClass(\"is-invalid\")\r\n                        .next(\"#feedback-\" + i)\r\n                        .remove();\r\n                } else {\r\n                    $v.addClass(\"is-invalid\");\r\n                    if ($v.next(\"#feedback-\" + i).length === 0) {\r\n                        $v.after($(\"<div>\", { class: \"invalid-feedback\", id: \"feedback-\" + i }).text(valid));\r\n                    }\r\n                }\r\n            };\r\n\r\n            if (formRow.type === \"html\") {\r\n                f.append($(formRow.initialValue));\r\n            } else if (formRow.type === \"checkbox\") {\r\n                basicMap.type = \"checkbox\";\r\n                basicMap.class = \"form-check-input\";\r\n                delete basicMap.value;\r\n                if (formRow.initialValue) {\r\n                    basicMap.checked = \"\";\r\n                }\r\n\r\n                f.append(\r\n                    $(\"<div>\", { class: \"form-check\" }).append(\r\n                        $(\"<label>\", { for: id, class: \"form-check-label\" })\r\n                            .text(formRow.label!)\r\n                            .prepend($(\"<input>\", basicMap))\r\n                    )\r\n                );\r\n            } else {\r\n                f.append($(\"<label>\", { for: id, class: \"col-form-label\" }).text(formRow.label!));\r\n\r\n                if (formRow.type === \"button\") {\r\n                    if (\"clickDismiss\" in formRow && formRow.clickDismiss === true) {\r\n                        basicMap.class += \" btn-dismiss\";\r\n                    }\r\n                    const $b = $(\"<button>\", basicMap).text(formRow.initialValue);\r\n                    if (\"onclick\" in formRow && typeof formRow.onclick === \"function\") {\r\n                        $b.on(\"click\", formRow.onclick);\r\n                    }\r\n                    f.append($b);\r\n                } else if (formRow.type === \"numeric\") {\r\n                    basicMap.type = \"number\";\r\n                    f.append(\r\n                        $(\"<input>\", basicMap).on(\"blur validate\", e => {\r\n                            generalValidator(e, parseFloat);\r\n                        })\r\n                    );\r\n                } else if (formRow.type === \"text\") {\r\n                    basicMap.type = \"text\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                } else if (formRow.type === \"file\") {\r\n                    basicMap.type = \"file\";\r\n                    basicMap.class = \"form-control-file form-control\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                } else if (formRow.type === \"textarea\") {\r\n                    const $b = $(\"<textarea>\", basicMap).on(\"blur validate\", generalValidator);\r\n                    if (\"onclick\" in formRow) {\r\n                        $b.on(\"click\", formRow.onclick!);\r\n                    }\r\n                    f.append($b);\r\n                } else if (formRow.type === \"select\") {\r\n                    const $options = $(\"<select>\", basicMap);\r\n                    formRow.optionText!.forEach((oText, oIndex) => {\r\n                        if (oIndex < formRow.optionValues!.length) {\r\n                            $options.append($(\"<option>\", { value: formRow.optionValues![oIndex] }).text(oText));\r\n                        } else {\r\n                            $options.append($(\"<option>\").text(oText));\r\n                        }\r\n                    });\r\n                    f.append($options.on(\"blur validate\", generalValidator));\r\n                }\r\n            }\r\n        });\r\n\r\n        let $footer: JQuery<HTMLElement> | null = $(\"<div>\", { class: \"modal-footer\" })\r\n            .append($(\"<button>\", { class: \"btn btn-success\", type: \"button\" }).text(successText!))\r\n            .append($(\"<button>\", { class: \"btn btn-danger btn-cancel\", type: \"button\" }).text(\"Cancel\"));\r\n\r\n        if (footer === false) {\r\n            $footer = null;\r\n        }\r\n\r\n        const $modal = $(\"<div>\", { class: \"modal fade\", tabindex: \"-1\", role: \"dialog\", \"aria-hidden\": \"true\" });\r\n        $modal.append(\r\n            $(\"<div>\", { class: \"modal-dialog\" }).append(\r\n                $(\"<div>\", { class: \"modal-content\" })\r\n                    .append(\r\n                        $(\"<div>\", { class: \"modal-header\" })\r\n                            .append($(\"<h5>\", { class: \"modal-title\" }).text(title))\r\n                            .append(\r\n                                $(\"<button>\", {\r\n                                    class: \"close\",\r\n                                    \"data-dismiss\": \"modal\",\r\n                                    \"aria-label\": \"close\"\r\n                                }).append($(\"<span>\", { \"aria-hidden\": \"true\" }).html(\"&times;\"))\r\n                            )\r\n                    )\r\n                    .append(f)\r\n                    .append($footer!)\r\n            )\r\n        );\r\n        $modal\r\n            .find(\"input, textarea\")\r\n            .off(\"keyup\")\r\n            .on(\"keyup\", e => {\r\n                if (e.key === \"Enter\") {\r\n                    $(\".btn-success\")\r\n                        .last()\r\n                        .trigger(\"click\");\r\n                }\r\n            });\r\n        $modal.on(\"shown.bs.modal\", () => {\r\n            $modal\r\n                .find(\"input[type='text'], input[type='number'], textarea\")\r\n                .first()\r\n                .trigger(\"focus\");\r\n        });\r\n\r\n        return $modal;\r\n    },\r\n\r\n    showFormModal: (\r\n        successCb: null | (($modal: JQuery, vals: any[]) => void),\r\n        title: string,\r\n        successText: string | null,\r\n        form: ModalFormRow[],\r\n        cancelCb: null | (($modal: JQuery) => void) = defaultCancelCb,\r\n        footer = true\r\n    ) => {\r\n        const $modal = self.makeFormModal(title, successText, form, footer);\r\n\r\n        $modal\r\n            .on(\"click\", \".btn-cancel\", () => {\r\n                if (typeof cancelCb === \"function\") {\r\n                    cancelCb($modal);\r\n                } else {\r\n                    $modal.modal(\"hide\");\r\n                }\r\n            })\r\n            .on(\"click\", \".btn-dismiss\", () => {\r\n                $modal.modal(\"hide\");\r\n            })\r\n            .on(\"click\", \".btn-success\", () => {\r\n                const vals: any[] = [];\r\n                let hasErrors = false;\r\n\r\n                $modal.find(\"input, textarea, select\").each((i, v) => {\r\n                    const $v = $(v);\r\n\r\n                    if (($v as any).tagName === \"SELECT\") {\r\n                        vals.push($v.find(\":selected\").val());\r\n                    } else if ($v.attr(\"type\") === \"checkbox\") {\r\n                        vals.push($v.prop(\"checked\"));\r\n                    } else if ($v.attr(\"type\") === \"file\") {\r\n                        vals.push(($v.get(0) as any).files);\r\n                    } else if ($v.attr(\"type\") === \"number\") {\r\n                        vals.push(parseFloat($v.val() as string));\r\n                    } else {\r\n                        vals.push($v.val());\r\n                    }\r\n\r\n                    if ($v.trigger(\"validate\").hasClass(\"is-invalid\")) {\r\n                        hasErrors = true;\r\n                    }\r\n                });\r\n\r\n                if (!hasErrors && typeof successCb === \"function\") {\r\n                    successCb($modal, vals);\r\n                }\r\n            })\r\n            .on(\"hidden.bs.modal\", () => {\r\n                $modal.remove();\r\n            })\r\n            .modal(\"show\");\r\n    }\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\n\r\nimport help from './util/genericHelpers';\r\nimport randomColor from 'randomcolor';\r\nimport GraphState, {AddNodeI, GraphStateHistory} from './graphState';\r\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\r\nimport {NodeImmutPlain} from \"./classes/GraphImmut/NodeImmut\";\r\nimport {EdgeImmutPlain} from \"./classes/GraphImmut/EdgeImmut\";\r\nimport {GraphPlain} from \"./util/predefinedGraphs\";\r\n\r\nexport interface MainI {\r\n    graphState: typeof GraphState;\r\n    container: HTMLElement;\r\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback: Function) => void;\r\n    visOptions: {\r\n        interaction: { hover: boolean };\r\n        manipulation: {\r\n            addNode: (data: AddNodeI, callback: Function) => void;\r\n            editNode: (data: AddNodeI, callback: Function) => void;\r\n            addEdge: (data: VisEdgeInternal, callback?: Function) => void;\r\n            editEdge: (data: VisEdgeInternal, callback: Function) => void;\r\n            deleteEdge: (data: { edges: string[] }, callback?: Function) => void;\r\n            deleteNode: (data: { nodes: string[] }, callback: Function) => void\r\n        }\r\n    };\r\n    cancelEdit: (callback: Function) => void;\r\n    saveData: (data: any, callback: Function, operation: string, label: string) => void;\r\n    nodeLabelIDValidator: (v: string) => (boolean | string);\r\n    applyColors: () => Promise<void>;\r\n    setData: (data: GraphPlain, recalcProps?: boolean, graphChanged?: boolean, rearrangeGraph?: boolean) => void;\r\n    saveState: () => void;\r\n    getStateForSaving: () => GraphStateHistory;\r\n    undo: () => void;\r\n    redo: () => void;\r\n    applyState: (undo?: boolean, newState?: any) => void;\r\n    saveStateLocalStorage: () => void;\r\n    shuffleNetworkLayout: () => void;\r\n    randomizeNetworkLayoutSeed: (network: VisNetworkInternals) => void;\r\n    addNetworkListeners: (network: vis.Network) => void\r\n}\r\n\r\ninterface VisNetworkEvent {\r\n    edges: vis.DataSet<vis.Edge>;\r\n    nodes: vis.DataSet<vis.Node>;\r\n}\r\n\r\ninterface VisNetworkInternals extends vis.Network {\r\n    layoutEngine: {\r\n        randomSeed: number,\r\n        initialRandomSeed: number\r\n    }\r\n}\r\n\r\ninterface VisEditEdgeInternal {\r\n    from: { id: string | number };\r\n    to: { id: string | number };\r\n    label?: string\r\n}\r\n\r\ninterface VisEdgeInternal {\r\n    from: string | number;\r\n    to: string | number;\r\n    id: string;\r\n    label?: string\r\n}\r\n\r\nconst self: MainI = {\r\n    graphState: GraphState,\r\n    container: document.getElementById('network')!,\r\n    // Function used to overwrite the edge edit functionality when weights are active\r\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback) => {\r\n        help.showFormModal(($modal, vals) => {\r\n            callback(null);\r\n            $modal.modal(\"hide\");\r\n            const value = parseFloat(vals[0]);\r\n            GraphState.editEdge(data.from.id, data.to.id, value, parseFloat(data.label!));\r\n        }, \"Edit Edge\", \"Save\", [\r\n            {\r\n                type: \"numeric\",\r\n                label: \"Weight/Capacity\",\r\n                initialValue: parseFloat(data.label!)\r\n            }\r\n        ]);\r\n    },\r\n    visOptions: {\r\n        interaction: {hover: true},\r\n        manipulation: {\r\n            addNode: async (data, callback) => {\r\n                const $popup = help.makeFormModal(\"Add Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: `<p>Node ID: ${await GraphState.getProperty(\"vertices\")}</p>`\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: await GraphState.getProperty(\"vertices\")}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"add\", $popup.find(\"input\").first().val() as string);\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            editNode: (data, callback) => {\r\n                const $popup = help.makeFormModal(\"Edit Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: `<p>Node ID: ${data.id}</p>`\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: data.label}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"editNode\", $popup.find(\"input\").first().val() as string);\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            addEdge: (data, callback) => {\r\n                const apply = () => {\r\n                    if (typeof callback === \"function\") {\r\n                        callback(null);\r\n                    }\r\n                    GraphState.addEdge(data.from, data.to);\r\n                };\r\n                if (data.from === data.to) {\r\n                    if (confirm(\"Do you want to connect the node to itself?\")) {\r\n                        apply();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                apply();\r\n            },\r\n            editEdge: (data, callback) => {\r\n                callback(null);\r\n                self.visOptions.manipulation.deleteEdge({edges: [data.id]});\r\n                self.visOptions.manipulation.addEdge(data);\r\n            },\r\n            deleteEdge: (data, callback) => {\r\n                if (typeof callback === \"function\") {\r\n                    callback(null);\r\n                }\r\n                data.edges.forEach((v: any) => {\r\n                    let weight = null;\r\n                    if (typeof (window.network as any).body.data.edges._data[v].label !== \"undefined\") {\r\n                        weight = parseFloat((window.network as any).body.data.edges._data[v].label);\r\n                    }\r\n\r\n                    GraphState.deleteEdge((window.network as any).body.edges[v].fromId,\r\n                        (window.network as any).body.edges[v].toId, weight);\r\n                });\r\n            },\r\n            deleteNode: (data, callback) => {\r\n                callback(null);\r\n                data.nodes.forEach((v: string) => {\r\n                    GraphState.deleteNode(v);\r\n                });\r\n            },\r\n        },\r\n    },\r\n\r\n    cancelEdit: (callback) => {\r\n        if (typeof callback === \"function\") {\r\n            callback(null);\r\n        }\r\n    },\r\n\r\n    saveData: (data, callback, operation, label) => {\r\n        callback(null);\r\n\r\n        data.label = label;\r\n        if (operation === \"add\") {\r\n            GraphState.addNode(data);\r\n        }\r\n        else if (operation === \"editNode\") {\r\n            GraphState.editNode(data.id, data.label);\r\n        }\r\n    },\r\n\r\n    nodeLabelIDValidator: (v) => {\r\n        if (GraphState.nodeLabelToID(v) > -1) {\r\n            return true;\r\n        }\r\n        return \"Invalid Label or ID\";\r\n    },\r\n\r\n    applyColors: async () => {\r\n        if (window.settings.getOption(\"direction\")) {\r\n            return;\r\n        }\r\n        const graphColors = await GraphState.getProperty(\"graphColoring\", true);\r\n        const chromaticNumber = await GraphState.getProperty(\"Chromatic Number\", true);\r\n\r\n        const colors = randomColor({count: chromaticNumber, luminosity: \"light\"});\r\n        let G = GraphState.graph;\r\n        (G.getAllNodes() as NodeImmutPlain[]).forEach((v) => {\r\n            G = G.editNode(v.id, {color: colors[graphColors[v.id]]});\r\n        });\r\n        self.setData(GraphState.getGraphData(G), false, false);\r\n    },\r\n\r\n    setData: (data, recalcProps = false, graphChanged = true, rearrangeGraph = false) => {\r\n        // Store existing positions in the data if we're supposed to keep the layout\r\n        if (rearrangeGraph) {\r\n            data.nodes.forEach((v) => {\r\n                delete v.x;\r\n                delete v.y;\r\n            });\r\n        }\r\n\r\n        if (graphChanged) {\r\n            self.saveState();\r\n        }\r\n\r\n        if (\"directed\" in data && typeof data.directed !== \"undefined\") {\r\n            window.settings.changeOption(\"direction\", data.directed);\r\n        }\r\n        if (\"weighted\" in data && typeof data.weighted !== \"undefined\") {\r\n            window.settings.changeOption(\"weights\", data.weighted);\r\n        }\r\n        const directional = window.settings.getOption(\"direction\") as boolean;\r\n        const weighted = window.settings.getOption(\"weights\") as boolean;\r\n\r\n        const g = new GraphImmut(data.nodes, data.edges, directional, weighted);\r\n        GraphState.graph = g;\r\n\r\n        // Set a new random seed so that the layout will be different\r\n        self.randomizeNetworkLayoutSeed(window.network as VisNetworkInternals);\r\n        window.network.setData(GraphState.getGraphAsDataSet(g));\r\n        GraphState.graph = GraphState.setLocations(window.network.getPositions());\r\n\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        if (graphChanged) {\r\n            window.ui.stopLoadingAnimation();\r\n            window.ui.isRunning = {};\r\n            window.ui.terminateAllWebWorkers();\r\n            window.ui.printGraphAlgorithms();\r\n            help.printout(\"\");\r\n            GraphState.setUpToDate();\r\n            GraphState.makeAndPrintProperties(recalcProps);\r\n        }\r\n\r\n        self.saveStateLocalStorage();\r\n    },\r\n\r\n    saveState: () => {\r\n        if (GraphState.graph === null) {\r\n            return;\r\n        }\r\n\r\n        if (GraphState.backHistory.length >= GraphState.maxHistory) {\r\n            GraphState.backHistory.shift();\r\n        }\r\n\r\n        GraphState.backHistory.push(self.getStateForSaving());\r\n        GraphState.forwardHistory = [];\r\n        document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\r\n    },\r\n\r\n    getStateForSaving: () => {\r\n        const state: any = {};\r\n        Object.keys(GraphState).forEach((k: string) => {\r\n            const v: any = (GraphState as any)[k];\r\n            if (typeof v !== \"function\") {\r\n                if (typeof v !== \"object\") {\r\n                    state[k] = v;\r\n                }\r\n                else {\r\n                    if (k === \"graph\" && v !== null) {\r\n                        state[k] = v;\r\n                    }\r\n                    if (!k.toLowerCase().includes(\"history\")) {\r\n                        state[k] = help.deepCopy(true, Array.isArray(v) ? [] : {}, v);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return state as GraphStateHistory;\r\n    },\r\n\r\n    undo: () => {\r\n        if (GraphState.backHistory.length > 0) {\r\n            self.applyState(true);\r\n        }\r\n    },\r\n\r\n    redo: () => {\r\n        if (GraphState.forwardHistory.length > 0) {\r\n            self.applyState(false);\r\n        }\r\n    },\r\n\r\n    applyState: (undo = true, newState: null|GraphStateHistory = null) => {\r\n        const firstLoad = newState !== null;\r\n        const currentState = self.getStateForSaving();\r\n\r\n        if (!firstLoad) {\r\n            if (undo) {\r\n                newState = GraphState.backHistory.pop()!;\r\n            }\r\n            else {\r\n                newState = GraphState.forwardHistory.pop()!;\r\n            }\r\n        }\r\n\r\n        //@ts-ignore Ignore accessing private props. I do this because saving the state lost the type of the data\r\n        newState.graph = new GraphImmut(newState.graph.nodes, newState.graph.edges, newState.graph.directed, newState.graph.weighted);\r\n\r\n        window.settings.changeOption(\"direction\", newState!.graph.isDirected());\r\n        window.settings.changeOption(\"weights\", newState!.graph.isWeighted());\r\n\r\n        GraphState.graph = newState!.graph;\r\n\r\n        window.network.setData(GraphState.getGraphAsDataSet(GraphState.graph));\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        window.ui.printGraphAlgorithms();\r\n        help.printout(\"\");\r\n\r\n        Object.keys(newState!).forEach((k: string) => {\r\n            const v = newState![k];\r\n            if (typeof v !== \"object\") {\r\n                (GraphState as any)[k] = v;\r\n            }\r\n            else if (!k.toLowerCase().includes(\"history\") && k.toLowerCase() !== \"graph\") {\r\n                if (k.toLowerCase() === \"uptodate\") {\r\n                    Object.keys((GraphState as any)[k]).forEach((oldKey) => {\r\n                        (GraphState as any)[k][oldKey].upToDate = (v as any)[oldKey].upToDate;\r\n                    });\r\n                }\r\n                else {\r\n                    (GraphState as any)[k] = help.deepCopy(true, (GraphState as any)[k], v);\r\n                }\r\n            }\r\n        });\r\n\r\n        GraphState.makeAndPrintProperties().then(() => {\r\n            if (undo && !firstLoad) {\r\n                document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\r\n                if (GraphState.backHistory.length === 0) {\r\n                    document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\r\n                }\r\n                GraphState.forwardHistory.push(currentState);\r\n            }\r\n            else if (!undo && !firstLoad) {\r\n                document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\r\n                if (GraphState.forwardHistory.length === 0) {\r\n                    document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\r\n                }\r\n                GraphState.backHistory.push(currentState);\r\n            }\r\n\r\n            self.saveStateLocalStorage();\r\n        });\r\n    },\r\n\r\n    saveStateLocalStorage: () => {\r\n        if (window.settings.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.lastState\", JSON.stringify(self.getStateForSaving()));\r\n        }\r\n    },\r\n\r\n    shuffleNetworkLayout: () => {\r\n        self.setData({\r\n            nodes: GraphState.graph.getAllNodes() as NodeImmutPlain[],\r\n            edges: GraphState.graph.getAllEdges() as EdgeImmutPlain[]\r\n        }, false, false, true);\r\n    },\r\n\r\n    randomizeNetworkLayoutSeed: (network) => {\r\n        const r = Math.round(Math.random() * 1000000);\r\n        network.layoutEngine.randomSeed = r;\r\n        network.layoutEngine.initialRandomSeed = r;\r\n    },\r\n\r\n    addNetworkListeners: (network) => {\r\n        // Enable edit node/edge when double clicking\r\n        network.on(\"doubleClick\", (p: VisNetworkEvent) => {\r\n            if (window.settings.getOption(\"weights\") && \"edges\" in p && p.edges.length === 1) {\r\n                network.editEdgeMode();\r\n            }\r\n            if (\"nodes\" in p && p.nodes.length === 1) {\r\n                network.editNode();\r\n            }\r\n        });\r\n\r\n        // Save locations of nodes after dragging\r\n        network.on(\"dragEnd\", () => {\r\n            GraphState.graph = GraphState.setLocations(network.getPositions());\r\n            self.saveStateLocalStorage(); // Save the new locations as part of the state\r\n        });\r\n\r\n        // Delete nodes/edges when hit \"Delete\"\r\n        let lastNetworkClickEvent: Event|null = null;\r\n        network.on('click', (event) => {\r\n            lastNetworkClickEvent = event;\r\n        });\r\n\r\n        // Delete key to delete node or edge\r\n        document.addEventListener('keyup', (key) => {\r\n            if (key.key === \"Delete\" && lastNetworkClickEvent !== null) {\r\n                if (self.container.contains((lastNetworkClickEvent as any).event.target)) {\r\n                    if ((\"edges\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).edges.length === 1)\r\n                        || (\"nodes\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).nodes.length === 1)) {\r\n                        network.deleteSelected();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Undo/Redo keyboard commands\r\n        document.addEventListener(\"keydown\", (e) => {\r\n            if ((e.key.toLowerCase() === 'y' && e.ctrlKey) || (e.key.toLowerCase() === 'z' && e.ctrlKey && e.shiftKey)) {\r\n                self.redo();\r\n            }\r\n            else if (e.key.toLowerCase() === 'z' && e.ctrlKey) {\r\n                self.undo();\r\n            }\r\n        });\r\n\r\n        // When clicking off of the network, remove the Delete functionality\r\n        document.addEventListener(\"click\", (e) => {\r\n            if (self.container !== e.target && !self.container.contains(e.target as Node)) {\r\n                lastNetworkClickEvent = null;\r\n            }\r\n        });\r\n    },\r\n\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\ninterface SettingsList {\r\n    nodePhysics: boolean;\r\n    direction: boolean;\r\n    weights: boolean;\r\n\r\n    [index: string]: boolean;\r\n}\r\n\r\nexport default class Settings {\r\n    private static readonly defaults: SettingsList = {\r\n        nodePhysics: true,\r\n        direction: false,\r\n        weights: false\r\n    };\r\n    private static current: any = {};\r\n\r\n    public static checkForLocalStorage() {\r\n        try {\r\n            const x = \"__storage_test__\";\r\n            localStorage.setItem(x, x);\r\n            localStorage.removeItem(x);\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static saveSettings() {\r\n        if (Settings.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.settings\", JSON.stringify(Settings.current));\r\n        }\r\n    }\r\n\r\n    public static loadSettings() {\r\n        if (Settings.checkForLocalStorage()) {\r\n            const settings = localStorage.getItem(\"graphPlayground.settings\");\r\n            if (settings === null) {\r\n                Settings.current = settings;\r\n            } else {\r\n                Settings.current = JSON.parse(settings);\r\n            }\r\n        }\r\n        if (Settings.current === null) {\r\n            Settings.current = {};\r\n        }\r\n        Settings.setAll();\r\n    }\r\n\r\n    public static setAll() {\r\n        window.network.setOptions({ nodes: { physics: Settings.getOption(\"nodePhysics\") as boolean } });\r\n        window.network.setOptions({ edges: { arrows: { to: Settings.getOption(\"direction\") as boolean } } });\r\n        if (Settings.getOption(\"weights\")) {\r\n            window.network.setOptions({\r\n                manipulation: {\r\n                    editEdge: {\r\n                        editWithoutDrag: window.main.visWeightEdgeEdit\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            window.network.setOptions({ manipulation: { editEdge: window.main.visOptions.manipulation.editEdge } });\r\n        }\r\n    }\r\n\r\n    public static changeOption(option: string, value: string | boolean): void {\r\n        Settings.current[option] = value;\r\n        Settings.saveSettings();\r\n        Settings.setAll();\r\n    }\r\n\r\n    public static getOption(option: string): string | boolean {\r\n        if (option in Settings.current) {\r\n            return Settings.current[option];\r\n        }\r\n        return Settings.defaults[option];\r\n    }\r\n}\r\n","import gHelp from \"./util/graphHelpers\";\nimport help from \"./util/genericHelpers\";\nimport GraphState from \"./graphState\";\nimport { FlowResult, MSTResult, ShortestPathResult } from \"./GraphAlgorithms\";\n//@ts-ignore\nimport Worker from \"worker-loader!./workers/GraphAlgorithmWorker\";\nimport NodeImmut from \"./classes/GraphImmut/NodeImmut\";\nimport EdgeImmut from \"./classes/GraphImmut/EdgeImmut\";\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\n\ninterface AlgorithmI {\n    name: string;\n    directional?: boolean;\n    weighted?: boolean;\n    applyFunc: () => any;\n    display: boolean;\n}\n\nconst makeAndPrintShortestPath = (title: string, fn: string, weighted: boolean): void => {\n    const myName = \"Shortest Path\";\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const source = GraphState.nodeLabelToID(values[0]);\n            const sink = GraphState.nodeLabelToID(values[1]);\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                if (a === false) {\n                    if (title.includes(\"Dijkstra\")) {\n                        help.showSimpleModal(\n                            \"Dijkstra Error\",\n                            \"<p>The Dijkstra algorithm only works on graphs\" +\n                                \" with totally non-negative edge weights. Please fix the graph so that there are no\" +\n                                \" negative edge weights.</p><p>Alternatively, try the Bellman-Ford algorithm which solves\" +\n                                \" exactly this problem.</p>\"\n                        );\n                    } else if (title.includes(\"Bellman\")) {\n                        help.showSimpleModal(\n                            \"Bellman-Ford Error\",\n                            \"<p>The Bellman-Ford algorithm only works on graphs\" +\n                                \" with no negative edge-weight cycles. Please remove the negative cycle and try again.</p>\"\n                        );\n                    }\n                    return;\n                }\n\n                a = a as ShortestPathResult;\n\n                let p = `<h3>${title}</h3><hr>No path exists from ${help.htmlEncode(\n                    source.toString()\n                )} to ${help.htmlEncode(sink.toString())}`;\n\n                if (a.pathExists) {\n                    p = `${title} From ${GraphState.nodeIDToLabel(source)} to `;\n                    p += `${GraphState.nodeIDToLabel(sink)}: ${a.distance}`;\n                    if (weighted) {\n                        p += `\\nWith weighted cost: ${a.cost}`;\n                    }\n                    p += \"\\n\\nUsing Path: \";\n\n                    p = help.htmlEncode(p);\n                    let graph = GraphState.getGraphData(GraphState.graph, false, true);\n                    let G = new GraphImmut(graph.nodes, graph.edges, graph.directed, graph.weighted);\n                    a.path.forEach((v: number, i: number) => {\n                        p += `${help.htmlEncode(GraphState.nodeIDToLabel(v))} &rarr; `;\n                        if (i > 0) {\n                            G = G.editEdge(a.path[i - 1], v, null, null, \"#FF0000\") as GraphImmut;\n                        }\n                    });\n                    GraphState.graph = G;\n                    window.main.setData(GraphState.getGraphData(G), false, false, false);\n                    p = p.slice(0, -8);\n                    p = `<h3>${title}</h3><hr>${p}`;\n                }\n\n                help.printout(p);\n            });\n            w.send({\n                type: fn,\n                args: [source, sink],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        },\n        title,\n        \"Go\",\n        [\n            {\n                label: \"Start Node\",\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            },\n            {\n                label: \"End Node\",\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            }\n        ]\n    );\n};\n\nconst makeAndPrintComponents = async (stronglyConnected: boolean): Promise<void> => {\n    let a = null;\n    let cc = \"Connected Components\";\n    let componentKey = \"connectedComponents\";\n\n    if (stronglyConnected) {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        cc = \"Strongly \" + cc;\n        componentKey = \"stronglyConnectedComponents\";\n    } else {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n    }\n\n    if (UIInteractions.isRunning[cc]) {\n        UIInteractions.printAlreadyRunning(cc);\n        return Promise.reject(\"Already Running\");\n    }\n    UIInteractions.isRunning[cc] = true;\n\n    const iStartedProgress = UIInteractions.startLoadingAnimation();\n    const w = UIInteractions.getWorkerIfPossible(e => {\n        a = e.data;\n        w.cleanup();\n\n        GraphState.graphProperties[cc] = a.count;\n        GraphState.setUpToDate(true, [cc, componentKey]);\n        GraphState.state[componentKey] = a.components;\n\n        const components = help.flatten(a.components);\n        let p = `Number of ${cc}: ${a.count}`;\n        p += \"\\n\\n\";\n\n        components.forEach((v, i) => {\n            p += `Vertex ${GraphState.nodeIDToLabel(i)} is in connected component #${v}\\n`;\n        });\n\n        p += `\\n${JSON.stringify(help.rotate(a.components), null, 4)}\\n\\n`;\n        p = `<h3>${cc}</h3><hr>${help.htmlEncode(p)}`;\n\n        if (iStartedProgress) {\n            UIInteractions.stopLoadingAnimation();\n        }\n        UIInteractions.isRunning[cc] = false;\n\n        help.printout(p);\n    });\n    w.send({\n        type: componentKey,\n        args: [],\n        graph: window.main.graphState.getGraphData(),\n        convertToGraphImmut: true\n    });\n};\n\nclass WorkerProxy {\n    private readonly worker: Worker;\n    private readonly id: number;\n    private readonly listener: (e: { data: any }) => any;\n\n    constructor(id: number, w: Worker, listener: ((e: { data: any }) => any)) {\n        this.id = id;\n        this.worker = w;\n        this.listener = listener;\n        w.postMessage({ type: \"id\", id });\n        w.onmessage = (e: MessageEvent) => {\n            this.listener({ data: e.data.data });\n        };\n    }\n\n    public send(data: any) {\n        this.worker.postMessage(data);\n    }\n\n    public cleanup() {\n        this.worker.terminate();\n        GraphState.workerPool[this.id] = null;\n    }\n}\n\nexport default class UIInteractions {\n    public static isRunning: { [index: string]: boolean } = {};\n    static getAlgorithms(): AlgorithmI[] {\n        return [\n            {\n                name: \"Graph Coloring\",\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintGraphColoring,\n                display: true\n            },\n            {\n                name: \"Connected Components\",\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintComponents(false);\n                },\n                display: true\n            },\n            {\n                name: \"Strongly Connected Components\",\n                directional: true,\n                display: true,\n                applyFunc: () => {\n                    makeAndPrintComponents(true);\n                }\n            },\n            {\n                name: \"Breadth-First Shortest Path\",\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(\"Breadth-First Shortest Path\", \"breadthFirstSearch\", false);\n                },\n                display: true\n            },\n            {\n                name: \"Dijkstra Shortest Path\",\n                applyFunc: () => {\n                    makeAndPrintShortestPath(\"Dijkstra Shortest Path\", \"dijkstraSearch\", true);\n                },\n                display: true\n            },\n            {\n                name: \"Bellman-Ford Shortest Path\",\n                weighted: true,\n                directional: true,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(\"Bellman-Ford Shortest Path\", \"bellmanFord\", true);\n                },\n                display: true\n            },\n            {\n                name: \"Ford-Fulkerson\",\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintFFMCMF,\n                display: true\n            },\n            {\n                name: \"Kruskal Minimum Spanning Tree\",\n                weighted: true,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintKruskal,\n                display: true\n            },\n            {\n                name: \"Cyclic\",\n                applyFunc: UIInteractions.makeAndPrintIsCyclic,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Topological Sort\",\n                applyFunc: UIInteractions.makeAndPrintTopologicalSort,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Eulerian\",\n                directional: false,\n                display: false,\n                applyFunc: null\n            },\n            {\n                name: \"Eulerian\",\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintDirectionalEulerian\n            }\n        ] as AlgorithmI[];\n    }\n\n    static registerListeners(): void {\n        const makeSimpleClickListener = (selector: string, fn: () => any) => {\n            document.querySelector(selector)!.addEventListener(\"click\", e => {\n                e.preventDefault();\n                fn();\n            });\n        };\n\n        makeSimpleClickListener(\"#print-help-link\", UIInteractions.printHelp);\n        makeSimpleClickListener(\"#graph-options-link\", UIInteractions.printOptions);\n        makeSimpleClickListener(\"#load-petersen-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            window.main.setData(predefined.Petersen(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-konigsberg-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            window.main.setData(predefined.Konigsberg(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-complete-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Complete();\n        });\n        makeSimpleClickListener(\"#load-hypercube-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Hypercube();\n        });\n        makeSimpleClickListener(\"#load-custom-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Custom();\n        });\n        makeSimpleClickListener(\"#undo-link\", window.main.undo);\n        makeSimpleClickListener(\"#redo-link\", window.main.redo);\n        makeSimpleClickListener(\"#calculate-all-properties-link\", async () => {\n            return GraphState.makeAndPrintProperties(true);\n        });\n        makeSimpleClickListener(\"#new-graph-layout-link\", window.main.shuffleNetworkLayout);\n        makeSimpleClickListener(\"#import-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportFileModal();\n        });\n        makeSimpleClickListener(\"#import-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportTextModal();\n        });\n        makeSimpleClickListener(\"#export-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportFileModal();\n        });\n        makeSimpleClickListener(\"#export-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportTextModal();\n        });\n    }\n\n    static printHelp(): void {\n        help.showSimpleModal(\n            \"Help\",\n            \"<h4>For support see the \" +\n                \"<a href='https://github.com/MikeDombo/graphPlayground' target='_blank'>GitHub repository</a>\" +\n                \" for guides</h4> <h4>See <a href='https://github.com/MikeDombo/graphPlayground/issues' target='_blank'>\" +\n                \"GitHub issues</a> to submit bugs or feature requests.</h4>\"\n        );\n    }\n\n    static printOptions(): void {\n        help.showFormModal(\n            ($modal, vals) => {\n                $modal.modal(\"hide\");\n                if (window.settings.getOption(\"nodePhysics\") !== vals[0]) {\n                    window.settings.changeOption(\"nodePhysics\", vals[0]); // Physics\n                }\n                if (window.settings.getOption(\"direction\") !== vals[1]) {\n                    window.settings.changeOption(\"direction\", vals[1]);\n                    let G = GraphState.graph;\n                    G = vals[1] ? G.asDirected(true) : G.asUndirected();\n                    // Clear node coloring because graph color doesn't apply to directed graphs\n                    window.main.setData(GraphState.getGraphData(G, true));\n                }\n                if (window.settings.getOption(\"weights\") !== vals[2]) {\n                    window.settings.changeOption(\"weights\", vals[2]);\n                    let G = GraphState.graph;\n                    G = vals[2] ? G.asWeighted() : G.asUnweighted();\n                    window.main.setData(GraphState.getGraphData(G));\n                }\n            },\n            \"Options\",\n            \"Save\",\n            [\n                {\n                    label: \"Graph Physics\",\n                    initialValue: window.settings.getOption(\"nodePhysics\"),\n                    type: \"checkbox\"\n                },\n                {\n                    label: \"Directed Graph\",\n                    initialValue: window.settings.getOption(\"direction\"),\n                    type: \"checkbox\"\n                },\n                {\n                    label: \"Weighted Graph\",\n                    initialValue: window.settings.getOption(\"weights\"),\n                    type: \"checkbox\"\n                }\n            ],\n            null\n        );\n    }\n\n    static terminateAllWebWorkers(): void {\n        for (const v of GraphState.workerPool) {\n            if (v !== null && v instanceof window.Worker) {\n                v.terminate();\n            }\n        }\n        GraphState.workerPool = [];\n    }\n\n    static getWorkerIfPossible(onmessage: (d: { data: any }) => any): WorkerProxy {\n        let nextIndex = GraphState.workerPool.findIndex(v => {\n            return v === null || typeof v === \"undefined\";\n        });\n        if (nextIndex === -1) {\n            nextIndex = GraphState.workerPool.length;\n        }\n\n        const w = new Worker();\n        GraphState.workerPool[nextIndex] = w;\n        return new WorkerProxy(nextIndex, w, onmessage);\n    }\n\n    static startLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"flex\") {\n            prog.style.display = \"flex\";\n            return true;\n        }\n        return false;\n    }\n\n    static stopLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"none\") {\n            prog.style.display = \"none\";\n        }\n    }\n\n    static printAlreadyRunning(name?: string) {\n        let n = \"This task\";\n        if (name) {\n            n = name;\n        }\n        help.showSimpleModal(\n            \"Task Already Running\",\n            \"<p>\" + n + \" is already running, please wait for it to finish first.</p>\"\n        );\n    }\n\n    static makeAndPrintGraphColoring(): Promise<void> {\n        const myName = \"Graph Coloring\";\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(\"Already Running\");\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            // Use cached responses when able\n            let a = {\n                chromaticNumber: (await GraphState.getProperty(\"Chromatic Number\")) as number,\n                colors: GraphState.state.graphColoring as {}\n            };\n\n            const printGC = () => {\n                GraphState.graphProperties[\"Chromatic Number\"] = a.chromaticNumber;\n                GraphState.setUpToDate(true, [\"Chromatic Number\", \"graphColoring\"]);\n                (GraphState.state.graphColoring as {}) = a.colors;\n\n                const colors = help.flatten(a.colors);\n                let p = `Number of Vertices: ${colors.length}`;\n                p += `\\nChromatic Number: ${a.chromaticNumber}`;\n                p += \"\\n\\n\";\n\n                colors.forEach((v, i) => {\n                    p += `Vertex ${GraphState.nodeIDToLabel(i)} gets color ${v}\\n`;\n                });\n\n                p += `\\n${JSON.stringify(help.rotate(a.colors), null, 4)}\\n\\n`;\n\n                p = `<h3>Graph Coloring Using Welsh-Powell Algorithm</h3><hr>${help.htmlEncode(p)}`;\n                p +=\n                    \"<br/><button class='btn btn-primary' onclick='main.applyColors()'>Apply New Colors To Graph</button>\";\n\n                help.printout(p);\n                window.main.applyColors();\n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            if (!(a.chromaticNumber !== null && (await GraphState.getProperty(\"graphColoring\")) !== null)) {\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    printGC();\n                    w.cleanup();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    UIInteractions.isRunning[myName] = false;\n                    resolve(e.data);\n                });\n                w.send({\n                    type: \"colorNetwork\",\n                    args: [],\n                    graph: window.main.graphState.getGraphData(),\n                    convertToGraphImmut: true\n                });\n            } else {\n                printGC();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n            }\n        });\n    }\n\n    static makeAndPrintDirectionalEulerian(): Promise<void> {\n        const myName = \"Eulerian\";\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(\"Already Running\");\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (!window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n\n            const scc = await GraphState.getProperty(\"stronglyConnectedComponents\", true);\n\n            w.send({\n                type: \"directionalEulerian\",\n                args: [gHelp.findVertexDegreesDirectional(GraphState.graph.getFullAdjacency()), scc]\n            });\n        });\n    }\n\n    static makeAndPrintEulerian(ignoreDuplicate = false): Promise<void> {\n        const myName = \"Eulerian\";\n        if (UIInteractions.isRunning[myName]) {\n            if (ignoreDuplicate) {\n                return Promise.resolve();\n            }\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(\"Already Running\");\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve(UIInteractions.makeAndPrintDirectionalEulerian());\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const cc = await GraphState.getProperty(\"connectedComponents\", true);\n\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                w.cleanup();\n                resolve(e.data);\n            });\n            w.send({\n                type: \"hasEulerianCircuit\",\n                args: [GraphState.graph.getAllOutDegrees(), cc]\n            });\n        });\n    }\n\n    static makeAndPrintFFMCMF(): void {\n        if (!window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n        const myName = \"Ford-Fulkerson\";\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        help.showFormModal(\n            async ($modal, values) => {\n                $modal.modal(\"hide\");\n\n                const source = GraphState.nodeLabelToID(values[0]);\n                const sink = GraphState.nodeLabelToID(values[1]);\n\n                let a: boolean | FlowResult | null = null;\n\n                const cb = () => {\n                    let p = `<h3>Ford-Fulkerson</h3><hr>No path exists from `;\n                    p += `${help.htmlEncode(GraphState.nodeIDToLabel(source))} to ${help.htmlEncode(\n                        GraphState.nodeIDToLabel(sink)\n                    )}`;\n\n                    if (a === false) {\n                        help.printout(p);\n                        return;\n                    }\n                    a = a as { maxFlow: number; flowPath: any[] };\n\n                    p = `Ford-Fulkerson MaxFlow-MinCut Max Flow From ${GraphState.nodeIDToLabel(source)} `;\n                    p += `to ${GraphState.nodeIDToLabel(sink)}: ${a.maxFlow}`;\n                    p += \"\\n\\nUsing Capacities:\\n\\n\";\n                    p = help.htmlEncode(p);\n                    a.flowPath.forEach(v => {\n                        p += `${GraphState.nodeIDToLabel(v.from)}&rarr;${GraphState.nodeIDToLabel(v.to)} using ${\n                            v.flow\n                        } of ${v.capacity}\\n`;\n                    });\n                    p = p.trim();\n                    p = \"<h3>Ford-Fulkerson MaxFlow-MinCut</h3><hr>\" + p;\n\n                    help.printout(p);\n                };\n\n                const iStartedProgress = UIInteractions.startLoadingAnimation();\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    UIInteractions.isRunning[myName] = false;\n                    cb();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    w.cleanup();\n                });\n                w.send({\n                    type: \"fordFulkerson\",\n                    args: [source, sink],\n                    convertToGraphImmut: true,\n                    graph: window.main.graphState.getGraphData()\n                });\n            },\n            \"Ford-Fulkerson MaxFlow-MinCut\",\n            \"Go\",\n            [\n                {\n                    label: \"Source Node\",\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                },\n                {\n                    label: \"Sink Node\",\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                }\n            ]\n        );\n    }\n\n    static makeAndPrintKruskal(): void {\n        if (window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n\n        const myName = \"Kruskal\";\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: MSTResult = e.data;\n            w.cleanup();\n\n            let p = `Kruskal's Minimum Spanning Tree Total Weight: ${a.totalWeight}`;\n            p += \"\\n\\nUsing Edges:\\n\\n\";\n            p = help.htmlEncode(p);\n            a.mst.forEach(v => {\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getFrom())}&rarr;`;\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getTo())}\\n`;\n            });\n            p = p.trim();\n            p = `<h3>Kruskal Minimum Spanning Tree</h3><hr>${p}`;\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"kruskal\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static makeAndPrintIsCyclic(): Promise<void> {\n        if (!window.settings.getOption(\"direction\")) {\n            return Promise.resolve();\n        }\n\n        const myName = \"Cyclic\";\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(\"Already Running\");\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(resolve => {\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.cyclic = e.data;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve();\n            });\n            w.send({\n                type: \"isGraphCyclic\",\n                args: [],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        });\n    }\n\n    static makeAndPrintTopologicalSort(): void {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const myName = \"Topological Sort\";\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: boolean | NodeImmut[] = e.data;\n            w.cleanup();\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            if (a === true) {\n                GraphState.graphProperties.cyclic = true;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                help.printout(\n                    \"<h3>Topological Sorting Failed</h3><hr>Topological sorting failed because the graph contains a cycle\"\n                );\n\n                return;\n            }\n\n            let p = \"Topological Sorting:\\n\\n\";\n            p = help.htmlEncode(p);\n            (a as any[]).forEach(v => {\n                p += `${GraphState.nodeIDToLabel(v.id)}, `;\n            });\n            p = p.slice(0, -2);\n            p = `<h3>Topological Sorting</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"topologicalSort\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static printGraphAlgorithms(): void {\n        const $div = document.getElementById(\"algorithms-pane\")!;\n        $div.innerHTML = \"\";\n        const directional = window.settings.getOption(\"direction\");\n        const weighted = window.settings.getOption(\"weights\");\n\n        const addAlgoToPane = (alg: AlgorithmI) => {\n            const navlink = document.createElement(\"a\");\n            navlink.classList.add(\"nav-link\");\n            navlink.setAttribute(\"href\", \"#\");\n            navlink.innerText = alg.name;\n            navlink.addEventListener(\"click\", e => {\n                e.preventDefault();\n                alg.applyFunc();\n            });\n\n            $div.appendChild(navlink);\n        };\n\n        const a = UIInteractions.getAlgorithms();\n        a.forEach(alg => {\n            if (!alg.display) {\n                return;\n            }\n            if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            } else if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n        });\n    }\n}\n","\"use strict\";\r\n\r\nimport \"bootstrap\";\r\nimport * as Raven from \"raven-js\";\r\nimport { Network } from \"vis/index-network\";\r\nimport { default as main, MainI } from \"./main\";\r\nimport Settings from \"./settings\";\r\nimport UI from \"./UIInteractions\";\r\nimport { GraphPlain } from \"./util/predefinedGraphs\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        main: MainI;\r\n        network: Network;\r\n        settings: typeof Settings;\r\n        ui: typeof UI;\r\n        Raven: Raven.RavenStatic;\r\n        Worker: Function;\r\n    }\r\n}\r\n\r\nwindow.main = main;\r\nwindow.network = new Network(main.container, {}, main.visOptions);\r\nwindow.settings = Settings;\r\nwindow.ui = UI;\r\n\r\n// Initialize Sentry.io error logging\r\nRaven.config(\"https://92aaeee7e2fb4ef4837a2261a029e8ed@sentry.home.mikedombrowski.com/2\").install();\r\nwindow.Raven = Raven;\r\n\r\nmain.addNetworkListeners(window.network);\r\n\r\nSettings.loadSettings();\r\n\r\nlet loadDefault = true;\r\nif (Settings.checkForLocalStorage()) {\r\n    const s = localStorage.getItem(\"graphPlayground.lastState\");\r\n    if (s !== null) {\r\n        const jsonGraph: any = JSON.parse(s);\r\n        if (\"graph\" in jsonGraph && \"nodes\" in jsonGraph.graph) {\r\n            loadDefault = false;\r\n            main.applyState(false, jsonGraph as { graph: GraphPlain });\r\n        }\r\n    }\r\n}\r\nif (loadDefault) {\r\n    (async () => {\r\n        const predefined = (await import(\"./util/predefinedGraphs\")).default;\r\n        main.setData(predefined.Petersen(), false, true, true);\r\n    })();\r\n}\r\n\r\nwindow.ui.registerListeners();\r\n","\"use strict\";\r\n\r\nimport {EdgeImmutPlain} from \"../classes/GraphImmut/EdgeImmut\";\r\nimport {NodeImmutPlain} from \"../classes/GraphImmut/NodeImmut\";\r\n\r\ninterface Degree {\r\n    in: number;\r\n    out: number;\r\n}\r\n\r\nexport default {\r\n    findVertexDegreesDirectional: (adjacencyMatrix: Array<Array<number>>): Degree[] => {\r\n        // Adjacency stores IDs of edges TO\r\n        const degrees: Degree[] = [];\r\n        adjacencyMatrix.forEach((v, i) => {\r\n            if (i in degrees) {\r\n                degrees[i].out += v.length;\r\n            }\r\n            else {\r\n                degrees[i] = {out: v.length, in: 0};\r\n            }\r\n            v.forEach((outV) => {\r\n                if (outV in degrees) {\r\n                    degrees[outV].in += 1;\r\n                }\r\n                else {\r\n                    degrees[outV] = {in: 1, out: 0};\r\n                }\r\n            });\r\n        });\r\n\r\n        return degrees;\r\n    },\r\n\r\n    interpolateNodesFromEdges: (edges: EdgeImmutPlain[]): NodeImmutPlain[] => {\r\n        const nodes: NodeImmutPlain[] = [];\r\n        edges.forEach((v) => {\r\n            nodes[v.from] = {id: v.from, label: v.from.toString()};\r\n            nodes[v.to] = {id: v.to, label: v.to.toString()};\r\n        });\r\n\r\n        return nodes;\r\n    },\r\n};\r\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"9aa25f2c8dfecd208da5.worker.js\");\n};","\"use strict\";\n\nexport interface EdgeImmutPlain {\n    label?: string;\n    from: number;\n    to: number;\n    weight: number;\n\n    [key: string]: any;\n\n    [key: number]: any;\n}\n\nexport default class EdgeImmut {\n    private readonly from: Readonly<number>;\n    private readonly to: Readonly<number>;\n    private readonly weight: Readonly<number>;\n    private readonly attributes: any;\n\n    constructor(from: number | EdgeImmutPlain, to?: number, weight: number | string = 1, extraAttrs: any = null) {\n        if (typeof from === \"object\") {\n            extraAttrs = Object.keys(from)\n                .filter(key => ![\"from\", \"to\", \"weight\"].includes(key))\n                .reduce((obj: any, key: string) => {\n                    obj[key] = (<EdgeImmutPlain>from)[key];\n                    return obj;\n                }, {});\n\n            to = from.to;\n            weight = from.weight;\n            from = from.from;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.from = Object.freeze(from);\n        this.to = Object.freeze(to!);\n        this.weight = Object.freeze(parseFloat(weight as string));\n\n        if (new.target === EdgeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getFrom(): Readonly<number> {\n        return this.from;\n    }\n\n    getTo(): Readonly<number> {\n        return this.to;\n    }\n\n    getWeight(): Readonly<number> {\n        return this.weight;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    toPlain(): EdgeImmutPlain {\n        const toReturn: EdgeImmutPlain = { from: this.from, to: this.to, weight: this.weight };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    editEdge(newWeight: number | null, extraAttrs: any = {}): EdgeImmut {\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        Object.keys(extraAttrs).forEach(key => {\n            attributes[key] = extraAttrs[key];\n        });\n\n        return new EdgeImmut(\n            this.getFrom(),\n            this.getTo(),\n            newWeight === null ? this.getWeight() : newWeight,\n            attributes\n        );\n    }\n}\n","\"use strict\";\n\nimport {List} from 'immutable';\nimport {default as NodeImmut, NodeImmutPlain} from './NodeImmut';\nimport {default as EdgeImmut, EdgeImmutPlain} from './EdgeImmut';\n\ninterface NodeMapping {\n    [key: number]: number\n}\n\nconst filterExtraAttr = (data: any, labels: any) => {\n    return Object.keys(data)\n        .filter((key) => !(labels).includes(key))\n        .reduce((obj: any, key) => {\n            obj[key] = data[key];\n            return obj;\n        }, {});\n};\n\nconst filterNodeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"label\", \"id\"]);\n};\n\nconst filterEdgeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"from\", \"to\", \"weight\"]);\n};\n\nconst genericEdgesToImmutEdges = (edges: any, nodeMap: NodeMapping = {}): boolean | List<EdgeImmut> => {\n    if (edges === null) {\n        return false;\n    }\n\n    let newEdges: List<EdgeImmut> = List();\n\n    if (typeof edges === 'object') {\n        edges.forEach((edge: any) => {\n            let weight = 0;\n            let from = 0;\n            let to = 0;\n            let extraAttrs = {};\n\n            if (\"weight\" in edge) {\n                weight = parseFloat(edge.weight);\n            }\n            if (\"from\" in edge) {\n                from = nodeMap[edge.from];\n            }\n            if (\"to\" in edge) {\n                to = nodeMap[edge.to];\n            }\n            if (\"attributes\" in edge) {\n                extraAttrs = filterEdgeExtraAttr(edge.attributes);\n            }\n            else {\n                extraAttrs = filterEdgeExtraAttr(edge);\n            }\n\n            newEdges = newEdges.push(new EdgeImmut(from, to, weight, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return newEdges;\n};\n\nconst genericNodesToImmutNodes = (nodes: any): boolean | { nodes: Readonly<List<NodeImmut>>; map: { [key: number]: number } } => {\n    if (nodes === null) {\n        return false;\n    }\n\n    let newNodes: List<NodeImmut> = List();\n    const nodeMap: NodeMapping = {};\n\n    if (typeof nodes === \"number\") {\n        // Create the nodes\n        for (let i = 0; i < Math.floor(nodes); i++) {\n            newNodes = newNodes.set(i, new NodeImmut(i));\n            nodeMap[i] = i;\n        }\n    }\n    else if (typeof nodes === 'object') {\n        let nodeNum = 0;\n        nodes.forEach((n: any) => {\n            const id = nodeNum++;\n            let label = null;\n            let extraAttrs = null;\n\n            if (\"label\" in n) {\n                label = n.label;\n            }\n            if (\"id\" in n) {\n                nodeMap[n.id] = id;\n                if (\"label\" in n && n.label === n.id.toString()) {\n                    label = id.toString();\n                }\n            }\n            else {\n                nodeMap[id] = id;\n            }\n            if (\"attributes\" in n) {\n                extraAttrs = filterNodeExtraAttr(n.attributes);\n            }\n            else {\n                extraAttrs = filterNodeExtraAttr(n);\n            }\n\n            newNodes = newNodes.set(id, new NodeImmut(id, label, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return {nodes: Object.freeze(newNodes), map: nodeMap};\n};\n\nexport default class GraphImmut {\n    private readonly directed: Readonly<boolean>;\n    private readonly weighted: Readonly<boolean>;\n    private readonly nodes: Readonly<List<NodeImmut>>;\n    private readonly numNodes: Readonly<number>;\n    private readonly edges: Readonly<List<EdgeImmut>>;\n    private readonly numEdges: Readonly<number>;\n\n    constructor(nodes: number | Readonly<List<NodeImmut>> | NodeImmutPlain[],\n                edges: null | Readonly<List<EdgeImmut>> | EdgeImmutPlain[] = null,\n                directed = false, weighted = false) {\n        this.directed = Object.freeze(directed);\n        this.weighted = Object.freeze(weighted);\n        let nodeMap = {};\n\n        // Make Nodes\n        if (typeof nodes === \"number\" || (typeof nodes === \"object\" && !(nodes instanceof List))) {\n            const n = genericNodesToImmutNodes(nodes);\n            if (typeof n !== \"object\") {\n                throw new Error(\"Unable to parse node input!\");\n            }\n            this.nodes = n.nodes;\n            nodeMap = n.map;\n        }\n        else if (nodes instanceof List) {\n            this.nodes = nodes as List<NodeImmut>;\n        }\n        else {\n            throw new Error(\"Illegal type of 'node' input to GraphImmut constructor\");\n        }\n        this.nodes = Object.freeze(this.nodes);\n        this.numNodes = Object.freeze(this.nodes.size);\n\n        // If we are given edges, add them to the graph\n        if (edges !== null && typeof edges === \"object\" && !(edges instanceof List)) {\n            const e = genericEdgesToImmutEdges(edges, nodeMap);\n            if (typeof e !== \"object\") {\n                throw new Error(\"Unable to parse Edge input\");\n            }\n            this.edges = e;\n        }\n        else if (edges instanceof List) {\n            this.edges = edges as List<EdgeImmut>;\n        }\n        else {\n            this.edges = List();\n        }\n        this.edges = Object.freeze(this.edges);\n        this.numEdges = Object.freeze(this.edges.size);\n\n        if (new.target === GraphImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getNode(id: number, rich = false): NodeImmut | NodeImmutPlain | boolean {\n        if (id >= this.numNodes) {\n            return false;\n        }\n        const node = this.nodes.get(id);\n        if(typeof node === \"undefined\"){\n            return false;\n        }\n        if (rich) {\n            return node;\n        }\n        return node.toPlain();\n    }\n\n    addNode(data: any = null): GraphImmut {\n        if (data === null) {\n            data = {};\n        }\n\n        const id = this.numNodes;\n        if (!(\"label\" in data)) {\n            data.label = id.toString();\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n\n        return new GraphImmut(this.nodes.set(id, new NodeImmut(id, data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    editNode(id: number, data: any): any {\n        if (!this.nodes.has(id)) {\n            return false;\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n        if (!(\"label\" in data)) {\n            data.label = (this.getNode(id, true) as NodeImmut).getLabel();\n        }\n        return new GraphImmut(this.nodes.set(id, (this.getNode(id, true) as NodeImmut).editNode(data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    deleteNode(id: number): GraphImmut | boolean {\n        // Make sure the ID exists\n        if (!(id >= 0 && id < this.numNodes)) {\n            return false;\n        }\n\n        const nodeMap: NodeMapping = {}; // Map for old IDs to new ones since we're deleting an entry\n\n        // Remove it from the node list\n        let nodeCount = 0;\n        const newNodes: List<NodeImmut> = this.nodes\n            .filter((n) => {\n                if (n.getID() === id) {\n                    nodeMap[n.getID()] = -1;\n                }\n                else {\n                    nodeMap[n.getID()] = nodeCount++;\n                }\n\n                return n.getID() !== id;\n            })\n            .map((node) => {\n                let label = node.getLabel();\n                if (node.getID().toString() === label) {\n                    label = nodeMap[node.getID()].toString();\n                }\n\n                return new NodeImmut(nodeMap[node.getID()], label, node.getAllAttributes());\n            }) as List<NodeImmut>;\n\n        // Remap edges\n        const newEdges: List<EdgeImmut> = this.edges\n            .filter((edge) => {\n                return !(edge.getFrom() === id || edge.getTo() === id);\n            })\n            .map((edge) => {\n                return new EdgeImmut(nodeMap[edge.getFrom()], nodeMap[edge.getTo()], edge.getWeight(), edge.getAllAttributes());\n            }) as List<EdgeImmut>;\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    addEdge(from: number, to: number, weight: any = 1): GraphImmut {\n        if (!this.weighted) {\n            weight = 1; // Ensure that edge weights are 1 if this is an unweighted graph\n        }\n\n        const newEdges = this.edges.push(new EdgeImmut(from, to, parseFloat(weight)));\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    deleteEdge(from: number, to: number, weight: any = null, deleteAll = true): GraphImmut {\n        if (weight !== null) {\n            weight = parseFloat(weight);\n        }\n\n        let foundOneEdge = false;\n        const newEdges: List<EdgeImmut> = this.edges.filter((edge) => {\n            // If we're not deleting everything and we have found one edge, then do not filter anymore\n            if (foundOneEdge && !deleteAll) {\n                return true;\n            }\n\n            // If we have an exact match\n            if (edge.getFrom() === from && edge.getTo() === to && (weight === null || edge.getWeight() === weight)) {\n                foundOneEdge = true;\n                return false; // Remove this edge\n            }\n\n            // If we are undirected, check for opposing matches\n            if (!this.directed) {\n                if (edge.getFrom() === to && edge.getTo() === from && (weight === null || edge.getWeight() === weight)) {\n                    foundOneEdge = true;\n                    return false; // Remove this edge\n                }\n            }\n\n            return true;\n        }) as List<EdgeImmut>;\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    editEdge(from: number, to: number, newWeight: any, oldWeight: any = null, color: string | null = null): GraphImmut | boolean {\n        let foundFirst = false;\n\n        if (oldWeight !== null) {\n            oldWeight = parseFloat(oldWeight);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge, index) => {\n            if (foundFirst) {\n                return;\n            }\n\n            if (((edge.getFrom() === from && edge.getTo() === to)\n                || (!this.isDirected() && edge.getFrom() === to && edge.getTo() === from))\n                && (oldWeight === null || edge.getWeight() === oldWeight)) {\n\n                if (color !== null) {\n                    newEdges = newEdges.set(index,\n                        edge.editEdge(newWeight === null ? null : parseFloat(newWeight),\n                            {color: color}));\n                }\n                else {\n                    newEdges = newEdges.set(index, edge.editEdge(newWeight === null ? null : parseFloat(newWeight)));\n                }\n                foundFirst = true;\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    getAllNodes(rich = false): NodeImmut[] | NodeImmutPlain[] {\n        if (rich) {\n            return this.nodes.toArray();\n        }\n        return this.nodes.map((node) => {\n            return node.toPlain();\n        }).toArray();\n    }\n\n    getAllNodesAsImmutableList(): Readonly<List<NodeImmut>> {\n        return this.nodes;\n    }\n\n    getAllEdgesAsImmutableList(): Readonly<List<EdgeImmut>> {\n        return this.edges;\n    }\n\n    getAllEdges(rich = false): EdgeImmut[] | EdgeImmutPlain[] {\n        if (rich) {\n            return this.edges.toArray();\n        }\n        return this.edges.map((edge) => {\n            return edge.toPlain();\n        }).toArray();\n    }\n\n    getNumberOfNodes(): number {\n        return this.numNodes;\n    }\n\n    getNumberOfEdges(): number {\n        return this.numEdges;\n    }\n\n    getAllOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.nodes.forEach((_, i) => {\n            degrees[i] = 0;\n        });\n        this.edges.forEach((edge) => {\n            if (degrees.includes(edge.getFrom())) {\n                degrees[edge.getFrom()]++;\n            }\n            else {\n                degrees[edge.getFrom()] = 1;\n            }\n        });\n\n        return degrees;\n    }\n\n    asWeighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, true);\n    }\n\n    asUnweighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, false);\n    }\n\n    asDirected(doubleEdges = false): GraphImmut {\n        if (!doubleEdges) {\n            return new GraphImmut(this.nodes, this.edges, true, this.weighted);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.getTo(), edge.getFrom(), edge.getWeight(), edge.getAllAttributes()));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, true, this.weighted);\n    }\n\n    asUndirected(): GraphImmut {\n        let newEdges: List<EdgeImmut> = List();\n        const addedEdges: { [key: string]: null } = {};\n\n        this.edges.forEach((edge) => {\n            let from = edge.getFrom();\n            let to = edge.getTo();\n            if (to < from) {\n                from = to;\n                to = edge.getFrom();\n            }\n            if (!(`${from}_${to}` in addedEdges)) {\n                addedEdges[`${from}_${to}`] = null;\n                newEdges = newEdges.push(new EdgeImmut(from, to, edge.getWeight(), edge.getAllAttributes()));\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, false, this.weighted);\n    }\n\n    asChangedDirectedWeighted(directed: boolean, weighted: boolean): GraphImmut {\n        let G: GraphImmut = this;\n        if (directed && !this.directed) {\n            G = G.asDirected();\n        }\n        else if (!directed && this.directed) {\n            G = G.asUndirected();\n        }\n\n        if (weighted && !this.weighted) {\n            G = G.asWeighted();\n        }\n        else if (!weighted && this.weighted) {\n            G = G.asUnweighted();\n        }\n\n        return G;\n    }\n\n    getNodeAdjacency(id: number): number[] {\n        const adj: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() === id) {\n                adj.push(edge.getTo());\n            }\n            else if (!this.directed && edge.getTo() === id) {\n                adj.push(edge.getFrom());\n            }\n        });\n\n        return adj;\n    }\n\n    getFullAdjacency(): number[][] {\n        const adj: number[][] = [];\n        this.nodes.forEach((n) => {\n            adj[n.getID()] = this.getNodeAdjacency(n.getID());\n        });\n\n        return adj;\n    }\n\n    areAdjacent(id1: number, id2: number): boolean {\n        return this.getNodeAdjacency(id1).includes(id2);\n    }\n\n    getEdgesBetween(id1: number, id2: number): EdgeImmut[] {\n        const edgeList: EdgeImmut[] = [];\n        if (id1 >= this.numNodes || id2 >= this.numNodes) {\n            return edgeList;\n        }\n\n        this.edges.forEach((edge) => {\n            if (!this.directed && edge.getFrom() === id2 && edge.getTo() === id1) {\n                edgeList.push(edge);\n            }\n\n            if (edge.getFrom() === id1 && edge.getTo() === id2) {\n                edgeList.push(edge);\n            }\n        });\n\n        return edgeList;\n    }\n\n    getMinWeightEdgeBetween(id1: number, id2: number): number {\n        let minWeight = Infinity;\n        this.getEdgesBetween(id1, id2).forEach((edge) => {\n            if (edge.getWeight() < minWeight) {\n                minWeight = edge.getWeight();\n            }\n        });\n\n        return minWeight;\n    }\n\n    // Take a multigraph and reduce all multiple edges to a single edge, weighted using the reducer\n    reduceMultiGraph(reducer: (a: number, b: number) => number = Math.min, initialValue: any = Infinity): GraphImmut {\n        const multiEdges: EdgeImmutPlain[] = [];\n        this.nodes.forEach((node) => {\n            // If we have duplicates\n            const adj = this.getNodeAdjacency(node.getID());\n            const uniques = new Set(adj);\n            if (uniques.size < adj.length) {\n                uniques.forEach((to) => {\n                    const newWeight = this.getEdgesBetween(node.getID(), to).reduce((acc, edge) => {\n                        return reducer(acc, edge.getWeight());\n                    }, initialValue);\n\n                    multiEdges.push({from: node.getID(), to, weight: parseFloat(newWeight)});\n                });\n            }\n        });\n\n        // Remove all multigraph edges and replace them with single new edges\n        let newEdges = this.edges.filter((edge) => {\n            let keep = true;\n            multiEdges.forEach((duplicateEdge) => {\n                if (edge.getFrom() === duplicateEdge.from && edge.getTo() === duplicateEdge.to) {\n                    keep = false;\n                }\n            });\n\n            return keep;\n        }) as List<EdgeImmut>;\n        multiEdges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.from, edge.to, edge.weight));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    isWeighted() {\n        return this.weighted;\n    }\n\n    isDirected() {\n        return this.directed;\n    }\n}\n","\"use strict\";\n\nexport interface NodeImmutPlain {\n    id: Readonly<number>;\n    label: string;\n    [key: string]: any;\n    [key: number]: any;\n}\n\nexport default class NodeImmut {\n    private readonly id: Readonly<number>;\n    private readonly label: Readonly<string>;\n    private readonly attributes: any;\n\n    constructor(id: any, label: null | string = null, extraAttrs: null | any = null) {\n        if (label === null) {\n            this.label = id.toString();\n        } else {\n            this.label = label;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.label = Object.freeze(this.label);\n        this.id = Object.freeze(id);\n\n        if (new.target === NodeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    toPlain(): NodeImmutPlain {\n        const toReturn: NodeImmutPlain = { id: this.id, label: this.label };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    getID(): Readonly<number> {\n        return this.id;\n    }\n\n    getLabel(): Readonly<string> {\n        return this.label;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    editNode(label: any = null, extraAttrs: any = null): NodeImmut {\n        if (label === null) {\n            label = this.getLabel();\n        }\n\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        if (extraAttrs !== null) {\n            Object.keys(extraAttrs).forEach(key => {\n                attributes[key] = extraAttrs[key];\n            });\n        }\n\n        return new NodeImmut(this.getID(), label, attributes);\n    }\n}\n"],"sourceRoot":""}
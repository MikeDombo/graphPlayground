{"version":3,"sources":["webpack:///./src/js/dataImportExport.ts"],"names":["__webpack_require__","r","__webpack_exports__","_util_genericHelpers__WEBPACK_IMPORTED_MODULE_0__","_classes_GraphImmut_GraphImmut__WEBPACK_IMPORTED_MODULE_1__","_graphState__WEBPACK_IMPORTED_MODULE_2__","self","importByString","string","format","toLowerCase","n","JSON","parse","window","network","setData","main","showSimpleModal","err","lines","split","graph_1","error_1","forEach","l","vals","parseInt","addEdge","d","getGraphData","nodes","v","label","id","toString","makeImportTextModal","showFormModal","$modal","values","modal","type","extraAttrs","style","optionValues","optionText","makeImportFileModal","files","length","file_1","reader","FileReader","onload","event","target","result","getFileExtension","name","readAsText","validationFunc","val","$files","get","makeExportFileModal","initialValue","onclick","exportToFile","class","clickDismiss","makeExportTextModal","exportToText","document","getElementById","select","execCommand","downloadFile","getDataAsJSON","getDataAsDIMACS","innerHTML","stringify","graph","keepOnlyKeys","edges","g","text","adj","getFullAdjacency","filter","i","indexOf","push","edgeCount","edgeText","from","to","trim","filename","blob","Blob","navigator","msSaveOrOpenBlob","msSaveBlob","a","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","revokeObjectURL"],"mappings":"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","file":"1-2fa2fec83e91e96806bf.min.js","sourcesContent":["\"use strict\";\r\n\r\nimport help from './util/genericHelpers';\r\nimport GraphImmut from './classes/GraphImmut/GraphImmut';\r\nimport {EdgeImmutPlain} from \"./classes/GraphImmut/EdgeImmut\";\r\nimport {NodeImmutPlain} from \"./classes/GraphImmut/NodeImmut\";\r\nimport GraphState from \"./graphState\";\r\nimport {GraphPlain} from \"./util/predefinedGraphs\";\r\n\r\nconst exportedTextSelector = \"exportedText\";\r\n\r\nconst self = {\r\n    importByString: (string: string, format: string): void => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            try {\r\n                const n = JSON.parse(string);\r\n                if (\"nodes\" in n && \"edges\" in n) {\r\n                    window.network.setData({}); // Clear out the existing network in order to import the proper\r\n                    // locations\r\n                    window.main.setData(n, false, true, false);\r\n                }\r\n                else {\r\n                    help.showSimpleModal(\"Data Import Error\", \"<p>The provided input does not conform the the\" +\r\n                        \" import specifications.</p>\");\r\n                }\r\n            }\r\n            catch (err) {\r\n                help.showSimpleModal(\"JSON Parse Error\", `<p>There was an error parsing your input as JSON.</p><pre>${err}</pre>`);\r\n            }\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            const lines = string.split(/\\r?\\n/);\r\n            let graph: GraphImmut|null = null;\r\n            let error = false;\r\n            lines.forEach((l) => {\r\n                const vals = l.split(/\\s+/);\r\n                if (vals[0].toLowerCase() === \"p\") {\r\n                    if (vals[1].toLowerCase() !== \"edge\") {\r\n                        help.showSimpleModal(\"DIMACS Parse Error\", \"<p>Sorry, but I only know how to parse\" +\r\n                            \" &quot;edge&quot; formatted DIMACS files.</p>\");\r\n                        error = true;\r\n                        return;\r\n                    }\r\n                    graph = new GraphImmut(parseInt(vals[2]));\r\n                }\r\n                else if (vals[0].toLowerCase() === \"e\" && graph !== null) {\r\n                    graph = graph.addEdge(parseInt(vals[1]) - 1, parseInt(vals[2]) - 1);\r\n                }\r\n            });\r\n\r\n            if (graph === null && !error) {\r\n                help.showSimpleModal(\"DIMACS Parse Error\", \"<p>No program line found!</p>\");\r\n                error = true;\r\n            }\r\n\r\n            if (!error) {\r\n                const d: GraphPlain = GraphState.getGraphData(graph!);\r\n                d.nodes.forEach((v) => {\r\n                    v.label = v.id.toString();\r\n                });\r\n                window.main.setData(d, false, true, true);\r\n            }\r\n        }\r\n        else {\r\n            help.showSimpleModal(\"Unrecognized Input Format\", \"<p>The format of your input is incorrect.</p>\");\r\n        }\r\n    },\r\n\r\n    makeImportTextModal: (): void => {\r\n        help.showFormModal(($modal, values) => {\r\n                $modal.modal(\"hide\");\r\n                self.importByString(values[0], values[1]);\r\n            }, \"Import Graph From Text\", \"Import\",\r\n            [{type: \"textarea\", label: \"Input Text\", extraAttrs: {style: \"height: 20vh; min-height:400px;\"}},\r\n                {type: \"select\", label: \"Format\", optionValues: [\"json\", \"dimacs\"], optionText: [\"JSON\", \"DIMACS\"]}\r\n            ]);\r\n    },\r\n\r\n    makeImportFileModal: (): void => {\r\n        help.showFormModal(($modal, values) => {\r\n                $modal.modal(\"hide\");\r\n\r\n                const files = values[0];\r\n                if (files.length === 1) {\r\n                    const file = files[0];\r\n                    const reader = new FileReader();\r\n                    reader.onload = function (event: any) {\r\n                        self.importByString(event.target.result, help.getFileExtension(file.name));\r\n                    };\r\n\r\n                    reader.readAsText(file);\r\n                }\r\n            }, \"Import Graph From File\", \"Import\",\r\n            [{\r\n                type: \"file\", label: \"Upload File\", validationFunc: (val, $files) => {\r\n                    const files = ($files.get(0) as any).files;\r\n                    if (files.length >= 1) {\r\n                        return true;\r\n                    }\r\n                    return \"You must choose a file first\";\r\n                }\r\n            }]);\r\n    },\r\n\r\n    makeExportFileModal: (): void => {\r\n        help.showFormModal(null, \"Export Graph To File\", null,\r\n            [{\r\n                type: \"button\",\r\n                initialValue: \"Export to JSON\",\r\n                onclick: () => {\r\n                    self.exportToFile(\"json\");\r\n                },\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary m-1\"\r\n\r\n                },\r\n                clickDismiss: true\r\n            },\r\n                {\r\n                    type: \"button\",\r\n                    initialValue: \"Export to DIMACS\",\r\n                    onclick: () => {\r\n                        self.exportToFile(\"dimacs\");\r\n                    },\r\n                    extraAttrs: {\r\n                        class: \"btn btn-sm btn-primary\"\r\n                    },\r\n                    clickDismiss: true\r\n                }\r\n            ], null, false);\r\n    },\r\n\r\n    makeExportTextModal: (): void => {\r\n        help.showFormModal(null, \"Export Graph To Text\", null,\r\n            [{\r\n                type: \"button\",\r\n                initialValue: \"Export to JSON\",\r\n                onclick: () => {\r\n                    self.exportToText(\"json\");\r\n                },\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary m-1\",\r\n                },\r\n                clickDismiss: false\r\n            },\r\n                {\r\n                    type: \"button\",\r\n                    initialValue: \"Export to DIMACS\",\r\n                    onclick: () => {\r\n                        self.exportToText(\"dimacs\");\r\n                    },\r\n                    extraAttrs: {\r\n                        class: \"btn btn-sm btn-primary\",\r\n                    },\r\n                    clickDismiss: false\r\n                },\r\n                {\r\n                    type: \"textarea\", label: \"\", initialValue: \"\", extraAttrs: {\r\n                        style: \"height: 20vh;\" +\r\n                        \" min-height:400px; white-space:nowrap; margin-top: 1rem;\"\r\n                    },\r\n                    onclick: () => {\r\n                        (document.getElementById(exportedTextSelector) as HTMLTextAreaElement).select();\r\n                        document.execCommand(\"copy\");\r\n                    }, id: \"exportedText\"\r\n                }\r\n            ], ($modal) => {\r\n                $modal.modal(\"hide\");\r\n            }, false);\r\n    },\r\n\r\n    exportToFile: (format: string): void => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            self.downloadFile(\"graph.json\", self.getDataAsJSON());\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            self.downloadFile(\"graph.dimacs\", self.getDataAsDIMACS());\r\n        }\r\n    },\r\n\r\n    exportToText: (format: string): void => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            document.getElementById(exportedTextSelector)!.innerHTML = JSON.stringify(JSON.parse(self.getDataAsJSON()), null, 2);\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            document.getElementById(exportedTextSelector)!.innerHTML = self.getDataAsDIMACS();\r\n        }\r\n    },\r\n\r\n    getDataAsJSON: (): string => {\r\n        const d = GraphState.getGraphData(GraphState.graph);\r\n        const nodeKeys = [\"id\", \"label\", \"color\", \"x\", \"y\"];\r\n        const edgeKeys = [\"from\", \"to\", \"weight\", \"color\"];\r\n        d.nodes = help.keepOnlyKeys(d.nodes, nodeKeys) as NodeImmutPlain[];\r\n        d.edges = help.keepOnlyKeys(d.edges, edgeKeys) as EdgeImmutPlain[];\r\n\r\n        return JSON.stringify(d);\r\n    },\r\n\r\n    getDataAsDIMACS: (): string => {\r\n        // If I add direction, DIMACS cannot be used, it only works for undirected graphs\r\n        const g = GraphState.getGraphData();\r\n        let text = \"c This Graph was generated and exported from Michael Dombrowski's Graph Playground \" +\r\n            \"-- https://md100play.github.io/graphPlayground -- https://mikedombrowski.com\\n\";\r\n\r\n        let adj = GraphState.graph.getFullAdjacency();\r\n        adj = adj.filter((v: number[]) => {\r\n            return v.length !== 0;\r\n        });\r\n\r\n        const nodes: number[] = [];\r\n        adj.forEach((v: number[], i: number) => {\r\n            if (nodes.indexOf(i + 1) === -1) {\r\n                nodes.push(i + 1);\r\n            }\r\n            v.forEach((n: number) => {\r\n                if (nodes.indexOf(n + 1) === -1) {\r\n                    nodes.push(n + 1);\r\n                }\r\n            });\r\n        });\r\n\r\n        let edgeCount = 0;\r\n        let edgeText = \"\";\r\n        g.edges.forEach((v: EdgeImmutPlain) => {\r\n            edgeText += `e ${v.from + 1} ${v.to + 1}\\n`;\r\n            edgeCount++;\r\n        });\r\n        edgeText = edgeText.trim();\r\n\r\n        text += `p edge ${nodes.length} ${edgeCount}\\n`;\r\n        return text + edgeText;\r\n    },\r\n\r\n    downloadFile: (filename: string, text: string): void => {\r\n        const blob = new Blob([text], {type: 'text/plain'});\r\n        if (window.navigator.msSaveOrOpenBlob) {\r\n            window.navigator.msSaveBlob(blob, filename);\r\n        }\r\n        else {\r\n            const a = window.document.createElement('a');\r\n            a.href = window.URL.createObjectURL(blob);\r\n            a.download = filename;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(blob as any);\r\n        }\r\n    },\r\n};\r\n\r\nexport default self;\r\n"],"sourceRoot":""}
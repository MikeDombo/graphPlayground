{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/graphState.ts","webpack:///./src/js/genericHelpers.ts","webpack:///./src/js/graphHelpers.ts","webpack:///./src/js/GraphAlgorithmWorker.ts","webpack:///./src/js/main.ts","webpack:///./src/js/settings.ts","webpack:///./src/js/UIInteractions.ts","webpack:///./src/js/app.ts","webpack:///./src/js/GraphImmut/EdgeImmut.ts","webpack:///./src/js/GraphImmut/NodeImmut.ts","webpack:///./src/js/GraphImmut/GraphImmut.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","4","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","head","document","getElementsByTagName","script","createElement","charset","timeout","nc","setAttribute","src","p","0","1","setTimeout","onScriptComplete","type","target","event","onerror","onload","clearTimeout","chunk","errorType","realSrc","error","Error","request","undefined","appendChild","all","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","oe","err","console","jsonpArray","window","oldJsonpFunction","bind","slice","getInt","v","parseInt","GraphState","setUpToDate","listOptions","upToDate","forEach","always","indexOf","makeAndPrintProperties","getProperty","updateIfNotUpdated","a","find","applyFunc","_a","sent","state","graphProperties","recalcLong","directional","settings","getOption","vertices","graph","getNumberOfNodes","edges","getNumberOfEdges","keys","__awaiter","_this","printableProperties","map","_b","_c","printGraphProperties","properties","k","_genericHelpers__WEBPACK_IMPORTED_MODULE_2__","toTitleCase","trim","htmlEncode","jquery__WEBPACK_IMPORTED_MODULE_0__","html","addEdge","from","to","weight","edgeFrom","edgeTo","main","setData","nodes","clearColorFromNodes","getAllNodes","getAllEdges","addNode","label","x","y","editNode","id","iId","getGraphData","editEdge","newWeight","oldWeight","newGraph","_GraphImmut_GraphImmut__WEBPACK_IMPORTED_MODULE_3__","deleteEdge","deleteNode","color","nodeIDToLabel","getNode","_GraphImmut_NodeImmut__WEBPACK_IMPORTED_MODULE_4__","getLabel","toString","nodeLabelToID","filter","node","toLowerCase","getID","rID","found","getGraphAsDataSet","isWeighted","vis_index_network__WEBPACK_IMPORTED_MODULE_1__","setLocations","locations","newNodes","getAllNodesAsImmutableList","getAttribute","set","getAllEdgesAsImmutableList","isDirected","clearColors","directed","weighted","workerPool","backHistory","forwardHistory","maxHistory","ui","makeAndPrintGraphColoring","makeAndPrintEulerian","getAlgorithms","makeAndPrintIsCyclic","stronglyConnectedComponents","connectedComponents","graphColoring","eulerian","Chromatic Number","Connected Components","Strongly Connected Components","cyclic","defaultCancelCb","$modal","modal","self","deepFreeze","freeze","getOwnPropertyNames","prop","isFrozen","sort","arr","compareFunction","datasetToArray","ds","key","keepOnlyKeys","getFileExtension","filename","split","string","text","replace","printout","escape","flatten","rotate","max","iterable","reduce","b","Math","str","match","toUpperCase","showSimpleModal","title","body","showFormModal","initialValue","makeFormModal","successText","form","footer","f","class","formRow","basicMap","extraAttrs","attrname","validFunc","container","validationFunc","generalValidator","valueMutator","$v","val","valid","removeClass","next","remove","addClass","after","append","checked","for","prepend","clickDismiss","$b","onclick","on","parseFloat","$options_1","optionText","oText","oIndex","optionValues","$footer","tabindex","role","aria-hidden","data-dismiss","aria-label","off","last","trigger","first","successCb","cancelCb","vals","hasErrors","each","tagName","attr","files","hasClass","__webpack_exports__","findVertexDegreesDirectional","adjacencyMatrix","degrees","out","in","outV","interpolateNodesFromEdges","Worker","main_self","graphState","getElementById","visWeightEdgeEdit","callback","genericHelpers","visOptions","interaction","hover","manipulation","_d","_e","_h","$popup","concat","_f","_g","saveData","cancelEdit","confirm","network","_data","fromId","toId","operation","nodeLabelIDValidator","applyColors","graphColors","chromaticNumber","colors","randomColor_default","count","luminosity","G","recalcProps","graphChanged","rearrangeGraph","saveState","changeOption","g","GraphImmut","randomizeNetworkLayoutSeed","getPositions","disableEditMode","enableEditMode","terminateAllWebWorkers","printGraphAlgorithms","saveStateLocalStorage","getStateForSaving","jquery","parent","includes","Array","isArray","undo","applyState","redo","newState","firstLoad","currentState","pop","oldKey","then","checkForLocalStorage","localStorage","setItem","JSON","stringify","shuffleNetworkLayout","round","random","layoutEngine","randomSeed","initialRandomSeed","addNetworkListeners","editEdgeMode","lastNetworkClickEvent","has","parents","deleteSelected","ctrlKey","shiftKey","Settings","removeItem","saveSettings","current","loadSettings","parse","getItem","setAll","setOptions","physics","arrows","editWithoutDrag","option","defaults","resetToDefault","asChangedDirectedWeighted","direction","weights","nodePhysics","makeAndPrintShortestPath","fn","values","source","sink","w","UIInteractions_UIInteractions","getWorkerIfPossible","cleanup","pathExists","distance","cost","path","send","args","convertToGraphImmut","makeAndPrintComponents","stronglyConnected","UIInteractions_awaiter","cc","componentKey","components","UIInteractions_WorkerProxy","WorkerProxy","listener","this","worker","postMessage","onmessage","terminate","UIInteractions","display","makeAndPrintFFMCMF","makeAndPrintKruskal","makeAndPrintTopologicalSort","makeAndPrintDirectionalEulerian","log","waitTime","registerListeners","makeSimpleClickListener","selector","preventDefault","printHelp","printOptions","predefined","default","Petersen","Konigsberg","Complete","Hypercube","Custom","makeImportFileModal","makeImportTextModal","makeExportFileModal","makeExportTextModal","asDirected","asUndirected","asWeighted","asUnweighted","nextIndex","findIndex","GraphAlgorithmWorker_default","printGC","w_1","scc","graphHelpers","getFullAdjacency","getAllOutDegrees","cb","maxFlow","flowPath","flow","capacity","totalWeight","mst","EdgeImmut","getFrom","getTo","$div","empty","addAlgoToPane","alg","href","index_network","js_UIInteractions","singleton","install","Raven","loadDefault","jsonGraph","app_awaiter","_newTarget","getWeight","toPlain","NodeImmut","attributes","toReturn","attribute","getAllAttributes","assign","filterNodeExtraAttr","obj","genericEdgesToImmutEdges","nodeMap","newEdges","immutable__WEBPACK_IMPORTED_MODULE_0__","edge","_EdgeImmut__WEBPACK_IMPORTED_MODULE_2__","genericNodesToImmutNodes","floor","_NodeImmut__WEBPACK_IMPORTED_MODULE_1__","nodeNum_1","numNodes","size","numEdges","alignNodeIDs","alignTo","nodeCount","rich","deleteAll","foundOneEdge","foundFirst","index","toArray","doubleEdges","addedEdges","getNodeAdjacency","adj","areAdjacent","id1","id2","getEdgesBetween","edgeList","getMinWeightEdgeBetween","minWeight","Infinity","reduceMultiGraph","reducer","multiEdges","uniques","Set","acc","keep","duplicateEdge"],"mappings":"aACA,SAAAA,EAAAC,GAOA,IANA,IAKAC,EAAAC,EALAC,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAGAM,EAAA,EAAAC,KACQD,EAAAH,EAAAK,OAAoBF,IAC5BJ,EAAAC,EAAAG,GACAG,EAAAP,IACAK,EAAAG,KAAAD,EAAAP,GAAA,IAEAO,EAAAP,GAAA,EAEA,IAAAD,KAAAG,EACAO,OAAAC,UAAAC,eAAAC,KAAAV,EAAAH,KACAc,EAAAd,GAAAG,EAAAH,IAIA,IADAe,KAAAhB,GACAO,EAAAC,QACAD,EAAAU,OAAAV,GAOA,OAHAW,EAAAR,KAAAS,MAAAD,EAAAb,OAGAe,IAEA,SAAAA,IAEA,IADA,IAAAC,EACAf,EAAA,EAAiBA,EAAAY,EAAAV,OAA4BF,IAAA,CAG7C,IAFA,IAAAgB,EAAAJ,EAAAZ,GACAiB,GAAA,EACAC,EAAA,EAAkBA,EAAAF,EAAAd,OAA2BgB,IAAA,CAC7C,IAAAC,EAAAH,EAAAE,GACA,IAAAf,EAAAgB,KAAAF,GAAA,GAEAA,IACAL,EAAAQ,OAAApB,IAAA,GACAe,EAAAM,IAAAC,EAAAN,EAAA,KAGA,OAAAD,EAIA,IAAAQ,KAGApB,GACAqB,EAAA,GAGAZ,KAGA,SAAAS,EAAA1B,GAGA,GAAA4B,EAAA5B,GACA,OAAA4B,EAAA5B,GAAA8B,QAGA,IAAAC,EAAAH,EAAA5B,IACAK,EAAAL,EACAgC,GAAA,EACAF,YAUA,OANAhB,EAAAd,GAAAa,KAAAkB,EAAAD,QAAAC,IAAAD,QAAAJ,GAGAK,EAAAC,GAAA,EAGAD,EAAAD,QAKAJ,EAAAO,EAAA,SAAAhC,GACA,IAAAiC,KAKAC,EAAA3B,EAAAP,GACA,OAAAkC,EAGA,GAAAA,EACAD,EAAAzB,KAAA0B,EAAA,QACK,CAEL,IAAAC,EAAA,IAAAC,QAAA,SAAAC,EAAAC,GACAJ,EAAA3B,EAAAP,IAAAqC,EAAAC,KAEAL,EAAAzB,KAAA0B,EAAA,GAAAC,GAGA,IAAAI,EAAAC,SAAAC,qBAAA,WACAC,EAAAF,SAAAG,cAAA,UAEAD,EAAAE,QAAA,QACAF,EAAAG,QAAA,IAEApB,EAAAqB,IACAJ,EAAAK,aAAA,QAAAtB,EAAAqB,IAEAJ,EAAAM,IAAAvB,EAAAwB,EAAA,OAAkDjD,OAAA,KAA6BkD,EAAA,uBAAAC,EAAA,wBAAsDnD,GAAA,UACrI,IAAA6C,EAAAO,WAAA,WACAC,GAAwBC,KAAA,UAAAC,OAAAb,KAClB,MAEN,SAAAW,EAAAG,GAEAd,EAAAe,QAAAf,EAAAgB,OAAA,KACAC,aAAAd,GACA,IAAAe,EAAArD,EAAAP,GACA,OAAA4D,EAAA,CACA,GAAAA,EAAA,CACA,IAAAC,EAAAL,IAAA,SAAAA,EAAAF,KAAA,UAAAE,EAAAF,MACAQ,EAAAN,KAAAD,QAAAC,EAAAD,OAAAP,IACAe,EAAA,IAAAC,MAAA,iBAAAhE,EAAA,cAAA6D,EAAA,KAAAC,EAAA,KACAC,EAAAT,KAAAO,EACAE,EAAAE,QAAAH,EACAF,EAAA,GAAAG,GAEAxD,EAAAP,QAAAkE,GAfAxB,EAAAe,QAAAf,EAAAgB,OAAAL,EAkBAd,EAAA4B,YAAAzB,GAGA,OAAAN,QAAAgC,IAAAnC,IAIAR,EAAA4C,EAAAxD,EAGAY,EAAA6C,EAAA3C,EAGAF,EAAA8C,EAAA,SAAA1C,EAAA2C,EAAAC,GACAhD,EAAAiD,EAAA7C,EAAA2C,IACA/D,OAAAkE,eAAA9C,EAAA2C,GACAI,cAAA,EACAC,YAAA,EACAC,IAAAL,KAMAhD,EAAAsD,EAAA,SAAAlD,GACApB,OAAAkE,eAAA9C,EAAA,cAAiDmD,OAAA,KAIjDvD,EAAAwD,EAAA,SAAAnD,GACA,IAAA2C,EAAA3C,KAAAoD,WACA,WAA2B,OAAApD,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAL,EAAA8C,EAAAE,EAAA,IAAAA,GACAA,GAIAhD,EAAAiD,EAAA,SAAAS,EAAAC,GAAsD,OAAA3E,OAAAC,UAAAC,eAAAC,KAAAuE,EAAAC,IAGtD3D,EAAAwB,EAAA,GAGAxB,EAAA4D,GAAA,SAAAC,GAA8D,MAApBC,QAAAxB,MAAAuB,GAAoBA,GAE9D,IAAAE,EAAAC,OAAA,aAAAA,OAAA,iBACAC,EAAAF,EAAAhF,KAAAmF,KAAAH,GACAA,EAAAhF,KAAAX,EACA2F,IAAAI,QACA,QAAAxF,EAAA,EAAgBA,EAAAoF,EAAAlF,OAAuBF,IAAAP,EAAA2F,EAAApF,IACvC,IAAAU,EAAA4E,EAIA1E,EAAAR,MAAA,OAEAU,01CC1IM2E,EAAS,SAACC,GACZ,MAAgB,iBAANA,EACCA,EAEJC,SAASD,IAGpBE,EAAA,oBAAAA,KA2SA,OAlOWA,EAAAC,YAAP,SAAmBjB,EAAekB,QAAf,IAAAlB,OAAA,GACf,IAAMZ,EAAsB,OAAhB8B,QAA+C,IAAhBA,EACvCd,GAAW,EACfY,EAAWG,SAASC,QAAQ,SAACN,GAClB,WAAYA,GAAOA,EAAEO,UAAYjC,GAAO8B,EAAYI,QAAQR,EAAEtB,OAAS,KAC1EsB,EAAEK,SAAWnB,EACE,aAAXc,EAAExC,OACF8B,GAAW,MAInBA,GACAY,EAAWO,0BAINP,EAAAQ,YAAb,SAAyBpB,EAAkBqB,eAAA,IAAAA,OAAA,iGACjCC,EAAIV,EAAWG,SAASQ,KAAK,SAACb,GAChC,MAAQ,SAAUA,GAAKA,EAAEtB,OAASY,KAE/Be,UAAH,KACI,cAAeO,GAAKD,GACpB,EAAMC,EAAEE,cADR,mBACAC,EAAAC,oBAGA,SAAO,aAGf,MAAe,UAAXJ,EAAEpD,MACF,EAAOlB,QAAQC,QAAQ2D,EAAWe,MAAM3B,MAE5C,EAAOhD,QAAQC,QAAQ2D,EAAWgB,gBAAgB5B,WAGzCY,EAAAO,uBAAb,SAAoCU,eAAA,IAAAA,OAAA,4GAC1BC,EAAczB,OAAO0B,SAASC,UAAU,aAE9CpB,EAAWgB,gBAAgBK,SAAWrB,EAAWsB,MAAMC,mBACvDvB,EAAWgB,gBAAgBQ,MAAQxB,EAAWsB,MAAMG,mBAE/CP,GAAD,MACA,EAAMlB,EAAWQ,YAAY,YAAY,WAAzCK,EAAAC,wBAWJ,OARM7D,EAAIxC,OAAOiH,KAAK1B,EAAWgB,iBAC7BC,GACAhE,EAAEmD,QAAQ,SAAON,GAAC,OAAA6B,EAAAC,OAAA,qEACd,SAAM5B,EAAWQ,YAAYV,GAAG,kBAAhCe,EAAAC,kBAIFe,MACN,EAAMzF,QAAQgC,IAAInB,EAAE6E,IAAI,SAAOhC,GAAC,OAAA6B,EAAAC,OAAA,6EACH,OAAzBf,EAAAgB,EAAoBE,EAAAjC,GAAK,EAAME,EAAWQ,YAAYV,kBAAtDe,EAAAkB,GAAyBC,EAAAlB,kCAD7BD,EAAAC,OAIAd,EAAWiC,qBAAqBJ,aAG7B7B,EAAAiC,qBAAP,SAA4BC,GACxB,IAAIjF,EAAI,GACRxC,OAAOiH,KAAKQ,GAAY9B,QAAQ,SAAC+B,GACP,OAAlBD,EAAWC,KACXlF,GAAQmF,EAAA,EAAKC,YAAYF,GAAE,KAAKD,EAAWC,GAAE,QAGrDlF,EAAIA,EAAEqF,OACNrF,EAAImF,EAAA,EAAKG,WAAWtF,GACpBuF,EAAE,eAAeC,KAAK,uBAAuBxF,EAAC,SAG3C+C,EAAA0C,QAAP,SAAeC,EAAqBC,EAAmBC,EAAYvB,QAAZ,IAAAuB,MAAA,QAAY,IAAAvB,MAAQtB,EAAWsB,OAClF,IAAMwB,EAAWjD,EAAO8C,GAClBI,EAASlD,EAAO+C,GACtBtB,EAAQA,EAAMoB,QAAQI,EAAUC,EAAQF,GACxCpD,OAAOuD,KAAKC,SACRC,MAAOlD,EAAWmD,oBAAoB7B,EAAM8B,eAC5C5B,MAAOF,EAAM+B,iBAIdrD,EAAAsD,QAAP,SAAexJ,EAAgBwH,QAAA,IAAAA,MAAQtB,EAAWsB,OAC9CA,EAAQA,EAAMgC,SAASC,MAAOzJ,EAAKyJ,MAAOC,EAAG1J,EAAK0J,EAAGC,EAAG3J,EAAK2J,IAC7DhE,OAAOuD,KAAKC,SACRC,MAAOlD,EAAWmD,oBAAoB7B,EAAM8B,eAC5C5B,MAAOF,EAAM+B,iBAIdrD,EAAA0D,SAAP,SAAgBC,EAAmBJ,EAAejC,QAAA,IAAAA,MAAQtB,EAAWsB,OACjE,IAAMsC,EAAM/D,EAAO8D,GACnBrC,EAAQA,EAAMoC,SAASE,GAAML,MAAKA,IAClC9D,OAAOuD,KAAKC,QAAQjD,EAAW6D,aAAavC,IAAQ,GAAO,IAGxDtB,EAAA8D,SAAP,SAAgBnB,EAAqBC,EAAmBmB,EAAmBC,EAAmB1C,QAAA,IAAAA,MAAQtB,EAAWsB,OAC7G,IAAMwB,EAAWjD,EAAO8C,GAClBI,EAASlD,EAAO+C,GAChBqB,EAAW3C,EAAMwC,SAAShB,EAAUC,EAAQgB,EAAWC,GACzDC,aAAoBC,EAAA,GACpBzE,OAAOuD,KAAKC,QAAQjD,EAAW6D,aAAaI,IAAW,GAAO,IAI/DjE,EAAAmE,WAAP,SAAkBxB,EAAqBC,EAAmBC,EAAuBvB,QAAvB,IAAAuB,MAAA,WAAuB,IAAAvB,MAAQtB,EAAWsB,OAChG,IAAMwB,EAAWjD,EAAO8C,GAClBI,EAASlD,EAAO+C,GACtBtB,EAAQA,EAAM6C,WAAWrB,EAAUC,EAAQF,GAAQ,GACnDpD,OAAOuD,KAAKC,SACRC,MAAOlD,EAAWmD,oBAAoB7B,EAAM8B,eAC5C5B,MAAOF,EAAM+B,iBAIdrD,EAAAoE,WAAP,SAAkBT,EAAmBrC,QAAA,IAAAA,MAAQtB,EAAWsB,OACpD,IAAMsC,EAAM/D,EAAO8D,GACbM,EAAW3C,EAAM8C,WAAWR,GAC9BK,aAAoBC,EAAA,GACpBzE,OAAOuD,KAAKC,SACRC,MAAOlD,EAAWmD,oBAAoBc,EAASb,eAC/C5B,MAAOyC,EAASZ,iBAKrBrD,EAAAmD,oBAAP,SAA2BD,GAIvB,OAHAA,EAAM9C,QAAQ,SAACN,GACXA,EAAEuE,MAAQ,OAEPnB,GAGJlD,EAAAsE,cAAP,SAAqBX,EAAYrC,QAAA,IAAAA,MAAQtB,EAAWsB,OAChD,IAAMrC,EAAIqC,EAAMiD,QAAQZ,GAAI,GAC5B,OAAU,IAAN1E,GAAqB,OAANA,GAAcA,aAAauF,EAAA,GAAavF,EAAEwF,WAAWnC,OAAOhI,OAAS,EAC7E2E,EAAEwF,WAAWnC,OAGjBqB,EAAGe,YAIP1E,EAAA2E,cAAP,SAAqBpB,EAAejC,QAAA,IAAAA,MAAQtB,EAAWsB,OACnD,IAAIrC,EAAIqC,EAAM8B,aAAY,GAK1B,GAAiB,KAJjBnE,EAAIA,EAAE2F,OAAO,SAACC,GACV,OAAOA,EAAKJ,WAAWK,gBAAkBvB,EAAMuB,eAAiBD,EAAKE,QAAQL,aAAenB,KAG1FjJ,OACF,OAAQ,EAEP,GAAiB,IAAb2E,EAAE3E,OACP,OAAO2E,EAAE,GAAG8F,QAGhB,IAAIC,GAAO,EACPC,GAAQ,EASZ,OAPAhG,EAAEmB,QAAQ,SAACyE,GACFI,GAASJ,EAAKE,QAAQL,aAAenB,IACtCyB,EAAMH,EAAKE,QACXE,GAAQ,KAIZA,EACOD,GAGX/F,EAAEmB,QAAQ,SAACyE,GACFI,GAASJ,EAAKJ,aAAelB,IAC9ByB,EAAMH,EAAKE,QACXE,GAAQ,KAIZA,EACOD,GAGX/F,EAAEmB,QAAQ,SAACyE,GACFI,GAASJ,EAAKJ,WAAWK,gBAAkBvB,EAAMuB,gBAClDE,EAAMH,EAAKE,QACXE,GAAQ,KAITD,KAIJhF,EAAAkF,kBAAP,SAAyB5D,GACrB,IAAM/C,EAAIyB,EAAW6D,aAAavC,GAOlC,OANIA,EAAM6D,cACN5G,EAAEiD,MAAMpB,QAAQ,SAACpE,GACbA,EAAEuH,MAAQvH,EAAE6G,OAAO6B,cAInBxB,MAAO,IAAIkC,EAAA,QAAQ7G,EAAE2E,OAAsB1B,MAAO,IAAI4D,EAAA,QAAQ7G,EAAEiD,SAGrExB,EAAAqF,aAAP,SAAoBC,EAAoDhE,QAAA,IAAAA,MAAQtB,EAAWsB,OACvF,IAAIiE,EAAWjE,EAAMkE,6BAWrB,OAVA/K,OAAOiH,KAAK4D,GAAWlF,QAAQ,SAAChG,GAC5B,IAAM0F,EAAIwF,EAAUlL,GACdyK,EAAOU,EAASzG,IAAIiB,SAAS3F,IAE/ByK,EAAKY,aAAa,OAAS3F,EAAE0D,GAAKqB,EAAKY,aAAa,OAAS3F,EAAE2D,IAE/D8B,EAAWA,EAASG,IAAI3F,SAAS3F,GAAIyK,EAAKnB,SAASmB,EAAKJ,YAAajB,EAAG1D,EAAE0D,EAAGC,EAAG3D,EAAE2D,QAInF,IAAIS,EAAA,EAAWqB,EAAUjE,EAAMqE,6BAA8BrE,EAAMsE,aAActE,EAAM6D,eAG3FnF,EAAA6D,aAAP,SAAoBvC,EAA0BuE,QAA1B,IAAAvE,MAAQtB,EAAWsB,YAAO,IAAAuE,OAAA,GAC1C,IAAM3C,EAAQ5B,EAAM8B,cACpB,OACIF,MAAO2C,EAAc7F,EAAWmD,oBAAoBD,GAASA,EAC7D1B,MAAOF,EAAM+B,cACbyC,SAAUxE,EAAMsE,aAChBG,SAAUzE,EAAM6D,eAvSVnF,EAAAgG,cACAhG,EAAAiG,eACAjG,EAAAkG,kBACAlG,EAAAmG,WAAa,GACbnG,EAAAG,WAEN3B,KAAM,mBAAoB2B,UAAU,EAAO7C,KAAM,WACjDsD,UAAW,WACP,OAAOnB,OAAO2G,GAAGC,+BAIrB7H,KAAM,gBAAiB2B,UAAU,EAAO7C,KAAM,QAC9CsD,UAAW,WACP,OAAOnB,OAAO2G,GAAGC,+BAGxB7H,KAAM,WAAY2B,UAAU,EAAME,QAAQ,EAAM/C,KAAM,aACtDkB,KAAM,QAAS2B,UAAU,EAAME,QAAQ,EAAM/C,KAAM,aAEhDkB,KAAM,WAAY2B,UAAU,EAAO7C,KAAM,WACzCsD,UAAW,WACP,OAAOnB,OAAO2G,GAAGE,0BAIrB9H,KAAM,uBAAwB2B,UAAU,EAAO7C,KAAM,WACrDsD,UAAW,WACPnB,OAAO2G,GAAGG,gBAAgB5F,KAAK,SAACb,GAAM,MAAW,yBAAXA,EAAEtB,OAAiCoC,eAI7EpC,KAAM,sBAAuB2B,UAAU,EAAO7C,KAAM,QACpDsD,UAAW,WACPnB,OAAO2G,GAAGG,gBAAgB5F,KAAK,SAACb,GAAM,MAAW,yBAAXA,EAAEtB,OAAiCoC,eAI7EpC,KAAM,gCAAiC2B,UAAU,EAAO7C,KAAM,WAC9DsD,UAAW,WACPnB,OAAO2G,GAAGG,gBAAgB5F,KAAK,SAACb,GAAM,MAAW,kCAAXA,EAAEtB,OAA0CoC,eAItFpC,KAAM,8BAA+B2B,UAAU,EAAO7C,KAAM,QAC5DsD,UAAW,WACPnB,OAAO2G,GAAGG,gBAAgB5F,KAAK,SAACb,GAAM,MAAW,kCAAXA,EAAEtB,OAA0CoC,eAItFpC,KAAM,SAAU2B,UAAU,EAAO7C,KAAM,WACvCsD,UAAW,WACP,OAAOnB,OAAO2G,GAAGI,0BAIfxG,EAAAe,OACV0F,4BAA6B,KAC7BC,oBAAqB,KACrBC,cAAe,MAEL3G,EAAAsB,MAAoB,KACpBtB,EAAAgB,iBACVK,SAAU,EACVG,MAAO,EACPoF,UAAU,EACVC,mBAAoB,KACpBC,uBAAwB,KACxBC,gCAAiC,KACjCC,QAAQ,GAqOhBhH,EA3SA,oDC7DA4B,OAAA1D,EA2BM+I,EAAkB,SAACC,GACrBA,EAAOC,MAAM,SAGXC,GACFC,WAAY,SAAI3I,GAWZ,OAVAjE,OAAO6M,OAAO5I,GAEdjE,OAAO8M,oBAAoB7I,GAAG0B,QAAQ,SAACoH,IAC/B9I,EAAE/D,eAAe6M,IAA8B,OAApB9I,EAAU8I,IACL,iBAApB9I,EAAU8I,IAAkD,mBAApB9I,EAAU8I,IAC1D/M,OAAOgN,SAAU/I,EAAU8I,KAC/BJ,EAAKC,WAAY3I,EAAU8I,MAI5B9I,GAGXgJ,KAAM,SAAIC,EAAUC,GAChB,OAAWD,EAAG/H,QAAE8H,KAAKE,IAGzBC,eAAgB,SAACC,EAASC,GACtB,IAAMhJ,KAIN,OAHA+I,EAAG1H,QAAQ,SAACN,GACRf,EAAEvE,KAAKsF,EAAEiI,MAENX,EAAKC,WAAWtI,IAG3BiJ,aAAc,SAAIL,EAAUjG,GAUxB,OATAiG,EAAMA,EAAI/H,SACNQ,QAAQ,SAACN,GACCrF,OAAOiH,KAAK5B,GACpBM,QAAQ,SAAC2H,GACHrG,EAAKpB,QAAQyH,GAAO,UACbjI,EAAEiI,OAIdX,EAAKC,WAAWM,IAG3BM,iBAAkB,SAACC,GACf,OAAOA,EAASC,MAAM,KAAK3M,QAAQ,GAAG,IAG1C+G,WAAY,SAAC6F,GAGT,OADAA,GADAA,EAAS5F,EAAE,SAAS6F,KAAKD,GAAQ3F,QACjB6F,QAAQ,kBAAmB,UAI/CC,SAAU,SAACF,EAAcG,GACjBA,IACAH,EAAOzG,EAAKW,WAAWiG,IAE3BhG,EAAE,aAAaC,KAAK4F,IAGxBI,QAAS,SAAI3G,GACT,IAAM/C,KAIN,OAHAtE,OAAOiH,KAAKI,GAAK1B,QAAQ,SAAChG,GACtB2E,EAAEvE,KAAKsH,EAAI1H,MAERgN,EAAKC,WAAWtI,IAG3B2J,OAAQ,SAAC5G,GACL,IAAM/C,KASN,OARAtE,OAAOiH,KAAKI,GAAK1B,QAAQ,SAAChG,GAClB0H,EAAI1H,KAAM2E,EACVA,EAAE+C,EAAI1H,IAAII,KAAKJ,GAGf2E,EAAE+C,EAAI1H,KAAOA,KAGdgN,EAAKC,WAAWtI,IAG3B4J,IAAK,SAACC,GACF,OAAOA,EAASC,OAAO,SAACnI,EAAGoI,GACvB,OAAOC,KAAKJ,IAAIjI,EAAGoI,MAI3BzG,YAAa,SAAC2G,GACV,OAAOA,EAAIV,QAAQ,cAAe,SAACW,GAC/B,OAAOA,EAAMC,iBAIrBC,gBAAiB,SAACC,EAAeC,GAC7BjC,EAAKkC,cAAc,KAAMF,EAAO,OAAQ9L,KAAM,OAAQiM,aAAcF,IAAQ,MAAM,IAGtFG,cAAe,SAACJ,EAAeK,EAAqBC,EAAsBC,QAAA,IAAAA,OAAA,GACtE,IAAMC,EAAIpH,EAAE,SAAUqH,MAAO,0BAC7BH,EAAKtJ,QAAQ,SAAC0J,EAAS1P,GACb,iBAAkB0P,IACpBA,EAAQP,aAAe,IAG3B,IAAI5F,EAAK,cAAgBvJ,EACrB,OAAQ0P,GAA0B,KAAfA,EAAQnG,IAA4B,OAAfmG,EAAQnG,IAAqC,iBAAfmG,EAAQnG,KAC9EA,EAAKmG,EAAQnG,IAGjB,IAAMoG,GAA0BF,MAAO,eAAgBlG,GAAEA,EAAE3E,MAAO8K,EAAQP,cAEtE,eAAgBO,GAChBrP,OAAOiH,KAAKoI,EAAQE,YAAY5J,QAAQ,SAAC6J,GACO,mBAAjCH,EAAQE,WAAWC,KAC1BF,EAASE,GAAYH,EAAQE,WAAWC,MAKpD,IAAIC,EAAY,SAAClL,EAAamL,GAAyC,UACnE,mBAAoBL,IACpBI,EAAYJ,EAAQM,gBAGxB,IAAMC,EAAmB,SAAC7M,EAAY8M,QAAA,IAAAA,MAAA,MAClC,IAAMC,EAAK/H,EAAEhF,EAAMD,QACfiN,EAAMD,EAAGC,MACQ,OAAjBF,GAAiD,mBAAjBA,IAChCE,EAAMF,EAAaE,IAEvB,IAAMC,EAAQP,EAAUM,EAAKD,IAEf,IAAVE,EACAF,EAAGG,YAAY,cAAcC,KAAK,aAAevQ,GAAGwQ,UAGpDL,EAAGM,SAAS,cAC6B,IAArCN,EAAGI,KAAK,aAAevQ,GAAGE,QAC1BiQ,EAAGO,MAAMtI,EAAE,SAAUqH,MAAO,mBAAoBlG,GAAI,YAAcvJ,IAAIiO,KAAKoC,MAKvF,GAAqB,SAAjBX,EAAQxM,KACRsM,EAAEmB,OAAOvI,EAAEsH,EAAQP,oBAElB,GAAqB,aAAjBO,EAAQxM,KACbyM,EAASzM,KAAO,WAChByM,EAASF,MAAQ,0BACVE,EAAS/K,MACZ8K,EAAQP,eACRQ,EAASiB,QAAU,IAGvBpB,EAAEmB,OAAOvI,EAAE,SAAUqH,MAAO,eACvBkB,OAAOvI,EAAE,WAAYyI,IAAKtH,EAAIkG,MAAO,qBACjCxB,KAAKyB,EAAQvG,OAAO2H,QAAQ1I,EAAE,UAAWuH,WAOlD,GAFAH,EAAEmB,OAAOvI,EAAE,WAAYyI,IAAKtH,EAAIkG,MAAO,mBAAmBxB,KAAKyB,EAAQvG,QAElD,WAAjBuG,EAAQxM,KAAmB,CACvB,iBAAkBwM,IAAoC,IAAzBA,EAAQqB,eACrCpB,EAASF,OAAS,gBAEtB,IAAMuB,EAAK5I,EAAE,WAAYuH,GAAU1B,KAAKyB,EAAQP,cAC5C,YAAaO,GAAsC,mBAApBA,EAAQuB,SACvCD,EAAGE,GAAG,QAASxB,EAAQuB,SAE3BzB,EAAEmB,OAAOK,QAER,GAAqB,YAAjBtB,EAAQxM,KACbyM,EAASzM,KAAO,SAChBsM,EAAEmB,OAAOvI,EAAE,UAAWuH,GAAUuB,GAAG,gBAAiB,SAACtP,GACjDqO,EAAiBrO,EAAGuP,oBAGvB,GAAqB,SAAjBzB,EAAQxM,KACbyM,EAASzM,KAAO,OAChBsM,EAAEmB,OAAOvI,EAAE,UAAWuH,GAAUuB,GAAG,gBAAiBjB,SAEnD,GAAqB,SAAjBP,EAAQxM,KACbyM,EAASzM,KAAO,OAChByM,EAASF,MAAQ,iCACjBD,EAAEmB,OAAOvI,EAAE,UAAWuH,GAAUuB,GAAG,gBAAiBjB,SAEnD,GAAqB,aAAjBP,EAAQxM,KAAqB,CAC5B8N,EAAK5I,EAAE,aAAcuH,GAAUuB,GAAG,gBAAiBjB,GACrD,YAAaP,GACbsB,EAAGE,GAAG,QAASxB,EAAQuB,SAE3BzB,EAAEmB,OAAOK,QAER,GAAqB,WAAjBtB,EAAQxM,KAAmB,CAChC,IAAMkO,EAAWhJ,EAAE,WAAYuH,GAC/BD,EAAQ2B,WAAWrL,QAAQ,SAACsL,EAAOC,GAC3BA,EAAS7B,EAAQ8B,aAAatR,OAC9BkR,EAAST,OAAOvI,EAAE,YAAaxD,MAAO8K,EAAQ8B,aAAaD,KAAUtD,KAAKqD,IAG1EF,EAAST,OAAOvI,EAAE,YAAY6F,KAAKqD,MAG3C9B,EAAEmB,OAAOS,EAASF,GAAG,gBAAiBjB,OAKlD,IAAIwB,EAAUrJ,EAAE,SAAUqH,MAAO,iBAC5BkB,OAAOvI,EAAE,YAAaqH,MAAO,kBAAmBvM,KAAM,WAAW+K,KAAKoB,IACtEsB,OAAOvI,EAAE,YAAaqH,MAAO,4BAA6BvM,KAAM,WAAW+K,KAAK,YAEtE,IAAXsB,IACAkC,EAAU,MAGd,IAAM3E,EAAU1E,EAAE,SAAUqH,MAAO,aAAciC,SAAU,KAAMC,KAAM,SAAUC,cAAe,SAuBhG,OAtBA9E,EACK6D,OAAOvI,EAAE,SAAUqH,MAAO,iBACtBkB,OAAOvI,EAAE,SAAUqH,MAAO,kBACtBkB,OAAOvI,EAAE,SAAUqH,MAAO,iBACtBkB,OAAOvI,EAAE,QAASqH,MAAO,gBAAgBxB,KAAKe,IAC9C2B,OAAOvI,EAAE,YAAaqH,MAAO,QAASoC,eAAgB,QAASC,aAAc,UACzEnB,OAAOvI,EAAE,UAAWwJ,cAAe,SAASvJ,KAAK,cAGzDsI,OAAOnB,GACPmB,OAAOc,KAGpB3E,EAAOvG,KAAK,mBAAmBwL,IAAI,SAASb,GAAG,QAAS,SAACtP,GACvC,UAAVA,EAAE+L,KACFvF,EAAE,gBAAgB4J,OAAOC,QAAQ,WAGzCnF,EAAOoE,GAAG,iBAAkB,WACxBpE,EAAOvG,KAAK,sDAAsD2L,QAAQD,QAAQ,WAG/EnF,GAGXoC,cAAe,SAACiD,EACAnD,EAAeK,EAAqBC,EACpC8C,EAAsD7C,QAAtD,IAAA6C,MAAAvF,QAAsD,IAAA0C,OAAA,GAClE,IAAMzC,EAASE,EAAKoC,cAAcJ,EAAOK,EAAaC,EAAMC,GAE5DzC,EAAOoE,GAAG,QAAS,cAAe,WACN,mBAAbkB,EACPA,EAAStF,GAGTA,EAAOC,MAAM,UAElBmE,GAAG,QAAS,eAAgB,WAC3BpE,EAAOC,MAAM,UACdmE,GAAG,QAAS,eAAgB,WAC3B,IAAMmB,KACFC,GAAY,EAEhBxF,EAAOvG,KAAK,2BAA2BgM,KAAK,SAACvS,EAAG0F,GAC5C,IAAMyK,EAAK/H,EAAE1C,GAEe,WAAvByK,EAAWqC,QACZH,EAAKjS,KAAK+P,EAAG5J,KAAK,aAAa6J,OAEN,aAApBD,EAAGsC,KAAK,QACbJ,EAAKjS,KAAK+P,EAAG/C,KAAK,YAEO,SAApB+C,EAAGsC,KAAK,QACbJ,EAAKjS,KAAM+P,EAAGzL,IAAI,GAAWgO,OAEJ,WAApBvC,EAAGsC,KAAK,QACbJ,EAAKjS,KAAK+Q,WAAWhB,EAAGC,QAGxBiC,EAAKjS,KAAK+P,EAAGC,OAGbD,EAAG8B,QAAQ,YAAYU,SAAS,gBAChCL,GAAY,KAKfA,GAAkC,mBAAdH,GACrBA,EAAUrF,EAAQuF,KAEvBnB,GAAG,kBAAmB,WACrBpE,EAAO0D,WACRzD,MAAM,UAIjB6F,EAAA,qCC1TAA,EAAA,GACIC,6BAA8B,SAACC,GAE3B,IAAMC,KAkBN,OAjBAD,EAAgB9M,QAAQ,SAACN,EAAG1F,GACpBA,KAAK+S,EACLA,EAAQ/S,GAAGgT,KAAOtN,EAAExF,OAGpB6S,EAAQ/S,IAAMgT,IAAKtN,EAAExF,OAAQ+S,GAAI,GAErCvN,EAAEM,QAAQ,SAACkN,GACHA,KAAQH,EACRA,EAAQG,GAAMD,IAAM,EAGpBF,EAAQG,IAASD,GAAI,EAAGD,IAAK,OAKlCD,GAGXI,0BAA2B,SAAC/L,GACxB,IAAM0B,KAMN,OALA1B,EAAMpB,QAAQ,SAACN,GACXoD,EAAMpD,EAAE6C,OAASgB,GAAI7D,EAAE6C,KAAMY,MAAO,GAAKzD,EAAE6C,MAC3CO,EAAMpD,EAAE8C,KAAOe,GAAI7D,EAAE8C,GAAIW,MAAO,GAAKzD,EAAE8C,MAGpCM,wBCzCfpH,EAAAD,QAAA,WACA,WAAA2R,OAAA/R,EAAAwB,EAAA,g6CCiEMwQ,GACFC,WAAYA,EAAA,EACZvD,UAAW3N,SAASmR,eAAe,WAEnCC,kBAAmB,SAAC9T,EAA2B+T,GAC3CC,EAAA,EAAKxE,cAAc,SAACpC,EAAQuF,GACxBoB,EAAS,MACT3G,EAAOC,MAAM,QACb,IAAMnI,EAAQuM,WAAWkB,EAAK,IAC9BiB,EAAA,EAAW5J,SAAShK,EAAK6I,KAAKgB,GAAI7J,EAAK8I,GAAGe,GAAI3E,EAAOuM,WAAWzR,EAAKyJ,SACtE,YAAa,SAERjG,KAAM,UACNiG,MAAO,kBACPgG,aAAcgC,WAAWzR,EAAKyJ,WAI1CwK,YACIC,aAAcC,OAAO,GACrBC,cACI5K,QAAS,SAAOxJ,EAAM+T,GAAQ,OAAAlM,OAvF1CzD,OAuF0C,yFAIW,OAHtB6D,GAAAlB,EAAAiN,EAAA,GAAKtE,iBAAc,WAAY,WAEtClM,KAAM,0BACuB,EAAMoQ,EAAA,EAAWlN,YAAY,oBAEjB,WAFzC2N,EAAA5E,aAAc6E,EAAeC,EAAAvN,OAAwC,cAExExD,KAAM,OAAQiG,MAAO,UAAuB,EAAMmK,EAAA,EAAWlN,YAAY,2BALxE8N,EAASvM,EAAA9G,MAAA4F,EAAAmB,EAAAuM,QAAAC,EAAAD,SAKoBE,EAAAlF,aAAc8E,EAAAvN,OAAwC2N,SAGlFnD,GAAG,QAAS,eAAgB,WAC/BgD,EAAOnH,MAAM,QACbsG,EAAKiB,SAAS5U,EAAM+T,EAAU,MAAOS,EAAO3N,KAAK,SAAS2L,QAAQ9B,SACnEc,GAAG,QAAS,cAAe,WAC1BgD,EAAOnH,MAAM,QACbsG,EAAKkB,WAAWd,KACjBvC,GAAG,kBAAmB,WACrBgD,EAAO1D,SACP6C,EAAKkB,WAAWd,KACjB1G,MAAM,kBAEbzD,SAAU,SAAC5J,EAAM+T,GACb,IAAMS,EAASR,EAAA,EAAKtE,cAAc,YAAa,SAEvClM,KAAM,OACNiM,aAAc,eAAezP,EAAK6J,GAAE,SAEvCrG,KAAM,OAAQiG,MAAO,QAASgG,aAAczP,EAAKyJ,SAGtD+K,EAAOhD,GAAG,QAAS,eAAgB,WAC/BgD,EAAOnH,MAAM,QACbsG,EAAKiB,SAAS5U,EAAM+T,EAAU,WAAYS,EAAO3N,KAAK,SAAS2L,QAAQ9B,SACxEc,GAAG,QAAS,cAAe,WAC1BgD,EAAOnH,MAAM,QACbsG,EAAKkB,WAAWd,KACjBvC,GAAG,kBAAmB,WACrBgD,EAAO1D,SACP6C,EAAKkB,WAAWd,KACjB1G,MAAM,SAEbzE,QAAS,SAAC5I,EAAM+T,GACZ,IAAM5S,EAAQ,WACc,mBAAb4S,GACPA,EAAS,MAEbH,EAAA,EAAWhL,QAAQ5I,EAAK6I,KAAM7I,EAAK8I,KAEnC9I,EAAK6I,OAAS7I,EAAK8I,GAOvB3H,IANQ2T,QAAQ,+CACR3T,KAOZ6I,SAAU,SAAChK,EAAM+T,GACbA,EAAS,MACTJ,EAAKM,WAAWG,aAAa/J,YAAY3C,OAAQ1H,EAAK6J,MACtD8J,EAAKM,WAAWG,aAAaxL,QAAQ5I,IAEzCqK,WAAY,SAACrK,EAAM+T,GACS,mBAAbA,GACPA,EAAS,MAEb/T,EAAK0H,MAAMpB,QAAQ,SAACN,GAChB,IAAI+C,EAAS,UACyD,IAA1DpD,OAAOoP,QAAgBxF,KAAKvP,KAAK0H,MAAMsN,MAAMhP,GAAGyD,QACxDV,EAAS0I,WAAY9L,OAAOoP,QAAgBxF,KAAKvP,KAAK0H,MAAMsN,MAAMhP,GAAGyD,QAGzEmK,EAAA,EAAWvJ,WAAY1E,OAAOoP,QAAgBxF,KAAK7H,MAAM1B,GAAGiP,OACvDtP,OAAOoP,QAAgBxF,KAAK7H,MAAM1B,GAAGkP,KAAMnM,MAGxDuB,WAAY,SAACtK,EAAM+T,GACfA,EAAS,MACT/T,EAAKoJ,MAAM9C,QAAQ,SAACN,GAChB4N,EAAA,EAAWtJ,WAAWtE,QAMtC6O,WAAY,SAACd,GACe,mBAAbA,GACPA,EAAS,OAIjBa,SAAU,SAAC5U,EAAM+T,EAAUoB,EAAW1L,GAClCsK,EAAS,MAET/T,EAAKyJ,MAAQA,EACK,QAAd0L,EACAvB,EAAA,EAAWpK,QAAQxJ,GAEA,aAAdmV,GACLvB,EAAA,EAAWhK,SAAS5J,EAAK6J,GAAI7J,EAAKyJ,QAI1C2L,qBAAsB,SAACpP,GACnB,OAAI4N,EAAA,EAAW/I,cAAc7E,IAAM,GAG5B,uBAGXqP,YAAa,kBAAAxN,OApMjBzD,OAoMiB,iFACT,OAAIuB,OAAO0B,SAASC,UAAU,cAC1B,IAEgB,EAAMsM,EAAA,EAAWlN,YAAY,iBAAiB,WAC1C,OADlB4O,EAAcvO,EAAAC,QACI,EAAM4M,EAAA,EAAWlN,YAAY,oBAAoB,kBAAnE6O,EAAkBxO,EAAAC,OAElBwO,EAASC,KAAaC,MAAOH,EAAiBI,WAAY,WAC5DC,EAAIhC,EAAA,EAAWpM,OAChB8B,cAAmChD,QAAQ,SAACN,GAC3C4P,EAAIA,EAAEhM,SAAS5D,EAAE6D,IAAKU,MAAOiL,EAAOF,EAAYtP,EAAE6D,SAEtD8J,EAAKxK,QAAQyK,EAAA,EAAW7J,aAAa6L,IAAI,GAAO,aAGpDzM,QAAS,SAACnJ,EAAM6V,EAAqBC,EAAqBC,QAA1C,IAAAF,OAAA,QAAqB,IAAAC,OAAA,QAAqB,IAAAC,OAAA,GAElDA,GACA/V,EAAKoJ,MAAM9C,QAAQ,SAACN,UACTA,EAAE0D,SACF1D,EAAE2D,IAIbmM,GACAnC,EAAKqC,YAGL,aAAchW,GACd2F,OAAO0B,SAAS4O,aAAa,YAAajW,EAAKgM,UAE/C,aAAchM,GACd2F,OAAO0B,SAAS4O,aAAa,UAAWjW,EAAKiM,UAEjD,IAAM7E,EAAczB,OAAO0B,SAASC,UAAU,aACxC2E,EAAWtG,OAAO0B,SAASC,UAAU,WAErC4O,EAAI,IAAIC,EAAA,EAAWnW,EAAKoJ,MAAOpJ,EAAK0H,MAAON,EAAa6E,GAC9D2H,EAAA,EAAWpM,MAAQ0O,EAGnBvC,EAAKyC,2BAA2BzQ,OAAOoP,SACvCpP,OAAOoP,QAAQ5L,QAAQyK,EAAA,EAAWxI,kBAAkB8K,IACpDtC,EAAA,EAAWpM,MAAQoM,EAAA,EAAWrI,aAAa5F,OAAOoP,QAAQsB,gBAE1D1Q,OAAOoP,QAAQuB,kBACf3Q,OAAOoP,QAAQwB,iBAEXT,IACAnQ,OAAO2G,GAAGkK,yBACV7Q,OAAO2G,GAAGmK,uBACVzC,EAAA,EAAKvF,SAAS,IACdmF,EAAA,EAAWzN,cACXyN,EAAA,EAAWnN,uBAAuBoP,IAGtClC,EAAK+C,yBAGTV,UAAW,WACkB,OAArBpC,EAAA,EAAWpM,QAIXoM,EAAA,EAAWzH,YAAY3L,QAAUoT,EAAA,EAAWvH,YAC5CuH,EAAA,EAAWzH,YAAYlL,QAG3B2S,EAAA,EAAWzH,YAAYzL,KAAKiT,EAAKgD,qBACjC/C,EAAA,EAAWxH,kBACXwK,EAAE,cAAcC,SAASA,SAAS9F,SAAS,YAG/C4F,kBAAmB,WACf,IAAM1P,KAkBN,OAjBAtG,OAAOiH,KAAKgM,EAAA,GAAYtN,QAAQ,SAAC+B,GAC7B,IAAMrC,EAAU4N,EAAA,EAAmBvL,GAClB,mBAANrC,IACU,iBAANA,EACPiB,EAAMoB,GAAKrC,GAGD,UAANqC,GAAuB,OAANrC,IACjBiB,EAAMoB,GAAKrC,GAEVqC,EAAE2C,cAAc8L,SAAS,aAC1B7P,EAAMoB,GAAKuO,EAAA,QAAS,EAAMG,MAAMC,QAAQhR,SAAcA,QAM/DiB,GAGXgQ,KAAM,WACErD,EAAA,EAAWzH,YAAY3L,OAAS,GAChCmT,EAAKuD,YAAW,IAIxBC,KAAM,WACEvD,EAAA,EAAWxH,eAAe5L,OAAS,GACnCmT,EAAKuD,YAAW,IAIxBA,WAAY,SAACD,EAAaG,QAAb,IAAAH,OAAA,QAAa,IAAAG,MAAA,MACtB,IAAMC,EAAyB,OAAbD,EACZE,EAAe3D,EAAKgD,oBAErBU,IAEGD,EADAH,EACWrD,EAAA,EAAWzH,YAAYoL,MAGvB3D,EAAA,EAAWxH,eAAemL,OAK7CH,EAAS5P,MAAQ,IAAI2O,EAAA,EAAWiB,EAAS5P,MAAM4B,MAAOgO,EAAS5P,MAAME,MAAO0P,EAAS5P,MAAMwE,SAAUoL,EAAS5P,MAAMyE,UAEpHtG,OAAO0B,SAAS4O,aAAa,YAAamB,EAAS5P,MAAMsE,cACzDnG,OAAO0B,SAAS4O,aAAa,UAAWmB,EAAS5P,MAAM6D,cAEvDuI,EAAA,EAAWpM,MAAQ4P,EAAS5P,MAE5B7B,OAAOoP,QAAQ5L,QAAQyK,EAAA,EAAWxI,kBAAkBwI,EAAA,EAAWpM,QAC/D7B,OAAOoP,QAAQuB,kBACf3Q,OAAOoP,QAAQwB,iBAEf5Q,OAAO2G,GAAGmK,uBACVzC,EAAA,EAAKvF,SAAS,IAEd9N,OAAOiH,KAAKwP,GAAU9Q,QAAQ,SAAC+B,GAC3B,IAAMrC,EAAIoR,EAAS/O,GACF,iBAANrC,EACN4N,EAAA,EAAmBvL,GAAKrC,EAEnBqC,EAAE2C,cAAc8L,SAAS,YAAkC,UAApBzO,EAAE2C,gBACvB,aAApB3C,EAAE2C,cACFrK,OAAOiH,KAAMgM,EAAA,EAAmBvL,IAAI/B,QAAQ,SAACkR,GACxC5D,EAAA,EAAmBvL,GAAGmP,GAAQnR,SAAYL,EAAUwR,GAAQnR,WAIhEuN,EAAA,EAAmBvL,GAAKuO,EAAA,QAAS,EAAOhD,EAAA,EAAmBvL,GAAIrC,MAK5E4N,EAAA,EAAWnN,yBAAyBgR,KAAK,WACjCR,IAASI,GACTT,EAAE,cAAcC,SAASA,SAAS9F,SAAS,UACL,IAAlC6C,EAAA,EAAWzH,YAAY3L,QACvBoW,EAAE,cAAcC,SAASA,SAASjG,YAAY,UAElDgD,EAAA,EAAWxH,eAAe1L,KAAK4W,IAEzBL,GAASI,IACfT,EAAE,cAAcC,SAASA,SAAS9F,SAAS,UACF,IAArC6C,EAAA,EAAWxH,eAAe5L,QAC1BoW,EAAE,cAAcC,SAASA,SAASjG,YAAY,UAElDgD,EAAA,EAAWzH,YAAYzL,KAAK4W,IAGhC3D,EAAK+C,2BAIbA,sBAAuB,WACf/Q,OAAO0B,SAASqQ,wBAChBC,aAAaC,QAAQ,4BAA6BC,KAAKC,UAAUnE,EAAKgD,uBAI9EoB,qBAAsB,WAClBpE,EAAKxK,SACDC,MAAOwK,EAAA,EAAWpM,MAAM8B,cACxB5B,MAAOkM,EAAA,EAAWpM,MAAM+B,gBACzB,GAAO,GAAO,IAGrB6M,2BAA4B,SAACrB,GACzB,IAAM9P,EAAIgK,KAAK+I,MAAsB,IAAhB/I,KAAKgJ,UAC1BlD,EAAQmD,aAAaC,WAAalT,EAClC8P,EAAQmD,aAAaE,kBAAoBnT,GAG7CoT,oBAAqB,SAACtD,GAElBA,EAAQvD,GAAG,cAAe,SAACrO,GACnBwC,OAAO0B,SAASC,UAAU,YAAc,UAAWnE,GAAwB,IAAnBA,EAAEuE,MAAMlH,QAChEuU,EAAQuD,eAER,UAAWnV,GAAwB,IAAnBA,EAAEiG,MAAM5I,QACxBuU,EAAQnL,aAKhBmL,EAAQvD,GAAG,UAAW,WAClBoC,EAAA,EAAWpM,MAAQoM,EAAA,EAAWrI,aAAawJ,EAAQsB,gBACnD1C,EAAK+C,0BAIT,IAAI6B,EAAsC,KAC1CxD,EAAQvD,GAAG,QAAS,SAAC9N,GACjB6U,EAAwB7U,IAI5BkT,EAAElU,UAAU8O,GAAG,QAAS,SAACvD,GACL,WAAZA,EAAIA,KAA8C,OAA1BsK,GACpB3B,EAAEjD,EAAKtD,WAAWmI,IAAKD,EAA8B7U,MAAMD,QAAQjD,OAAS,IACvE,UAAW+X,GAAyE,IAA/CA,EAA8B7Q,MAAMlH,QACtE,UAAW+X,GAAyE,IAA/CA,EAA8BnP,MAAM5I,SAChC,IAAzCoW,EAAE,UAAU6B,QAAQ,UAAUjY,QAC9BuU,EAAQ2D,mBAQ5B9B,EAAElU,UAAU8O,GAAG,UAAW,SAACtP,GACM,MAAxBA,EAAE+L,IAAIjD,eAAyB9I,EAAEyW,SAAqC,MAAxBzW,EAAE+L,IAAIjD,eAAyB9I,EAAEyW,SAAWzW,EAAE0W,SAC7FjF,EAAKwD,OAEwB,MAAxBjV,EAAE+L,IAAIjD,eAAyB9I,EAAEyW,SACtChF,EAAKsD,SAKbL,EAAElU,UAAU8O,GAAG,QAAS,SAACtP,GAC0B,IAA3C0U,EAAEjD,EAAKtD,WAAWmI,IAAItW,EAAEuB,QAAQjD,SAChC+X,EAAwB,UAOxCrP,EAAA,ICjbA,oBAAA2P,KA2EA,OAnEkBA,EAAAnB,qBAAd,WACI,IACI,IAAMhO,EAAI,mBAGV,OAFAiO,aAAaC,QAAQlO,EAAGA,GACxBiO,aAAamB,WAAWpP,IACjB,EAEX,MAAOxH,GACH,OAAO,IAID2W,EAAAE,aAAd,WACQF,EAASnB,wBACTC,aAAaC,QAAQ,2BAA4BC,KAAKC,UAAUe,EAASG,WAInEH,EAAAI,aAAd,WACQJ,EAASnB,yBACTmB,EAASG,QAAUnB,KAAKqB,MAAMvB,aAAawB,QAAQ,8BAE9B,OAArBN,EAASG,UACTH,EAASG,YAEbH,EAASO,UAGCP,EAAAO,OAAd,WACIzT,OAAOoP,QAAQsE,YAAYjQ,OAAQkQ,QAAST,EAASvR,UAAU,kBAC/D3B,OAAOoP,QAAQsE,YAAY3R,OAAQ6R,QAASzQ,GAAI+P,EAASvR,UAAU,iBAC/DuR,EAASvR,UAAU,WACnB3B,OAAOoP,QAAQsE,YACXjF,cACIpK,UACIwP,gBAAiB7T,OAAOuD,KAAK4K,sBAMzCnO,OAAOoP,QAAQsE,YAAYjF,cAAepK,SAAUrE,OAAOuD,KAAK+K,WAAWG,aAAapK,aAIlF6O,EAAA5C,aAAd,SAA2BwD,EAAgBvU,GACvC2T,EAASG,QAAQS,GAAUvU,EAC3B2T,EAASE,eACTF,EAASO,UAGCP,EAAAvR,UAAd,SAAwBmS,GACpB,OAAIA,KAAUZ,EAASG,QACZH,EAASG,QAAQS,GAErBZ,EAASa,SAASD,IAGfZ,EAAAc,eAAd,WACId,EAASG,WACTH,EAASE,eACTF,EAASO,SAGT,IAAMxD,EAAIhC,EAAA,EAAWpM,MAAMoS,0BAA0Bf,EAASa,SAASG,UAAWhB,EAASa,SAASI,SACpGnU,OAAOuD,KAAKC,QAAQyK,EAAA,EAAW7J,aAAa6L,KAxExBiD,EAAAa,UACpBK,aAAa,EACbF,WAAW,EACXC,SAAS,GAEEjB,EAAAG,WAqEnBH,EA3EA,gzCCOMmB,EAA2B,SAAC1K,EACA2K,EACAhO,GAC9B+H,EAAA,EAAKxE,cAAc,SAACpC,EAAQ8M,GACpB9M,EAAOC,MAAM,QAEb,IAAM8M,EAASvG,EAAA,EAAW/I,cAAcqP,EAAO,IACzCE,EAAOxG,EAAA,EAAW/I,cAAcqP,EAAO,IAEvCG,EAAIC,EAAeC,oBAAoB,SAACrY,GAC1C,IAAI0E,EAAI1E,EAAElC,KAGV,GAFAqa,EAAEG,WAEQ,IAAN5T,EAAJ,CAcAA,EAAIA,EAEJ,IAAIzD,EAAI,OAAOmM,EAAK,gCAAgC0E,EAAA,EAAKvL,WAAW0R,EAAOvP,YAAW,OAAOoJ,EAAA,EAAKvL,WAAW2R,EAAKxP,YAE9GhE,EAAE6T,aACFtX,EAAOmM,EAAK,SAASsE,EAAA,EAAWpJ,cAAc2P,GAAO,OACrDhX,GAAQyQ,EAAA,EAAWpJ,cAAc4P,GAAK,KAAKxT,EAAE8T,SACzCzO,IACA9I,GAAK,yBAAyByD,EAAE+T,MAEpCxX,GAAK,mBAELA,EAAI6Q,EAAA,EAAKvL,WAAWtF,GACpByD,EAAEgU,KAAKtU,QAAQ,SAACN,GACZ7C,GAAQ6Q,EAAA,EAAKvL,WAAWmL,EAAA,EAAWpJ,cAAcxE,IAAG,aAExD7C,EAAIA,EAAE2C,MAAM,GAAI,GAChB3C,EAAI,OAAOmM,EAAK,YAAYnM,GAGhC6Q,EAAA,EAAKvF,SAAStL,QAjCNmM,EAAMwH,SAAS,YACf9C,EAAA,EAAK3E,gBAAgB,iBAAkB,sPAKlCC,EAAMwH,SAAS,YACpB9C,EAAA,EAAK3E,gBAAgB,qBAAsB,iJA4BvDgL,EAAEQ,MACErX,KAAMyW,EACNa,MAAOX,EAAQC,GACfW,qBAAqB,EACrBvT,MAAO7B,OAAOuD,KAAK0K,WAAW7J,kBAGtCuF,EAAO,OACF7F,MAAO,aAAcjG,KAAM,OAAQ8M,eAAgB3K,OAAOuD,KAAKkM,uBAC/D3L,MAAO,WAAYjG,KAAM,OAAQ8M,eAAgB3K,OAAOuD,KAAKkM,yBAIpE4F,EAAyB,SAAOC,GAA0B,OAAAC,OAhFhE9W,OAgFgE,0DAK5D,GAJIwC,EAAI,KACJuU,EAAK,uBACLC,EAAe,sBAEfH,EAAmB,CACnB,IAAKtV,OAAO0B,SAASC,UAAU,aAC3B,UAEJ6T,EAAK,YAAcA,EACnBC,EAAe,mCAGf,GAAIzV,OAAO0B,SAASC,UAAU,aAC1B,iBAIF+S,EAAIC,EAAeC,oBAAoB,SAACrY,GAC1C0E,EAAI1E,EAAElC,KACNqa,EAAEG,UAEF5G,EAAA,EAAW1M,gBAAgBiU,GAAMvU,EAAE8O,MACnC9B,EAAA,EAAWzN,aAAY,GAAOgV,EAAIC,IAClCxH,EAAA,EAAW3M,MAAMmU,GAAgBxU,EAAEyU,WAEnC,IAAMA,EAAarH,EAAA,EAAKrF,QAAQ/H,EAAEyU,YAC9BlY,EAAI,aAAagY,EAAE,KAAKvU,EAAE8O,MAC9BvS,GAAK,OAELkY,EAAW/U,QAAQ,SAACN,EAAG1F,GACnB6C,GAAK,UAAUyQ,EAAA,EAAWpJ,cAAclK,GAAE,+BAA+B0F,EAAC,OAG9E7C,GAAK,KAAK0U,KAAKC,UAAU9D,EAAA,EAAKpF,OAAOhI,EAAEyU,YAAa,KAAM,GAAE,OAC5DlY,EAAI,OAAOgY,EAAE,YAAYnH,EAAA,EAAKvL,WAAWtF,GAEzC6Q,EAAA,EAAKvF,SAAStL,MAEhB0X,MACErX,KAAM4X,EACNN,QACAtT,MAAO7B,OAAOuD,KAAK0K,WAAW7J,eAC9BgR,qBAAqB,aAI7BO,EAAA,WAKI,SAAAC,EAAY1R,EAAYwQ,EAAWmB,GAAnC,IAAA1T,EAAA2T,KACIA,KAAK5R,GAAKA,EACV4R,KAAKC,OAASrB,EACdoB,KAAKD,SAAWA,EAChBnB,EAAEsB,aAAanY,KAAM,KAAMqG,GAAEA,IAC7BwQ,EAAEuB,UAAY,SAAC1Z,GACX4F,EAAK0T,UAAUxb,KAAMkC,EAAElC,KAAKA,QAYxC,OARWub,EAAA3a,UAAAia,KAAP,SAAY7a,GACRyb,KAAKC,OAAOC,YAAY3b,IAGrBub,EAAA3a,UAAA4Z,QAAP,WACIiB,KAAKC,OAAOG,YACZjI,EAAA,EAAW1H,WAAWuP,KAAK5R,IAAM,MAEzC0R,EAvBA,GAyBAjB,EAAA,oBAAAwB,KAieA,OAheWA,EAAArP,cAAP,WACI,QAEQ/H,KAAM,iBACN0C,aAAa,EACbN,UAAWgV,EAAevP,0BAC1BwP,SAAS,IAGTrX,KAAM,uBACN0C,aAAa,EACbN,UAAW,WACPkU,GAAuB,IAE3Be,SAAS,IAGTrX,KAAM,gCACN0C,aAAa,EACb2U,SAAS,EACTjV,UAAW,WACPkU,GAAuB,MAI3BtW,KAAM,8BACN0C,aAAa,EACbN,UAAW,WACPkT,EAAyB,8BAA+B,sBAAsB,IAElF+B,SAAS,IAGTrX,KAAM,yBACNoC,UAAW,WACPkT,EAAyB,yBAA0B,kBAAkB,IAEzE+B,SAAS,IAGTrX,KAAM,6BACNuH,UAAU,EACV7E,aAAa,EACbN,UAAW,WACPkT,EAAyB,6BAA8B,eAAe,IAE1E+B,SAAS,IAGTrX,KAAM,iBACNuH,UAAU,EACV7E,aAAa,EACbN,UAAWgV,EAAeE,mBAC1BD,SAAS,IAGTrX,KAAM,gCACNuH,UAAU,EACV7E,aAAa,EACbN,UAAWgV,EAAeG,oBAC1BF,SAAS,IAGTrX,KAAM,SACNoC,UAAWgV,EAAepP,qBAC1BtF,aAAa,EACb2U,SAAS,IAGTrX,KAAM,mBACNoC,UAAWgV,EAAeI,4BAC1B9U,aAAa,EACb2U,SAAS,IAGTrX,KAAM,WACN0C,aAAa,EACb2U,SAAS,EACTjV,UAAW,OAGXpC,KAAM,WACN0C,aAAa,EACb2U,SAAS,EACTjV,UAAWgV,EAAeK,kCAG1BzX,KAAM,gBACNqX,SAAS,EACTjV,UAAW,WACP,IAAMuT,EAAIyB,EAAevB,oBAAoB,SAACrY,GAC1CuD,QAAQ2W,IAAIla,EAAElC,MACdqa,EAAEG,YAENH,EAAEQ,MACErX,KAAM,OACN6Y,SAAU,UAOvBP,EAAAQ,kBAAP,eAAAxU,EAAA2T,KACUc,EAA0B,SAACC,EAAkBvC,GAC/CrD,EAAE4F,GAAUhL,GAAG,QAAS,SAACtP,GACrBA,EAAEua,iBACFxC,OAIRsC,EAAwB,mBAAoBT,EAAeY,WAC3DH,EAAwB,sBAAuBT,EAAea,cAC9DJ,EAAwB,sBAAuB,kBAAArB,EAAApT,OAAA,2EACvB,SAAMnG,EAAAO,EAAA,GAAAuV,KAAA9V,EAAAkE,KAAA,0BAApB+W,EAAc7V,EAAAC,OAAoC6V,QACxDlX,OAAOuD,KAAKC,QAAQyT,EAAWE,YAAY,GAAO,GAAM,cAE5DP,EAAwB,wBAAyB,kBAAArB,EAAApT,OAAA,2EACzB,SAAMnG,EAAAO,EAAA,GAAAuV,KAAA9V,EAAAkE,KAAA,0BAApB+W,EAAc7V,EAAAC,OAAoC6V,QACxDlX,OAAOuD,KAAKC,QAAQyT,EAAWG,cAAc,GAAO,GAAM,cAE9DR,EAAwB,sBAAuB,kBAAArB,EAAApT,OAAA,qEACvB,SAAMnG,EAAAO,EAAA,GAAAuV,KAAA9V,EAAAkE,KAAA,0BAANkB,EAAAC,OAAoC6V,QAC7CG,sBAEfT,EAAwB,uBAAwB,kBAAArB,EAAApT,OAAA,qEACxB,SAAMnG,EAAAO,EAAA,GAAAuV,KAAA9V,EAAAkE,KAAA,0BAANkB,EAAAC,OAAoC6V,QAC7CI,uBAEfV,EAAwB,oBAAqB,kBAAArB,EAAApT,OAAA,qEACrB,SAAMnG,EAAAO,EAAA,GAAAuV,KAAA9V,EAAAkE,KAAA,0BAANkB,EAAAC,OAAoC6V,QAC7CK,oBAEfX,EAAwB,aAAc5W,OAAOuD,KAAK+N,MAClDsF,EAAwB,aAAc5W,OAAOuD,KAAKiO,MAClDoF,EAAwB,iCAAkC,kBAAArB,EAAApT,OAAA,8CACtD,SAAO8L,EAAA,EAAWnN,wBAAuB,UAE7C8V,EAAwB,yBAA0B5W,OAAOuD,KAAK6O,sBAC9DwE,EAAwB,oBAAqB,kBAAArB,EAAApT,OAAA,qEAC5B,SAAMnG,EAAAO,EAAA,GAAAuV,KAAA9V,EAAAkE,KAAA,0BAANkB,EAAAC,OAAoC6V,QAC7CM,iCAERZ,EAAwB,oBAAqB,kBAAArB,EAAApT,OAAA,qEAC5B,SAAMnG,EAAAO,EAAA,GAAAuV,KAAA9V,EAAAkE,KAAA,0BAANkB,EAAAC,OAAoC6V,QAC7CO,iCAERb,EAAwB,oBAAqB,kBAAArB,EAAApT,OAAA,qEAC5B,SAAMnG,EAAAO,EAAA,GAAAuV,KAAA9V,EAAAkE,KAAA,0BAANkB,EAAAC,OAAoC6V,QAC7CQ,iCAERd,EAAwB,oBAAqB,kBAAArB,EAAApT,OAAA,qEAC5B,SAAMnG,EAAAO,EAAA,GAAAuV,KAAA9V,EAAAkE,KAAA,0BAANkB,EAAAC,OAAoC6V,QAC7CS,kCAILxB,EAAAY,UAAP,WACI1I,EAAA,EAAK3E,gBAAgB,OAAQ,0RAM1ByM,EAAAa,aAAP,WACI3I,EAAA,EAAKxE,cACD,SAACpC,EAAQuF,GAKL,GAJAvF,EAAOC,MAAM,QACT1H,OAAO0B,SAASC,UAAU,iBAAmBqL,EAAK,IAClDhN,OAAO0B,SAAS4O,aAAa,cAAetD,EAAK,IAEjDhN,OAAO0B,SAASC,UAAU,eAAiBqL,EAAK,GAAI,CACpDhN,OAAO0B,SAAS4O,aAAa,YAAatD,EAAK,IAC/C,IAAIiD,EAAIhC,EAAA,EAAWpM,MACnBoO,EAAIjD,EAAK,GAAKiD,EAAE2H,YAAW,GAAQ3H,EAAE4H,eAErC7X,OAAOuD,KAAKC,QAAQyK,EAAA,EAAW7J,aAAa6L,GAAG,IAEnD,GAAIjQ,OAAO0B,SAASC,UAAU,aAAeqL,EAAK,GAAI,CAClDhN,OAAO0B,SAAS4O,aAAa,UAAWtD,EAAK,IACzCiD,EAAIhC,EAAA,EAAWpM,MACnBoO,EAAIjD,EAAK,GAAKiD,EAAE6H,aAAe7H,EAAE8H,eACjC/X,OAAOuD,KAAKC,QAAQyK,EAAA,EAAW7J,aAAa6L,MAGpD,UAAW,SACNnM,MAAO,gBAAiBgG,aAAc9J,OAAO0B,SAASC,UAAU,eAAgB9D,KAAM,aACtFiG,MAAO,iBAAkBgG,aAAc9J,OAAO0B,SAASC,UAAU,aAAc9D,KAAM,aACrFiG,MAAO,iBAAkBgG,aAAc9J,OAAO0B,SAASC,UAAU,WAAY9D,KAAM,aACrF,OAGJsY,EAAAtF,uBAAP,WACI,IAAK,IAAIlW,EAAI,EAAGA,EAAIsT,EAAA,EAAW1H,WAAW1L,OAAQF,IAAK,CACnD,IAAM0F,EAAI4N,EAAA,EAAW1H,WAAW5L,GAC5B0F,aAAaL,OAAO+N,QACpB1N,EAAE6V,YAGVjI,EAAA,EAAW1H,eAGR4P,EAAAvB,oBAAP,SAA2BqB,GACvB,IAAI+B,EAAY/J,EAAA,EAAW1H,WAAW0R,UAAU,SAAC5X,GAC7C,OAAa,OAANA,QAA2B,IAANA,KAEd,IAAf2X,IACCA,EAAY/J,EAAA,EAAW1H,WAAW1L,QAGtC,IAAM6Z,EAAI,IAAIwD,EAAAjX,EAEd,OADAgN,EAAA,EAAW1H,WAAWyR,GAAatD,EAC5B,IAAIiB,EAAYqC,EAAWtD,EAAGuB,IAGlCE,EAAAvP,0BAAP,eAAAzE,EAAA2T,KACI,OAAO,IAAInZ,QAAc,SAAOC,GAAO,OAAA2Y,EAAApT,OAAA,mFACnC,OAAInC,OAAO0B,SAASC,UAAU,cAC1B,EAAO/E,YAKW,EAAMqR,EAAA,EAAWlN,YAAY,oCAA/CK,EAAAwO,gBAAkBrN,EAAAlB,OAClBD,EAAAyO,OAAQ5B,EAAA,EAAW3M,MAAM4F,cAGvBiR,EAAU,WACZlK,EAAA,EAAW1M,gBAAgB,oBAAsBN,EAAE2O,gBACnD3B,EAAA,EAAWzN,aAAY,GAAO,mBAAoB,kBACjDyN,EAAA,EAAW3M,MAAM4F,cAAuBjG,EAAE4O,OAE3C,IAAMA,EAASxB,EAAA,EAAKrF,QAAQ/H,EAAE4O,QAC1BrS,EAAI,uBAAuBqS,EAAOhV,OACtC2C,GAAK,uBAAuByD,EAAE2O,gBAC9BpS,GAAK,OAELqS,EAAOlP,QAAQ,SAACN,EAAG1F,GACf6C,GAAK,UAAUyQ,EAAA,EAAWpJ,cAAclK,GAAE,eAAe0F,EAAC,OAG9D7C,GAAK,KAAK0U,KAAKC,UAAU9D,EAAA,EAAKpF,OAAOhI,EAAE4O,QAAS,KAAM,GAAE,OAExDrS,EAAI,2DAA2D6Q,EAAA,EAAKvL,WAAWtF,GAC/EA,GAAK,uGAEL6Q,EAAA,EAAKvF,SAAStL,GACdwC,OAAOuD,KAAKmM,gBAGVpN,EAAsB,QA5BxBrB,KA4BI2O,kBAA6B,EAAM3B,EAAA,EAAWlN,YAAY,mBAA5D,YAA8BuB,EAAoD,OAAnDC,EAAAlB,+BAAhC,EAeD8W,KAdMC,EAAIjC,EAAevB,oBAAoB,SAACrY,GAC1C0E,EAAI1E,EAAElC,KACN8d,IACAC,EAAEvD,UACFjY,EAAQL,EAAElC,SAEZ6a,MACErX,KAAM,eACNsX,QACAtT,MAAO7B,OAAOuD,KAAK0K,WAAW7J,eAC9BgR,qBAAqB,gBAS9Be,EAAAK,gCAAP,eAAArU,EAAA2T,KACI,OAAO,IAAInZ,QAAc,SAAOC,GAAO,OAAA2Y,EAAApT,OAAA,6EACnC,OAAKnC,OAAO0B,SAASC,UAAU,cAGzB+S,EAAIyB,EAAevB,oBAAoB,SAACrY,GAC1C0R,EAAA,EAAW1M,gBAAgB4F,SAAW5K,EAAElC,KACxC4T,EAAA,EAAWzN,aAAY,GAAO,aAC9BkU,EAAEG,UACFjY,EAAQL,EAAElC,SAGF,EAAM4T,EAAA,EAAWlN,YAAY,+BAA+B,MATpE,EAAOnE,mBASLyb,EAAMjX,EAAAC,OAEZqT,EAAEQ,MACErX,KAAM,sBACNsX,MAAOmD,EAAA,EAAM9K,6BAA6BS,EAAA,EAAWpM,MAAM0W,oBAAqBF,iBAKrFlC,EAAAtP,qBAAP,eAAA1E,EAAA2T,KACI,OAAO,IAAInZ,QAAc,SAAOC,GAAO,OAAA2Y,EAAApT,OAAA,6EACnC,OAAInC,OAAO0B,SAASC,UAAU,cAC1B,EAAO/E,EAAQuZ,EAAeK,qCAGvB,EAAMvI,EAAA,EAAWlN,YAAY,uBAAuB,kBAAzDyU,EAAKpU,EAAAC,QAELqT,EAAIyB,EAAevB,oBAAoB,SAACrY,GAC1C0R,EAAA,EAAW1M,gBAAgB4F,SAAW5K,EAAElC,KACxC4T,EAAA,EAAWzN,aAAY,GAAO,aAC9BkU,EAAEG,UACFjY,EAAQL,EAAElC,SAEZ6a,MAAMrX,KAAM,qBAAsBsX,MAAOlH,EAAA,EAAWpM,MAAM2W,mBAAoBhD,iBAIjFW,EAAAE,mBAAP,eAAAlU,EAAA2T,KACS9V,OAAO0B,SAASC,UAAU,cAAiB3B,OAAO0B,SAASC,UAAU,YAG1E0M,EAAA,EAAKxE,cAAc,SAAOpC,EAAQ8M,GAAM,OAAAgB,EAAApT,OAAA,mEAChCsF,EAAOC,MAAM,QAEP8M,EAASvG,EAAA,EAAW/I,cAAcqP,EAAO,IACzCE,EAAOxG,EAAA,EAAW/I,cAAcqP,EAAO,IAEzCtT,EAA4B,KAE1BwX,EAAK,WACP,IAAIjb,EAAI,kDACRA,GAAQ6Q,EAAA,EAAKvL,WAAWmL,EAAA,EAAWpJ,cAAc2P,IAAQ,OAAOnG,EAAA,EAAKvL,WAAWmL,EAAA,EAAWpJ,cAAc4P,KAE/F,IAANxT,GAIJA,EAAIA,EAEJzD,EAAI,+CAA+CyQ,EAAA,EAAWpJ,cAAc2P,GAAO,IACnFhX,GAAK,MAAMyQ,EAAA,EAAWpJ,cAAc4P,GAAK,KAAKxT,EAAEyX,QAChDlb,GAAK,4BACLA,EAAI6Q,EAAA,EAAKvL,WAAWtF,GACpByD,EAAE0X,SAAShY,QAAQ,SAACN,GAChB7C,GAAQyQ,EAAA,EAAWpJ,cAAcxE,EAAE6C,MAAK,SAAS+K,EAAA,EAAWpJ,cAAcxE,EAAE8C,IAAG,UAAU9C,EAAEuY,KAAI,OAAOvY,EAAEwY,SAAQ,OAGpHrb,EAAI,8CADJA,EAAIA,EAAEqF,QAGNwL,EAAA,EAAKvF,SAAStL,IAfV6Q,EAAA,EAAKvF,SAAStL,KAkBhBkX,EAAIyB,EAAevB,oBAAoB,SAACrY,GAC1C0E,EAAI1E,EAAElC,KACNoe,IACA/D,EAAEG,aAEJK,MACErX,KAAM,gBACNsX,MAAOX,EAAQC,GACfW,qBAAqB,EACrBvT,MAAO7B,OAAOuD,KAAK0K,WAAW7J,0BAGtC,gCAAiC,OAC5BN,MAAO,cAAejG,KAAM,OAAQ8M,eAAgB3K,OAAOuD,KAAKkM,uBAChE3L,MAAO,YAAajG,KAAM,OAAQ8M,eAAgB3K,OAAOuD,KAAKkM,yBAIpE0G,EAAAG,oBAAP,WACI,IAAItW,OAAO0B,SAASC,UAAU,cAAiB3B,OAAO0B,SAASC,UAAU,WAAzE,CAIA,IAAM+S,EAAIyB,EAAevB,oBAAoB,SAACrY,GAC1C,IAAM0E,EAAe1E,EAAElC,KACvBqa,EAAEG,UAEF,IAAIrX,EAAI,iDAAiDyD,EAAE6X,YAC3Dtb,GAAK,uBACLA,EAAI6Q,EAAA,EAAKvL,WAAWtF,GACpByD,EAAE8X,IAAIpY,QAAQ,SAACN,GAEX7C,GAAQyQ,EAAA,EAAWpJ,cAAc,IAAKmU,EAAA,EAAU3Y,GAAI4Y,WAAU,SAE9Dzb,GAAQyQ,EAAA,EAAWpJ,cAAc,IAAKmU,EAAA,EAAU3Y,GAAI6Y,SAAQ,OAGhE1b,EAAI,8CADJA,EAAIA,EAAEqF,QAGNwL,EAAA,EAAKvF,SAAStL,KAElBkX,EAAEQ,MACErX,KAAM,UACNsX,QACAC,qBAAqB,EACrBvT,MAAO7B,OAAOuD,KAAK0K,WAAW7J,mBAI/B+R,EAAApP,qBAAP,WACI,GAAK/G,OAAO0B,SAASC,UAAU,aAI/B,OAAO,IAAIhF,QAAc,SAACC,GACtB,IAAM8X,EAAIyB,EAAevB,oBAAoB,SAACrY,GAC1C0R,EAAA,EAAW1M,gBAAgBgG,OAAShL,EAAElC,KACtC4T,EAAA,EAAWzN,aAAY,GAAO,WAC9BkU,EAAEG,UACFjY,MAEJ8X,EAAEQ,MACErX,KAAM,gBACNsX,QACAC,qBAAqB,EACrBvT,MAAO7B,OAAOuD,KAAK0K,WAAW7J,oBAKnC+R,EAAAI,4BAAP,WACI,GAAKvW,OAAO0B,SAASC,UAAU,aAA/B,CAIA,IAAM+S,EAAIyB,EAAevB,oBAAoB,SAACrY,GAC1C,IAAM0E,EAA2B1E,EAAElC,KAGnC,GAFAqa,EAAEG,WAEQ,IAAN5T,EAKA,OAJAgN,EAAA,EAAW1M,gBAAgBgG,QAAS,EACpC0G,EAAA,EAAWzN,aAAY,GAAO,gBAC9B6N,EAAA,EAAKvF,SAAS,wGAKlB,IAAItL,EAAI,2BACRA,EAAI6Q,EAAA,EAAKvL,WAAWtF,GACnByD,EAAYN,QAAQ,SAACN,GAClB7C,GAAQyQ,EAAA,EAAWpJ,cAAcxE,EAAE6D,IAAG,OAG1C1G,EAAI,oCADJA,EAAIA,EAAE2C,MAAM,GAAI,IAGhBkO,EAAA,EAAKvF,SAAStL,KAElBkX,EAAEQ,MACErX,KAAM,kBACNsX,QACAC,qBAAqB,EACrBvT,MAAO7B,OAAOuD,KAAK0K,WAAW7J,mBAI/B+R,EAAArF,qBAAP,WACI,IAAMqI,EAAOlI,EAAE,oBACfkI,EAAKC,QACL,IAAM3X,EAAczB,OAAO0B,SAASC,UAAU,aACxC2E,EAAWtG,OAAO0B,SAASC,UAAU,WAErC0X,EAAgB,SAACC,GACnBH,EAAK7N,OAAO2F,EAAE,OAAQ7G,MAAO,WAAYmP,KAAM,MAC1C3Q,KAAK0Q,EAAIva,MAAM8M,GAAG,QAAS,SAACtP,GACzBA,EAAEua,iBACFwC,EAAInY,gBAINgV,EAAerP,gBACvBnG,QAAQ,SAAC2Y,GACFA,EAAIlD,UAGJ,gBAAiBkD,GAAOA,EAAI7X,cAAgBA,KAAkB,gBAAiB6X,KAC3E,aAAcA,GAAOA,EAAIhT,WAAaA,IAAe,aAAcgT,GACpED,EAAcC,KAGZ,aAAcA,GAAOA,EAAIhT,WAAaA,IAAe,aAAcgT,KACpE,gBAAiBA,GAAOA,EAAI7X,cAAgBA,IAAkB,gBAAiB6X,GAChFD,EAAcC,OAKlCnD,EAjeA,oxCCpIAnW,OAAOuD,KAAOA,EACdvD,OAAOoP,QAAU,IAAIoK,EAAA,QAAQjW,EAAKmH,aAAenH,EAAK+K,YACtDtO,OAAO0B,SAAWA,EAClB1B,OAAO2G,GAAK8S,EAGZC,EAAA,OAAa,6EAA6EC,UAC1F3Z,OAAO4Z,MAAQF,EAEfnW,EAAKmP,oBAAoB1S,OAAOoP,SAEhC1N,EAAS4R,eAET,IAAIuG,GAAc,EAClB,GAAInY,EAASqQ,uBAAwB,CACjC,IAAM9V,EAAY+V,aAAawB,QAAQ,6BACvC,GAAU,OAANvX,EAAY,CACZ,IAAM6d,EAAiB5H,KAAKqB,MAAMtX,GAC9B,UAAW6d,GAAa,UAAWA,EAAUjY,QAC7CgY,GAAc,EACdtW,EAAKgO,YAAW,EAAOuI,KAI/BD,GACCE,OA7CLtb,OA6CK,2EACuB,SAAMzC,EAAAO,EAAA,GAAAuV,KAAA9V,EAAAkE,KAAA,0BAApB+W,EAAc7V,EAAAC,OAAoC6V,QACxD3T,EAAKC,QAAQyT,EAAWE,YAAY,GAAO,GAAM,YAIzDnX,OAAO2G,GAAGgQ,oDC1CV,IAAAqC,EAAA,WAKI,SAAAA,EAAY9V,EAA+BC,EAAaC,+BAAA,IAAAA,MAAA,GACjC,iBAATF,IACNC,EAAKD,EAAKC,GACVC,EAASF,EAAKE,OACdF,EAAOA,EAAKA,MAGhB4S,KAAK5S,KAAOlI,OAAO6M,OAAO3E,GAC1B4S,KAAK3S,GAAKnI,OAAO6M,OAAO1E,GACxB2S,KAAK1S,OAASpI,OAAO6M,OAAOiE,WAAW1I,IAEnC4W,IAAehB,GACfhe,OAAO6M,OAAOiO,MAuB1B,OAnBIkD,EAAA/d,UAAAge,QAAA,WACI,OAAOnD,KAAK5S,MAGhB8V,EAAA/d,UAAAie,MAAA,WACI,OAAOpD,KAAK3S,IAGhB6V,EAAA/d,UAAAgf,UAAA,WACI,OAAOnE,KAAK1S,QAGhB4V,EAAA/d,UAAAif,QAAA,WACI,OAAQhX,KAAM4S,KAAK5S,KAAMC,GAAI2S,KAAK3S,GAAIC,OAAQ0S,KAAK1S,SAGvD4V,EAAA/d,UAAAoJ,SAAA,SAASC,GACL,OAAO,IAAI0U,EAAUlD,KAAKmD,UAAWnD,KAAKoD,QAAS5U,IAE3D0U,EAxCA,yCCEA,IAAAmB,EAAA,WAKI,SAAAA,EAAYjW,EAASJ,EAAmByG,+BAAnB,IAAAzG,MAAA,WAAmB,IAAAyG,MAAA,MAAxC,IAAApI,EAAA2T,KAEQA,KAAKhS,MADK,OAAVA,EACaI,EAAGe,WAGHnB,EAGjBgS,KAAKsE,cACc,OAAf7P,GAA6C,iBAAfA,GAC9BvP,OAAOiH,KAAKsI,GAAY5J,QAAQ,SAAC2H,GAC7BnG,EAAKiY,WAAW9R,GAAOtN,OAAO6M,OAAO0C,EAAWjC,MAIxDwN,KAAKsE,WAAapf,OAAO6M,OAAOiO,KAAKsE,YACrCtE,KAAKhS,MAAQ9I,OAAO6M,OAAOiO,KAAKhS,OAChCgS,KAAK5R,GAAKlJ,OAAO6M,OAAO3D,GAEpB8V,IAAeG,GACfnf,OAAO6M,OAAOiO,MAgD1B,OA5CIqE,EAAAlf,UAAAif,QAAA,eAAA/X,EAAA2T,KACUuE,GAA4BnW,GAAI4R,KAAK5R,GAAIJ,MAAOgS,KAAKhS,OAO3D,OANA9I,OAAOiH,KAAK6T,KAAKsE,YAAYzZ,QAAQ,SAAC2H,GAC5BA,KAAO+R,IACTA,EAAS/R,GAAOnG,EAAKiY,WAAW9R,MAIjC+R,GAGXF,EAAAlf,UAAAqK,MAAA,WACI,OAAOwQ,KAAK5R,IAGhBiW,EAAAlf,UAAA+J,SAAA,WACI,OAAO8Q,KAAKhS,OAGhBqW,EAAAlf,UAAA+K,aAAA,SAAasU,GACT,OAAIA,KAAaxE,KAAKsE,WACXtE,KAAKsE,WAAWE,GAGpB,MAGXH,EAAAlf,UAAAsf,iBAAA,WACI,OAAOzE,KAAKsE,YAGhBD,EAAAlf,UAAAgJ,SAAA,SAASH,EAAmByG,QAAnB,IAAAzG,MAAA,WAAmB,IAAAyG,MAAA,MACV,OAAVzG,IACAA,EAAQgS,KAAK9Q,YAIjB,IAAMoV,EAAapf,OAAOwf,UAAW1E,KAAKsE,YAK1C,OAJApf,OAAOiH,KAAKsI,GAAY5J,QAAQ,SAAC2H,GAC7B8R,EAAW9R,GAAOiC,EAAWjC,KAG1B,IAAI6R,EAAUrE,KAAKxQ,QAASxB,EAAOsW,IAElDD,EAzEA,kECDMM,EAAsB,SAACpgB,GACzB,OAAOW,OAAOiH,KAAK5H,GACd8K,OAAO,SAACmD,GAAQ,QAAG,QAAS,MAAO6I,SAAS7I,KAC5Cc,OAAO,SAACsR,EAAUpS,GAEf,OADAoS,EAAIpS,GAAOjO,EAAKiO,GACToS,QAIbC,EAA2B,SAAC5Y,EAAY6Y,GAC1C,QAD0C,IAAAA,UAC5B,OAAV7Y,EACA,OAAO,EAGX,IAAI8Y,EAA4B7f,OAAA8f,EAAA,KAAA9f,GAEhC,MAAqB,iBAAV+G,IACPA,EAAMpB,QAAQ,SAACoa,GACX,IAAI3X,EAAS,EACTF,EAAO,EACPC,EAAK,EAEL,WAAY4X,IACZ3X,EAAS0I,WAAWiP,EAAK3X,SAEzB,SAAU2X,IACV7X,EAAO0X,EAAQG,EAAK7X,OAEpB,OAAQ6X,IACR5X,EAAKyX,EAAQG,EAAK5X,KAGtB0X,EAAWA,EAAS9f,KAAK,IAAIigB,EAAA,EAAU9X,EAAMC,EAAIC,MAOlDyX,IAGLI,EAA2B,SAACxX,GAC9B,GAAc,OAAVA,EACA,OAAO,EAGX,IAAIqC,EAA4B9K,OAAA8f,EAAA,KAAA9f,GAC1B4f,KAEN,GAAqB,iBAAVnX,EAEP,IAAK,IAAI9I,EAAI,EAAGA,EAAI2O,KAAK4R,MAAMzX,GAAQ9I,IACnCmL,EAAWA,EAASG,IAAItL,EAAG,IAAIwgB,EAAA,EAAUxgB,IACzCigB,EAAQjgB,GAAKA,MAGhB,IAAqB,iBAAV8I,EA8BZ,OAAO,EA7BP,IAAI2X,EAAU,EACd3X,EAAM9C,QAAQ,SAACnB,GACX,IAAM0E,EAAKkX,IACPtX,EAAQ,KACRyG,EAAa,KAEb,UAAW/K,IACXsE,EAAQtE,EAAEsE,OAEV,OAAQtE,GACRob,EAAQpb,EAAE0E,IAAMA,EACZ,UAAW1E,GAAKA,EAAEsE,QAAUtE,EAAE0E,GAAGe,aACjCnB,EAAQI,EAAGe,aAIf2V,EAAQ1W,GAAMA,EAGdqG,EAAakQ,EADb,eAAgBjb,EACiBA,EAAE4a,WAGF5a,GAGrCsG,EAAWA,EAASG,IAAI/B,EAAI,IAAIiX,EAAA,EAAUjX,EAAIJ,EAAOyG,MAO7D,OAAQ9G,MAAOzI,OAAO6M,OAAO/B,GAAWzD,IAAKuY,IAGjDpK,EAAA,WAQI,SAAAA,EAAY/M,EACA1B,EACAsE,EAAkBC,+BADlB,IAAAvE,MAAA,WACA,IAAAsE,OAAA,QAAkB,IAAAC,OAAA,GAC1BwP,KAAKzP,SAAWrL,OAAO6M,OAAOxB,GAC9ByP,KAAKxP,SAAWtL,OAAO6M,OAAOvB,GAC9B,IAAIsU,KAGJ,GAAqB,iBAAVnX,IAAwC,iBAAVA,GAAwBA,aAAiBqX,EAAA,MAQ7E,MAAIrX,aAAiBqX,EAAA,MAItB,MAAM,IAAIvc,MAAM,0DAHhBuX,KAAKrS,MAAQA,MATyE,CACtF,IAAMjE,EAAIyb,EAAyBxX,GACnC,GAAiB,iBAANjE,EACP,MAAM,IAAIjB,MAAM,+BAEpBuX,KAAKrS,MAAQjE,EAAEiE,MACfmX,EAAUpb,EAAE6C,IAYhB,GAJAyT,KAAKrS,MAAQzI,OAAO6M,OAAOiO,KAAKrS,OAChCqS,KAAKuF,SAAWrgB,OAAO6M,OAAOiO,KAAKrS,MAAM6X,MAG3B,OAAVvZ,GAAmC,iBAAVA,GAAwBA,aAAiB+Y,EAAA,KAO7D/Y,aAAiB+Y,EAAA,KACtBhF,KAAK/T,MAAQA,EAGb+T,KAAK/T,MAAQ/G,OAAA8f,EAAA,KAAA9f,OAX4D,CACzE,IAAMuB,EAAIoe,EAAyB5Y,EAAO6Y,GAC1C,GAAiB,iBAANre,EACP,MAAM,IAAIgC,MAAM,8BAEpBuX,KAAK/T,MAAQxF,EAQjBuZ,KAAK/T,MAAQ/G,OAAO6M,OAAOiO,KAAK/T,OAChC+T,KAAKyF,SAAWvgB,OAAO6M,OAAOiO,KAAK/T,MAAMuZ,MAErCtB,IAAexJ,GACfxV,OAAO6M,OAAOiO,MAmY1B,OA/XItF,EAAAvV,UAAAugB,aAAA,SAAaC,QAAA,IAAAA,MAAA,GACT,IAAMb,KACFc,EAAYD,EACZ3V,EAA4B9K,OAAA8f,EAAA,KAAA9f,GAChC8a,KAAKrS,MAAM9C,QAAQ,SAACN,GAChB,IAAIyD,EAAQzD,EAAE2E,WACV3E,EAAE2E,aAAe3E,EAAEiF,QAAQL,aAC3BnB,EAAQ4X,EAAUzW,YAGtBa,EAAWA,EAASG,IAAIyV,EAAW,IAAIP,EAAA,EAAUO,EAAW5X,EAAOzD,EAAEka,qBACrEK,EAAQva,EAAEiF,SAAWoW,MAGzB,IAAIb,EAA4B7f,OAAA8f,EAAA,KAAA9f,GAKhC,OAJA8a,KAAK/T,MAAMpB,QAAQ,SAACN,GAChBwa,EAAWA,EAAS9f,KAAK,IAAIigB,EAAA,EAAUJ,EAAQva,EAAE4Y,WAAY2B,EAAQva,EAAE6Y,SAAU7Y,EAAE4Z,gBAGhF,IAAIzJ,EAAW1K,EAAU+U,EAAU/E,KAAKzP,SAAUyP,KAAKxP,WAGlEkK,EAAAvV,UAAA6J,QAAA,SAAQZ,EAAYyX,GAChB,YADgB,IAAAA,OAAA,KACZzX,GAAM4R,KAAKuF,YAGXM,EACO7F,KAAKrS,MAAMpE,IAAI6E,GAEnB4R,KAAKrS,MAAMpE,IAAI6E,GAAIgW,YAG9B1J,EAAAvV,UAAA4I,QAAA,SAAQxJ,QAAA,IAAAA,MAAA,MACS,OAATA,IACAA,MAGJ,IAAM6J,EAAK4R,KAAKuF,SACV,UAAWhhB,IACbA,EAAKyJ,MAAQI,EAAGe,YAGpB,IAAMsF,EAAakQ,EAAoBpgB,GAEvC,OAAO,IAAImW,EAAWsF,KAAKrS,MAAMwC,IAAI/B,EAAI,IAAIiX,EAAA,EAAUjX,EAAI7J,EAAKyJ,MAAOyG,IACnEuL,KAAK/T,MAAO+T,KAAKzP,SAAUyP,KAAKxP,WAGxCkK,EAAAvV,UAAAgJ,SAAA,SAASC,EAAY7J,GACjB,IAAKyb,KAAKrS,MAAMoP,IAAI3O,GAChB,OAAO,EAGX,IAAMqG,EAAakQ,EAAoBpgB,GAIvC,MAHM,UAAWA,IACbA,EAAKyJ,MAASgS,KAAKhR,QAAQZ,GAAI,GAAoBc,YAEhD,IAAIwL,EAAWsF,KAAKrS,MAAMwC,IAAI/B,EAAK4R,KAAKhR,QAAQZ,GAAI,GAAoBD,SAAS5J,EAAKyJ,MAAOyG,IAChGuL,KAAK/T,MAAO+T,KAAKzP,SAAUyP,KAAKxP,WAGxCkK,EAAAvV,UAAA0J,WAAA,SAAWT,GAEP,KAAMA,GAAM,GAAKA,EAAK4R,KAAKuF,UACvB,OAAO,EAGX,IAAMT,KAGFc,EAAY,EA8BhB,OAAO,IAAIlL,EA7BuBsF,KAAKrS,MAClC0B,OAAO,SAAC3F,GAQL,OAPIA,EAAE8F,UAAYpB,EACd0W,EAAQpb,EAAE8F,UAAY,EAGtBsV,EAAQpb,EAAE8F,SAAWoW,IAGlBlc,EAAE8F,UAAYpB,IAExB7B,IAAI,SAAC+C,GACF,IAAItB,EAAQsB,EAAKJ,WAKjB,OAJII,EAAKE,QAAQL,aAAenB,IAC5BA,EAAQ8W,EAAQxV,EAAKE,SAASL,YAG3B,IAAIkW,EAAA,EAAUP,EAAQxV,EAAKE,SAAUxB,EAAOsB,EAAKmV,sBAI9BzE,KAAK/T,MAClCoD,OAAO,SAAC4V,GACL,QAASA,EAAK9B,YAAc/U,GAAM6W,EAAK7B,UAAYhV,KAEtD7B,IAAI,SAAC0Y,GACF,OAAO,IAAIC,EAAA,EAAUJ,EAAQG,EAAK9B,WAAY2B,EAAQG,EAAK7B,SAAU6B,EAAKd,eAGxCnE,KAAKzP,SAAUyP,KAAKxP,WAGlEkK,EAAAvV,UAAAgI,QAAA,SAAQC,EAAcC,EAAYC,QAAA,IAAAA,MAAA,GACzB0S,KAAKxP,WACNlD,EAAS,GAGb,IAAMyX,EAAW/E,KAAK/T,MAAMhH,KAAK,IAAIigB,EAAA,EAAU9X,EAAMC,EAAI2I,WAAW1I,KACpE,OAAO,IAAIoN,EAAWsF,KAAKrS,MAAOoX,EAAU/E,KAAKzP,SAAUyP,KAAKxP,WAGpEkK,EAAAvV,UAAAyJ,WAAA,SAAWxB,EAAcC,EAAYC,EAAoBwY,GAAzD,IAAAzZ,EAAA2T,UAAqC,IAAA1S,MAAA,WAAoB,IAAAwY,OAAA,GACtC,OAAXxY,IACAA,EAAS0I,WAAW1I,IAGxB,IAAIyY,GAAe,EACbhB,EAA4B/E,KAAK/T,MAAMoD,OAAO,SAAC4V,GAEjD,SAAIc,GAAiBD,MAKjBb,EAAK9B,YAAc/V,GAAQ6X,EAAK7B,UAAY/V,GAAkB,OAAXC,GAAmB2X,EAAKd,cAAgB7W,OAM1FjB,EAAKkE,UACF0U,EAAK9B,YAAc9V,GAAM4X,EAAK7B,UAAYhW,GAAoB,OAAXE,GAAmB2X,EAAKd,cAAgB7W,KAN/FyY,GAAe,GACR,MAcf,OAAO,IAAIrL,EAAWsF,KAAKrS,MAAOoX,EAAU/E,KAAKzP,SAAUyP,KAAKxP,WAGpEkK,EAAAvV,UAAAoJ,SAAA,SAASnB,EAAcC,EAAYmB,EAAgBC,GAG/C,QAH+C,IAAAA,MAAA,OAG1CuR,KAAKxP,SACN,OAAO,EAGX,IAAIwV,GAAa,EAEC,OAAdvX,IACAA,EAAYuH,WAAWvH,IAG3B,IAAIsW,EAAW/E,KAAK/T,MAWpB,OAVA+T,KAAK/T,MAAMpB,QAAQ,SAACoa,EAAMgB,GAClBD,GAGAf,EAAK9B,YAAc/V,GAAQ6X,EAAK7B,UAAY/V,GAAqB,OAAdoB,GAAsBwW,EAAKd,cAAgB1V,IAC9FsW,EAAWA,EAAS5U,IAAI8V,EAAOhB,EAAK1W,SAASyH,WAAWxH,KACxDwX,GAAa,KAId,IAAItL,EAAWsF,KAAKrS,MAAOoX,EAAU/E,KAAKzP,SAAUyP,KAAKxP,WAGpEkK,EAAAvV,UAAA0I,YAAA,SAAYgY,GACR,YADQ,IAAAA,OAAA,GACJA,EACO7F,KAAKrS,MAAMuY,UAEflG,KAAKrS,MAAMpB,IAAI,SAAC+C,GACnB,OAAOA,EAAK8U,YACb8B,WAGPxL,EAAAvV,UAAA8K,2BAAA,WACI,OAAO+P,KAAKrS,OAGhB+M,EAAAvV,UAAAiL,2BAAA,WACI,OAAO4P,KAAK/T,OAGhByO,EAAAvV,UAAA2I,YAAA,SAAY+X,GACR,YADQ,IAAAA,OAAA,GACJA,EACO7F,KAAK/T,MAAMia,UAEflG,KAAK/T,MAAMM,IAAI,SAAC0Y,GACnB,OAAOA,EAAKb,YACb8B,WAGPxL,EAAAvV,UAAA6G,iBAAA,WACI,OAAOgU,KAAKuF,UAGhB7K,EAAAvV,UAAA+G,iBAAA,WACI,OAAO8T,KAAKyF,UAGhB/K,EAAAvV,UAAAud,iBAAA,WACI,IAAM9K,KAUN,OATAoI,KAAK/T,MAAMpB,QAAQ,SAACoa,GACZA,EAAK9B,YAAavL,EAClBA,EAAQqN,EAAK9B,aAGbvL,EAAQqN,EAAK9B,WAAa,IAI3BvL,GAGX8C,EAAAvV,UAAA6c,WAAA,WACI,OAAO,IAAItH,EAAWsF,KAAKrS,MAAOqS,KAAK/T,MAAMM,IAAI,SAAC0Y,GAC9C,OAAOA,EAAK1W,SAAS,KACFyR,KAAKzP,UAAU,IAG1CmK,EAAAvV,UAAA8c,aAAA,WACI,OAAO,IAAIvH,EAAWsF,KAAKrS,MAAOqS,KAAK/T,MAAMM,IAAI,SAAC0Y,GAC9C,OAAOA,EAAK1W,SAAS,KACFyR,KAAKzP,UAAU,IAG1CmK,EAAAvV,UAAA2c,WAAA,SAAWqE,GACP,QADO,IAAAA,OAAA,IACFA,EACD,OAAO,IAAIzL,EAAWsF,KAAKrS,MAAOqS,KAAK/T,OAAO,EAAM+T,KAAKxP,UAG7D,IAAIuU,EAAW/E,KAAK/T,MAKpB,OAJA+T,KAAK/T,MAAMpB,QAAQ,SAACoa,GAChBF,EAAWA,EAAS9f,KAAK,IAAIigB,EAAA,EAAUD,EAAK7B,QAAS6B,EAAK9B,UAAW8B,EAAKd,gBAGvE,IAAIzJ,EAAWsF,KAAKrS,MAAOoX,GAAU,EAAM/E,KAAKxP,WAG3DkK,EAAAvV,UAAA4c,aAAA,WACI,IAAIgD,EAA4B7f,OAAA8f,EAAA,KAAA9f,GAC1BkhB,KAeN,OAbApG,KAAK/T,MAAMpB,QAAQ,SAACoa,GAChB,IAAI7X,EAAO6X,EAAK9B,UACZ9V,EAAK4X,EAAK7B,QACV/V,EAAKD,IACLA,EAAOC,EACPA,EAAK4X,EAAK9B,WAEL/V,EAAI,IAAIC,KAAQ+Y,IACrBA,EAAchZ,EAAI,IAAIC,GAAQ,KAC9B0X,EAAWA,EAAS9f,KAAK,IAAIigB,EAAA,EAAU9X,EAAMC,EAAI4X,EAAKd,iBAIvD,IAAIzJ,EAAWsF,KAAKrS,MAAOoX,GAAU,EAAO/E,KAAKxP,WAG5DkK,EAAAvV,UAAAgZ,0BAAA,SAA0B5N,EAAmBC,GACzC,IAAI2J,EAAgB6F,KAepB,OAdIzP,IAAayP,KAAKzP,SAClB4J,EAAI6F,KAAK8B,cAEHvR,GAAYyP,KAAKzP,WACvB4J,EAAI6F,KAAK+B,gBAGTvR,IAAawP,KAAKxP,SAClB2J,EAAI6F,KAAKgC,cAEHxR,GAAYwP,KAAKxP,WACvB2J,EAAI6F,KAAKiC,gBAGN9H,GAGXO,EAAAvV,UAAAkhB,iBAAA,SAAiBjY,GAAjB,IAAA/B,EAAA2T,KACUsG,KAUN,OATAtG,KAAK/T,MAAMpB,QAAQ,SAACoa,GACZA,EAAK9B,YAAc/U,EACnBkY,EAAIrhB,KAAKggB,EAAK7B,SAER/W,EAAKkE,UAAY0U,EAAK7B,UAAYhV,GACxCkY,EAAIrhB,KAAKggB,EAAK9B,aAIfmD,GAGX5L,EAAAvV,UAAAsd,iBAAA,eAAApW,EAAA2T,KACUsG,KAKN,OAJAtG,KAAKrS,MAAM9C,QAAQ,SAACnB,GAChB4c,EAAI5c,EAAE8F,SAAWnD,EAAKga,iBAAiB3c,EAAE8F,WAGtC8W,GAGX5L,EAAAvV,UAAAohB,YAAA,SAAYC,EAAaC,GACrB,OAAOzG,KAAKqG,iBAAiBG,GAAKnL,SAASoL,IAG/C/L,EAAAvV,UAAAuhB,gBAAA,SAAgBF,EAAaC,GAA7B,IAAApa,EAAA2T,KACU2G,KAWN,OAVA3G,KAAK/T,MAAMpB,QAAQ,SAACoa,GACX5Y,EAAKkE,UAAY0U,EAAK9B,YAAcsD,GAAOxB,EAAK7B,UAAYoD,GAC7DG,EAAS1hB,KAAKggB,GAGdA,EAAK9B,YAAcqD,GAAOvB,EAAK7B,UAAYqD,GAC3CE,EAAS1hB,KAAKggB,KAIf0B,GAGXjM,EAAAvV,UAAAyhB,wBAAA,SAAwBJ,EAAaC,GACjC,IAAII,EAAYC,IAOhB,OANA9G,KAAK0G,gBAAgBF,EAAKC,GAAK5b,QAAQ,SAACoa,GAChCA,EAAKd,YAAc0C,IACnBA,EAAY5B,EAAKd,eAIlB0C,GAIXnM,EAAAvV,UAAA4hB,iBAAA,SAAiBC,EAA2ChT,GAA5D,IAAA3H,EAAA2T,UACgC,IAAjBhM,IACPA,EAAe,GAGnB,IAAMiT,KACNjH,KAAKrS,MAAM9C,QAAQ,SAACyE,GAEhB,IAAMgX,EAAMja,EAAKga,iBAAiB/W,EAAKE,SACjC0X,EAAU,IAAIC,IAAIb,GACpBY,EAAQ1B,KAAOc,EAAIvhB,QACnBmiB,EAAQrc,QAAQ,SAACwC,GACb,IAAMmB,EAAYnC,EAAKqa,gBAAgBpX,EAAKE,QAASnC,GAAIiG,OAAO,SAAC8T,EAAKnC,GAClE,OAAO+B,EAAQI,EAAKnC,EAAKd,cAC1BnQ,GAEHiT,EAAWhiB,MAAMmI,KAAMkC,EAAKE,QAASnC,GAAEA,EAAEC,OAAQ0I,WAAWxH,SAMxE,IAAIuW,EAAW/E,KAAK/T,MAAMoD,OAAO,SAAC4V,GAC9B,IAAIoC,GAAO,EAOX,OANAJ,EAAWpc,QAAQ,SAACyc,GACZrC,EAAK9B,YAAcmE,EAAcla,MAAQ6X,EAAK7B,UAAYkE,EAAcja,KACxEga,GAAO,KAIRA,IAMX,OAJAJ,EAAWpc,QAAQ,SAACoa,GAChBF,EAAWA,EAAS9f,KAAK,IAAIigB,EAAA,EAAUD,EAAK7X,KAAM6X,EAAK5X,GAAI4X,EAAK3X,WAG7D,IAAIoN,EAAWsF,KAAKrS,MAAOoX,EAAU/E,KAAKzP,SAAUyP,KAAKxP,WAGpEkK,EAAAvV,UAAAyK,WAAA,WACI,OAAOoQ,KAAKxP,UAGhBkK,EAAAvV,UAAAkL,WAAA,WACI,OAAO2P,KAAKzP,UAEpBmK,EAtbA","file":"bundle-38e64976df4053852cbf.min.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \tvar installedChunks = {\n \t\t4: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar head = document.getElementsByTagName('head')[0];\n \t\t\t\tvar script = document.createElement('script');\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \"-\" + {\"0\":\"795c4bc754b05361400a\",\"1\":\"f984315220208949733e\"}[chunkId] + \".min.js\";\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tfunction onScriptComplete(event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\tvar error = new Error('Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')');\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\thead.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([45,2]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","\"use strict\";\r\n\r\nimport * as $ from 'jquery';\r\nimport {DataSet, Edge} from 'vis/index-network';\r\nimport help from './genericHelpers';\r\nimport GraphImmut from './GraphImmut/GraphImmut';\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\nimport NodeImmut, {NodeImmutPlain} from \"./GraphImmut/NodeImmut\";\r\n\r\ninterface UpToDateProperties {\r\n    name: string;\r\n    upToDate: boolean;\r\n    type: string;\r\n    always?: boolean;\r\n    applyFunc?: () => void;\r\n    [index: string]: string|boolean|(() => void)\r\n}\r\n\r\ninterface GraphProperties {\r\n    vertices: number;\r\n    edges: number;\r\n    eulerian: boolean;\r\n    \"Chromatic Number\": number | null;\r\n    \"Connected Components\": number | null;\r\n    \"Strongly Connected Components\": number | null;\r\n    cyclic: boolean;\r\n\r\n    [index: string]: boolean | number | null;\r\n}\r\n\r\ninterface GraphStateData {\r\n    stronglyConnectedComponents: null | { [key: number]: number };\r\n    connectedComponents: null | { [key: number]: number };\r\n    graphColoring: null | number[];\r\n\r\n    [index: string]: null | number[] | { [key: number]: number };\r\n}\r\n\r\nexport interface AddNodeI {\r\n    id?: number\r\n    label: string;\r\n    x: number;\r\n    y: number;\r\n    color?:string;\r\n}\r\n\r\nexport interface GraphStateHistory {\r\n    upToDate: UpToDateProperties[];\r\n    state: GraphStateData;\r\n    graph: GraphImmut;\r\n    graphProperties: GraphProperties;\r\n    [index: string]: UpToDateProperties[]|GraphStateData|GraphImmut|GraphProperties;\r\n}\r\n\r\nconst getInt = (v: string|number): number => {\r\n    if(typeof v === 'number'){\r\n        return v;\r\n    }\r\n    return parseInt(v);\r\n};\r\n\r\nexport default class GraphState {\r\n    public static workerPool: Worker[] = [];\r\n    public static backHistory: GraphStateHistory[] = [];\r\n    public static forwardHistory: GraphStateHistory[] = [];\r\n    public static maxHistory = 10;\r\n    public static upToDate: UpToDateProperties[] = [\r\n        {\r\n            name: \"Chromatic Number\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {\r\n            name: \"graphColoring\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {name: \"vertices\", upToDate: true, always: true, type: \"property\"},\r\n        {name: \"edges\", upToDate: true, always: true, type: \"property\"},\r\n        {\r\n            name: \"eulerian\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintEulerian();\r\n            }\r\n        },\r\n        {\r\n            name: \"Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components').applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"connectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components').applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"Strongly Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components').applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"stronglyConnectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components').applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"cyclic\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintIsCyclic();\r\n            }\r\n        },\r\n    ];\r\n    public static state: GraphStateData = {\r\n        stronglyConnectedComponents: null,\r\n        connectedComponents: null,\r\n        graphColoring: null,\r\n    };\r\n    public static graph: GraphImmut = null;\r\n    public static graphProperties: GraphProperties = {\r\n        vertices: 0,\r\n        edges: 0,\r\n        eulerian: false,\r\n        \"Chromatic Number\": null,\r\n        \"Connected Components\": null,\r\n        \"Strongly Connected Components\": null,\r\n        cyclic: false,\r\n    };\r\n\r\n    static setUpToDate(value = false, listOptions?: string[]) {\r\n        const all = listOptions === null || typeof listOptions === \"undefined\";\r\n        let property = false;\r\n        GraphState.upToDate.forEach((v) => {\r\n            if ((!(\"always\" in v) || !v.always) && (all || listOptions.indexOf(v.name) > -1)) {\r\n                v.upToDate = value;\r\n                if (v.type === \"property\") {\r\n                    property = true;\r\n                }\r\n            }\r\n        });\r\n        if (property) {\r\n            GraphState.makeAndPrintProperties();\r\n        }\r\n    }\r\n\r\n    static async getProperty(property: string, updateIfNotUpdated = false): Promise<any> {\r\n        const a = GraphState.upToDate.find((v) => {\r\n            return (\"name\" in v && v.name === property);\r\n        });\r\n        if (!a.upToDate) {\r\n            if (\"applyFunc\" in a && updateIfNotUpdated) {\r\n                await a.applyFunc();\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        if (a.type === \"state\") {\r\n            return Promise.resolve(GraphState.state[property]);\r\n        }\r\n        return Promise.resolve(GraphState.graphProperties[property]);\r\n    }\r\n\r\n    static async makeAndPrintProperties(recalcLong = false) {\r\n        const directional = window.settings.getOption(\"direction\");\r\n\r\n        GraphState.graphProperties.vertices = GraphState.graph.getNumberOfNodes();\r\n        GraphState.graphProperties.edges = GraphState.graph.getNumberOfEdges();\r\n\r\n        if (!directional) {\r\n            await GraphState.getProperty(\"eulerian\", true);\r\n        }\r\n\r\n        const p = Object.keys(GraphState.graphProperties);\r\n        if (recalcLong) {\r\n            p.forEach(async (v) => {\r\n                await GraphState.getProperty(v, true);\r\n            });\r\n        }\r\n\r\n        const printableProperties: any = {};\r\n        await Promise.all(p.map(async (v) => {\r\n            printableProperties[v] = await GraphState.getProperty(v);\r\n        }));\r\n\r\n        GraphState.printGraphProperties(printableProperties);\r\n    }\r\n\r\n    static printGraphProperties(properties: any) {\r\n        let p = \"\";\r\n        Object.keys(properties).forEach((k) => {\r\n            if (properties[k] !== null) {\r\n                p += `${help.toTitleCase(k)}: ${properties[k]}\\n`;\r\n            }\r\n        });\r\n        p = p.trim();\r\n        p = help.htmlEncode(p);\r\n        $(\"#graphProps\").html(`<p class='nav-link'>${p}</p>`);\r\n    }\r\n\r\n    static addEdge(from: number|string, to: number|string, weight = 0, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        graph = graph.addEdge(edgeFrom, edgeTo, weight);\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[]\r\n        });\r\n    }\r\n\r\n    static addNode(data: AddNodeI, graph = GraphState.graph) {\r\n        graph = graph.addNode({label: data.label, x: data.x, y: data.y});\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[]\r\n        });\r\n    }\r\n\r\n    static editNode(id: number|string, label: string, graph = GraphState.graph) {\r\n        const iId = getInt(id);\r\n        graph = graph.editNode(iId, {label});\r\n        window.main.setData(GraphState.getGraphData(graph), false, false);\r\n    }\r\n\r\n    static editEdge(from: number|string, to: number|string, newWeight: number, oldWeight: number, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        const newGraph = graph.editEdge(edgeFrom, edgeTo, newWeight, oldWeight);\r\n        if (newGraph instanceof GraphImmut) {\r\n            window.main.setData(GraphState.getGraphData(newGraph), false, false);\r\n        }\r\n    }\r\n\r\n    static deleteEdge(from: number|string, to: number|string, weight: number = null, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        graph = graph.deleteEdge(edgeFrom, edgeTo, weight, false);\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[]\r\n        });\r\n    }\r\n\r\n    static deleteNode(id: number|string, graph = GraphState.graph) {\r\n        const iId = getInt(id);\r\n        const newGraph = graph.deleteNode(iId);\r\n        if (newGraph instanceof GraphImmut) {\r\n            window.main.setData({\r\n                nodes: GraphState.clearColorFromNodes(newGraph.getAllNodes() as NodeImmutPlain[]),\r\n                edges: newGraph.getAllEdges() as EdgeImmutPlain[]\r\n            });\r\n        }\r\n    }\r\n\r\n    static clearColorFromNodes(nodes: NodeImmutPlain[]): NodeImmutPlain[] {\r\n        nodes.forEach((v) => {\r\n            v.color = null;\r\n        });\r\n        return nodes;\r\n    }\r\n\r\n    static nodeIDToLabel(id: number, graph = GraphState.graph): string {\r\n        const n = graph.getNode(id, true);\r\n        if (n !== false && n !== null && n instanceof NodeImmut && n.getLabel().trim().length > 0) {\r\n            return n.getLabel().trim();\r\n        }\r\n\r\n        return id.toString();\r\n    }\r\n\r\n    // Preferentially search by ID, label, and case-insensitive label\r\n    static nodeLabelToID(label: string, graph = GraphState.graph) {\r\n        let n = graph.getAllNodes(true) as NodeImmut[];\r\n        n = n.filter((node) => {\r\n            return node.getLabel().toLowerCase() === label.toLowerCase() || node.getID().toString() === label;\r\n        });\r\n\r\n        if (n.length === 0) {\r\n            return -1;\r\n        }\r\n        else if (n.length === 1) {\r\n            return n[0].getID();\r\n        }\r\n\r\n        let rID = -1;\r\n        let found = false;\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getID().toString() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel().toLowerCase() === label.toLowerCase()) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        return rID;\r\n    }\r\n\r\n    // Return graph as a Vis compatible dataset\r\n    static getGraphAsDataSet(graph: GraphImmut): { nodes: DataSet<vis.Node>; edges: DataSet<vis.Edge> } {\r\n        const d = GraphState.getGraphData(graph);\r\n        if (graph.isWeighted()) {\r\n            d.edges.forEach((e) => {\r\n                e.label = e.weight.toString();\r\n            });\r\n        }\r\n\r\n        return {nodes: new DataSet(d.nodes as vis.Node[]), edges: new DataSet(d.edges as vis.Edge[])};\r\n    }\r\n\r\n    static setLocations(locations: {[key: string]: {x: number; y: number}}, graph = GraphState.graph): GraphImmut {\r\n        let newNodes = graph.getAllNodesAsImmutableList();\r\n        Object.keys(locations).forEach((i) => {\r\n            const v = locations[i];\r\n            const node = newNodes.get(parseInt(i));\r\n            // Only change when there is actually a new position\r\n            if (node.getAttribute(\"x\") !== v.x || node.getAttribute(\"y\") !== v.y) {\r\n                // Batch up all changes that we'll be making\r\n                newNodes = newNodes.set(parseInt(i), node.editNode(node.getLabel(), {x: v.x, y: v.y}));\r\n            }\r\n        });\r\n\r\n        return new GraphImmut(newNodes, graph.getAllEdgesAsImmutableList(), graph.isDirected(), graph.isWeighted());\r\n    }\r\n\r\n    static getGraphData(graph = GraphState.graph, clearColors = false): GraphPlain {\r\n        const nodes = graph.getAllNodes() as NodeImmutPlain[];\r\n        return {\r\n            nodes: clearColors ? GraphState.clearColorFromNodes(nodes) : nodes,\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[],\r\n            directed: graph.isDirected(),\r\n            weighted: graph.isWeighted()\r\n        };\r\n    }\r\n}\r\n","\"use strict\";\r\n\r\nimport * as $ from 'jquery';\r\n\r\ndeclare interface ModalFormRow {\r\n    type: string;\r\n    label?: string;\r\n    initialValue?: any;\r\n    id?: string | number;\r\n    extraAttrs?: any;\r\n    validationFunc?: (value?: any, container?: JQuery) => boolean | string;\r\n    clickDismiss?: boolean;\r\n    onclick?: (...args: any[]) => void;\r\n    optionText?: any[];\r\n    optionValues?: any[];\r\n}\r\n\r\ndeclare interface BasicMapType {\r\n    class: string;\r\n    id: string;\r\n    value: any,\r\n\r\n    [key: number]: any,\r\n\r\n    [key: string]: any\r\n}\r\n\r\nconst defaultCancelCb = ($modal: JQuery) => {\r\n    $modal.modal(\"hide\");\r\n};\r\n\r\nconst self = {\r\n    deepFreeze: <T>(o: T): Readonly<T> => {\r\n        Object.freeze(o);\r\n\r\n        Object.getOwnPropertyNames(o).forEach((prop: string | number) => {\r\n            if (o.hasOwnProperty(prop) && (o as any)[prop] !== null\r\n                && (typeof (o as any)[prop] === \"object\" || typeof (o as any)[prop] === \"function\")\r\n                && !Object.isFrozen((o as any)[prop])) {\r\n                self.deepFreeze((o as any)[prop]);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    },\r\n\r\n    sort: <T>(arr: T[], compareFunction: (a: any, b: any) => number): T[] => {\r\n        return [...arr].sort(compareFunction);\r\n    },\r\n\r\n    datasetToArray: (ds: any, key: string): Readonly<any[]> => {\r\n        const r: any[] = [];\r\n        ds.forEach((v: {[index: string]: any}) => {\r\n            r.push(v[key]);\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    keepOnlyKeys: <T>(arr: T[], keys: string[]): Readonly<T[]> => {\r\n        arr = arr.slice();\r\n        arr.forEach((v: any) => {\r\n            const k = Object.keys(v);\r\n            k.forEach((key) => {\r\n                if (keys.indexOf(key) < 0) {\r\n                    delete v[key];\r\n                }\r\n            });\r\n        });\r\n        return self.deepFreeze(arr);\r\n    },\r\n\r\n    getFileExtension: (filename: string): string => {\r\n        return filename.split(\".\").splice(-1)[0];\r\n    },\r\n\r\n    htmlEncode: (string: string): string => {\r\n        string = $(\"<div>\").text(string).html();\r\n        string = string.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>');\r\n        return string;\r\n    },\r\n\r\n    printout: (text: string, escape?: string): void => {\r\n        if (escape) {\r\n            text = this.htmlEncode(escape);\r\n        }\r\n        $(\"#printout\").html(text);\r\n    },\r\n\r\n    flatten: <T>(map: { [key: string]: T }): Readonly<T[]> => {\r\n        const r: T[] = [];\r\n        Object.keys(map).forEach((i) => {\r\n            r.push(map[i]);\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    rotate: (map: any): Readonly<any> => {\r\n        const r: any = {};\r\n        Object.keys(map).forEach((i) => {\r\n            if (map[i] in r) {\r\n                r[map[i]].push(i);\r\n            }\r\n            else {\r\n                r[map[i]] = [i];\r\n            }\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    max: (iterable: any[]): number => {\r\n        return iterable.reduce((a, b) => {\r\n            return Math.max(a, b);\r\n        });\r\n    },\r\n\r\n    toTitleCase: (str: string): string => {\r\n        return str.replace(/(?:^|\\s)\\w/g, (match) => {\r\n            return match.toUpperCase();\r\n        });\r\n    },\r\n\r\n    showSimpleModal: (title: string, body: string): void => {\r\n        self.showFormModal(null, title, null, [{type: \"html\", initialValue: body}], null, false);\r\n    },\r\n\r\n    makeFormModal: (title: string, successText: string, form: ModalFormRow[], footer = true): JQuery => {\r\n        const f = $(\"<div>\", {class: \"modal-body form-group\"});\r\n        form.forEach((formRow, i) => {\r\n            if (!(\"initialValue\" in formRow)) {\r\n                formRow.initialValue = \"\";\r\n            }\r\n\r\n            let id = \"form-modal-\" + i;\r\n            if (\"id\" in formRow && formRow.id !== \"\" && formRow.id !== null && typeof formRow.id === \"string\") {\r\n                id = formRow.id;\r\n            }\r\n\r\n            const basicMap: BasicMapType = {class: \"form-control\", id, value: formRow.initialValue};\r\n\r\n            if (\"extraAttrs\" in formRow) {\r\n                Object.keys(formRow.extraAttrs).forEach((attrname) => {\r\n                    if (typeof formRow.extraAttrs[attrname] !== \"function\") {\r\n                        basicMap[attrname] = formRow.extraAttrs[attrname];\r\n                    }\r\n                });\r\n            }\r\n\r\n            let validFunc = (value?: any, container?: JQuery): string | boolean => true;\r\n            if (\"validationFunc\" in formRow) {\r\n                validFunc = formRow.validationFunc;\r\n            }\r\n\r\n            const generalValidator = (event: any, valueMutator: (v: any) => any = null) => {\r\n                const $v = $(event.target);\r\n                let val = $v.val();\r\n                if (valueMutator !== null && typeof valueMutator === \"function\") {\r\n                    val = valueMutator(val);\r\n                }\r\n                const valid = validFunc(val, $v);\r\n\r\n                if (valid === true) {\r\n                    $v.removeClass(\"is-invalid\").next(\"#feedback-\" + i).remove();\r\n                }\r\n                else {\r\n                    $v.addClass(\"is-invalid\");\r\n                    if ($v.next(\"#feedback-\" + i).length === 0) {\r\n                        $v.after($(\"<div>\", {class: \"invalid-feedback\", id: \"feedback-\" + i}).text(valid));\r\n                    }\r\n                }\r\n            };\r\n\r\n            if (formRow.type === \"html\") {\r\n                f.append($(formRow.initialValue));\r\n            }\r\n            else if (formRow.type === \"checkbox\") {\r\n                basicMap.type = \"checkbox\";\r\n                basicMap.class = \"form-check-input\";\r\n                delete basicMap.value;\r\n                if (formRow.initialValue) {\r\n                    basicMap.checked = \"\";\r\n                }\r\n\r\n                f.append($(\"<div>\", {class: \"form-check\"})\r\n                    .append($(\"<label>\", {for: id, class: \"form-check-label\"})\r\n                        .text(formRow.label).prepend($(\"<input>\", basicMap))\r\n                    )\r\n                );\r\n            }\r\n            else {\r\n                f.append($(\"<label>\", {for: id, class: \"col-form-label\"}).text(formRow.label));\r\n\r\n                if (formRow.type === \"button\") {\r\n                    if (\"clickDismiss\" in formRow && formRow.clickDismiss === true) {\r\n                        basicMap.class += \" btn-dismiss\";\r\n                    }\r\n                    const $b = $(\"<button>\", basicMap).text(formRow.initialValue);\r\n                    if (\"onclick\" in formRow && typeof formRow.onclick === \"function\") {\r\n                        $b.on(\"click\", formRow.onclick);\r\n                    }\r\n                    f.append($b);\r\n                }\r\n                else if (formRow.type === \"numeric\") {\r\n                    basicMap.type = \"number\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", (e) => {\r\n                        generalValidator(e, parseFloat);\r\n                    }));\r\n                }\r\n                else if (formRow.type === \"text\") {\r\n                    basicMap.type = \"text\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                }\r\n                else if (formRow.type === \"file\") {\r\n                    basicMap.type = \"file\";\r\n                    basicMap.class = \"form-control-file form-control\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                }\r\n                else if (formRow.type === \"textarea\") {\r\n                    const $b = $(\"<textarea>\", basicMap).on(\"blur validate\", generalValidator);\r\n                    if (\"onclick\" in formRow) {\r\n                        $b.on(\"click\", formRow.onclick);\r\n                    }\r\n                    f.append($b);\r\n                }\r\n                else if (formRow.type === \"select\") {\r\n                    const $options = $(\"<select>\", basicMap);\r\n                    formRow.optionText.forEach((oText, oIndex) => {\r\n                        if (oIndex < formRow.optionValues.length) {\r\n                            $options.append($(\"<option>\", {value: formRow.optionValues[oIndex]}).text(oText));\r\n                        }\r\n                        else {\r\n                            $options.append($(\"<option>\").text(oText));\r\n                        }\r\n                    });\r\n                    f.append($options.on(\"blur validate\", generalValidator));\r\n                }\r\n            }\r\n        });\r\n\r\n        let $footer = $(\"<div>\", {class: \"modal-footer\"})\r\n            .append($(\"<button>\", {class: \"btn btn-success\", type: \"button\"}).text(successText))\r\n            .append($(\"<button>\", {class: \"btn btn-danger btn-cancel\", type: \"button\"}).text(\"Cancel\"));\r\n\r\n        if (footer === false) {\r\n            $footer = null;\r\n        }\r\n\r\n        const $modal = ($(\"<div>\", {class: \"modal fade\", tabindex: \"-1\", role: \"dialog\", \"aria-hidden\": \"true\"}));\r\n        $modal\r\n            .append($(\"<div>\", {class: \"modal-dialog\"})\r\n                .append($(\"<div>\", {class: \"modal-content\"})\r\n                    .append($(\"<div>\", {class: \"modal-header\"})\r\n                        .append($(\"<h5>\", {class: \"modal-title\"}).text(title))\r\n                        .append($(\"<button>\", {class: \"close\", \"data-dismiss\": \"modal\", \"aria-label\": \"close\"})\r\n                            .append($(\"<span>\", {\"aria-hidden\": \"true\"}).html(\"&times;\"))\r\n                        )\r\n                    )\r\n                    .append(f)\r\n                    .append($footer)\r\n                )\r\n            );\r\n        $modal.find(\"input, textarea\").off(\"keyup\").on(\"keyup\", (e) => {\r\n            if (e.key === \"Enter\") {\r\n                $(\".btn-success\").last().trigger(\"click\");\r\n            }\r\n        });\r\n        $modal.on(\"shown.bs.modal\", () => {\r\n            $modal.find(\"input[type='text'], input[type='number'], textarea\").first().trigger(\"focus\");\r\n        });\r\n\r\n        return $modal;\r\n    },\r\n\r\n    showFormModal: (successCb: ($modal: JQuery, vals: any[]) => void,\r\n                    title: string, successText: string, form: ModalFormRow[],\r\n                    cancelCb: ($modal: JQuery) => void = defaultCancelCb, footer = true) => {\r\n        const $modal = self.makeFormModal(title, successText, form, footer);\r\n\r\n        $modal.on(\"click\", \".btn-cancel\", () => {\r\n            if (typeof cancelCb === \"function\") {\r\n                cancelCb($modal);\r\n            }\r\n            else {\r\n                $modal.modal(\"hide\");\r\n            }\r\n        }).on(\"click\", \".btn-dismiss\", () => {\r\n            $modal.modal(\"hide\");\r\n        }).on(\"click\", \".btn-success\", () => {\r\n            const vals: any[] = [];\r\n            let hasErrors = false;\r\n\r\n            $modal.find(\"input, textarea, select\").each((i, v) => {\r\n                const $v = $(v);\r\n\r\n                if (($v as any).tagName === \"SELECT\") {\r\n                    vals.push($v.find(\":selected\").val());\r\n                }\r\n                else if ($v.attr(\"type\") === \"checkbox\") {\r\n                    vals.push($v.prop(\"checked\"));\r\n                }\r\n                else if ($v.attr(\"type\") === \"file\") {\r\n                    vals.push(($v.get(0) as any).files);\r\n                }\r\n                else if ($v.attr(\"type\") === \"number\") {\r\n                    vals.push(parseFloat($v.val() as string));\r\n                }\r\n                else {\r\n                    vals.push($v.val());\r\n                }\r\n\r\n                if ($v.trigger(\"validate\").hasClass(\"is-invalid\")) {\r\n                    hasErrors = true;\r\n                }\r\n\r\n            });\r\n\r\n            if (!hasErrors && typeof successCb === \"function\") {\r\n                successCb($modal, vals);\r\n            }\r\n        }).on(\"hidden.bs.modal\", () => {\r\n            $modal.remove();\r\n        }).modal(\"show\");\r\n    }\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\n\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\nimport {NodeImmutPlain} from \"./GraphImmut/NodeImmut\";\r\n\r\ninterface Degree {\r\n    in: number;\r\n    out: number;\r\n}\r\n\r\nexport default {\r\n    findVertexDegreesDirectional: (adjacencyMatrix: Array<Array<number>>): Degree[] => {\r\n        // Adjacency stores IDs of edges TO\r\n        const degrees: Degree[] = [];\r\n        adjacencyMatrix.forEach((v, i) => {\r\n            if (i in degrees) {\r\n                degrees[i].out += v.length;\r\n            }\r\n            else {\r\n                degrees[i] = {out: v.length, in: 0};\r\n            }\r\n            v.forEach((outV) => {\r\n                if (outV in degrees) {\r\n                    degrees[outV].in += 1;\r\n                }\r\n                else {\r\n                    degrees[outV] = {in: 1, out: 0};\r\n                }\r\n            });\r\n        });\r\n\r\n        return degrees;\r\n    },\r\n\r\n    interpolateNodesFromEdges: (edges: EdgeImmutPlain[]): NodeImmutPlain[] => {\r\n        const nodes: NodeImmutPlain[] = [];\r\n        edges.forEach((v) => {\r\n            nodes[v.from] = {id: v.from, label: \"\" + v.from};\r\n            nodes[v.to] = {id: v.to, label: \"\" + v.to};\r\n        });\r\n\r\n        return nodes;\r\n    },\r\n};\r\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"185b0a18b2a9edfb2400.worker.js\");\n};","\"use strict\";\r\n\r\nimport * as $ from 'jquery';\r\nimport help from './genericHelpers';\r\nimport randomColor from 'randomcolor';\r\nimport GraphState, {AddNodeI, GraphStateHistory} from './graphState';\r\nimport GraphImmut from \"./GraphImmut/GraphImmut\";\r\nimport {NodeImmutPlain} from \"./GraphImmut/NodeImmut\";\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\n\r\nexport interface MainI {\r\n    graphState: typeof GraphState;\r\n    container: HTMLElement;\r\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback: Function) => void;\r\n    visOptions: {\r\n        interaction: { hover: boolean };\r\n        manipulation: {\r\n            addNode: (data: AddNodeI, callback: Function) => void;\r\n            editNode: (data: AddNodeI, callback: Function) => void;\r\n            addEdge: (data: VisEdgeInternal, callback?: Function) => void;\r\n            editEdge: (data: VisEdgeInternal, callback: Function) => void;\r\n            deleteEdge: (data: { edges: string[] }, callback?: Function) => void;\r\n            deleteNode: (data: { nodes: string[] }, callback: Function) => void\r\n        }\r\n    };\r\n    cancelEdit: (callback: Function) => void;\r\n    saveData: (data: any, callback: Function, operation: string, label: string) => void;\r\n    nodeLabelIDValidator: (v: string) => (boolean | string);\r\n    applyColors: () => Promise<void>;\r\n    setData: (data: GraphPlain, recalcProps?: boolean, graphChanged?: boolean, rearrangeGraph?: boolean) => void;\r\n    saveState: () => void;\r\n    getStateForSaving: () => GraphStateHistory;\r\n    undo: () => void;\r\n    redo: () => void;\r\n    applyState: (undo?: boolean, newState?: any) => void;\r\n    saveStateLocalStorage: () => void;\r\n    shuffleNetworkLayout: () => void;\r\n    randomizeNetworkLayoutSeed: (network: VisNetworkInternals) => void;\r\n    addNetworkListeners: (network: vis.Network) => void\r\n}\r\n\r\ninterface VisNetworkEvent {\r\n    edges: vis.DataSet<vis.Edge>;\r\n    nodes: vis.DataSet<vis.Node>;\r\n}\r\n\r\ninterface VisNetworkInternals extends vis.Network {\r\n    layoutEngine: {\r\n        randomSeed: number,\r\n        initialRandomSeed: number\r\n    }\r\n}\r\n\r\ninterface VisEditEdgeInternal {\r\n    from: { id: string | number };\r\n    to: { id: string | number };\r\n    label?: string\r\n}\r\n\r\ninterface VisEdgeInternal {\r\n    from: string | number;\r\n    to: string | number;\r\n    id: string;\r\n    label?: string\r\n}\r\n\r\nconst self: MainI = {\r\n    graphState: GraphState,\r\n    container: document.getElementById('network'),\r\n    // Function used to overwrite the edge edit functionality when weights are active\r\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback) => {\r\n        help.showFormModal(($modal, vals) => {\r\n            callback(null);\r\n            $modal.modal(\"hide\");\r\n            const value = parseFloat(vals[0]);\r\n            GraphState.editEdge(data.from.id, data.to.id, value, parseFloat(data.label));\r\n        }, \"Edit Edge\", \"Save\", [\r\n            {\r\n                type: \"numeric\",\r\n                label: \"Weight/Capacity\",\r\n                initialValue: parseFloat(data.label)\r\n            }\r\n        ]);\r\n    },\r\n    visOptions: {\r\n        interaction: {hover: true},\r\n        manipulation: {\r\n            addNode: async (data, callback) => {\r\n                const $popup = help.makeFormModal(\"Add Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: `<p>Node ID: ${await GraphState.getProperty(\"vertices\")}</p>`\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: await GraphState.getProperty(\"vertices\")}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"add\", $popup.find(\"input\").first().val() as string);\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            editNode: (data, callback) => {\r\n                const $popup = help.makeFormModal(\"Edit Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: `<p>Node ID: ${data.id}</p>`\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: data.label}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"editNode\", $popup.find(\"input\").first().val() as string);\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            addEdge: (data, callback) => {\r\n                const apply = () => {\r\n                    if (typeof callback === \"function\") {\r\n                        callback(null);\r\n                    }\r\n                    GraphState.addEdge(data.from, data.to);\r\n                };\r\n                if (data.from === data.to) {\r\n                    if (confirm(\"Do you want to connect the node to itself?\")) {\r\n                        apply();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                apply();\r\n            },\r\n            editEdge: (data, callback) => {\r\n                callback(null);\r\n                self.visOptions.manipulation.deleteEdge({edges: [data.id]});\r\n                self.visOptions.manipulation.addEdge(data);\r\n            },\r\n            deleteEdge: (data, callback) => {\r\n                if (typeof callback === \"function\") {\r\n                    callback(null);\r\n                }\r\n                data.edges.forEach((v: any) => {\r\n                    let weight = null;\r\n                    if (typeof (window.network as any).body.data.edges._data[v].label !== \"undefined\") {\r\n                        weight = parseFloat((window.network as any).body.data.edges._data[v].label);\r\n                    }\r\n\r\n                    GraphState.deleteEdge((window.network as any).body.edges[v].fromId,\r\n                        (window.network as any).body.edges[v].toId, weight);\r\n                });\r\n            },\r\n            deleteNode: (data, callback) => {\r\n                callback(null);\r\n                data.nodes.forEach((v: string) => {\r\n                    GraphState.deleteNode(v);\r\n                });\r\n            },\r\n        },\r\n    },\r\n\r\n    cancelEdit: (callback) => {\r\n        if (typeof callback === \"function\") {\r\n            callback(null);\r\n        }\r\n    },\r\n\r\n    saveData: (data, callback, operation, label) => {\r\n        callback(null);\r\n\r\n        data.label = label;\r\n        if (operation === \"add\") {\r\n            GraphState.addNode(data);\r\n        }\r\n        else if (operation === \"editNode\") {\r\n            GraphState.editNode(data.id, data.label);\r\n        }\r\n    },\r\n\r\n    nodeLabelIDValidator: (v) => {\r\n        if (GraphState.nodeLabelToID(v) > -1) {\r\n            return true;\r\n        }\r\n        return \"Invalid Label or ID\";\r\n    },\r\n\r\n    applyColors: async () => {\r\n        if (window.settings.getOption(\"direction\")) {\r\n            return;\r\n        }\r\n        const graphColors = await GraphState.getProperty(\"graphColoring\", true);\r\n        const chromaticNumber = await GraphState.getProperty(\"Chromatic Number\", true);\r\n\r\n        const colors = randomColor({count: chromaticNumber, luminosity: \"light\"});\r\n        let G = GraphState.graph;\r\n        (G.getAllNodes() as NodeImmutPlain[]).forEach((v) => {\r\n            G = G.editNode(v.id, {color: colors[graphColors[v.id]]});\r\n        });\r\n        self.setData(GraphState.getGraphData(G), false, false);\r\n    },\r\n\r\n    setData: (data, recalcProps = false, graphChanged = true, rearrangeGraph = false) => {\r\n        // Store existing positions in the data if we're supposed to keep the layout\r\n        if (rearrangeGraph) {\r\n            data.nodes.forEach((v) => {\r\n                delete v.x;\r\n                delete v.y;\r\n            });\r\n        }\r\n\r\n        if (graphChanged) {\r\n            self.saveState();\r\n        }\r\n\r\n        if (\"directed\" in data) {\r\n            window.settings.changeOption(\"direction\", data.directed);\r\n        }\r\n        if (\"weighted\" in data) {\r\n            window.settings.changeOption(\"weights\", data.weighted);\r\n        }\r\n        const directional = window.settings.getOption(\"direction\") as boolean;\r\n        const weighted = window.settings.getOption(\"weights\") as boolean;\r\n\r\n        const g = new GraphImmut(data.nodes, data.edges, directional, weighted);\r\n        GraphState.graph = g;\r\n\r\n        // Set a new random seed so that the layout will be different\r\n        self.randomizeNetworkLayoutSeed(window.network as VisNetworkInternals);\r\n        window.network.setData(GraphState.getGraphAsDataSet(g));\r\n        GraphState.graph = GraphState.setLocations(window.network.getPositions());\r\n\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        if (graphChanged) {\r\n            window.ui.terminateAllWebWorkers();\r\n            window.ui.printGraphAlgorithms();\r\n            help.printout(\"\");\r\n            GraphState.setUpToDate();\r\n            GraphState.makeAndPrintProperties(recalcProps);\r\n        }\r\n\r\n        self.saveStateLocalStorage();\r\n    },\r\n\r\n    saveState: () => {\r\n        if (GraphState.graph === null) {\r\n            return;\r\n        }\r\n\r\n        if (GraphState.backHistory.length >= GraphState.maxHistory) {\r\n            GraphState.backHistory.shift();\r\n        }\r\n\r\n        GraphState.backHistory.push(self.getStateForSaving());\r\n        GraphState.forwardHistory = [];\r\n        $(\".icon-undo\").parent().parent().addClass(\"active\");\r\n    },\r\n\r\n    getStateForSaving: () => {\r\n        const state: any = {};\r\n        Object.keys(GraphState).forEach((k: string) => {\r\n            const v: any = (GraphState as any)[k];\r\n            if (typeof v !== \"function\") {\r\n                if (typeof v !== \"object\") {\r\n                    state[k] = v;\r\n                }\r\n                else {\r\n                    if (k === \"graph\" && v !== null) {\r\n                        state[k] = v;\r\n                    }\r\n                    if (!k.toLowerCase().includes(\"history\")) {\r\n                        state[k] = $.extend(true, Array.isArray(v) ? [] : {}, v);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return state as GraphStateHistory;\r\n    },\r\n\r\n    undo: () => {\r\n        if (GraphState.backHistory.length > 0) {\r\n            self.applyState(true);\r\n        }\r\n    },\r\n\r\n    redo: () => {\r\n        if (GraphState.forwardHistory.length > 0) {\r\n            self.applyState(false);\r\n        }\r\n    },\r\n\r\n    applyState: (undo = true, newState: GraphStateHistory = null) => {\r\n        const firstLoad = newState !== null;\r\n        const currentState = self.getStateForSaving();\r\n\r\n        if (!firstLoad) {\r\n            if (undo) {\r\n                newState = GraphState.backHistory.pop();\r\n            }\r\n            else {\r\n                newState = GraphState.forwardHistory.pop();\r\n            }\r\n        }\r\n\r\n        //@ts-ignore Ignore accessing private props. I do this because saving the state lost the type of the data\r\n        newState.graph = new GraphImmut(newState.graph.nodes, newState.graph.edges, newState.graph.directed, newState.graph.weighted);\r\n\r\n        window.settings.changeOption(\"direction\", newState.graph.isDirected());\r\n        window.settings.changeOption(\"weights\", newState.graph.isWeighted());\r\n\r\n        GraphState.graph = newState.graph;\r\n\r\n        window.network.setData(GraphState.getGraphAsDataSet(GraphState.graph));\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        window.ui.printGraphAlgorithms();\r\n        help.printout(\"\");\r\n\r\n        Object.keys(newState).forEach((k: string) => {\r\n            const v = newState[k];\r\n            if (typeof v !== \"object\") {\r\n                (GraphState as any)[k] = v;\r\n            }\r\n            else if (!k.toLowerCase().includes(\"history\") && k.toLowerCase() !== \"graph\") {\r\n                if (k.toLowerCase() === \"uptodate\") {\r\n                    Object.keys((GraphState as any)[k]).forEach((oldKey) => {\r\n                        (GraphState as any)[k][oldKey].upToDate = (v as any)[oldKey].upToDate;\r\n                    });\r\n                }\r\n                else {\r\n                    (GraphState as any)[k] = $.extend(true, (GraphState as any)[k], v);\r\n                }\r\n            }\r\n        });\r\n\r\n        GraphState.makeAndPrintProperties().then(() => {\r\n            if (undo && !firstLoad) {\r\n                $(\".icon-redo\").parent().parent().addClass(\"active\");\r\n                if (GraphState.backHistory.length === 0) {\r\n                    $(\".icon-undo\").parent().parent().removeClass(\"active\");\r\n                }\r\n                GraphState.forwardHistory.push(currentState);\r\n            }\r\n            else if (!undo && !firstLoad) {\r\n                $(\".icon-undo\").parent().parent().addClass(\"active\");\r\n                if (GraphState.forwardHistory.length === 0) {\r\n                    $(\".icon-redo\").parent().parent().removeClass(\"active\");\r\n                }\r\n                GraphState.backHistory.push(currentState);\r\n            }\r\n\r\n            self.saveStateLocalStorage();\r\n        });\r\n    },\r\n\r\n    saveStateLocalStorage: () => {\r\n        if (window.settings.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.lastState\", JSON.stringify(self.getStateForSaving()));\r\n        }\r\n    },\r\n\r\n    shuffleNetworkLayout: () => {\r\n        self.setData({\r\n            nodes: GraphState.graph.getAllNodes() as NodeImmutPlain[],\r\n            edges: GraphState.graph.getAllEdges() as EdgeImmutPlain[]\r\n        }, false, false, true);\r\n    },\r\n\r\n    randomizeNetworkLayoutSeed: (network) => {\r\n        const r = Math.round(Math.random() * 1000000);\r\n        network.layoutEngine.randomSeed = r;\r\n        network.layoutEngine.initialRandomSeed = r;\r\n    },\r\n\r\n    addNetworkListeners: (network) => {\r\n        // Enable edit node/edge when double clicking\r\n        network.on(\"doubleClick\", (p: VisNetworkEvent) => {\r\n            if (window.settings.getOption(\"weights\") && \"edges\" in p && p.edges.length === 1) {\r\n                network.editEdgeMode();\r\n            }\r\n            if (\"nodes\" in p && p.nodes.length === 1) {\r\n                network.editNode();\r\n            }\r\n        });\r\n\r\n        // Save locations of nodes after dragging\r\n        network.on(\"dragEnd\", () => {\r\n            GraphState.graph = GraphState.setLocations(network.getPositions());\r\n            self.saveStateLocalStorage(); // Save the new locations as part of the state\r\n        });\r\n\r\n        // Delete nodes/edges when hit \"Delete\"\r\n        let lastNetworkClickEvent: JQuery.Event = null;\r\n        network.on('click', (event: JQuery.Event) => {\r\n            lastNetworkClickEvent = event;\r\n        });\r\n\r\n        // Delete key to delete node or edge\r\n        $(document).on('keyup', (key) => {\r\n            if (key.key === \"Delete\" && lastNetworkClickEvent !== null) {\r\n                if ($(self.container).has((lastNetworkClickEvent as any).event.target).length > 0) {\r\n                    if ((\"edges\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).edges.length === 1)\r\n                        || (\"nodes\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).nodes.length === 1)) {\r\n                        if ($(':focus').parents(\".modal\").length === 0) {\r\n                            network.deleteSelected();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Undo/Redo keyboard commands\r\n        $(document).on(\"keydown\", (e) => {\r\n            if ((e.key.toLowerCase() === 'y' && e.ctrlKey) || (e.key.toLowerCase() === 'z' && e.ctrlKey && e.shiftKey)) {\r\n                self.redo();\r\n            }\r\n            else if (e.key.toLowerCase() === 'z' && e.ctrlKey) {\r\n                self.undo();\r\n            }\r\n        });\r\n\r\n        // When clicking off of the network, remove the Delete functionality\r\n        $(document).on(\"click\", (e) => {\r\n            if ($(self.container).has(e.target).length === 0) {\r\n                lastNetworkClickEvent = null;\r\n            }\r\n        });\r\n    },\r\n\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\nimport GraphState from './graphState';\r\n\r\ninterface SettingsList {\r\n    nodePhysics: boolean;\r\n    direction: boolean;\r\n    weights: boolean;\r\n\r\n    [index: string]: boolean\r\n}\r\n\r\nexport default class Settings {\r\n    private static readonly defaults: SettingsList = {\r\n        nodePhysics: true,\r\n        direction: false,\r\n        weights: false\r\n    };\r\n    private static current: any = {};\r\n\r\n    public static checkForLocalStorage() {\r\n        try {\r\n            const x = '__storage_test__';\r\n            localStorage.setItem(x, x);\r\n            localStorage.removeItem(x);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static saveSettings() {\r\n        if (Settings.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.settings\", JSON.stringify(Settings.current));\r\n        }\r\n    }\r\n\r\n    public static loadSettings() {\r\n        if (Settings.checkForLocalStorage()) {\r\n            Settings.current = JSON.parse(localStorage.getItem(\"graphPlayground.settings\"));\r\n        }\r\n        if (Settings.current === null) {\r\n            Settings.current = {};\r\n        }\r\n        Settings.setAll();\r\n    }\r\n\r\n    public static setAll() {\r\n        window.network.setOptions({nodes: {physics: Settings.getOption(\"nodePhysics\") as boolean}});\r\n        window.network.setOptions({edges: {arrows: {to: Settings.getOption(\"direction\") as boolean}}});\r\n        if (Settings.getOption(\"weights\")) {\r\n            window.network.setOptions({\r\n                manipulation: {\r\n                    editEdge: {\r\n                        editWithoutDrag: window.main.visWeightEdgeEdit\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            window.network.setOptions({manipulation: {editEdge: window.main.visOptions.manipulation.editEdge}});\r\n        }\r\n    }\r\n\r\n    public static changeOption(option: string, value: string | boolean): void {\r\n        Settings.current[option] = value;\r\n        Settings.saveSettings();\r\n        Settings.setAll();\r\n    }\r\n\r\n    public static getOption(option: string): string | boolean {\r\n        if (option in Settings.current) {\r\n            return Settings.current[option];\r\n        }\r\n        return Settings.defaults[option];\r\n    }\r\n\r\n    public static resetToDefault(): void {\r\n        Settings.current = {};\r\n        Settings.saveSettings();\r\n        Settings.setAll();\r\n\r\n        // Reset graph to just a plain graph. Not sure if this should actually happen or not.\r\n        const G = GraphState.graph.asChangedDirectedWeighted(Settings.defaults.direction, Settings.defaults.weights);\r\n        window.main.setData(GraphState.getGraphData(G));\r\n    }\r\n}\r\n","import gHelp from \"./graphHelpers\";\nimport help from \"./genericHelpers\";\nimport * as $ from \"jquery\";\nimport GraphState from './graphState';\nimport {FlowResult, MSTResult, ShortestPathResult} from \"./GraphAlgorithms\";\n//@ts-ignore\nimport Worker from 'worker-loader!./GraphAlgorithmWorker';\nimport NodeImmut from \"./GraphImmut/NodeImmut\";\nimport EdgeImmut from \"./GraphImmut/EdgeImmut\";\n\ninterface AlgorithmI {\n    name: string;\n    directional?: boolean;\n    weighted?: boolean;\n    applyFunc: () => any;\n    display: boolean\n}\n\nconst makeAndPrintShortestPath = (title: string,\n                                  fn: string,\n                                  weighted: boolean): void => {\n    help.showFormModal(($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const source = GraphState.nodeLabelToID(values[0]);\n            const sink = GraphState.nodeLabelToID(values[1]);\n\n            const w = UIInteractions.getWorkerIfPossible((e) => {\n                let a = e.data;\n                w.cleanup();\n\n                if (a === false) {\n                    if (title.includes(\"Dijkstra\")) {\n                        help.showSimpleModal(\"Dijkstra Error\", \"<p>The Dijkstra algorithm only works on graphs\" +\n                            \" with totally non-negative edge weights. Please fix the graph so that there are no\" +\n                            \" negative edge weights.</p><p>Alternatively, try the Bellman-Ford algorithm which solves\" +\n                            \" exactly this problem.</p>\");\n                    }\n                    else if (title.includes(\"Bellman\")) {\n                        help.showSimpleModal(\"Bellman-Ford Error\", \"<p>The Bellman-Ford algorithm only works on graphs\" +\n                            \" with no negative edge-weight cycles. Please remove the negative cycle and try again.</p>\");\n                    }\n                    return;\n                }\n\n                a = a as ShortestPathResult;\n\n                let p = `<h3>${title}</h3><hr>No path exists from ${help.htmlEncode(source.toString())} to ${help.htmlEncode(sink.toString())}`;\n\n                if (a.pathExists) {\n                    p = `${title} From ${GraphState.nodeIDToLabel(source)} to `;\n                    p += `${GraphState.nodeIDToLabel(sink)}: ${a.distance}`;\n                    if (weighted) {\n                        p += `\\nWith weighted cost: ${a.cost}`;\n                    }\n                    p += \"\\n\\nUsing Path: \";\n\n                    p = help.htmlEncode(p);\n                    a.path.forEach((v: number) => {\n                        p += `${help.htmlEncode(GraphState.nodeIDToLabel(v))} &rarr; `;\n                    });\n                    p = p.slice(0, -8);\n                    p = `<h3>${title}</h3><hr>${p}`;\n                }\n\n                help.printout(p);\n            });\n            w.send({\n                type: fn,\n                args: [source, sink],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        },\n        title, \"Go\", [\n            {label: \"Start Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator},\n            {label: \"End Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator}\n        ]);\n};\n\nconst makeAndPrintComponents = async (stronglyConnected: boolean): Promise<void> => {\n    let a = null;\n    let cc = \"Connected Components\";\n    let componentKey = \"connectedComponents\";\n\n    if (stronglyConnected) {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        cc = \"Strongly \" + cc;\n        componentKey = \"stronglyConnectedComponents\";\n    }\n    else {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n    }\n\n    const w = UIInteractions.getWorkerIfPossible((e) => {\n        a = e.data;\n        w.cleanup();\n\n        GraphState.graphProperties[cc] = a.count;\n        GraphState.setUpToDate(true, [cc, componentKey]);\n        GraphState.state[componentKey] = a.components;\n\n        const components = help.flatten(a.components);\n        let p = `Number of ${cc}: ${a.count}`;\n        p += \"\\n\\n\";\n\n        components.forEach((v, i) => {\n            p += `Vertex ${GraphState.nodeIDToLabel(i)} is in connected component #${v}\\n`;\n        });\n\n        p += `\\n${JSON.stringify(help.rotate(a.components), null, 4)}\\n\\n`;\n        p = `<h3>${cc}</h3><hr>${help.htmlEncode(p)}`;\n\n        help.printout(p);\n    });\n    w.send({\n        type: componentKey,\n        args: [],\n        graph: window.main.graphState.getGraphData(),\n        convertToGraphImmut: true\n    });\n};\n\nclass WorkerProxy {\n    private worker: Worker;\n    private readonly id: number;\n    private readonly listener: (e: { data: any }) => any;\n\n    constructor(id: number, w: Worker, listener: ((e: { data: any }) => any)) {\n        this.id = id;\n        this.worker = w;\n        this.listener = listener;\n        w.postMessage({type: \"id\", id});\n        w.onmessage = (e: MessageEvent) => {\n            this.listener({data: e.data.data});\n        };\n    }\n\n    public send(data: any) {\n        this.worker.postMessage(data);\n    }\n\n    public cleanup() {\n        this.worker.terminate();\n        GraphState.workerPool[this.id] = null;\n    }\n}\n\nexport default class UIInteractions {\n    static getAlgorithms(): AlgorithmI[] {\n        return [\n            {\n                name: \"Graph Coloring\",\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintGraphColoring,\n                display: true\n            },\n            {\n                name: \"Connected Components\",\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintComponents(false);\n                },\n                display: true\n            },\n            {\n                name: \"Strongly Connected Components\",\n                directional: true,\n                display: true,\n                applyFunc: () => {\n                    makeAndPrintComponents(true);\n                }\n            },\n            {\n                name: \"Breadth-First Shortest Path\",\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(\"Breadth-First Shortest Path\", \"breadthFirstSearch\", false);\n                },\n                display: true\n            },\n            {\n                name: \"Dijkstra Shortest Path\",\n                applyFunc: () => {\n                    makeAndPrintShortestPath(\"Dijkstra Shortest Path\", \"dijkstraSearch\", true);\n                },\n                display: true\n            },\n            {\n                name: \"Bellman-Ford Shortest Path\",\n                weighted: true,\n                directional: true,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(\"Bellman-Ford Shortest Path\", \"bellmanFord\", true);\n                },\n                display: true\n            },\n            {\n                name: \"Ford-Fulkerson\",\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintFFMCMF,\n                display: true\n            },\n            {\n                name: \"Kruskal Minimum Spanning Tree\",\n                weighted: true,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintKruskal,\n                display: true\n            },\n            {\n                name: \"Cyclic\",\n                applyFunc: UIInteractions.makeAndPrintIsCyclic,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Topological Sort\",\n                applyFunc: UIInteractions.makeAndPrintTopologicalSort,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Eulerian\",\n                directional: false,\n                display: false,\n                applyFunc: null\n            },\n            {\n                name: \"Eulerian\",\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintDirectionalEulerian\n            },\n            {\n                name: \"Run Long Task\",\n                display: true,\n                applyFunc: () => {\n                    const w = UIInteractions.getWorkerIfPossible((e) => {\n                        console.log(e.data);\n                        w.cleanup();\n                    });\n                    w.send({\n                        type: \"test\",\n                        waitTime: 10000\n                    });\n                }\n            }\n        ] as AlgorithmI[];\n    }\n\n    static registerListeners(): void {\n        const makeSimpleClickListener = (selector: string, fn: () => any) => {\n            $(selector).on(\"click\", (e) => {\n                e.preventDefault();\n                fn();\n            });\n        };\n\n        makeSimpleClickListener(\"#print-help-link\", UIInteractions.printHelp);\n        makeSimpleClickListener(\"#graph-options-link\", UIInteractions.printOptions);\n        makeSimpleClickListener(\"#load-petersen-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            window.main.setData(predefined.Petersen(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-konigsberg-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            window.main.setData(predefined.Konigsberg(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-complete-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            predefined.Complete();\n        });\n        makeSimpleClickListener(\"#load-hypercube-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            predefined.Hypercube();\n        });\n        makeSimpleClickListener(\"#load-custom-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            predefined.Custom();\n        });\n        makeSimpleClickListener(\"#undo-link\", window.main.undo);\n        makeSimpleClickListener(\"#redo-link\", window.main.redo);\n        makeSimpleClickListener(\"#calculate-all-properties-link\", async () => {\n            return GraphState.makeAndPrintProperties(true);\n        });\n        makeSimpleClickListener(\"#new-graph-layout-link\", window.main.shuffleNetworkLayout);\n        makeSimpleClickListener(\"#import-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportFileModal();\n        });\n        makeSimpleClickListener(\"#import-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportTextModal();\n        });\n        makeSimpleClickListener(\"#export-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportFileModal();\n        });\n        makeSimpleClickListener(\"#export-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportTextModal();\n        });\n    }\n\n    static printHelp(): void {\n        help.showSimpleModal(\"Help\", \"<h4>For support see the <a href='https://github.com/MikeDombo/graphPlayground' \" +\n            \"target='_blank'>GitHub repository</a> for guides</h4> <h4>See \" +\n            \"<a href='https://github.com/MikeDombo/graphPlayground/issues' target='_blank'>GitHub issues</a>\" +\n            \" to submit bugs or feature requests.</h4>\");\n    }\n\n    static printOptions(): void {\n        help.showFormModal(\n            ($modal, vals) => {\n                $modal.modal(\"hide\");\n                if (window.settings.getOption(\"nodePhysics\") !== vals[0]) {\n                    window.settings.changeOption(\"nodePhysics\", vals[0]); // Physics\n                }\n                if (window.settings.getOption(\"direction\") !== vals[1]) {\n                    window.settings.changeOption(\"direction\", vals[1]);\n                    let G = GraphState.graph;\n                    G = vals[1] ? G.asDirected(true) : G.asUndirected();\n                    // Clear node coloring because graph color doesn't apply to directed graphs\n                    window.main.setData(GraphState.getGraphData(G, true));\n                }\n                if (window.settings.getOption(\"weights\") !== vals[2]) {\n                    window.settings.changeOption(\"weights\", vals[2]);\n                    let G = GraphState.graph;\n                    G = vals[2] ? G.asWeighted() : G.asUnweighted();\n                    window.main.setData(GraphState.getGraphData(G));\n                }\n            },\n            \"Options\", \"Save\", [\n                {label: \"Graph Physics\", initialValue: window.settings.getOption(\"nodePhysics\"), type: \"checkbox\"},\n                {label: \"Directed Graph\", initialValue: window.settings.getOption(\"direction\"), type: \"checkbox\"},\n                {label: \"Weighted Graph\", initialValue: window.settings.getOption(\"weights\"), type: \"checkbox\"}\n            ], null);\n    }\n\n    static terminateAllWebWorkers(): void {\n        for (let i = 0; i < GraphState.workerPool.length; i++) {\n            const v = GraphState.workerPool[i];\n            if (v instanceof window.Worker) {\n                v.terminate();\n            }\n        }\n        GraphState.workerPool = [];\n    }\n\n    static getWorkerIfPossible(onmessage: (d: { data: any }) => any): WorkerProxy {\n        let nextIndex = GraphState.workerPool.findIndex((v) => {\n            return v === null || typeof v === 'undefined';\n        });\n        if(nextIndex === -1){\n            nextIndex = GraphState.workerPool.length;\n        }\n\n        const w = new Worker();\n        GraphState.workerPool[nextIndex] = w;\n        return new WorkerProxy(nextIndex, w, onmessage);\n    }\n\n    static makeAndPrintGraphColoring(): Promise<void> {\n        return new Promise<void>(async (resolve) => {\n            if (window.settings.getOption(\"direction\")) {\n                return resolve();\n            }\n\n            // Use cached responses when able\n            let a = {\n                chromaticNumber: (await GraphState.getProperty(\"Chromatic Number\")) as number,\n                colors: GraphState.state.graphColoring as {}\n            };\n\n            const printGC = () => {\n                GraphState.graphProperties[\"Chromatic Number\"] = a.chromaticNumber;\n                GraphState.setUpToDate(true, [\"Chromatic Number\", \"graphColoring\"]);\n                (GraphState.state.graphColoring as {}) = a.colors;\n\n                const colors = help.flatten(a.colors);\n                let p = `Number of Vertices: ${colors.length}`;\n                p += `\\nChromatic Number: ${a.chromaticNumber}`;\n                p += \"\\n\\n\";\n\n                colors.forEach((v, i) => {\n                    p += `Vertex ${GraphState.nodeIDToLabel(i)} gets color ${v}\\n`;\n                });\n\n                p += `\\n${JSON.stringify(help.rotate(a.colors), null, 4)}\\n\\n`;\n\n                p = `<h3>Graph Coloring Using Welsh-Powell Algorithm</h3><hr>${help.htmlEncode(p)}`;\n                p += \"<br/><button class='btn btn-primary' onclick='main.applyColors()'>Apply New Colors To Graph</button>\";\n\n                help.printout(p);\n                window.main.applyColors();\n            };\n\n            if (!(a.chromaticNumber !== null && (await GraphState.getProperty(\"graphColoring\")) !== null)) {\n                const w = UIInteractions.getWorkerIfPossible((e) => {\n                    a = e.data;\n                    printGC();\n                    w.cleanup();\n                    resolve(e.data);\n                });\n                w.send({\n                    type: \"colorNetwork\",\n                    args: [],\n                    graph: window.main.graphState.getGraphData(),\n                    convertToGraphImmut: true\n                });\n            }\n            else {\n                printGC();\n            }\n        });\n    }\n\n    static makeAndPrintDirectionalEulerian(): Promise<void> {\n        return new Promise<void>(async (resolve) => {\n            if (!window.settings.getOption(\"direction\")) {\n                return resolve();\n            }\n            const w = UIInteractions.getWorkerIfPossible((e) => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                w.cleanup();\n                resolve(e.data);\n            });\n\n            const scc = await GraphState.getProperty(\"stronglyConnectedComponents\", true);\n\n            w.send({\n                type: \"directionalEulerian\",\n                args: [gHelp.findVertexDegreesDirectional(GraphState.graph.getFullAdjacency()), scc]\n            });\n        });\n    }\n\n    static makeAndPrintEulerian(): Promise<void> {\n        return new Promise<void>(async (resolve) => {\n            if (window.settings.getOption(\"direction\")) {\n                return resolve(UIInteractions.makeAndPrintDirectionalEulerian());\n            }\n\n            const cc = await GraphState.getProperty(\"connectedComponents\", true);\n\n            const w = UIInteractions.getWorkerIfPossible((e) => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                w.cleanup();\n                resolve(e.data);\n            });\n            w.send({type: \"hasEulerianCircuit\", args: [GraphState.graph.getAllOutDegrees(), cc]});\n        });\n    }\n\n    static makeAndPrintFFMCMF(): void {\n        if (!window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n        help.showFormModal(async ($modal, values) => {\n                $modal.modal(\"hide\");\n\n                const source = GraphState.nodeLabelToID(values[0]);\n                const sink = GraphState.nodeLabelToID(values[1]);\n\n                let a: (boolean | FlowResult) = null;\n\n                const cb = () => {\n                    let p = `<h3>Ford-Fulkerson</h3><hr>No path exists from `;\n                    p += `${help.htmlEncode(GraphState.nodeIDToLabel(source))} to ${help.htmlEncode(GraphState.nodeIDToLabel(sink))}`;\n\n                    if (a === false) {\n                        help.printout(p);\n                        return;\n                    }\n                    a = a as { maxFlow: number; flowPath: any[] };\n\n                    p = `Ford-Fulkerson MaxFlow-MinCut Max Flow From ${GraphState.nodeIDToLabel(source)} `;\n                    p += `to ${GraphState.nodeIDToLabel(sink)}: ${a.maxFlow}`;\n                    p += \"\\n\\nUsing Capacities:\\n\\n\";\n                    p = help.htmlEncode(p);\n                    a.flowPath.forEach((v) => {\n                        p += `${GraphState.nodeIDToLabel(v.from)}&rarr;${GraphState.nodeIDToLabel(v.to)} using ${v.flow} of ${v.capacity}\\n`;\n                    });\n                    p = p.trim();\n                    p = \"<h3>Ford-Fulkerson MaxFlow-MinCut</h3><hr>\" + p;\n\n                    help.printout(p);\n                };\n\n                const w = UIInteractions.getWorkerIfPossible((e) => {\n                    a = e.data;\n                    cb();\n                    w.cleanup();\n                });\n                w.send({\n                    type: \"fordFulkerson\",\n                    args: [source, sink],\n                    convertToGraphImmut: true,\n                    graph: window.main.graphState.getGraphData()\n                });\n            },\n            \"Ford-Fulkerson MaxFlow-MinCut\", \"Go\", [\n                {label: \"Source Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator},\n                {label: \"Sink Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator}\n            ]);\n    }\n\n    static makeAndPrintKruskal(): void {\n        if (window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n\n        const w = UIInteractions.getWorkerIfPossible((e) => {\n            const a: MSTResult = e.data;\n            w.cleanup();\n\n            let p = `Kruskal's Minimum Spanning Tree Total Weight: ${a.totalWeight}`;\n            p += \"\\n\\nUsing Edges:\\n\\n\";\n            p = help.htmlEncode(p);\n            a.mst.forEach((v) => {\n                //@ts-ignore\n                p += `${GraphState.nodeIDToLabel((new EdgeImmut(v)).getFrom())}&rarr;`;\n                //@ts-ignore\n                p += `${GraphState.nodeIDToLabel((new EdgeImmut(v)).getTo())}\\n`;\n            });\n            p = p.trim();\n            p = `<h3>Kruskal Minimum Spanning Tree</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"kruskal\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static makeAndPrintIsCyclic(): Promise<void> {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        return new Promise<void>((resolve) => {\n            const w = UIInteractions.getWorkerIfPossible((e) => {\n                GraphState.graphProperties.cyclic = e.data;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                w.cleanup();\n                resolve();\n            });\n            w.send({\n                type: \"isGraphCyclic\",\n                args: [],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        });\n    }\n\n    static makeAndPrintTopologicalSort(): void {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const w = UIInteractions.getWorkerIfPossible((e) => {\n            const a: boolean | NodeImmut[] = e.data;\n            w.cleanup();\n\n            if (a === true) {\n                GraphState.graphProperties.cyclic = true;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                help.printout(\"<h3>Topological Sorting Failed</h3><hr>Topological sorting failed because the graph contains a cycle\");\n\n                return;\n            }\n\n            let p = \"Topological Sorting:\\n\\n\";\n            p = help.htmlEncode(p);\n            (a as any[]).forEach((v) => {\n                p += `${GraphState.nodeIDToLabel(v.id)}, `;\n            });\n            p = p.slice(0, -2);\n            p = `<h3>Topological Sorting</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"topologicalSort\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static printGraphAlgorithms(): void {\n        const $div = $(\"#algorithms-pane\");\n        $div.empty();\n        const directional = window.settings.getOption(\"direction\");\n        const weighted = window.settings.getOption(\"weights\");\n\n        const addAlgoToPane = (alg: AlgorithmI) => {\n            $div.append($(\"<a>\", {class: \"nav-link\", href: \"#\"})\n                .text(alg.name).on(\"click\", (e) => {\n                    e.preventDefault();\n                    alg.applyFunc();\n                }));\n        };\n\n        const a = UIInteractions.getAlgorithms();\n        a.forEach((alg) => {\n            if (!alg.display) {\n                return;\n            }\n            if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n            else if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n        });\n    }\n}\n","\"use strict\";\r\n\r\nimport 'bootstrap';\r\nimport * as Raven from 'raven-js';\r\nimport {Network} from 'vis/index-network';\r\nimport {default as main, MainI} from './main';\r\nimport Settings from './settings';\r\nimport UI from './UIInteractions';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        main: MainI;\r\n        network: Network;\r\n        settings: typeof Settings;\r\n        ui: typeof UI,\r\n        Raven: Raven.RavenStatic,\r\n        Worker: Function\r\n    }\r\n}\r\n\r\nwindow.main = main;\r\nwindow.network = new Network(main.container, {}, main.visOptions);\r\nwindow.settings = Settings;\r\nwindow.ui = UI;\r\n\r\n// Initialize Sentry.io error logging\r\nRaven.config('https://92aaeee7e2fb4ef4837a2261a029e8ed@sentry.home.mikedombrowski.com/2').install();\r\nwindow.Raven = Raven;\r\n\r\nmain.addNetworkListeners(window.network);\r\n\r\nSettings.loadSettings();\r\n\r\nlet loadDefault = true;\r\nif (Settings.checkForLocalStorage()) {\r\n    const s: string = localStorage.getItem(\"graphPlayground.lastState\");\r\n    if (s !== null) {\r\n        const jsonGraph: any = JSON.parse(s);\r\n        if (\"graph\" in jsonGraph && \"nodes\" in jsonGraph.graph) {\r\n            loadDefault = false;\r\n            main.applyState(false, jsonGraph as {graph: GraphPlain});\r\n        }\r\n    }\r\n}\r\nif (loadDefault) {\r\n    (async () => {\r\n        const predefined = (await import(\"./predefinedGraphs\")).default;\r\n        main.setData(predefined.Petersen(), false, true, true);\r\n    })();\r\n}\r\n\r\nwindow.ui.registerListeners();\r\n","\"use strict\";\n\nexport interface EdgeImmutPlain {\n    label?: string;\n    from: number;\n    to: number;\n    weight: number\n}\n\nexport default class EdgeImmut {\n    private readonly from: Readonly<number>;\n    private readonly to: Readonly<number>;\n    private readonly weight: Readonly<number>;\n\n    constructor(from: number | EdgeImmutPlain, to?: number, weight: any = 1) {\n        if(typeof from === \"object\"){\n            to = from.to;\n            weight = from.weight;\n            from = from.from;\n        }\n\n        this.from = Object.freeze(from);\n        this.to = Object.freeze(to);\n        this.weight = Object.freeze(parseFloat(weight));\n\n        if (new.target === EdgeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getFrom(): Readonly<number> {\n        return this.from;\n    }\n\n    getTo(): Readonly<number> {\n        return this.to;\n    }\n\n    getWeight(): Readonly<number> {\n        return this.weight;\n    }\n\n    toPlain(): { from: Readonly<number>; to: Readonly<number>; weight: Readonly<number> } {\n        return {from: this.from, to: this.to, weight: this.weight};\n    }\n\n    editEdge(newWeight: number): EdgeImmut {\n        return new EdgeImmut(this.getFrom(), this.getTo(), newWeight);\n    }\n}\n","\"use strict\";\n\nexport interface NodeImmutPlain {\n    id: Readonly<number>;\n    label: string;\n\n    [key: string]: any;\n\n    [key: number]: any\n}\n\nexport default class NodeImmut {\n    private readonly id: Readonly<number>;\n    private readonly label: Readonly<string>;\n    private readonly attributes: any;\n\n    constructor(id: any, label: any = null, extraAttrs: null | any = null) {\n        if (label === null) {\n            this.label = id.toString();\n        }\n        else {\n            this.label = label;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach((key) => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.label = Object.freeze(this.label);\n        this.id = Object.freeze(id);\n\n        if (new.target === NodeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    toPlain(): NodeImmutPlain {\n        const toReturn: NodeImmutPlain = {id: this.id, label: this.label};\n        Object.keys(this.attributes).forEach((key) => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    getID(): Readonly<number> {\n        return this.id;\n    }\n\n    getLabel(): Readonly<string> {\n        return this.label;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    editNode(label: any = null, extraAttrs: any = null): NodeImmut {\n        if (label === null) {\n            label = this.getLabel();\n        }\n\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        Object.keys(extraAttrs).forEach((key) => {\n            attributes[key] = extraAttrs[key];\n        });\n\n        return new NodeImmut(this.getID(), label, attributes);\n    }\n}\n","\"use strict\";\n\nimport {List} from 'immutable';\nimport {default as NodeImmut, NodeImmutPlain} from './NodeImmut';\nimport {default as EdgeImmut, EdgeImmutPlain} from './EdgeImmut';\n\ninterface NodeMapping {\n    [key: number]: number\n}\n\nconst filterNodeExtraAttr = (data: any) => {\n    return Object.keys(data)\n        .filter((key) => !([\"label\", \"id\"]).includes(key))\n        .reduce((obj: any, key) => {\n            obj[key] = data[key];\n            return obj;\n        }, {});\n};\n\nconst genericEdgesToImmutEdges = (edges: any, nodeMap: NodeMapping = {}): boolean | List<EdgeImmut> => {\n    if (edges === null) {\n        return false;\n    }\n\n    let newEdges: List<EdgeImmut> = List();\n\n    if (typeof edges === 'object') {\n        edges.forEach((edge: any) => {\n            let weight = 0;\n            let from = 0;\n            let to = 0;\n\n            if (\"weight\" in edge) {\n                weight = parseFloat(edge.weight);\n            }\n            if (\"from\" in edge) {\n                from = nodeMap[edge.from];\n            }\n            if (\"to\" in edge) {\n                to = nodeMap[edge.to];\n            }\n\n            newEdges = newEdges.push(new EdgeImmut(from, to, weight));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return newEdges;\n};\n\nconst genericNodesToImmutNodes = (nodes: any): boolean | { nodes: Readonly<List<NodeImmut>>; map: { [key: number]: number } } => {\n    if (nodes === null) {\n        return false;\n    }\n\n    let newNodes: List<NodeImmut> = List();\n    const nodeMap: NodeMapping = {};\n\n    if (typeof nodes === \"number\") {\n        // Create the nodes\n        for (let i = 0; i < Math.floor(nodes); i++) {\n            newNodes = newNodes.set(i, new NodeImmut(i));\n            nodeMap[i] = i;\n        }\n    }\n    else if (typeof nodes === 'object') {\n        let nodeNum = 0;\n        nodes.forEach((n: any) => {\n            const id = nodeNum++;\n            let label = null;\n            let extraAttrs = null;\n\n            if (\"label\" in n) {\n                label = n.label;\n            }\n            if (\"id\" in n) {\n                nodeMap[n.id] = id;\n                if (\"label\" in n && n.label === n.id.toString()) {\n                    label = id.toString();\n                }\n            }\n            else {\n                nodeMap[id] = id;\n            }\n            if (\"attributes\" in n) {\n                extraAttrs = filterNodeExtraAttr(n.attributes);\n            }\n            else {\n                extraAttrs = filterNodeExtraAttr(n);\n            }\n\n            newNodes = newNodes.set(id, new NodeImmut(id, label, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return {nodes: Object.freeze(newNodes), map: nodeMap};\n};\n\nexport default class GraphImmut {\n    private readonly directed: Readonly<boolean>;\n    private readonly weighted: Readonly<boolean>;\n    private readonly nodes: Readonly<List<NodeImmut>>;\n    private readonly numNodes: Readonly<number>;\n    private readonly edges: Readonly<List<EdgeImmut>>;\n    private readonly numEdges: Readonly<number>;\n\n    constructor(nodes: number | List<NodeImmut> | NodeImmutPlain[],\n                edges: null | List<EdgeImmut> | EdgeImmutPlain[] = null,\n                directed = false, weighted = false) {\n        this.directed = Object.freeze(directed);\n        this.weighted = Object.freeze(weighted);\n        let nodeMap = {};\n\n        // Make Nodes\n        if (typeof nodes === \"number\" || (typeof nodes === \"object\" && !(nodes instanceof List))) {\n            const n = genericNodesToImmutNodes(nodes);\n            if (typeof n !== \"object\") {\n                throw new Error(\"Unable to parse node input!\");\n            }\n            this.nodes = n.nodes;\n            nodeMap = n.map;\n        }\n        else if (nodes instanceof List) {\n            this.nodes = nodes as List<NodeImmut>;\n        }\n        else {\n            throw new Error(\"Illegal type of 'node' input to GraphImmut constructor\");\n        }\n        this.nodes = Object.freeze(this.nodes);\n        this.numNodes = Object.freeze(this.nodes.size);\n\n        // If we are given edges, add them to the graph\n        if (edges !== null && typeof edges === \"object\" && !(edges instanceof List)) {\n            const e = genericEdgesToImmutEdges(edges, nodeMap);\n            if (typeof e !== \"object\") {\n                throw new Error(\"Unable to parse Edge input\");\n            }\n            this.edges = e;\n        }\n        else if (edges instanceof List) {\n            this.edges = edges as List<EdgeImmut>;\n        }\n        else {\n            this.edges = List();\n        }\n        this.edges = Object.freeze(this.edges);\n        this.numEdges = Object.freeze(this.edges.size);\n\n        if (new.target === GraphImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    alignNodeIDs(alignTo = 0): GraphImmut {\n        const nodeMap: NodeMapping = {};\n        let nodeCount = alignTo;\n        let newNodes: List<NodeImmut> = List();\n        this.nodes.forEach((v) => {\n            let label = v.getLabel();\n            if (v.getLabel() === v.getID().toString()) {\n                label = nodeCount.toString();\n            }\n\n            newNodes = newNodes.set(nodeCount, new NodeImmut(nodeCount, label, v.getAllAttributes()));\n            nodeMap[v.getID()] = nodeCount++;\n        });\n\n        let newEdges: List<EdgeImmut> = List();\n        this.edges.forEach((v) => {\n            newEdges = newEdges.push(new EdgeImmut(nodeMap[v.getFrom()], nodeMap[v.getTo()], v.getWeight()));\n        });\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    getNode(id: number, rich = false): NodeImmut | NodeImmutPlain | boolean {\n        if (id >= this.numNodes) {\n            return false;\n        }\n        if (rich) {\n            return this.nodes.get(id);\n        }\n        return this.nodes.get(id).toPlain();\n    }\n\n    addNode(data: any = null): GraphImmut {\n        if (data === null) {\n            data = {};\n        }\n\n        const id = this.numNodes;\n        if (!(\"label\" in data)) {\n            data.label = id.toString();\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n\n        return new GraphImmut(this.nodes.set(id, new NodeImmut(id, data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    editNode(id: number, data: any): any {\n        if (!this.nodes.has(id)) {\n            return false;\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n        if (!(\"label\" in data)) {\n            data.label = (this.getNode(id, true) as NodeImmut).getLabel();\n        }\n        return new GraphImmut(this.nodes.set(id, (this.getNode(id, true) as NodeImmut).editNode(data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    deleteNode(id: number): GraphImmut | boolean {\n        // Make sure the ID exists\n        if (!(id >= 0 && id < this.numNodes)) {\n            return false;\n        }\n\n        const nodeMap: NodeMapping = {}; // Map for old IDs to new ones since we're deleting an entry\n\n        // Remove it from the node list\n        let nodeCount = 0;\n        const newNodes: List<NodeImmut> = this.nodes\n            .filter((n) => {\n                if (n.getID() === id) {\n                    nodeMap[n.getID()] = -1;\n                }\n                else {\n                    nodeMap[n.getID()] = nodeCount++;\n                }\n\n                return n.getID() !== id;\n            })\n            .map((node) => {\n                let label = node.getLabel();\n                if (node.getID().toString() === label) {\n                    label = nodeMap[node.getID()].toString();\n                }\n\n                return new NodeImmut(nodeMap[node.getID()], label, node.getAllAttributes());\n            }) as List<NodeImmut>;\n\n        // Remap edges\n        const newEdges: List<EdgeImmut> = this.edges\n            .filter((edge) => {\n                return !(edge.getFrom() === id || edge.getTo() === id);\n            })\n            .map((edge) => {\n                return new EdgeImmut(nodeMap[edge.getFrom()], nodeMap[edge.getTo()], edge.getWeight());\n            }) as List<EdgeImmut>;\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    addEdge(from: number, to: number, weight: any = 1): GraphImmut {\n        if (!this.weighted) {\n            weight = 1; // Ensure that edge weights are 1 if this is an unweighted graph\n        }\n\n        const newEdges = this.edges.push(new EdgeImmut(from, to, parseFloat(weight)));\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    deleteEdge(from: number, to: number, weight: any = null, deleteAll = true): GraphImmut {\n        if (weight !== null) {\n            weight = parseFloat(weight);\n        }\n\n        let foundOneEdge = false;\n        const newEdges: List<EdgeImmut> = this.edges.filter((edge) => {\n            // If we're not deleting everything and we have found one edge, then do not filter anymore\n            if (foundOneEdge && !deleteAll) {\n                return true;\n            }\n\n            // If we have an exact match\n            if (edge.getFrom() === from && edge.getTo() === to && (weight === null || edge.getWeight() === weight)) {\n                foundOneEdge = true;\n                return false; // Remove this edge\n            }\n\n            // If we are undirected, check for opposing matches\n            if (!this.directed) {\n                if (edge.getFrom() === to && edge.getTo() === from && (weight === null || edge.getWeight() === weight)) {\n                    foundOneEdge = true;\n                    return false; // Remove this edge\n                }\n            }\n\n            return true;\n        }) as List<EdgeImmut>;\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    editEdge(from: number, to: number, newWeight: any, oldWeight: any = null): GraphImmut | boolean {\n        // Editing only makes sense for weighted graphs.\n        // To change from/to, just delete the edge and add a new one\n        if (!this.weighted) {\n            return false;\n        }\n\n        let foundFirst = false;\n\n        if (oldWeight !== null) {\n            oldWeight = parseFloat(oldWeight);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge, index) => {\n            if (foundFirst) {\n                return;\n            }\n            if (edge.getFrom() === from && edge.getTo() === to && (oldWeight === null || edge.getWeight() === oldWeight)) {\n                newEdges = newEdges.set(index, edge.editEdge(parseFloat(newWeight)));\n                foundFirst = true;\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    getAllNodes(rich = false): NodeImmut[] | NodeImmutPlain[] {\n        if (rich) {\n            return this.nodes.toArray();\n        }\n        return this.nodes.map((node) => {\n            return node.toPlain();\n        }).toArray();\n    }\n\n    getAllNodesAsImmutableList(): List<NodeImmut> {\n        return this.nodes;\n    }\n\n    getAllEdgesAsImmutableList(): List<EdgeImmut> {\n        return this.edges;\n    }\n\n    getAllEdges(rich = false): EdgeImmut[] | EdgeImmutPlain[] {\n        if (rich) {\n            return this.edges.toArray();\n        }\n        return this.edges.map((edge) => {\n            return edge.toPlain();\n        }).toArray();\n    }\n\n    getNumberOfNodes(): number {\n        return this.numNodes;\n    }\n\n    getNumberOfEdges(): number {\n        return this.numEdges;\n    }\n\n    getAllOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() in degrees) {\n                degrees[edge.getFrom()]++;\n            }\n            else {\n                degrees[edge.getFrom()] = 1;\n            }\n        });\n\n        return degrees;\n    }\n\n    asWeighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, true);\n    }\n\n    asUnweighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, false);\n    }\n\n    asDirected(doubleEdges = false): GraphImmut {\n        if (!doubleEdges) {\n            return new GraphImmut(this.nodes, this.edges, true, this.weighted);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.getTo(), edge.getFrom(), edge.getWeight()));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, true, this.weighted);\n    }\n\n    asUndirected(): GraphImmut {\n        let newEdges: List<EdgeImmut> = List();\n        const addedEdges: { [key: string]: null } = {};\n\n        this.edges.forEach((edge) => {\n            let from = edge.getFrom();\n            let to = edge.getTo();\n            if (to > from) {\n                from = to;\n                to = edge.getFrom();\n            }\n            if (!(`${from}_${to}` in addedEdges)) {\n                addedEdges[`${from}_${to}`] = null;\n                newEdges = newEdges.push(new EdgeImmut(from, to, edge.getWeight()));\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, false, this.weighted);\n    }\n\n    asChangedDirectedWeighted(directed: boolean, weighted: boolean): GraphImmut {\n        let G: GraphImmut = this;\n        if (directed && !this.directed) {\n            G = this.asDirected();\n        }\n        else if (!directed && this.directed) {\n            G = this.asUndirected();\n        }\n\n        if (weighted && !this.weighted) {\n            G = this.asWeighted();\n        }\n        else if (!weighted && this.weighted) {\n            G = this.asUnweighted();\n        }\n\n        return G;\n    }\n\n    getNodeAdjacency(id: number): number[] {\n        const adj: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() === id) {\n                adj.push(edge.getTo());\n            }\n            else if (!this.directed && edge.getTo() === id) {\n                adj.push(edge.getFrom());\n            }\n        });\n\n        return adj;\n    }\n\n    getFullAdjacency(): number[][] {\n        const adj: number[][] = [];\n        this.nodes.forEach((n) => {\n            adj[n.getID()] = this.getNodeAdjacency(n.getID());\n        });\n\n        return adj;\n    }\n\n    areAdjacent(id1: number, id2: number): boolean {\n        return this.getNodeAdjacency(id1).includes(id2);\n    }\n\n    getEdgesBetween(id1: number, id2: number): EdgeImmut[] {\n        const edgeList: EdgeImmut[] = [];\n        this.edges.forEach((edge) => {\n            if (!this.directed && edge.getFrom() === id2 && edge.getTo() === id1) {\n                edgeList.push(edge);\n            }\n\n            if (edge.getFrom() === id1 && edge.getTo() === id2) {\n                edgeList.push(edge);\n            }\n        });\n\n        return edgeList;\n    }\n\n    getMinWeightEdgeBetween(id1: number, id2: number): number {\n        let minWeight = Infinity;\n        this.getEdgesBetween(id1, id2).forEach((edge) => {\n            if (edge.getWeight() < minWeight) {\n                minWeight = edge.getWeight();\n            }\n        });\n\n        return minWeight;\n    }\n\n    // Take a multigraph and reduce all multiple edges to a single edge, weighted using the reducer\n    reduceMultiGraph(reducer: (a: number, b: number) => number, initialValue?: any): GraphImmut {\n        if (typeof initialValue === \"undefined\") {\n            initialValue = 0;\n        }\n\n        const multiEdges: EdgeImmutPlain[] = [];\n        this.nodes.forEach((node) => {\n            // If we have duplicates\n            const adj = this.getNodeAdjacency(node.getID());\n            const uniques = new Set(adj);\n            if (uniques.size < adj.length) {\n                uniques.forEach((to) => {\n                    const newWeight = this.getEdgesBetween(node.getID(), to).reduce((acc, edge) => {\n                        return reducer(acc, edge.getWeight());\n                    }, initialValue);\n\n                    multiEdges.push({from: node.getID(), to, weight: parseFloat(newWeight)});\n                });\n            }\n        });\n\n        // Remove all multigraph edges and replace them with single new edges\n        let newEdges = this.edges.filter((edge) => {\n            let keep = true;\n            multiEdges.forEach((duplicateEdge) => {\n                if (edge.getFrom() === duplicateEdge.from && edge.getTo() === duplicateEdge.to) {\n                    keep = false;\n                }\n            });\n\n            return keep;\n        }) as List<EdgeImmut>;\n        multiEdges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.from, edge.to, edge.weight));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    isWeighted() {\n        return this.weighted;\n    }\n\n    isDirected() {\n        return this.directed;\n    }\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/js/predefinedGraphs.ts"],"names":["petersenEdges","_genericHelpers__WEBPACK_IMPORTED_MODULE_1__","deepFreeze","from","to","konigsbergEdges","self","graphNames","Petersen","edges","nodes","_graphHelpers__WEBPACK_IMPORTED_MODULE_0__","interpolateNodesFromEdges","directed","weighted","Konigsberg","Complete","showFormModal","$modal","vals","modal","window","main","setData","V","i","push","id","label","toString","j","completeGraph","type","initialValue","validationFunc","v","Hypercube","D","numNodes","Math","pow","pad","str","max","length","generateDifferByOne","input","numBits","inputBits","split","reverse","allDiffer","b","newNum","slice","parseInt","join","forEach","hypercubeGraph","Custom","newCustomGraph","__webpack_exports__"],"mappings":"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","file":"1-8f92d2300dde419096a8.min.js","sourcesContent":["\"use strict\";\r\n\r\nimport gHelp from './graphHelpers';\r\nimport help from './genericHelpers';\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\n\r\nconst petersenEdges = help.deepFreeze([\r\n    {from: 1, to: 2},\r\n    {from: 2, to: 3},\r\n    {from: 3, to: 4},\r\n    {from: 4, to: 5},\r\n    {from: 5, to: 1},\r\n\r\n    {from: 6, to: 8},\r\n    {from: 7, to: 9},\r\n    {from: 7, to: 10},\r\n    {from: 8, to: 10},\r\n    {from: 9, to: 6},\r\n\r\n    {from: 1, to: 6},\r\n    {from: 2, to: 7},\r\n    {from: 3, to: 8},\r\n    {from: 4, to: 9},\r\n    {from: 5, to: 10}\r\n]);\r\n\r\nconst konigsbergEdges = help.deepFreeze([\r\n    {from: 1, to: 2},\r\n    {from: 2, to: 3},\r\n    {from: 2, to: 4},\r\n    {from: 3, to: 4},\r\n    {from: 3, to: 4},\r\n    {from: 4, to: 1},\r\n    {from: 4, to: 1},\r\n]);\r\n\r\nconst completeGraph = (V: number): Readonly<GraphPlain> => {\r\n    let edges = [];\r\n    let nodes = [];\r\n\r\n    for (let i = 0; i < V; i++) {\r\n        nodes.push({id: i, label: i.toString()});\r\n        for (let j = i + 1; j < V; j++) {\r\n            edges.push({from: i, to: j});\r\n        }\r\n    }\r\n\r\n    return <Readonly<GraphPlain>> help.deepFreeze({nodes: nodes, edges: edges, directed: false, weighted: false});\r\n};\r\n\r\nconst hypercubeGraph = (D: number): Readonly<GraphPlain> => {\r\n    let edges = [];\r\n    let nodes = [];\r\n\r\n    let numNodes = Math.pow(2, D);\r\n\r\n    let pad = (str, max) => {\r\n        return str.length < max ? pad(\"0\" + str, max) : str;\r\n    };\r\n\r\n    const generateDifferByOne = (input: number, numBits: number) => {\r\n        let inputBits = pad((input).toString(2), numBits).split(\"\").reverse();\r\n        let allDiffer = [];\r\n\r\n        // 1 bit difference from input, increasing order, none less than input\r\n        for (let b = 0; b < numBits; b++) {\r\n            if (inputBits[b] === \"0\") {\r\n                let newNum = inputBits.slice();\r\n                newNum[b] = \"1\";\r\n                allDiffer.push(parseInt(newNum.reverse().join(\"\"), 2));\r\n            }\r\n        }\r\n\r\n        return allDiffer;\r\n    };\r\n\r\n    for (let i = 0; i < numNodes; i++) {\r\n        nodes.push({id: i, label: pad(i.toString(2), D)});\r\n        generateDifferByOne(i, D).forEach((j) => {\r\n            edges.push({from: i, to: j});\r\n        });\r\n    }\r\n\r\n    return <Readonly<GraphPlain>> help.deepFreeze({nodes: nodes, edges: edges, directed: false, weighted: false});\r\n};\r\n\r\nconst newCustomGraph = (V: number, directed: boolean = false, weighted: boolean = false): Readonly<GraphPlain> => {\r\n    let nodes = [];\r\n    for (let i = 0; i < V; i++) {\r\n        nodes.push({id: i, label: i.toString()});\r\n    }\r\n\r\n    return <Readonly<GraphPlain>> help.deepFreeze({nodes: nodes, edges: [], directed: directed, weighted: weighted});\r\n};\r\n\r\nexport interface predefinedGraphsI {\r\n    graphNames: string[];\r\n    Petersen: () => GraphPlain;\r\n    Konigsberg: () => GraphPlain;\r\n    Complete: () => void;\r\n    Hypercube: () => void;\r\n    Custom: () => void\r\n}\r\n\r\nconst self = {\r\n    graphNames: help.deepFreeze([\"Petersen\", \"Konigsberg\", \"Complete\", \"Hypercube\"]),\r\n    Petersen: () => (help.deepFreeze({\r\n        edges: petersenEdges,\r\n        nodes: gHelp.interpolateNodesFromEdges(<EdgeImmutPlain[]> petersenEdges),\r\n        directed: false,\r\n        weighted: false,\r\n    })),\r\n    Konigsberg: () => (help.deepFreeze({\r\n        edges: konigsbergEdges,\r\n        nodes: gHelp.interpolateNodesFromEdges(<EdgeImmutPlain[]> konigsbergEdges),\r\n        directed: false,\r\n        weighted: false,\r\n    })),\r\n    Complete: () => {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(completeGraph(vals[0]), false, true, true);\r\n            },\r\n            \"Configurable Complete Graph\", \"Go\",\r\n            [{\r\n                type: \"numeric\", initialValue: 5, label: \"Number of Vertices\", validationFunc: (v) => {\r\n                    return v >= 0 || \"Number of vertices must be non-negative\";\r\n                }\r\n            }]);\r\n    },\r\n    Hypercube: () => {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(hypercubeGraph(vals[0]), false, true, true);\r\n            },\r\n            \"Configurable Hypercube Graph\", \"Go\",\r\n            [{\r\n                type: \"numeric\", initialValue: 3, label: \"Number of Dimensions\", validationFunc: (v) => {\r\n                    return v >= 0 || \"Number of dimensions must be non-negative\";\r\n                }\r\n            }]);\r\n    },\r\n    Custom: () => {\r\n        help.showFormModal(($modal, vals) => {\r\n                $modal.modal(\"hide\");\r\n                window.main.setData(newCustomGraph(vals[0], vals[1], vals[2]), false, true, true);\r\n            },\r\n            \"Configurable Graph\", \"Go\",\r\n            [\r\n                {\r\n                    type: \"numeric\", initialValue: 0, label: \"Number of Vertices\", validationFunc: (v) => {\r\n                        return v >= 0 || \"Number of vertices must be non-negative\";\r\n                    }\r\n                },\r\n                {type: \"checkbox\", initialValue: false, label: \"Directed\"},\r\n                {type: \"checkbox\", initialValue: false, label: \"Weighted\"},\r\n            ]);\r\n    },\r\n};\r\nexport default self;\r\n"],"sourceRoot":""}
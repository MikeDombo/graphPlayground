{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/graphState.ts","webpack:///./src/js/genericHelpers.ts","webpack:///./src/js/graphHelpers.ts","webpack:///./src/js/main.ts","webpack:///./src/js/settings.ts","webpack:///./src/js/UIInteractions.ts","webpack:///./src/js/app.ts","webpack:///./src/js/GraphImmut/NodeImmut.ts","webpack:///./src/js/GraphImmut/EdgeImmut.ts","webpack:///./src/js/GraphImmut/GraphImmut.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","5","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","head","document","getElementsByTagName","script","createElement","charset","timeout","nc","setAttribute","src","p","0","1","2","setTimeout","onScriptComplete","type","target","event","onerror","onload","clearTimeout","chunk","errorType","realSrc","error","Error","request","undefined","appendChild","all","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","oe","err","console","jsonpArray","window","oldJsonpFunction","bind","slice","getInt","v","parseInt","GraphState","setUpToDate","listOptions","upToDate","forEach","always","indexOf","makeAndPrintProperties","getProperty","updateIfNotUpdated","a","find","applyFunc","_a","sent","state","graphProperties","getPropertyImm","recalcLong","directional","settings","getOption","vertices","graph","getNumberOfNodes","edges","getNumberOfEdges","keys","__awaiter","_this","printableProperties","map","_b","_c","printGraphProperties","properties","k","_genericHelpers__WEBPACK_IMPORTED_MODULE_2__","toTitleCase","trim","htmlEncode","jquery__WEBPACK_IMPORTED_MODULE_0__","html","addEdge","from","to","weight","edgeFrom","edgeTo","main","setData","nodes","clearColorFromNodes","getAllNodes","getAllEdges","addNode","label","x","y","editNode","id","iId","getGraphData","editEdge","newWeight","oldWeight","newGraph","_GraphImmut_GraphImmut__WEBPACK_IMPORTED_MODULE_3__","deleteEdge","deleteNode","color","nodeIDToLabel","getNode","_GraphImmut_NodeImmut__WEBPACK_IMPORTED_MODULE_4__","getLabel","toString","nodeLabelToID","filter","node","toLowerCase","getID","rID","found","getGraphAsDataSet","isWeighted","vis_index_network__WEBPACK_IMPORTED_MODULE_1__","setLocations","locations","newNodes","getAllNodesAsImmutableList","getAttribute","set","getAllEdgesAsImmutableList","isDirected","clearColors","directed","weighted","backHistory","forwardHistory","maxHistory","ui","makeAndPrintGraphColoring","makeAndPrintEulerian","makeAndPrintConnectedComponents","makeAndPrintStronglyConnectedComponents","makeAndPrintIsCyclic","stronglyConnectedComponents","connectedComponents","graphColoring","eulerian","Chromatic Number","Connected Components","Strongly Connected Components","cyclic","defaultCancelCb","$modal","modal","self","deepFreeze","freeze","getOwnPropertyNames","prop","isFrozen","sort","arr","compareFunction","datasetToArray","ds","key","keepOnlyKeys","getFileExtension","filename","split","string","text","replace","printout","escape","flatten","rotate","max","iterable","reduce","b","Math","str","match","toUpperCase","showSimpleModal","title","body","showFormModal","initialValue","makeFormModal","successText","form","footer","f","class","formRow","basicMap","extraAttrs","attrname","validFunc","container","validationFunc","generalValidator","valueMutator","$v","val","valid","removeClass","next","remove","addClass","after","append","checked","for","prepend","clickDismiss","$b","onclick","on","parseFloat","$options_1","optionText","oText","oIndex","optionValues","$footer","tabindex","role","aria-hidden","data-dismiss","aria-label","off","last","trigger","first","successCb","cancelCb","vals","hasErrors","each","tagName","attr","files","hasClass","__webpack_exports__","findVertexDegreesDirectional","adjacencyMatrix","degrees","out","in","outV","interpolateNodesFromEdges","main_self","graphState","getElementById","visWeightEdgeEdit","callback","genericHelpers","visOptions","interaction","hover","manipulation","$popup","saveData","cancelEdit","confirm","network","_data","fromId","toId","operation","nodeLabelIDValidator","applyColors","main_awaiter","graphColors","chromaticNumber","colors","randomColor_default","count","luminosity","G","recalcProps","graphChanged","rearrangeGraph","saveState","changeOption","g","GraphImmut","randomizeNetworkLayoutSeed","getPositions","disableEditMode","enableEditMode","printGraphAlgorithms","saveStateLocalStorage","getStateForSaving","jquery","parent","includes","Array","isArray","undo","applyState","redo","newState","firstLoad","currentState","pop","oldKey","then","checkForLocalStorage","localStorage","setItem","JSON","stringify","shuffleNetworkLayout","round","random","layoutEngine","randomSeed","initialRandomSeed","addNetworkListeners","editEdgeMode","lastNetworkClickEvent","has","parents","deleteSelected","ctrlKey","shiftKey","settings_self","defaults","nodePhysics","direction","weights","current","removeItem","saveSettings","loadSettings","parse","getItem","setAll","setOptions","physics","arrows","editWithoutDrag","option","resetToDefault","asChangedDirectedWeighted","UIInteractions_makeAndPrintShortestPath","fn","values","source","sink","pathExists","distance","cost","path","UIInteractions_callWithGraphAlgorithms","UIInteractions_awaiter","gAlgo","UIInteractions_makeAndPrintComponents","stronglyConnected","cc","componentKey","components","UIInteractions","getAlgorithms","display","makeAndPrintBFS","makeAndPrintDijkstra","makeAndPrintBFSP","makeAndPrintFFMCMF","makeAndPrintKruskal","makeAndPrintTopologicalSort","makeAndPrintDirectionalEulerian","registerListeners","this","makeSimpleClickListener","selector","preventDefault","printHelp","printOptions","predefined","default","Petersen","Konigsberg","Complete","Hypercube","Custom","makeImportFileModal","makeImportTextModal","makeExportFileModal","makeExportTextModal","asDirected","asUndirected","asWeighted","asUnweighted","colorNetwork","directionalEulerian","graphHelpers","getFullAdjacency","hasEulerianCircuit","getAllOutDegrees","breadthFirstSearch","dijkstraSearch","bellmanFord","fordFulkerson","maxFlow","flowPath","flow","capacity","kruskal","totalWeight","mst","getFrom","getTo","isGraphCyclic","topologicalSort","$div","empty","addAlgoToPane","alg","href","index_network","js_UIInteractions","singleton","install","Raven","app_loadDefault","app_s","app_jsonGraph","app_awaiter","NodeImmut","attributes","_newTarget","toPlain","toReturn","attribute","getAllAttributes","assign","EdgeImmut","getWeight","GraphImmut_filterNodeExtraAttr","obj","GraphImmut_genericEdgesToImmutEdges","nodeMap","newEdges","immutable","edge","GraphImmut_EdgeImmut","GraphImmut_genericNodesToImmutNodes","floor","nodeNum_1","GraphImmut_GraphImmut","numNodes","size","numEdges","alignNodeIDs","alignTo","nodeCount","rich","deleteAll","foundOneEdge","foundFirst","index","toArray","doubleEdges","addedEdges","getNodeAdjacency","adj","areAdjacent","id1","id2","getEdgesBetween","edgeList","getMinWeightEdgeBetween","minWeight","Infinity","reduceMultiGraph","reducer","multiEdges","uniques","Set","acc","keep","duplicateEdge"],"mappings":"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","file":"bundle-c570f63dab58dfc8ec3d.min.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \tvar installedChunks = {\n \t\t5: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar head = document.getElementsByTagName('head')[0];\n \t\t\t\tvar script = document.createElement('script');\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \"-\" + {\"0\":\"664acc8ea8f7eabb128e\",\"1\":\"200c1dffc07d0dde6cb6\",\"2\":\"d923951ec2d4962dafb0\"}[chunkId] + \".min.js\";\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tfunction onScriptComplete(event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\tvar error = new Error('Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')');\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\thead.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([43,3]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","\"use strict\";\r\n\r\nimport * as $ from 'jquery';\r\nimport {DataSet, Edge} from 'vis/index-network';\r\nimport help from './genericHelpers';\r\nimport GraphImmut from './GraphImmut/GraphImmut';\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\nimport NodeImmut, {NodeImmutPlain} from \"./GraphImmut/NodeImmut\";\r\n\r\ninterface UpToDateProperties {\r\n    name: string;\r\n    upToDate: boolean;\r\n    type: string;\r\n    always?: boolean;\r\n    applyFunc?: () => Promise<any>;\r\n    [index: string]: string|boolean|(() => Promise<any>)\r\n}\r\n\r\ninterface GraphProperties {\r\n    vertices: number;\r\n    edges: number;\r\n    eulerian: boolean;\r\n    \"Chromatic Number\": number | null;\r\n    \"Connected Components\": number | null;\r\n    \"Strongly Connected Components\": number | null;\r\n    cyclic: boolean;\r\n\r\n    [index: string]: boolean | number | null;\r\n}\r\n\r\ninterface GraphStateData {\r\n    stronglyConnectedComponents: null | { [key: number]: number };\r\n    connectedComponents: null | { [key: number]: number };\r\n    graphColoring: null | number[];\r\n\r\n    [index: string]: null | number[] | { [key: number]: number };\r\n}\r\n\r\nexport interface AddNodeI {\r\n    id?: number\r\n    label: string;\r\n    x: number;\r\n    y: number;\r\n    color?:string;\r\n}\r\n\r\nexport interface GraphStateHistory {\r\n    upToDate: UpToDateProperties[];\r\n    state: GraphStateData;\r\n    graph: GraphImmut;\r\n    graphProperties: GraphProperties;\r\n    [index: string]: UpToDateProperties[]|GraphStateData|GraphImmut|GraphProperties;\r\n}\r\n\r\nconst getInt = (v: string|number): number => {\r\n    if(typeof v === 'number'){\r\n        return v;\r\n    }\r\n    return parseInt(v);\r\n};\r\n\r\nexport default class GraphState {\r\n    public static backHistory: GraphStateHistory[] = [];\r\n    public static forwardHistory: GraphStateHistory[] = [];\r\n    public static maxHistory = 10;\r\n    public static upToDate: UpToDateProperties[] = [\r\n        {\r\n            name: \"Chromatic Number\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {\r\n            name: \"graphColoring\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {name: \"vertices\", upToDate: true, always: true, type: \"property\"},\r\n        {name: \"edges\", upToDate: true, always: true, type: \"property\"},\r\n        {\r\n            name: \"eulerian\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintEulerian();\r\n            }\r\n        },\r\n        {\r\n            name: \"Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintConnectedComponents();\r\n            }\r\n        },\r\n        {\r\n            name: \"connectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintConnectedComponents();\r\n            }\r\n        },\r\n        {\r\n            name: \"Strongly Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintStronglyConnectedComponents();\r\n            }\r\n        },\r\n        {\r\n            name: \"stronglyConnectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintStronglyConnectedComponents();\r\n            }\r\n        },\r\n        {\r\n            name: \"cyclic\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintIsCyclic();\r\n            }\r\n        },\r\n    ];\r\n    public static state: GraphStateData = {\r\n        stronglyConnectedComponents: null,\r\n        connectedComponents: null,\r\n        graphColoring: null,\r\n    };\r\n    public static graph: GraphImmut = null;\r\n    public static graphProperties: GraphProperties = {\r\n        vertices: 0,\r\n        edges: 0,\r\n        eulerian: false,\r\n        \"Chromatic Number\": null,\r\n        \"Connected Components\": null,\r\n        \"Strongly Connected Components\": null,\r\n        cyclic: false,\r\n    };\r\n\r\n    static setUpToDate(value = false, listOptions?: string[]) {\r\n        const all = listOptions === null || typeof listOptions === \"undefined\";\r\n        let property = false;\r\n        GraphState.upToDate.forEach((v) => {\r\n            if ((!(\"always\" in v) || !v.always) && (all || listOptions.indexOf(v.name) > -1)) {\r\n                v.upToDate = value;\r\n                if (v.type === \"property\") {\r\n                    property = true;\r\n                }\r\n            }\r\n        });\r\n        if (property) {\r\n            GraphState.makeAndPrintProperties();\r\n        }\r\n    }\r\n\r\n    static async getProperty(property: string, updateIfNotUpdated = false): Promise<any> {\r\n        const a = GraphState.upToDate.find((v) => {\r\n            return (\"name\" in v && v.name === property);\r\n        });\r\n        if (!a.upToDate) {\r\n            if (\"applyFunc\" in a && updateIfNotUpdated) {\r\n                await a.applyFunc();\r\n            }\r\n            else {\r\n                return Promise.resolve(null);\r\n            }\r\n        }\r\n        if (a.type === \"state\") {\r\n            return Promise.resolve(GraphState.state[property]);\r\n        }\r\n        return Promise.resolve(GraphState.graphProperties[property]);\r\n    }\r\n\r\n    static getPropertyImm(property: string): any {\r\n        const a = GraphState.upToDate.find((v) => {\r\n            return (\"name\" in v && v.name === property);\r\n        });\r\n        if (!a.upToDate) {\r\n            return null;\r\n        }\r\n        if (a.type === \"state\") {\r\n            return GraphState.state[property];\r\n        }\r\n        return GraphState.graphProperties[property];\r\n    }\r\n\r\n    static async makeAndPrintProperties(recalcLong = false) {\r\n        const directional = window.settings.getOption(\"direction\");\r\n\r\n        GraphState.graphProperties.vertices = GraphState.graph.getNumberOfNodes();\r\n        GraphState.graphProperties.edges = GraphState.graph.getNumberOfEdges();\r\n\r\n        if (!directional) {\r\n            await GraphState.getProperty(\"eulerian\", true);\r\n        }\r\n\r\n        const p = Object.keys(GraphState.graphProperties);\r\n        if (recalcLong) {\r\n            p.forEach(async (v) => {\r\n                await GraphState.getProperty(v, true);\r\n            });\r\n        }\r\n\r\n        const printableProperties: any = {};\r\n        await Promise.all(p.map(async (v) => {\r\n            printableProperties[v] = await GraphState.getProperty(v);\r\n        }));\r\n\r\n        GraphState.printGraphProperties(printableProperties);\r\n    }\r\n\r\n    static printGraphProperties(properties: any) {\r\n        let p = \"\";\r\n        Object.keys(properties).forEach((k) => {\r\n            if (properties[k] !== null) {\r\n                p += `${help.toTitleCase(k)}: ${properties[k]}\\n`;\r\n            }\r\n        });\r\n        p = p.trim();\r\n        p = help.htmlEncode(p);\r\n        $(\"#graphProps\").html(`<p class='nav-link'>${p}</p>`);\r\n    }\r\n\r\n    static addEdge(from: number|string, to: number|string, weight = 0, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        graph = graph.addEdge(edgeFrom, edgeTo, weight);\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[]\r\n        });\r\n    }\r\n\r\n    static addNode(data: AddNodeI, graph = GraphState.graph) {\r\n        graph = graph.addNode({label: data.label, x: data.x, y: data.y});\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[]\r\n        });\r\n    }\r\n\r\n    static editNode(id: number|string, label: string, graph = GraphState.graph) {\r\n        const iId = getInt(id);\r\n        graph = graph.editNode(iId, {label});\r\n        window.main.setData(GraphState.getGraphData(graph), false, false);\r\n    }\r\n\r\n    static editEdge(from: number|string, to: number|string, newWeight: number, oldWeight: number, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        const newGraph = graph.editEdge(edgeFrom, edgeTo, newWeight, oldWeight);\r\n        if (newGraph instanceof GraphImmut) {\r\n            window.main.setData(GraphState.getGraphData(newGraph), false, false);\r\n        }\r\n    }\r\n\r\n    static deleteEdge(from: number|string, to: number|string, weight: number = null, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        graph = graph.deleteEdge(edgeFrom, edgeTo, weight, false);\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[]\r\n        });\r\n    }\r\n\r\n    static deleteNode(id: number|string, graph = GraphState.graph) {\r\n        const iId = getInt(id);\r\n        const newGraph = graph.deleteNode(iId);\r\n        if (newGraph instanceof GraphImmut) {\r\n            window.main.setData({\r\n                nodes: GraphState.clearColorFromNodes(newGraph.getAllNodes() as NodeImmutPlain[]),\r\n                edges: newGraph.getAllEdges() as EdgeImmutPlain[]\r\n            });\r\n        }\r\n    }\r\n\r\n    static clearColorFromNodes(nodes: NodeImmutPlain[]): NodeImmutPlain[] {\r\n        nodes.forEach((v) => {\r\n            v.color = null;\r\n        });\r\n        return nodes;\r\n    }\r\n\r\n    static nodeIDToLabel(id: number, graph = GraphState.graph): string {\r\n        const n = graph.getNode(id, true);\r\n        if (n !== false && n !== null && n instanceof NodeImmut && n.getLabel().trim().length > 0) {\r\n            return n.getLabel().trim();\r\n        }\r\n\r\n        return id.toString();\r\n    }\r\n\r\n    // Preferentially search by ID, label, and case-insensitive label\r\n    static nodeLabelToID(label: string, graph = GraphState.graph) {\r\n        let n = graph.getAllNodes(true) as NodeImmut[];\r\n        n = n.filter((node) => {\r\n            return node.getLabel().toLowerCase() === label.toLowerCase() || node.getID().toString() === label;\r\n        });\r\n\r\n        if (n.length === 0) {\r\n            return -1;\r\n        }\r\n        else if (n.length === 1) {\r\n            return n[0].getID();\r\n        }\r\n\r\n        let rID = -1;\r\n        let found = false;\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getID().toString() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel().toLowerCase() === label.toLowerCase()) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        return rID;\r\n    }\r\n\r\n    // Return graph as a Vis compatible dataset\r\n    static getGraphAsDataSet(graph: GraphImmut): { nodes: DataSet<vis.Node>; edges: DataSet<vis.Edge> } {\r\n        const d = GraphState.getGraphData(graph);\r\n        if (graph.isWeighted()) {\r\n            d.edges.forEach((e) => {\r\n                e.label = e.weight.toString();\r\n            });\r\n        }\r\n\r\n        return {nodes: new DataSet(d.nodes as vis.Node[]), edges: new DataSet(d.edges as vis.Edge[])};\r\n    }\r\n\r\n    static setLocations(locations: {[key: string]: {x: number; y: number}}, graph = GraphState.graph): GraphImmut {\r\n        let newNodes = graph.getAllNodesAsImmutableList();\r\n        Object.keys(locations).forEach((i) => {\r\n            const v = locations[i];\r\n            const node = newNodes.get(parseInt(i));\r\n            // Only change when there is actually a new position\r\n            if (node.getAttribute(\"x\") !== v.x || node.getAttribute(\"y\") !== v.y) {\r\n                // Batch up all changes that we'll be making\r\n                newNodes = newNodes.set(parseInt(i), node.editNode(node.getLabel(), {x: v.x, y: v.y}));\r\n            }\r\n        });\r\n\r\n        return new GraphImmut(newNodes, graph.getAllEdgesAsImmutableList(), graph.isDirected(), graph.isWeighted());\r\n    }\r\n\r\n    static getGraphData(graph = GraphState.graph, clearColors = false): GraphPlain {\r\n        const nodes = graph.getAllNodes() as NodeImmutPlain[];\r\n        return {\r\n            nodes: clearColors ? GraphState.clearColorFromNodes(nodes) : nodes,\r\n            edges: graph.getAllEdges() as EdgeImmutPlain[],\r\n            directed: graph.isDirected(),\r\n            weighted: graph.isWeighted()\r\n        };\r\n    }\r\n}\r\n","\"use strict\";\r\n\r\nimport * as $ from 'jquery';\r\n\r\ndeclare interface ModalFormRow {\r\n    type: string;\r\n    label?: string;\r\n    initialValue?: any;\r\n    id?: string | number;\r\n    extraAttrs?: any;\r\n    validationFunc?: (value?: any, container?: JQuery) => boolean | string;\r\n    clickDismiss?: boolean;\r\n    onclick?: (...args: any[]) => void;\r\n    optionText?: any[];\r\n    optionValues?: any[];\r\n}\r\n\r\ndeclare interface BasicMapType {\r\n    class: string;\r\n    id: string;\r\n    value: any,\r\n\r\n    [key: number]: any,\r\n\r\n    [key: string]: any\r\n}\r\n\r\nconst defaultCancelCb = ($modal: JQuery) => {\r\n    $modal.modal(\"hide\");\r\n};\r\n\r\nconst self = {\r\n    deepFreeze: <T>(o: T): Readonly<T> => {\r\n        Object.freeze(o);\r\n\r\n        Object.getOwnPropertyNames(o).forEach((prop: string | number) => {\r\n            if (o.hasOwnProperty(prop) && (o as any)[prop] !== null\r\n                && (typeof (o as any)[prop] === \"object\" || typeof (o as any)[prop] === \"function\")\r\n                && !Object.isFrozen((o as any)[prop])) {\r\n                self.deepFreeze((o as any)[prop]);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    },\r\n\r\n    sort: <T>(arr: T[], compareFunction: (a: any, b: any) => number): T[] => {\r\n        return [...arr].sort(compareFunction);\r\n    },\r\n\r\n    datasetToArray: (ds: any, key: string): Readonly<any[]> => {\r\n        const r: any[] = [];\r\n        ds.forEach((v: {[index: string]: any}) => {\r\n            r.push(v[key]);\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    keepOnlyKeys: <T>(arr: T[], keys: string[]): Readonly<T[]> => {\r\n        arr = arr.slice();\r\n        arr.forEach((v: any) => {\r\n            const k = Object.keys(v);\r\n            k.forEach((key) => {\r\n                if (keys.indexOf(key) < 0) {\r\n                    delete v[key];\r\n                }\r\n            });\r\n        });\r\n        return self.deepFreeze(arr);\r\n    },\r\n\r\n    getFileExtension: (filename: string): string => {\r\n        return filename.split(\".\").splice(-1)[0];\r\n    },\r\n\r\n    htmlEncode: (string: string): string => {\r\n        string = $(\"<div>\").text(string).html();\r\n        string = string.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>');\r\n        return string;\r\n    },\r\n\r\n    printout: (text: string, escape?: string): void => {\r\n        if (escape) {\r\n            text = this.htmlEncode(escape);\r\n        }\r\n        $(\"#printout\").html(text);\r\n    },\r\n\r\n    flatten: <T>(map: { [key: string]: T }): Readonly<T[]> => {\r\n        const r: T[] = [];\r\n        Object.keys(map).forEach((i) => {\r\n            r.push(map[i]);\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    rotate: (map: any): Readonly<any> => {\r\n        const r: any = {};\r\n        Object.keys(map).forEach((i) => {\r\n            if (map[i] in r) {\r\n                r[map[i]].push(i);\r\n            }\r\n            else {\r\n                r[map[i]] = [i];\r\n            }\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    max: (iterable: any[]): number => {\r\n        return iterable.reduce((a, b) => {\r\n            return Math.max(a, b);\r\n        });\r\n    },\r\n\r\n    toTitleCase: (str: string): string => {\r\n        return str.replace(/(?:^|\\s)\\w/g, (match) => {\r\n            return match.toUpperCase();\r\n        });\r\n    },\r\n\r\n    showSimpleModal: (title: string, body: string): void => {\r\n        self.showFormModal(null, title, null, [{type: \"html\", initialValue: body}], null, false);\r\n    },\r\n\r\n    makeFormModal: (title: string, successText: string, form: ModalFormRow[], footer = true): JQuery => {\r\n        const f = $(\"<div>\", {class: \"modal-body form-group\"});\r\n        form.forEach((formRow, i) => {\r\n            if (!(\"initialValue\" in formRow)) {\r\n                formRow.initialValue = \"\";\r\n            }\r\n\r\n            let id = \"form-modal-\" + i;\r\n            if (\"id\" in formRow && formRow.id !== \"\" && formRow.id !== null && typeof formRow.id === \"string\") {\r\n                id = formRow.id;\r\n            }\r\n\r\n            const basicMap: BasicMapType = {class: \"form-control\", id, value: formRow.initialValue};\r\n\r\n            if (\"extraAttrs\" in formRow) {\r\n                Object.keys(formRow.extraAttrs).forEach((attrname) => {\r\n                    if (typeof formRow.extraAttrs[attrname] !== \"function\") {\r\n                        basicMap[attrname] = formRow.extraAttrs[attrname];\r\n                    }\r\n                });\r\n            }\r\n\r\n            let validFunc = (value?: any, container?: JQuery): string | boolean => true;\r\n            if (\"validationFunc\" in formRow) {\r\n                validFunc = formRow.validationFunc;\r\n            }\r\n\r\n            const generalValidator = (event: any, valueMutator: (v: any) => any = null) => {\r\n                const $v = $(event.target);\r\n                let val = $v.val();\r\n                if (valueMutator !== null && typeof valueMutator === \"function\") {\r\n                    val = valueMutator(val);\r\n                }\r\n                const valid = validFunc(val, $v);\r\n\r\n                if (valid === true) {\r\n                    $v.removeClass(\"is-invalid\").next(\"#feedback-\" + i).remove();\r\n                }\r\n                else {\r\n                    $v.addClass(\"is-invalid\");\r\n                    if ($v.next(\"#feedback-\" + i).length === 0) {\r\n                        $v.after($(\"<div>\", {class: \"invalid-feedback\", id: \"feedback-\" + i}).text(valid));\r\n                    }\r\n                }\r\n            };\r\n\r\n            if (formRow.type === \"html\") {\r\n                f.append($(formRow.initialValue));\r\n            }\r\n            else if (formRow.type === \"checkbox\") {\r\n                basicMap.type = \"checkbox\";\r\n                basicMap.class = \"form-check-input\";\r\n                delete basicMap.value;\r\n                if (formRow.initialValue) {\r\n                    basicMap.checked = \"\";\r\n                }\r\n\r\n                f.append($(\"<div>\", {class: \"form-check\"})\r\n                    .append($(\"<label>\", {for: id, class: \"form-check-label\"})\r\n                        .text(formRow.label).prepend($(\"<input>\", basicMap))\r\n                    )\r\n                );\r\n            }\r\n            else {\r\n                f.append($(\"<label>\", {for: id, class: \"col-form-label\"}).text(formRow.label));\r\n\r\n                if (formRow.type === \"button\") {\r\n                    if (\"clickDismiss\" in formRow && formRow.clickDismiss === true) {\r\n                        basicMap.class += \" btn-dismiss\";\r\n                    }\r\n                    const $b = $(\"<button>\", basicMap).text(formRow.initialValue);\r\n                    if (\"onclick\" in formRow && typeof formRow.onclick === \"function\") {\r\n                        $b.on(\"click\", formRow.onclick);\r\n                    }\r\n                    f.append($b);\r\n                }\r\n                else if (formRow.type === \"numeric\") {\r\n                    basicMap.type = \"number\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", (e) => {\r\n                        generalValidator(e, parseFloat);\r\n                    }));\r\n                }\r\n                else if (formRow.type === \"text\") {\r\n                    basicMap.type = \"text\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                }\r\n                else if (formRow.type === \"file\") {\r\n                    basicMap.type = \"file\";\r\n                    basicMap.class = \"form-control-file form-control\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                }\r\n                else if (formRow.type === \"textarea\") {\r\n                    const $b = $(\"<textarea>\", basicMap).on(\"blur validate\", generalValidator);\r\n                    if (\"onclick\" in formRow) {\r\n                        $b.on(\"click\", formRow.onclick);\r\n                    }\r\n                    f.append($b);\r\n                }\r\n                else if (formRow.type === \"select\") {\r\n                    const $options = $(\"<select>\", basicMap);\r\n                    formRow.optionText.forEach((oText, oIndex) => {\r\n                        if (oIndex < formRow.optionValues.length) {\r\n                            $options.append($(\"<option>\", {value: formRow.optionValues[oIndex]}).text(oText));\r\n                        }\r\n                        else {\r\n                            $options.append($(\"<option>\").text(oText));\r\n                        }\r\n                    });\r\n                    f.append($options.on(\"blur validate\", generalValidator));\r\n                }\r\n            }\r\n        });\r\n\r\n        let $footer = $(\"<div>\", {class: \"modal-footer\"})\r\n            .append($(\"<button>\", {class: \"btn btn-success\", type: \"button\"}).text(successText))\r\n            .append($(\"<button>\", {class: \"btn btn-danger btn-cancel\", type: \"button\"}).text(\"Cancel\"));\r\n\r\n        if (footer === false) {\r\n            $footer = null;\r\n        }\r\n\r\n        const $modal = ($(\"<div>\", {class: \"modal fade\", tabindex: \"-1\", role: \"dialog\", \"aria-hidden\": \"true\"}));\r\n        $modal\r\n            .append($(\"<div>\", {class: \"modal-dialog\"})\r\n                .append($(\"<div>\", {class: \"modal-content\"})\r\n                    .append($(\"<div>\", {class: \"modal-header\"})\r\n                        .append($(\"<h5>\", {class: \"modal-title\"}).text(title))\r\n                        .append($(\"<button>\", {class: \"close\", \"data-dismiss\": \"modal\", \"aria-label\": \"close\"})\r\n                            .append($(\"<span>\", {\"aria-hidden\": \"true\"}).html(\"&times;\"))\r\n                        )\r\n                    )\r\n                    .append(f)\r\n                    .append($footer)\r\n                )\r\n            );\r\n        $modal.find(\"input, textarea\").off(\"keyup\").on(\"keyup\", (e) => {\r\n            if (e.key === \"Enter\") {\r\n                $(\".btn-success\").last().trigger(\"click\");\r\n            }\r\n        });\r\n        $modal.on(\"shown.bs.modal\", () => {\r\n            $modal.find(\"input[type='text'], input[type='number'], textarea\").first().trigger(\"focus\");\r\n        });\r\n\r\n        return $modal;\r\n    },\r\n\r\n    showFormModal: (successCb: ($modal: JQuery, vals: any[]) => void,\r\n                    title: string, successText: string, form: ModalFormRow[],\r\n                    cancelCb: ($modal: JQuery) => void = defaultCancelCb, footer = true) => {\r\n        const $modal = self.makeFormModal(title, successText, form, footer);\r\n\r\n        $modal.on(\"click\", \".btn-cancel\", () => {\r\n            if (typeof cancelCb === \"function\") {\r\n                cancelCb($modal);\r\n            }\r\n            else {\r\n                $modal.modal(\"hide\");\r\n            }\r\n        }).on(\"click\", \".btn-dismiss\", () => {\r\n            $modal.modal(\"hide\");\r\n        }).on(\"click\", \".btn-success\", () => {\r\n            const vals: any[] = [];\r\n            let hasErrors = false;\r\n\r\n            $modal.find(\"input, textarea, select\").each((i, v) => {\r\n                const $v = $(v);\r\n\r\n                if (($v as any).tagName === \"SELECT\") {\r\n                    vals.push($v.find(\":selected\").val());\r\n                }\r\n                else if ($v.attr(\"type\") === \"checkbox\") {\r\n                    vals.push($v.prop(\"checked\"));\r\n                }\r\n                else if ($v.attr(\"type\") === \"file\") {\r\n                    vals.push(($v.get(0) as any).files);\r\n                }\r\n                else if ($v.attr(\"type\") === \"number\") {\r\n                    vals.push(parseFloat($v.val() as string));\r\n                }\r\n                else {\r\n                    vals.push($v.val());\r\n                }\r\n\r\n                if ($v.trigger(\"validate\").hasClass(\"is-invalid\")) {\r\n                    hasErrors = true;\r\n                }\r\n\r\n            });\r\n\r\n            if (!hasErrors && typeof successCb === \"function\") {\r\n                successCb($modal, vals);\r\n            }\r\n        }).on(\"hidden.bs.modal\", () => {\r\n            $modal.remove();\r\n        }).modal(\"show\");\r\n    }\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\n\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\nimport {NodeImmutPlain} from \"./GraphImmut/NodeImmut\";\r\n\r\ninterface Degree {\r\n    in: number;\r\n    out: number;\r\n}\r\n\r\nexport default {\r\n    findVertexDegreesDirectional: (adjacencyMatrix: Array<Array<number>>): Degree[] => {\r\n        // Adjacency stores IDs of edges TO\r\n        const degrees: Degree[] = [];\r\n        adjacencyMatrix.forEach((v, i) => {\r\n            if (i in degrees) {\r\n                degrees[i].out += v.length;\r\n            }\r\n            else {\r\n                degrees[i] = {out: v.length, in: 0};\r\n            }\r\n            v.forEach((outV) => {\r\n                if (outV in degrees) {\r\n                    degrees[outV].in += 1;\r\n                }\r\n                else {\r\n                    degrees[outV] = {in: 1, out: 0};\r\n                }\r\n            });\r\n        });\r\n\r\n        return degrees;\r\n    },\r\n\r\n    interpolateNodesFromEdges: (edges: EdgeImmutPlain[]): NodeImmutPlain[] => {\r\n        const nodes: NodeImmutPlain[] = [];\r\n        edges.forEach((v) => {\r\n            nodes[v.from] = {id: v.from, label: \"\" + v.from};\r\n            nodes[v.to] = {id: v.to, label: \"\" + v.to};\r\n        });\r\n\r\n        return nodes;\r\n    },\r\n};\r\n","\"use strict\";\r\n\r\nimport * as $ from 'jquery';\r\nimport help from './genericHelpers';\r\nimport randomColor from 'randomcolor';\r\nimport GraphState, {AddNodeI, GraphStateHistory} from './graphState';\r\nimport GraphImmut from \"./GraphImmut/GraphImmut\";\r\nimport {NodeImmutPlain} from \"./GraphImmut/NodeImmut\";\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\n\r\nexport interface MainI {\r\n    graphState: GraphState;\r\n    container: HTMLElement;\r\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback: Function) => void;\r\n    visOptions: {\r\n        interaction: { hover: boolean };\r\n        manipulation: {\r\n            addNode: (data: AddNodeI, callback: Function) => void;\r\n            editNode: (data: AddNodeI, callback: Function) => void;\r\n            addEdge: (data: VisEdgeInternal, callback?: Function) => void;\r\n            editEdge: (data: VisEdgeInternal, callback: Function) => void;\r\n            deleteEdge: (data: { edges: string[] }, callback?: Function) => void;\r\n            deleteNode: (data: { nodes: string[] }, callback: Function) => void\r\n        }\r\n    };\r\n    cancelEdit: (callback: Function) => void;\r\n    saveData: (data: any, callback: Function, operation: string, label: string) => void;\r\n    nodeLabelIDValidator: (v: string) => (boolean | string);\r\n    applyColors: () => Promise<void>;\r\n    setData: (data: GraphPlain, recalcProps?: boolean, graphChanged?: boolean, rearrangeGraph?: boolean) => void;\r\n    saveState: () => void;\r\n    getStateForSaving: () => GraphStateHistory;\r\n    undo: () => void;\r\n    redo: () => void;\r\n    applyState: (undo?: boolean, newState?: any) => void;\r\n    saveStateLocalStorage: () => void;\r\n    shuffleNetworkLayout: () => void;\r\n    randomizeNetworkLayoutSeed: (network: VisNetworkInternals) => void;\r\n    addNetworkListeners: (network: vis.Network) => void\r\n}\r\n\r\ninterface VisNetworkEvent {\r\n    edges: vis.DataSet<vis.Edge>;\r\n    nodes: vis.DataSet<vis.Node>;\r\n}\r\n\r\ninterface VisNetworkInternals extends vis.Network {\r\n    layoutEngine: {\r\n        randomSeed: number,\r\n        initialRandomSeed: number\r\n    }\r\n}\r\n\r\ninterface VisEditEdgeInternal {\r\n    from: { id: string | number };\r\n    to: { id: string | number };\r\n    label?: string\r\n}\r\n\r\ninterface VisEdgeInternal {\r\n    from: string | number;\r\n    to: string | number;\r\n    id: string;\r\n    label?: string\r\n}\r\n\r\nconst self: MainI = {\r\n    graphState: GraphState,\r\n    container: document.getElementById('network'),\r\n    // Function used to overwrite the edge edit functionality when weights are active\r\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback) => {\r\n        help.showFormModal(($modal, vals) => {\r\n            callback(null);\r\n            $modal.modal(\"hide\");\r\n            const value = parseFloat(vals[0]);\r\n            GraphState.editEdge(data.from.id, data.to.id, value, parseFloat(data.label));\r\n        }, \"Edit Edge\", \"Save\", [\r\n            {\r\n                type: \"numeric\",\r\n                label: \"Weight/Capacity\",\r\n                initialValue: parseFloat(data.label)\r\n            }\r\n        ]);\r\n    },\r\n    visOptions: {\r\n        interaction: {hover: true},\r\n        manipulation: {\r\n            addNode: (data, callback) => {\r\n                const $popup = help.makeFormModal(\"Add Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: `<p>Node ID: ${GraphState.getPropertyImm(\"vertices\")}</p>`\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: GraphState.getPropertyImm(\"vertices\")}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"add\", $popup.find(\"input\").first().val() as string);\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            editNode: (data, callback) => {\r\n                const $popup = help.makeFormModal(\"Edit Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: `<p>Node ID: ${data.id}</p>`\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: data.label}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"editNode\", $popup.find(\"input\").first().val() as string);\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            addEdge: (data, callback) => {\r\n                const apply = () => {\r\n                    if (typeof callback === \"function\") {\r\n                        callback(null);\r\n                    }\r\n                    GraphState.addEdge(data.from, data.to);\r\n                };\r\n                if (data.from === data.to) {\r\n                    if (confirm(\"Do you want to connect the node to itself?\")) {\r\n                        apply();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                apply();\r\n            },\r\n            editEdge: (data, callback) => {\r\n                callback(null);\r\n                self.visOptions.manipulation.deleteEdge({edges: [data.id]});\r\n                self.visOptions.manipulation.addEdge(data);\r\n            },\r\n            deleteEdge: (data, callback) => {\r\n                if (typeof callback === \"function\") {\r\n                    callback(null);\r\n                }\r\n                data.edges.forEach((v: any) => {\r\n                    let weight = null;\r\n                    if (typeof (window.network as any).body.data.edges._data[v].label !== \"undefined\") {\r\n                        weight = parseFloat((window.network as any).body.data.edges._data[v].label);\r\n                    }\r\n\r\n                    GraphState.deleteEdge((window.network as any).body.edges[v].fromId,\r\n                        (window.network as any).body.edges[v].toId, weight);\r\n                });\r\n            },\r\n            deleteNode: (data, callback) => {\r\n                callback(null);\r\n                data.nodes.forEach((v: string) => {\r\n                    GraphState.deleteNode(v);\r\n                });\r\n            },\r\n        },\r\n    },\r\n\r\n    cancelEdit: (callback) => {\r\n        if (typeof callback === \"function\") {\r\n            callback(null);\r\n        }\r\n    },\r\n\r\n    saveData: (data, callback, operation, label) => {\r\n        callback(null);\r\n\r\n        data.label = label;\r\n        if (operation === \"add\") {\r\n            GraphState.addNode(data);\r\n        }\r\n        else if (operation === \"editNode\") {\r\n            GraphState.editNode(data.id, data.label);\r\n        }\r\n    },\r\n\r\n    nodeLabelIDValidator: (v) => {\r\n        if (GraphState.nodeLabelToID(v) > -1) {\r\n            return true;\r\n        }\r\n        return \"Invalid Label or ID\";\r\n    },\r\n\r\n    applyColors: async () => {\r\n        if (window.settings.getOption(\"direction\")) {\r\n            return;\r\n        }\r\n        const graphColors = await GraphState.getProperty(\"graphColoring\", true);\r\n        const chromaticNumber = await GraphState.getProperty(\"Chromatic Number\", true);\r\n\r\n        const colors = randomColor({count: chromaticNumber, luminosity: \"light\"});\r\n        let G = GraphState.graph;\r\n        (G.getAllNodes() as NodeImmutPlain[]).forEach((v) => {\r\n            G = G.editNode(v.id, {color: colors[graphColors[v.id]]});\r\n        });\r\n        self.setData(GraphState.getGraphData(G), false, false);\r\n    },\r\n\r\n    setData: (data, recalcProps = false, graphChanged = true, rearrangeGraph = false) => {\r\n        // Store existing positions in the data if we're supposed to keep the layout\r\n        if (rearrangeGraph) {\r\n            data.nodes.forEach((v) => {\r\n                delete v.x;\r\n                delete v.y;\r\n            });\r\n        }\r\n\r\n        if (graphChanged) {\r\n            self.saveState();\r\n        }\r\n\r\n        if (\"directed\" in data) {\r\n            window.settings.changeOption(\"direction\", data.directed);\r\n        }\r\n        if (\"weighted\" in data) {\r\n            window.settings.changeOption(\"weights\", data.weighted);\r\n        }\r\n        const directional = window.settings.getOption(\"direction\") as boolean;\r\n        const weighted = window.settings.getOption(\"weights\") as boolean;\r\n\r\n        const g = new GraphImmut(data.nodes, data.edges, directional, weighted);\r\n        GraphState.graph = g;\r\n\r\n        // Set a new random seed so that the layout will be different\r\n        self.randomizeNetworkLayoutSeed(window.network as VisNetworkInternals);\r\n        window.network.setData(GraphState.getGraphAsDataSet(g));\r\n        GraphState.graph = GraphState.setLocations(window.network.getPositions());\r\n\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        if (graphChanged) {\r\n            window.ui.printGraphAlgorithms();\r\n            help.printout(\"\");\r\n            GraphState.setUpToDate();\r\n            GraphState.makeAndPrintProperties(recalcProps);\r\n        }\r\n\r\n        self.saveStateLocalStorage();\r\n    },\r\n\r\n    saveState: () => {\r\n        if (GraphState.graph === null) {\r\n            return;\r\n        }\r\n\r\n        if (GraphState.backHistory.length >= GraphState.maxHistory) {\r\n            GraphState.backHistory.shift();\r\n        }\r\n\r\n        GraphState.backHistory.push(self.getStateForSaving());\r\n        GraphState.forwardHistory = [];\r\n        $(\".icon-undo\").parent().parent().addClass(\"active\");\r\n    },\r\n\r\n    getStateForSaving: () => {\r\n        const state: any = {};\r\n        Object.keys(GraphState).forEach((k: string) => {\r\n            const v: any = (GraphState as any)[k];\r\n            if (typeof v !== \"function\") {\r\n                if (typeof v !== \"object\") {\r\n                    state[k] = v;\r\n                }\r\n                else {\r\n                    if (k === \"graph\" && v !== null) {\r\n                        state[k] = v;\r\n                    }\r\n                    if (!k.toLowerCase().includes(\"history\")) {\r\n                        state[k] = $.extend(true, Array.isArray(v) ? [] : {}, v);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return state as GraphStateHistory;\r\n    },\r\n\r\n    undo: () => {\r\n        if (GraphState.backHistory.length > 0) {\r\n            self.applyState(true);\r\n        }\r\n    },\r\n\r\n    redo: () => {\r\n        if (GraphState.forwardHistory.length > 0) {\r\n            self.applyState(false);\r\n        }\r\n    },\r\n\r\n    applyState: (undo = true, newState: GraphStateHistory = null) => {\r\n        const firstLoad = newState !== null;\r\n        const currentState = self.getStateForSaving();\r\n\r\n        if (!firstLoad) {\r\n            if (undo) {\r\n                newState = GraphState.backHistory.pop();\r\n            }\r\n            else {\r\n                newState = GraphState.forwardHistory.pop();\r\n            }\r\n        }\r\n\r\n        //@ts-ignore Ignore accessing private props. I do this because saving the state lost the type of the data\r\n        newState.graph = new GraphImmut(newState.graph.nodes, newState.graph.edges, newState.graph.directed, newState.graph.weighted);\r\n\r\n        window.settings.changeOption(\"direction\", newState.graph.isDirected());\r\n        window.settings.changeOption(\"weights\", newState.graph.isWeighted());\r\n\r\n        GraphState.graph = newState.graph;\r\n\r\n        window.network.setData(GraphState.getGraphAsDataSet(GraphState.graph));\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        window.ui.printGraphAlgorithms();\r\n        help.printout(\"\");\r\n\r\n        Object.keys(newState).forEach((k: string) => {\r\n            const v = newState[k];\r\n            if (typeof v !== \"object\") {\r\n                (GraphState as any)[k] = v;\r\n            }\r\n            else if (!k.toLowerCase().includes(\"history\") && k.toLowerCase() !== \"graph\") {\r\n                if (k.toLowerCase() === \"uptodate\") {\r\n                    Object.keys((GraphState as any)[k]).forEach((oldKey) => {\r\n                        (GraphState as any)[k][oldKey].upToDate = (v as any)[oldKey].upToDate;\r\n                    });\r\n                }\r\n                else {\r\n                    (GraphState as any)[k] = $.extend(true, (GraphState as any)[k], v);\r\n                }\r\n            }\r\n        });\r\n\r\n        GraphState.makeAndPrintProperties().then(() => {\r\n            if (undo && !firstLoad) {\r\n                $(\".icon-redo\").parent().parent().addClass(\"active\");\r\n                if (GraphState.backHistory.length === 0) {\r\n                    $(\".icon-undo\").parent().parent().removeClass(\"active\");\r\n                }\r\n                GraphState.forwardHistory.push(currentState);\r\n            }\r\n            else if (!undo && !firstLoad) {\r\n                $(\".icon-undo\").parent().parent().addClass(\"active\");\r\n                if (GraphState.forwardHistory.length === 0) {\r\n                    $(\".icon-redo\").parent().parent().removeClass(\"active\");\r\n                }\r\n                GraphState.backHistory.push(currentState);\r\n            }\r\n\r\n            self.saveStateLocalStorage();\r\n        });\r\n    },\r\n\r\n    saveStateLocalStorage: () => {\r\n        if (window.settings.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.lastState\", JSON.stringify(self.getStateForSaving()));\r\n        }\r\n    },\r\n\r\n    shuffleNetworkLayout: () => {\r\n        self.setData({\r\n            nodes: GraphState.graph.getAllNodes() as NodeImmutPlain[],\r\n            edges: GraphState.graph.getAllEdges() as EdgeImmutPlain[]\r\n        }, false, false, true);\r\n    },\r\n\r\n    randomizeNetworkLayoutSeed: (network) => {\r\n        const r = Math.round(Math.random() * 1000000);\r\n        network.layoutEngine.randomSeed = r;\r\n        network.layoutEngine.initialRandomSeed = r;\r\n    },\r\n\r\n    addNetworkListeners: (network) => {\r\n        // Enable edit node/edge when double clicking\r\n        network.on(\"doubleClick\", (p: VisNetworkEvent) => {\r\n            if (window.settings.getOption(\"weights\") && \"edges\" in p && p.edges.length === 1) {\r\n                network.editEdgeMode();\r\n            }\r\n            if (\"nodes\" in p && p.nodes.length === 1) {\r\n                network.editNode();\r\n            }\r\n        });\r\n\r\n        // Save locations of nodes after dragging\r\n        network.on(\"dragEnd\", () => {\r\n            GraphState.graph = GraphState.setLocations(network.getPositions());\r\n            self.saveStateLocalStorage(); // Save the new locations as part of the state\r\n        });\r\n\r\n        // Delete nodes/edges when hit \"Delete\"\r\n        let lastNetworkClickEvent: JQuery.Event = null;\r\n        network.on('click', (event: JQuery.Event) => {\r\n            lastNetworkClickEvent = event;\r\n        });\r\n\r\n        // Delete key to delete node or edge\r\n        $(document).on('keyup', (key) => {\r\n            if (key.key === \"Delete\" && lastNetworkClickEvent !== null) {\r\n                if ($(self.container).has((lastNetworkClickEvent as any).event.target).length > 0) {\r\n                    if ((\"edges\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).edges.length === 1)\r\n                        || (\"nodes\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).nodes.length === 1)) {\r\n                        if ($(':focus').parents(\".modal\").length === 0) {\r\n                            network.deleteSelected();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Undo/Redo keyboard commands\r\n        $(document).on(\"keydown\", (e) => {\r\n            if ((e.key.toLowerCase() === 'y' && e.ctrlKey) || (e.key.toLowerCase() === 'z' && e.ctrlKey && e.shiftKey)) {\r\n                self.redo();\r\n            }\r\n            else if (e.key.toLowerCase() === 'z' && e.ctrlKey) {\r\n                self.undo();\r\n            }\r\n        });\r\n\r\n        // When clicking off of the network, remove the Delete functionality\r\n        $(document).on(\"click\", (e) => {\r\n            if ($(self.container).has(e.target).length === 0) {\r\n                lastNetworkClickEvent = null;\r\n            }\r\n        });\r\n    },\r\n\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\nimport GraphState from './graphState';\r\n\r\ninterface SettingsList {\r\n    nodePhysics: boolean;\r\n    direction: boolean;\r\n    weights: boolean;\r\n\r\n    [index: string]: boolean\r\n}\r\n\r\nexport interface SettingsI {\r\n    defaults: SettingsList;\r\n    current: any;\r\n    checkForLocalStorage: () => (boolean);\r\n    saveSettings: () => void;\r\n    loadSettings: () => void;\r\n    setAll: () => void;\r\n    changeOption: (option: string, value: string | boolean) => void;\r\n    getOption: (option: string) => string | boolean;\r\n    resetToDefault: () => void\r\n}\r\n\r\nconst self: SettingsI = {\r\n    defaults: {\r\n        nodePhysics: true,\r\n        direction: false,\r\n        weights: false\r\n    } as SettingsList,\r\n\r\n    current: {} as any,\r\n\r\n    checkForLocalStorage: () => {\r\n        try {\r\n            const x = '__storage_test__';\r\n            localStorage.setItem(x, x);\r\n            localStorage.removeItem(x);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return false;\r\n        }\r\n    },\r\n\r\n    saveSettings: () => {\r\n        if (self.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.settings\", JSON.stringify(self.current));\r\n        }\r\n    },\r\n\r\n    loadSettings: () => {\r\n        if (self.checkForLocalStorage()) {\r\n            self.current = JSON.parse(localStorage.getItem(\"graphPlayground.settings\"));\r\n        }\r\n        if (self.current === null) {\r\n            self.current = {};\r\n        }\r\n        self.setAll();\r\n    },\r\n\r\n    setAll: () => {\r\n        window.network.setOptions({nodes: {physics: self.getOption(\"nodePhysics\") as boolean}});\r\n        window.network.setOptions({edges: {arrows: {to: self.getOption(\"direction\") as boolean}}});\r\n        if (self.getOption(\"weights\")) {\r\n            window.network.setOptions({\r\n                manipulation: {\r\n                    editEdge: {\r\n                        editWithoutDrag: window.main.visWeightEdgeEdit\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            window.network.setOptions({manipulation: {editEdge: window.main.visOptions.manipulation.editEdge}});\r\n        }\r\n    },\r\n\r\n    changeOption: (option: string, value: string | boolean): void => {\r\n        self.current[option] = value;\r\n        self.saveSettings();\r\n        self.setAll();\r\n    },\r\n\r\n    getOption: (option: string): string | boolean => {\r\n        if (option in self.current) {\r\n            return self.current[option];\r\n        }\r\n        return self.defaults[option];\r\n    },\r\n\r\n    resetToDefault: (): void => {\r\n        self.current = {};\r\n        self.saveSettings();\r\n        self.setAll();\r\n\r\n        // Reset graph to just a plain graph. Not sure if this should actually happen or not.\r\n        const G = GraphState.graph.asChangedDirectedWeighted(self.defaults.direction, self.defaults.weights);\r\n        window.main.setData(GraphState.getGraphData(G));\r\n    }\r\n};\r\n\r\nexport default self;\r\n","import gHelp from \"./graphHelpers\";\nimport help from \"./genericHelpers\";\nimport * as $ from \"jquery\";\nimport GraphState from './graphState';\nimport GraphAlgorithms, {ShortestPathResult} from \"./GraphAlgorithms\";\n\ninterface AlgorithmI {\n    name: string;\n    directional?: boolean;\n    weighted?: boolean;\n    applyFunc: () => any;\n    display: boolean\n}\n\nexport interface UIInteractionsI {\n    getAlgorithms(): AlgorithmI[];\n\n    registerListeners(): void;\n\n    printHelp(): void;\n\n    printOptions(): void;\n\n    makeAndPrintGraphColoring(): Promise<void>;\n\n    makeAndPrintConnectedComponents(): Promise<void>;\n\n    makeAndPrintDirectionalEulerian(): Promise<void>;\n\n    makeAndPrintEulerian(): Promise<void>;\n\n    makeAndPrintStronglyConnectedComponents(): Promise<void>;\n\n    makeAndPrintBFS(): Promise<void>;\n\n    makeAndPrintDijkstra(): Promise<void>;\n\n    makeAndPrintBFSP(): Promise<void>;\n\n    makeAndPrintFFMCMF(): void;\n\n    makeAndPrintKruskal(): Promise<void>;\n\n    makeAndPrintIsCyclic(): Promise<void>;\n\n    makeAndPrintTopologicalSort(): Promise<void>;\n\n    printGraphAlgorithms(): void;\n}\n\nconst makeAndPrintShortestPath = (title: string,\n                                  fn: (a: number, b: number) => boolean | ShortestPathResult,\n                                  weighted: boolean): void => {\n    help.showFormModal(($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const source = GraphState.nodeLabelToID(values[0]);\n            const sink = GraphState.nodeLabelToID(values[1]);\n\n            let a = fn(source, sink);\n            if (a === false) {\n                return;\n            }\n\n            a = a as ShortestPathResult;\n\n            let p = `<h3>${title}</h3><hr>No path exists from ${help.htmlEncode(source.toString())} to ${help.htmlEncode(sink.toString())}`;\n\n            if (a.pathExists) {\n                p = `${title} From ${GraphState.nodeIDToLabel(source)} to `;\n                p += `${GraphState.nodeIDToLabel(sink)}: ${a.distance}`;\n                if (weighted) {\n                    p += `\\nWith weighted cost: ${a.cost}`;\n                }\n                p += \"\\n\\nUsing Path: \";\n\n                p = help.htmlEncode(p);\n                a.path.forEach((v) => {\n                    p += `${help.htmlEncode(GraphState.nodeIDToLabel(v))} &rarr; `;\n                });\n                p = p.slice(0, -8);\n                p = `<h3>${title}</h3><hr>${p}`;\n            }\n\n            help.printout(p);\n        },\n        title, \"Go\", [\n            {label: \"Start Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator},\n            {label: \"End Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator}\n        ]);\n};\n\nconst callWithGraphAlgorithms = async (f: (gAlgo: GraphAlgorithms) => any): Promise<any> => {\n    const gAlgo = new ((await import(\"./GraphAlgorithms\")).default)();\n    return f(gAlgo);\n};\n\nconst makeAndPrintComponents = async (stronglyConnected: boolean): Promise<void> => {\n    let a = null;\n    let cc = \"Connected Components\";\n    let componentKey = \"connectedComponents\";\n\n    const gAlgo = new ((await import(\"./GraphAlgorithms\")).default)();\n    if (stronglyConnected) {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        cc = \"Strongly \" + cc;\n        componentKey = \"stronglyConnectedComponents\";\n        a = await gAlgo.stronglyConnectedComponents();\n    }\n    else {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n        a = await gAlgo.connectedComponents();\n    }\n\n    GraphState.graphProperties[cc] = a.count;\n    GraphState.setUpToDate(true, [cc, componentKey]);\n    GraphState.state[componentKey] = a.components;\n\n    const components = help.flatten(a.components);\n    let p = `Number of ${cc}: ${a.count}`;\n    p += \"\\n\\n\";\n\n    components.forEach((v, i) => {\n        p += `Vertex ${GraphState.nodeIDToLabel(i)} is in connected component #${v}\\n`;\n    });\n\n    p += `\\n${JSON.stringify(help.rotate(a.components), null, 4)}\\n\\n`;\n    p = `<h3>${cc}</h3><hr>${help.htmlEncode(p)}`;\n\n    help.printout(p);\n};\n\nexport default class UIInteractions {\n    static getAlgorithms(): AlgorithmI[] {\n        return [\n            {\n                name: \"Graph Coloring\",\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintGraphColoring,\n                display: true\n            },\n            {\n                name: \"Connected Components\",\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintConnectedComponents,\n                display: true\n            },\n            {\n                name: \"Strongly Connected Components\",\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintStronglyConnectedComponents\n            },\n            {\n                name: \"Breadth-First Shortest Path\",\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintBFS,\n                display: true\n            },\n            {\n                name: \"Dijkstra Shortest Path\",\n                applyFunc: UIInteractions.makeAndPrintDijkstra,\n                display: true\n            },\n            {\n                name: \"Bellman-Ford Shortest Path\",\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintBFSP,\n                display: true\n            },\n            {\n                name: \"Ford-Fulkerson\",\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintFFMCMF,\n                display: true\n            },\n            {\n                name: \"Kruskal Minimum Spanning Tree\",\n                weighted: true,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintKruskal,\n                display: true\n            },\n            {\n                name: \"Cyclic\",\n                applyFunc: UIInteractions.makeAndPrintIsCyclic,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Topological Sort\",\n                applyFunc: UIInteractions.makeAndPrintTopologicalSort,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Eulerian\",\n                directional: false,\n                display: false,\n                applyFunc: null\n            },\n            {\n                name: \"Eulerian\",\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintDirectionalEulerian\n            },\n        ] as AlgorithmI[];\n    }\n\n    static registerListeners(): void {\n        const makeSimpleClickListener = (selector: string, fn: () => any) => {\n            $(selector).on(\"click\", (e) => {\n                e.preventDefault();\n                fn();\n            });\n        };\n\n        makeSimpleClickListener(\"#print-help-link\", UIInteractions.printHelp);\n        makeSimpleClickListener(\"#graph-options-link\", UIInteractions.printOptions);\n        makeSimpleClickListener(\"#load-petersen-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            window.main.setData(predefined.Petersen(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-konigsberg-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            window.main.setData(predefined.Konigsberg(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-complete-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            predefined.Complete();\n        });\n        makeSimpleClickListener(\"#load-hypercube-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            predefined.Hypercube();\n        });\n        makeSimpleClickListener(\"#load-custom-link\", async () => {\n            const predefined = (await import('./predefinedGraphs')).default;\n            predefined.Custom();\n        });\n        makeSimpleClickListener(\"#undo-link\", window.main.undo);\n        makeSimpleClickListener(\"#redo-link\", window.main.redo);\n        makeSimpleClickListener(\"#calculate-all-properties-link\", async () => {\n            return GraphState.makeAndPrintProperties(true);\n        });\n        makeSimpleClickListener(\"#new-graph-layout-link\", window.main.shuffleNetworkLayout);\n        makeSimpleClickListener(\"#import-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportFileModal();\n        });\n        makeSimpleClickListener(\"#import-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportTextModal();\n        });\n        makeSimpleClickListener(\"#export-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportFileModal();\n        });\n        makeSimpleClickListener(\"#export-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportTextModal();\n        });\n    }\n\n    static printHelp(): void {\n        help.showSimpleModal(\"Help\", \"<h4>For support see the <a href='https://github.com/MikeDombo/graphPlayground' \" +\n            \"target='_blank'>GitHub repository</a> for guides</h4> <h4>See \" +\n            \"<a href='https://github.com/MikeDombo/graphPlayground/issues' target='_blank'>GitHub issues</a>\" +\n            \" to submit bugs or feature requests.</h4>\");\n    }\n\n    static printOptions(): void {\n        help.showFormModal(\n            ($modal, vals) => {\n                $modal.modal(\"hide\");\n                if (window.settings.getOption(\"nodePhysics\") !== vals[0]) {\n                    window.settings.changeOption(\"nodePhysics\", vals[0]); // Physics\n                }\n                if (window.settings.getOption(\"direction\") !== vals[1]) {\n                    window.settings.changeOption(\"direction\", vals[1]);\n                    let G = GraphState.graph;\n                    G = vals[1] ? G.asDirected(true) : G.asUndirected();\n                    // Clear node coloring because graph color doesn't apply to directed graphs\n                    window.main.setData(GraphState.getGraphData(G, true));\n                }\n                if (window.settings.getOption(\"weights\") !== vals[2]) {\n                    window.settings.changeOption(\"weights\", vals[2]);\n                    let G = GraphState.graph;\n                    G = vals[2] ? G.asWeighted() : G.asUnweighted();\n                    window.main.setData(GraphState.getGraphData(G));\n                }\n            },\n            \"Options\", \"Save\", [\n                {label: \"Graph Physics\", initialValue: window.settings.getOption(\"nodePhysics\"), type: \"checkbox\"},\n                {label: \"Directed Graph\", initialValue: window.settings.getOption(\"direction\"), type: \"checkbox\"},\n                {label: \"Weighted Graph\", initialValue: window.settings.getOption(\"weights\"), type: \"checkbox\"}\n            ], null);\n    }\n\n    static async makeAndPrintGraphColoring(): Promise<void> {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        // Use cached responses when able\n        let a = {\n            chromaticNumber: (await GraphState.getProperty(\"Chromatic Number\")) as number,\n            colors: GraphState.state.graphColoring as {}\n        };\n        if (!(a.chromaticNumber !== null && (await GraphState.getProperty(\"graphColoring\")) !== null)) {\n            const gAlgo = new ((await import(\"./GraphAlgorithms\")).default)();\n            a = gAlgo.colorNetwork();\n        }\n\n        (GraphState.graphProperties[\"Chromatic Number\"] as number) = a.chromaticNumber;\n        GraphState.setUpToDate(true, [\"Chromatic Number\", \"graphColoring\"]);\n        (GraphState.state.graphColoring as {}) = a.colors;\n\n        const colors = help.flatten(a.colors);\n        let p = `Number of Vertices: ${colors.length}`;\n        p += `\\nChromatic Number: ${a.chromaticNumber}`;\n        p += \"\\n\\n\";\n\n        colors.forEach((v, i) => {\n            p += `Vertex ${GraphState.nodeIDToLabel(i)} gets color ${v}\\n`;\n        });\n\n        p += `\\n${JSON.stringify(help.rotate(a.colors), null, 4)}\\n\\n`;\n\n        p = `<h3>Graph Coloring Using Welsh-Powell Algorithm</h3><hr>${help.htmlEncode(p)}`;\n        p += \"<br/><button class='btn btn-primary' onclick='main.applyColors()'>Apply New Colors To Graph</button>\";\n\n        help.printout(p);\n        window.main.applyColors();\n    }\n\n    static makeAndPrintConnectedComponents(): Promise<void> {\n        return makeAndPrintComponents(false);\n    }\n\n    static makeAndPrintDirectionalEulerian(): Promise<void> {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        return callWithGraphAlgorithms(async (gAlgo) => {\n            GraphState.graphProperties.eulerian = await gAlgo.directionalEulerian(\n                gHelp.findVertexDegreesDirectional(\n                    GraphState.graph.getFullAdjacency()));\n            GraphState.setUpToDate(true, [\"eulerian\"]);\n        });\n    }\n\n    static makeAndPrintEulerian(): Promise<void> {\n        if (window.settings.getOption(\"direction\")) {\n            return UIInteractions.makeAndPrintDirectionalEulerian();\n        }\n\n        return callWithGraphAlgorithms(async (gAlgo) => {\n            GraphState.graphProperties.eulerian = await gAlgo.hasEulerianCircuit(GraphState.graph.getAllOutDegrees());\n            GraphState.setUpToDate(true, [\"eulerian\"]);\n        });\n    }\n\n    static makeAndPrintStronglyConnectedComponents(): Promise<void> {\n        return makeAndPrintComponents(true);\n    }\n\n    static makeAndPrintBFS(): Promise<void> {\n        return callWithGraphAlgorithms((gAlgo) => {\n            makeAndPrintShortestPath(\"Breadth-First Shortest Path\", gAlgo.breadthFirstSearch as any, false);\n        });\n    }\n\n    static makeAndPrintDijkstra(): Promise<void> {\n        return callWithGraphAlgorithms((gAlgo) => {\n            makeAndPrintShortestPath(\"Dijkstra Shortest Path\", gAlgo.dijkstraSearch as any, true);\n        });\n    }\n\n    static makeAndPrintBFSP(): Promise<void> {\n        return callWithGraphAlgorithms((gAlgo) => {\n            makeAndPrintShortestPath(\"Bellman-Ford Shortest Path\", gAlgo.bellmanFord as any, true);\n        });\n    }\n\n    static makeAndPrintFFMCMF(): void {\n        if (!window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n        help.showFormModal(async ($modal, values) => {\n                $modal.modal(\"hide\");\n\n                const source = GraphState.nodeLabelToID(values[0]);\n                const sink = GraphState.nodeLabelToID(values[1]);\n                const gAlgo = new ((await import(\"./GraphAlgorithms\")).default)();\n                let a = gAlgo.fordFulkerson(source, sink);\n\n                let p = `<h3>Ford-Fulkerson</h3><hr>No path exists from ${help.htmlEncode(GraphState.nodeIDToLabel(source))} to ${help.htmlEncode(GraphState.nodeIDToLabel(sink))}`;\n\n                if (a === false) {\n                    help.printout(p);\n                    return;\n                }\n                a = a as { maxFlow: number; flowPath: any[] };\n\n                p = `Ford-Fulkerson MaxFlow-MinCut Max Flow From ${GraphState.nodeIDToLabel(source)} to ${GraphState.nodeIDToLabel(sink)}: ${a.maxFlow}`;\n                p += \"\\n\\nUsing Capacities:\\n\\n\";\n                p = help.htmlEncode(p);\n                a.flowPath.forEach((v) => {\n                    p += `${GraphState.nodeIDToLabel(v.from)}&rarr;${GraphState.nodeIDToLabel(v.to)} using ${v.flow} of ${v.capacity}\\n`;\n                });\n                p = p.trim();\n                p = \"<h3>Ford-Fulkerson MaxFlow-MinCut</h3><hr>\" + p;\n\n                help.printout(p);\n            },\n            \"Ford-Fulkerson MaxFlow-MinCut\", \"Go\", [\n                {label: \"Source Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator},\n                {label: \"Sink Node\", type: \"text\", validationFunc: window.main.nodeLabelIDValidator}\n            ]);\n    }\n\n    static makeAndPrintKruskal(): Promise<void> {\n        if (window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n        return callWithGraphAlgorithms((gAlgo) => {\n            const a = gAlgo.kruskal();\n\n            let p = `Kruskal's Minimum Spanning Tree Total Weight: ${a.totalWeight}`;\n            p += \"\\n\\nUsing Edges:\\n\\n\";\n            p = help.htmlEncode(p);\n            a.mst.forEach((v) => {\n                p += `${GraphState.nodeIDToLabel(v.getFrom())}&rarr;${GraphState.nodeIDToLabel(v.getTo())}\\n`;\n            });\n            p = p.trim();\n            p = `<h3>Kruskal Minimum Spanning Tree</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n    }\n\n    static async makeAndPrintIsCyclic(): Promise<void> {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        return callWithGraphAlgorithms((gAlgo) => {\n            GraphState.graphProperties.cyclic = gAlgo.isGraphCyclic();\n            GraphState.setUpToDate(true, [\"cyclic\"]);\n        });\n    }\n\n    static makeAndPrintTopologicalSort(): Promise<void> {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        return callWithGraphAlgorithms((gAlgo) => {\n            const a = gAlgo.topologicalSort();\n\n            if (a === true) {\n                GraphState.graphProperties.cyclic = true;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n\n                help.printout(\"<h3>Topological Sorting Failed</h3><hr>Topological sorting failed because the graph contains a cycle\");\n\n                return;\n            }\n\n            let p = \"Topological Sorting:\\n\\n\";\n            p = help.htmlEncode(p);\n            (a as any[]).forEach((v) => {\n                p += `${GraphState.nodeIDToLabel(v.id)}, `;\n            });\n            p = p.slice(0, -2);\n            p = `<h3>Topological Sorting</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n    }\n\n    static printGraphAlgorithms(): void {\n        const $div = $(\"#algorithms-pane\");\n        $div.empty();\n        const directional = window.settings.getOption(\"direction\");\n        const weighted = window.settings.getOption(\"weights\");\n\n        const addAlgoToPane = (alg: AlgorithmI) => {\n            $div.append($(\"<a>\", {class: \"nav-link\", href: \"#\"})\n                .text(alg.name).on(\"click\", (e) => {\n                    e.preventDefault();\n                    alg.applyFunc();\n                }));\n        };\n\n        const a = UIInteractions.getAlgorithms();\n        a.forEach((alg) => {\n            if (!alg.display) {\n                return;\n            }\n            if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n            else if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n        });\n    }\n}\n","\"use strict\";\r\n\r\nimport 'bootstrap';\r\nimport * as Raven from 'raven-js';\r\nimport {Network} from 'vis/index-network';\r\nimport {default as main, MainI} from './main';\r\nimport {default as settings, SettingsI} from './settings';\r\nimport {default as UI, UIInteractionsI} from './UIInteractions';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        main: MainI;\r\n        network: Network;\r\n        settings: SettingsI;\r\n        ui: UIInteractionsI,\r\n        Raven: Raven.RavenStatic\r\n    }\r\n}\r\n\r\nwindow.main = main;\r\nwindow.network = new Network(main.container, {}, main.visOptions);\r\nwindow.settings = settings;\r\nwindow.ui = UI;\r\n\r\n// Initialize Sentry.io error logging\r\nRaven.config('https://92aaeee7e2fb4ef4837a2261a029e8ed@sentry.home.mikedombrowski.com/2').install();\r\nwindow.Raven = Raven;\r\n\r\nmain.addNetworkListeners(window.network);\r\n\r\nsettings.loadSettings();\r\n\r\nlet loadDefault = true;\r\nif (settings.checkForLocalStorage()) {\r\n    const s: string = localStorage.getItem(\"graphPlayground.lastState\");\r\n    if (s !== null) {\r\n        const jsonGraph: any = JSON.parse(s);\r\n        if (\"graph\" in jsonGraph && \"nodes\" in jsonGraph.graph) {\r\n            loadDefault = false;\r\n            main.applyState(false, jsonGraph as {graph: GraphPlain});\r\n        }\r\n    }\r\n}\r\nif (loadDefault) {\r\n    (async () => {\r\n        const predefined = (await import(\"./predefinedGraphs\")).default;\r\n        main.setData(predefined.Petersen(), false, true, true);\r\n    })();\r\n}\r\n\r\nwindow.ui.registerListeners();\r\n","\"use strict\";\n\nexport interface NodeImmutPlain {\n    id: Readonly<number>;\n    label: string;\n\n    [key: string]: any;\n\n    [key: number]: any\n}\n\nexport default class NodeImmut {\n    private readonly id: Readonly<number>;\n    private readonly label: Readonly<string>;\n    private readonly attributes: any;\n\n    constructor(id: any, label: any = null, extraAttrs: null | any = null) {\n        if (label === null) {\n            this.label = id.toString();\n        }\n        else {\n            this.label = label;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach((key) => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.label = Object.freeze(this.label);\n        this.id = Object.freeze(id);\n\n        if (new.target === NodeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    toPlain(): NodeImmutPlain {\n        const toReturn: NodeImmutPlain = {id: this.id, label: this.label};\n        Object.keys(this.attributes).forEach((key) => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    getID(): Readonly<number> {\n        return this.id;\n    }\n\n    getLabel(): Readonly<string> {\n        return this.label;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    editNode(label: any = null, extraAttrs: any = null): NodeImmut {\n        if (label === null) {\n            label = this.getLabel();\n        }\n\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        Object.keys(extraAttrs).forEach((key) => {\n            attributes[key] = extraAttrs[key];\n        });\n\n        return new NodeImmut(this.getID(), label, attributes);\n    }\n}\n","\"use strict\";\n\nexport interface EdgeImmutPlain {\n    label?: string;\n    from: number;\n    to: number;\n    weight: number\n}\n\nexport default class EdgeImmut {\n    private readonly from: Readonly<number>;\n    private readonly to: Readonly<number>;\n    private readonly weight: Readonly<number>;\n\n    constructor(from: number, to: number, weight: any = 1) {\n        this.from = Object.freeze(from);\n        this.to = Object.freeze(to);\n        this.weight = Object.freeze(parseFloat(weight));\n\n        if (new.target === EdgeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getFrom(): Readonly<number> {\n        return this.from;\n    }\n\n    getTo(): Readonly<number> {\n        return this.to;\n    }\n\n    getWeight(): Readonly<number> {\n        return this.weight;\n    }\n\n    toPlain(): { from: Readonly<number>; to: Readonly<number>; weight: Readonly<number> } {\n        return {from: this.from, to: this.to, weight: this.weight};\n    }\n\n    editEdge(newWeight: number): EdgeImmut {\n        return new EdgeImmut(this.getFrom(), this.getTo(), newWeight);\n    }\n}\n","\"use strict\";\n\nimport {List} from 'immutable';\nimport {default as NodeImmut, NodeImmutPlain} from './NodeImmut';\nimport {default as EdgeImmut, EdgeImmutPlain} from './EdgeImmut';\n\ninterface NodeMapping {\n    [key: number]: number\n}\n\nconst filterNodeExtraAttr = (data: any) => {\n    return Object.keys(data)\n        .filter((key) => !([\"label\", \"id\"]).includes(key))\n        .reduce((obj: any, key) => {\n            obj[key] = data[key];\n            return obj;\n        }, {});\n};\n\nconst genericEdgesToImmutEdges = (edges: any, nodeMap: NodeMapping = {}): boolean | List<EdgeImmut> => {\n    if (edges === null) {\n        return false;\n    }\n\n    let newEdges: List<EdgeImmut> = List();\n\n    if (typeof edges === 'object') {\n        edges.forEach((edge: any) => {\n            let weight = 0;\n            let from = 0;\n            let to = 0;\n\n            if (\"weight\" in edge) {\n                weight = parseFloat(edge.weight);\n            }\n            if (\"from\" in edge) {\n                from = nodeMap[edge.from];\n            }\n            if (\"to\" in edge) {\n                to = nodeMap[edge.to];\n            }\n\n            newEdges = newEdges.push(new EdgeImmut(from, to, weight));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return newEdges;\n};\n\nconst genericNodesToImmutNodes = (nodes: any): boolean | { nodes: Readonly<List<NodeImmut>>; map: { [key: number]: number } } => {\n    if (nodes === null) {\n        return false;\n    }\n\n    let newNodes: List<NodeImmut> = List();\n    const nodeMap: NodeMapping = {};\n\n    if (typeof nodes === \"number\") {\n        // Create the nodes\n        for (let i = 0; i < Math.floor(nodes); i++) {\n            newNodes = newNodes.set(i, new NodeImmut(i));\n            nodeMap[i] = i;\n        }\n    }\n    else if (typeof nodes === 'object') {\n        let nodeNum = 0;\n        nodes.forEach((n: any) => {\n            const id = nodeNum++;\n            let label = null;\n            let extraAttrs = null;\n\n            if (\"label\" in n) {\n                label = n.label;\n            }\n            if (\"id\" in n) {\n                nodeMap[n.id] = id;\n                if (\"label\" in n && n.label === n.id.toString()) {\n                    label = id.toString();\n                }\n            }\n            else {\n                nodeMap[id] = id;\n            }\n            if (\"attributes\" in n) {\n                extraAttrs = filterNodeExtraAttr(n.attributes);\n            }\n            else {\n                extraAttrs = filterNodeExtraAttr(n);\n            }\n\n            newNodes = newNodes.set(id, new NodeImmut(id, label, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return {nodes: Object.freeze(newNodes), map: nodeMap};\n};\n\nexport default class GraphImmut {\n    private readonly directed: Readonly<boolean>;\n    private readonly weighted: Readonly<boolean>;\n    private readonly nodes: Readonly<List<NodeImmut>>;\n    private readonly numNodes: Readonly<number>;\n    private readonly edges: Readonly<List<EdgeImmut>>;\n    private readonly numEdges: Readonly<number>;\n\n    constructor(nodes: number | List<NodeImmut> | NodeImmutPlain[],\n                edges: null | List<EdgeImmut> | EdgeImmutPlain[] = null,\n                directed = false, weighted = false) {\n        this.directed = Object.freeze(directed);\n        this.weighted = Object.freeze(weighted);\n        let nodeMap = {};\n\n        // Make Nodes\n        if (typeof nodes === \"number\" || (typeof nodes === \"object\" && !(nodes instanceof List))) {\n            const n = genericNodesToImmutNodes(nodes);\n            if (typeof n !== \"object\") {\n                throw new Error(\"Unable to parse node input!\");\n            }\n            this.nodes = n.nodes;\n            nodeMap = n.map;\n        }\n        else if (nodes instanceof List) {\n            this.nodes = nodes as List<NodeImmut>;\n        }\n        else {\n            throw new Error(\"Illegal type of 'node' input to GraphImmut constructor\");\n        }\n        this.nodes = Object.freeze(this.nodes);\n        this.numNodes = Object.freeze(this.nodes.size);\n\n        // If we are given edges, add them to the graph\n        if (edges !== null && typeof edges === \"object\" && !(edges instanceof List)) {\n            const e = genericEdgesToImmutEdges(edges, nodeMap);\n            if (typeof e !== \"object\") {\n                throw new Error(\"Unable to parse Edge input\");\n            }\n            this.edges = e;\n        }\n        else if (edges instanceof List) {\n            this.edges = edges as List<EdgeImmut>;\n        }\n        else {\n            this.edges = List();\n        }\n        this.edges = Object.freeze(this.edges);\n        this.numEdges = Object.freeze(this.edges.size);\n\n        if (new.target === GraphImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    alignNodeIDs(alignTo = 0): GraphImmut {\n        const nodeMap: NodeMapping = {};\n        let nodeCount = alignTo;\n        let newNodes: List<NodeImmut> = List();\n        this.nodes.forEach((v) => {\n            let label = v.getLabel();\n            if (v.getLabel() === v.getID().toString()) {\n                label = nodeCount.toString();\n            }\n\n            newNodes = newNodes.set(nodeCount, new NodeImmut(nodeCount, label, v.getAllAttributes()));\n            nodeMap[v.getID()] = nodeCount++;\n        });\n\n        let newEdges: List<EdgeImmut> = List();\n        this.edges.forEach((v) => {\n            newEdges = newEdges.push(new EdgeImmut(nodeMap[v.getFrom()], nodeMap[v.getTo()], v.getWeight()));\n        });\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    getNode(id: number, rich = false): NodeImmut | NodeImmutPlain | boolean {\n        if (id >= this.numNodes) {\n            return false;\n        }\n        if (rich) {\n            return this.nodes.get(id);\n        }\n        return this.nodes.get(id).toPlain();\n    }\n\n    addNode(data: any = null): GraphImmut {\n        if (data === null) {\n            data = {};\n        }\n\n        const id = this.numNodes;\n        if (!(\"label\" in data)) {\n            data.label = id.toString();\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n\n        return new GraphImmut(this.nodes.set(id, new NodeImmut(id, data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    editNode(id: number, data: any): any {\n        if (!this.nodes.has(id)) {\n            return false;\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n        if (!(\"label\" in data)) {\n            data.label = (this.getNode(id, true) as NodeImmut).getLabel();\n        }\n        return new GraphImmut(this.nodes.set(id, (this.getNode(id, true) as NodeImmut).editNode(data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    deleteNode(id: number): GraphImmut | boolean {\n        // Make sure the ID exists\n        if (!(id >= 0 && id < this.numNodes)) {\n            return false;\n        }\n\n        const nodeMap: NodeMapping = {}; // Map for old IDs to new ones since we're deleting an entry\n\n        // Remove it from the node list\n        let nodeCount = 0;\n        const newNodes: List<NodeImmut> = this.nodes\n            .filter((n) => {\n                if (n.getID() === id) {\n                    nodeMap[n.getID()] = -1;\n                }\n                else {\n                    nodeMap[n.getID()] = nodeCount++;\n                }\n\n                return n.getID() !== id;\n            })\n            .map((node) => {\n                let label = node.getLabel();\n                if (node.getID().toString() === label) {\n                    label = nodeMap[node.getID()].toString();\n                }\n\n                return new NodeImmut(nodeMap[node.getID()], label, node.getAllAttributes());\n            }) as List<NodeImmut>;\n\n        // Remap edges\n        const newEdges: List<EdgeImmut> = this.edges\n            .filter((edge) => {\n                return !(edge.getFrom() === id || edge.getTo() === id);\n            })\n            .map((edge) => {\n                return new EdgeImmut(nodeMap[edge.getFrom()], nodeMap[edge.getTo()], edge.getWeight());\n            }) as List<EdgeImmut>;\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    addEdge(from: number, to: number, weight: any = 1): GraphImmut {\n        if (!this.weighted) {\n            weight = 1; // Ensure that edge weights are 1 if this is an unweighted graph\n        }\n\n        const newEdges = this.edges.push(new EdgeImmut(from, to, parseFloat(weight)));\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    deleteEdge(from: number, to: number, weight: any = null, deleteAll = true): GraphImmut {\n        if (weight !== null) {\n            weight = parseFloat(weight);\n        }\n\n        let foundOneEdge = false;\n        const newEdges: List<EdgeImmut> = this.edges.filter((edge) => {\n            // If we're not deleting everything and we have found one edge, then do not filter anymore\n            if (foundOneEdge && !deleteAll) {\n                return true;\n            }\n\n            // If we have an exact match\n            if (edge.getFrom() === from && edge.getTo() === to && (weight === null || edge.getWeight() === weight)) {\n                foundOneEdge = true;\n                return false; // Remove this edge\n            }\n\n            // If we are undirected, check for opposing matches\n            if (!this.directed) {\n                if (edge.getFrom() === to && edge.getTo() === from && (weight === null || edge.getWeight() === weight)) {\n                    foundOneEdge = true;\n                    return false; // Remove this edge\n                }\n            }\n\n            return true;\n        }) as List<EdgeImmut>;\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    editEdge(from: number, to: number, newWeight: any, oldWeight: any = null): GraphImmut | boolean {\n        // Editing only makes sense for weighted graphs.\n        // To change from/to, just delete the edge and add a new one\n        if (!this.weighted) {\n            return false;\n        }\n\n        let foundFirst = false;\n\n        if (oldWeight !== null) {\n            oldWeight = parseFloat(oldWeight);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge, index) => {\n            if (foundFirst) {\n                return;\n            }\n            if (edge.getFrom() === from && edge.getTo() === to && (oldWeight === null || edge.getWeight() === oldWeight)) {\n                newEdges = newEdges.set(index, edge.editEdge(parseFloat(newWeight)));\n                foundFirst = true;\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    getAllNodes(rich = false): NodeImmut[] | NodeImmutPlain[] {\n        if (rich) {\n            return this.nodes.toArray();\n        }\n        return this.nodes.map((node) => {\n            return node.toPlain();\n        }).toArray();\n    }\n\n    getAllNodesAsImmutableList(): List<NodeImmut> {\n        return this.nodes;\n    }\n\n    getAllEdgesAsImmutableList(): List<EdgeImmut> {\n        return this.edges;\n    }\n\n    getAllEdges(rich = false): EdgeImmut[] | EdgeImmutPlain[] {\n        if (rich) {\n            return this.edges.toArray();\n        }\n        return this.edges.map((edge) => {\n            return edge.toPlain();\n        }).toArray();\n    }\n\n    getNumberOfNodes(): number {\n        return this.numNodes;\n    }\n\n    getNumberOfEdges(): number {\n        return this.numEdges;\n    }\n\n    getAllOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() in degrees) {\n                degrees[edge.getFrom()]++;\n            }\n            else {\n                degrees[edge.getFrom()] = 1;\n            }\n        });\n\n        return degrees;\n    }\n\n    asWeighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, true);\n    }\n\n    asUnweighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, false);\n    }\n\n    asDirected(doubleEdges = false): GraphImmut {\n        if (!doubleEdges) {\n            return new GraphImmut(this.nodes, this.edges, true, this.weighted);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.getTo(), edge.getFrom(), edge.getWeight()));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, true, this.weighted);\n    }\n\n    asUndirected(): GraphImmut {\n        let newEdges: List<EdgeImmut> = List();\n        const addedEdges: { [key: string]: null } = {};\n\n        this.edges.forEach((edge) => {\n            let from = edge.getFrom();\n            let to = edge.getTo();\n            if (to > from) {\n                from = to;\n                to = edge.getFrom();\n            }\n            if (!(`${from}_${to}` in addedEdges)) {\n                addedEdges[`${from}_${to}`] = null;\n                newEdges = newEdges.push(new EdgeImmut(from, to, edge.getWeight()));\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, false, this.weighted);\n    }\n\n    asChangedDirectedWeighted(directed: boolean, weighted: boolean): GraphImmut {\n        let G: GraphImmut = this;\n        if (directed && !this.directed) {\n            G = this.asDirected();\n        }\n        else if (!directed && this.directed) {\n            G = this.asUndirected();\n        }\n\n        if (weighted && !this.weighted) {\n            G = this.asWeighted();\n        }\n        else if (!weighted && this.weighted) {\n            G = this.asUnweighted();\n        }\n\n        return G;\n    }\n\n    getNodeAdjacency(id: number): number[] {\n        const adj: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() === id) {\n                adj.push(edge.getTo());\n            }\n            else if (!this.directed && edge.getTo() === id) {\n                adj.push(edge.getFrom());\n            }\n        });\n\n        return adj;\n    }\n\n    getFullAdjacency(): number[][] {\n        const adj: number[][] = [];\n        this.nodes.forEach((n) => {\n            adj[n.getID()] = this.getNodeAdjacency(n.getID());\n        });\n\n        return adj;\n    }\n\n    areAdjacent(id1: number, id2: number): boolean {\n        return this.getNodeAdjacency(id1).includes(id2);\n    }\n\n    getEdgesBetween(id1: number, id2: number): EdgeImmut[] {\n        const edgeList: EdgeImmut[] = [];\n        this.edges.forEach((edge) => {\n            if (!this.directed && edge.getFrom() === id2 && edge.getTo() === id1) {\n                edgeList.push(edge);\n            }\n\n            if (edge.getFrom() === id1 && edge.getTo() === id2) {\n                edgeList.push(edge);\n            }\n        });\n\n        return edgeList;\n    }\n\n    getMinWeightEdgeBetween(id1: number, id2: number): number {\n        let minWeight = Infinity;\n        this.getEdgesBetween(id1, id2).forEach((edge) => {\n            if (edge.getWeight() < minWeight) {\n                minWeight = edge.getWeight();\n            }\n        });\n\n        return minWeight;\n    }\n\n    // Take a multigraph and reduce all multiple edges to a single edge, weighted using the reducer\n    reduceMultiGraph(reducer: (a: number, b: number) => number, initialValue?: any): GraphImmut {\n        if (typeof initialValue === \"undefined\") {\n            initialValue = 0;\n        }\n\n        const multiEdges: EdgeImmutPlain[] = [];\n        this.nodes.forEach((node) => {\n            // If we have duplicates\n            const adj = this.getNodeAdjacency(node.getID());\n            const uniques = new Set(adj);\n            if (uniques.size < adj.length) {\n                uniques.forEach((to) => {\n                    const newWeight = this.getEdgesBetween(node.getID(), to).reduce((acc, edge) => {\n                        return reducer(acc, edge.getWeight());\n                    }, initialValue);\n\n                    multiEdges.push({from: node.getID(), to, weight: parseFloat(newWeight)});\n                });\n            }\n        });\n\n        // Remove all multigraph edges and replace them with single new edges\n        let newEdges = this.edges.filter((edge) => {\n            let keep = true;\n            multiEdges.forEach((duplicateEdge) => {\n                if (edge.getFrom() === duplicateEdge.from && edge.getTo() === duplicateEdge.to) {\n                    keep = false;\n                }\n            });\n\n            return keep;\n        }) as List<EdgeImmut>;\n        multiEdges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.from, edge.to, edge.weight));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    isWeighted() {\n        return this.weighted;\n    }\n\n    isDirected() {\n        return this.directed;\n    }\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/js/dataImportExport.ts"],"names":["self","importByString","string","format","toLowerCase","n","JSON","parse","window","network","setData","main","_genericHelpers__WEBPACK_IMPORTED_MODULE_1__","showSimpleModal","err","graph","error","split","forEach","l","vals","_GraphImmut_GraphImmut__WEBPACK_IMPORTED_MODULE_2__","parseInt","addEdge","d","graphState","getGraphData","nodes","v","label","id","toString","makeImportTextModal","showFormModal","$modal","values","modal","type","extraAttrs","style","optionValues","optionText","makeImportFileModal","files","length","file","reader","FileReader","onload","event","target","result","getFileExtension","name","readAsText","validationFunc","val","$files","get","makeExportFileModal","initialValue","onclick","exportToFile","class","clickDismiss","makeExportTextModal","exportToText","jquery__WEBPACK_IMPORTED_MODULE_0__","select","document","execCommand","downloadFile","getDataAsJSON","getDataAsDIMACS","text","stringify","keepOnlyKeys","edges","g","adj","getFullAdjacency","filter","i","indexOf","push","edgeCount","edgeText","from","to","trim","filename","blob","Blob","navigator","msSaveOrOpenBlob","msSaveBlob","a","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","revokeObjectURL","__webpack_exports__"],"mappings":"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","file":"2-b43bf7eb1a1e0d664da0.min.js","sourcesContent":["\"use strict\";\r\n\r\nimport * as $ from 'jquery';\r\nimport help from './genericHelpers';\r\nimport GraphImmut from './GraphImmut/GraphImmut';\r\n\r\nlet self = {\r\n    importByString: (string: string, format: string): void => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            try {\r\n                let n = JSON.parse(string);\r\n                if (\"nodes\" in n && \"edges\" in n) {\r\n                    window.network.setData({}); // Clear out the existing network in order to import the proper\r\n                    // locations\r\n                    window.main.setData(n, false, true, false);\r\n                }\r\n                else {\r\n                    help.showSimpleModal(\"Data Import Error\", \"<p>The provided input does not conform the the\" +\r\n                        \" import specifications.</p>\");\r\n                }\r\n            }\r\n            catch (err) {\r\n                help.showSimpleModal(\"JSON Parse Error\", \"<p>There was an error parsing your input as JSON.</p>\"\r\n                    + \"<pre>\" + err + \"</pre>\");\r\n            }\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            let lines = string.split(/\\r?\\n/);\r\n            let graph = null;\r\n            let error = false;\r\n            lines.forEach((l) => {\r\n                let vals = l.split(/\\s+/);\r\n                if (vals[0].toLowerCase() === \"p\") {\r\n                    if (vals[1].toLowerCase() !== \"edge\") {\r\n                        help.showSimpleModal(\"DIMACS Parse Error\", \"<p>Sorry, but I only know how to parse\" +\r\n                            \" &quot;edge&quot; formatted DIMACS files.</p>\");\r\n                        error = true;\r\n                        return;\r\n                    }\r\n                    graph = new GraphImmut(parseInt(vals[2]));\r\n                }\r\n                else if (vals[0].toLowerCase() === \"e\" && graph !== null) {\r\n                    graph = graph.addEdge(parseInt(vals[1]) - 1, parseInt(vals[2]) - 1);\r\n                }\r\n            });\r\n\r\n            if (graph === null && !error) {\r\n                help.showSimpleModal(\"DIMACS Parse Error\", \"<p>No program line found!</p>\");\r\n                error = true;\r\n            }\r\n\r\n            if (!error) {\r\n                let d = window.main.graphState.getGraphData(graph);\r\n                d.nodes.forEach((v) => {\r\n                    v.label = v.id.toString();\r\n                });\r\n                window.main.setData(d, false, true, true);\r\n            }\r\n        }\r\n        else {\r\n            help.showSimpleModal(\"Unrecognized Input Format\", \"<p>The format of your input is incorrect.</p>\");\r\n        }\r\n    },\r\n\r\n    makeImportTextModal: (): void => {\r\n        help.showFormModal(($modal, values) => {\r\n                $modal.modal(\"hide\");\r\n                self.importByString(values[0], values[1]);\r\n            }, \"Import Graph From Text\", \"Import\",\r\n            [{type: \"textarea\", label: \"Input Text\", extraAttrs: {style: \"height: 20vh; min-height:400px;\"}},\r\n                {type: \"select\", label: \"Format\", optionValues: [\"json\", \"dimacs\"], optionText: [\"JSON\", \"DIMACS\"]}\r\n            ]);\r\n    },\r\n\r\n    makeImportFileModal: (): void => {\r\n        help.showFormModal(($modal, values) => {\r\n                $modal.modal(\"hide\");\r\n\r\n                let files = values[0];\r\n                if (files.length === 1) {\r\n                    let file = files[0];\r\n                    let reader = new FileReader();\r\n                    reader.onload = function (event: any) {\r\n                        self.importByString(event.target.result, help.getFileExtension(file.name));\r\n                    };\r\n\r\n                    reader.readAsText(file);\r\n                }\r\n            }, \"Import Graph From File\", \"Import\",\r\n            [{\r\n                type: \"file\", label: \"Upload File\", validationFunc: (val, $files) => {\r\n                    let files = (<any> $files.get(0)).files;\r\n                    if (files.length >= 1) {\r\n                        return true;\r\n                    }\r\n                    return \"You must choose a file first\";\r\n                }\r\n            }]);\r\n    },\r\n\r\n    makeExportFileModal: () => {\r\n        help.showFormModal(null, \"Export Graph To File\", null,\r\n            [{\r\n                type: \"button\",\r\n                initialValue: \"Export to JSON\",\r\n                onclick: () => {\r\n                    self.exportToFile(\"json\");\r\n                },\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary m-1\"\r\n\r\n                },\r\n                clickDismiss: true\r\n            },\r\n                {\r\n                    type: \"button\",\r\n                    initialValue: \"Export to DIMACS\",\r\n                    onclick: () => {\r\n                        self.exportToFile(\"dimacs\");\r\n                    },\r\n                    extraAttrs: {\r\n                        class: \"btn btn-sm btn-primary\"\r\n                    },\r\n                    clickDismiss: true\r\n                }\r\n            ], null, false);\r\n    },\r\n\r\n    makeExportTextModal: () => {\r\n        help.showFormModal(null, \"Export Graph To Text\", null,\r\n            [{\r\n                type: \"button\",\r\n                initialValue: \"Export to JSON\",\r\n                onclick: () => {\r\n                    self.exportToText(\"json\");\r\n                },\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary m-1\",\r\n                },\r\n                clickDismiss: false\r\n            },\r\n                {\r\n                    type: \"button\",\r\n                    initialValue: \"Export to DIMACS\",\r\n                    onclick: () => {\r\n                        self.exportToText(\"dimacs\");\r\n                    },\r\n                    extraAttrs: {\r\n                        class: \"btn btn-sm btn-primary\",\r\n                    },\r\n                    clickDismiss: false\r\n                },\r\n                {\r\n                    type: \"textarea\", label: \"\", initialValue: \"\", extraAttrs: {\r\n                        style: \"height: 20vh;\" +\r\n                        \" min-height:400px; white-space:nowrap; margin-top: 1rem;\"\r\n                    },\r\n                    onclick: () => {\r\n                        $(\"#exportedText\").select();\r\n                        document.execCommand(\"copy\");\r\n                    }, id: \"exportedText\"\r\n                }\r\n            ], ($modal) => {\r\n                $modal.modal(\"hide\");\r\n            }, false);\r\n    },\r\n\r\n    exportToFile: (format) => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            self.downloadFile(\"graph.json\", self.getDataAsJSON());\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            self.downloadFile(\"graph.dimacs\", self.getDataAsDIMACS());\r\n        }\r\n    },\r\n\r\n    exportToText: (format) => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            $(\"#exportedText\").text(JSON.stringify(JSON.parse(self.getDataAsJSON()), null, 2));\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            $(\"#exportedText\").text(self.getDataAsDIMACS());\r\n        }\r\n    },\r\n\r\n    getDataAsJSON: () => {\r\n        let d = window.main.graphState.getGraphData(window.main.graphState.graph);\r\n        let nodeKeys = [\"id\", \"label\", \"color\", \"x\", \"y\"];\r\n        let edgeKeys = [\"from\", \"to\", \"weight\"];\r\n        d.nodes = help.keepOnlyKeys(d.nodes, nodeKeys);\r\n        d.edges = help.keepOnlyKeys(d.edges, edgeKeys);\r\n\r\n        return JSON.stringify(d);\r\n    },\r\n\r\n    getDataAsDIMACS: () => {\r\n        // If I add direction, DIMACS cannot be used, it only works for undirected graphs\r\n        let g = window.main.graphState.getGraphData();\r\n        let text = \"c This Graph was generated and exported from Michael Dombrowski's Graph Playground --\" +\r\n            \" https://md100play.github.io/graphPlayground -- https://mikedombrowski.com\\n\";\r\n\r\n        let adj = window.main.graphState.graph.getFullAdjacency();\r\n        adj = adj.filter((v) => {\r\n            return v.length !== 0;\r\n        });\r\n\r\n        let nodes = [];\r\n        adj.forEach((v, i) => {\r\n            if (nodes.indexOf(i + 1) === -1) {\r\n                nodes.push(i + 1);\r\n            }\r\n            v.forEach((n) => {\r\n                if (nodes.indexOf(n + 1) === -1) {\r\n                    nodes.push(n + 1);\r\n                }\r\n            });\r\n        });\r\n\r\n        let edgeCount = 0;\r\n        let edgeText = \"\";\r\n        g.edges.forEach((v) => {\r\n            edgeText += \"e \" + (v.from + 1) + \" \" + (v.to + 1) + \"\\n\";\r\n            edgeCount++;\r\n        });\r\n        edgeText = edgeText.trim();\r\n\r\n        text += \"p edge \" + nodes.length + \" \" + edgeCount + \"\\n\";\r\n        return text + edgeText;\r\n    },\r\n\r\n    downloadFile: (filename, text) => {\r\n        let blob = new Blob([text], {type: 'text/plain'});\r\n        if (window.navigator.msSaveOrOpenBlob) {\r\n            window.navigator.msSaveBlob(blob, filename);\r\n        }\r\n        else {\r\n            let a = window.document.createElement('a');\r\n            a.href = window.URL.createObjectURL(blob);\r\n            a.download = filename;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(<any> blob);\r\n        }\r\n    },\r\n};\r\n\r\nexport default self;\r\n"],"sourceRoot":""}
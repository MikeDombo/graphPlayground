{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/graphState.ts","webpack:///./src/js/classes/GraphImmut/EdgeImmut.ts","webpack:///./src/js/main.ts","webpack:///./src/js/settings.ts","webpack:///./src/js/UIInteractions.ts","webpack:///./src/js/app.ts","webpack:///./src/js/classes/GraphImmut/GraphImmut.ts","webpack:///./src/js/classes/GraphImmut/NodeImmut.ts","webpack:///./src/js/util/genericHelpers.ts","webpack:///./src/js/util/graphHelpers.ts","webpack:///./src/js/workers/GraphAlgorithmWorker.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","2","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","script","document","createElement","charset","timeout","nc","setAttribute","src","p","0","1","jsonpScriptSrc","error","Error","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","message","name","request","undefined","setTimeout","head","appendChild","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","window","oldJsonpFunction","slice","vis_index_network__WEBPACK_IMPORTED_MODULE_0__","_util_genericHelpers__WEBPACK_IMPORTED_MODULE_1__","_classes_GraphImmut_GraphImmut__WEBPACK_IMPORTED_MODULE_2__","_classes_GraphImmut_NodeImmut__WEBPACK_IMPORTED_MODULE_3__","getInt","v","parseInt","GraphState","setUpToDate","listOptions","upToDate","forEach","always","indexOf","makeAndPrintProperties","getProperty","updateIfNotUpdated","ignoreDuplicate","a","find","applyFunc","_a","sent","state","graphProperties","recalcLong","directional","settings","getOption","vertices","graph","getNumberOfNodes","edges","getNumberOfEdges","keys","__awaiter","_this","printableProperties","map","_b","_c","printGraphProperties","properties","k","toTitleCase","trim","htmlEncode","getElementById","innerHTML","addEdge","from","to","weight","edgeFrom","edgeTo","main","setData","nodes","clearColorFromNodes","getAllNodes","clearColorFromEdges","getAllEdges","addNode","label","x","y","editNode","id","iId","getGraphData","editEdge","newWeight","oldWeight","newGraph","deleteEdge","deleteNode","color","nodeIDToLabel","getNode","getLabel","toString","nodeLabelToID","filter","node","toLowerCase","getID","rID","found","getGraphAsDataSet","isWeighted","setLocations","locations","newNodes","getAllNodesAsImmutableList","getAttribute","set","getAllEdgesAsImmutableList","isDirected","clearNodeColors","clearEdgeColors","directed","weighted","workerPool","backHistory","forwardHistory","maxHistory","ui","makeAndPrintGraphColoring","makeAndPrintEulerian","getAlgorithms","makeAndPrintIsCyclic","stronglyConnectedComponents","connectedComponents","graphColoring","eulerian","Chromatic Number","Connected Components","Strongly Connected Components","cyclic","__webpack_exports__","EdgeImmut","extraAttrs","this","includes","reduce","obj","attributes","freeze","parseFloat","_newTarget","getFrom","getTo","getWeight","attribute","getAllAttributes","toPlain","toReturn","assign","main_self","graphState","container","visWeightEdgeEdit","callback","genericHelpers","showFormModal","$modal","vals","modal","initialValue","visOptions","interaction","hover","manipulation","makeFormModal","_d","_e","_h","$popup","concat","_f","_g","on","saveData","first","val","cancelEdit","remove","confirm","network","body","_data","fromId","toId","operation","nodeLabelIDValidator","applyColors","graphColors","chromaticNumber","colors","randomColor_default","count","luminosity","G","recalcProps","graphChanged","rearrangeGraph","saveState","changeOption","g","GraphImmut","randomizeNetworkLayoutSeed","getPositions","disableEditMode","enableEditMode","stopLoadingAnimation","isRunning","terminateAllWebWorkers","printGraphAlgorithms","printout","saveStateLocalStorage","getStateForSaving","getElementsByClassName","item","parentElement","classList","add","deepCopy","Array","isArray","undo","applyState","redo","newState","firstLoad","currentState","pop","oldKey","then","checkForLocalStorage","localStorage","setItem","JSON","stringify","shuffleNetworkLayout","Math","round","random","layoutEngine","randomSeed","initialRandomSeed","addNetworkListeners","editEdgeMode","lastNetworkClickEvent","addEventListener","contains","deleteSelected","ctrlKey","shiftKey","Settings","removeItem","saveSettings","current","loadSettings","getItem","parse","setAll","setOptions","physics","arrows","editWithoutDrag","option","defaults","nodePhysics","direction","weights","makeAndPrintShortestPath","title","fn","myName","UIInteractions_UIInteractions","printAlreadyRunning","values","source","sink","iStartedProgress","startLoadingAnimation","w","getWorkerIfPossible","cleanup","pathExists","distance","cost","G_1","path","showSimpleModal","send","args","convertToGraphImmut","validationFunc","makeAndPrintComponents","stronglyConnected","UIInteractions_awaiter","cc","componentKey","components","flatten","rotate","UIInteractions_WorkerProxy","WorkerProxy","listener","worker","postMessage","onmessage","terminate","UIInteractions","display","makeAndPrintFFMCMF","makeAndPrintKruskal","makeAndPrintTopologicalSort","makeAndPrintDirectionalEulerian","registerListeners","makeSimpleClickListener","selector","querySelector","preventDefault","printHelp","printOptions","predefined","default","Petersen","Konigsberg","Complete","Hypercube","Custom","makeImportFileModal","makeImportTextModal","makeExportFileModal","makeExportTextModal","asDirected","asUndirected","asWeighted","asUnweighted","_i","Worker","nextIndex","findIndex","GraphAlgorithmWorker_default","prog","style","printGC","w_1","scc","graphHelpers","findVertexDegreesDirectional","getFullAdjacency","getAllOutDegrees","cb","maxFlow","flowPath","flow","capacity","totalWeight","mst","$div","addAlgoToPane","alg","navlink","innerText","js_UIInteractions","index_network","sdk","dsn","loadDefault","jsonGraph","app_awaiter","immutable__WEBPACK_IMPORTED_MODULE_0__","_NodeImmut__WEBPACK_IMPORTED_MODULE_1__","_EdgeImmut__WEBPACK_IMPORTED_MODULE_2__","filterExtraAttr","labels","filterNodeExtraAttr","filterEdgeExtraAttr","genericEdgesToImmutEdges","nodeMap","newEdges","edge","genericNodesToImmutNodes","floor","nodeNum_1","numNodes","size","numEdges","rich","has","nodeCount","deleteAll","foundOneEdge","foundFirst","index","toArray","degrees","_","doubleEdges","addedEdges","asChangedDirectedWeighted","getNodeAdjacency","adj","areAdjacent","id1","id2","getEdgesBetween","edgeList","getMinWeightEdgeBetween","minWeight","Infinity","reduceMultiGraph","reducer","min","multiEdges","uniques","Set","acc","keep","duplicateEdge","NodeImmut","jquery__WEBPACK_IMPORTED_MODULE_0__","defaultCancelCb","self","deep","clone","copy","options","copyIsArray","isPlainObject","proto","getPrototypeOf","Ctor","constructor","arguments","deepFreeze","getOwnPropertyNames","prop","isFrozen","sort","arr","compareFunction","datasetToArray","ds","keepOnlyKeys","getFileExtension","filename","split","string","textContent","replace","text","escape","max","iterable","b","str","match","toUpperCase","successText","form","footer","f","class","formRow","basicMap","attrname","validFunc","generalValidator","valueMutator","$v","valid","removeClass","next","addClass","after","append","checked","for","prepend","clickDismiss","$b","onclick","$options_1","optionText","oText","oIndex","optionValues","$footer","tabindex","role","aria-hidden","data-dismiss","aria-label","html","off","last","trigger","successCb","cancelCb","hasErrors","each","tagName","attr","files","hasClass","adjacencyMatrix","out","in","outV","interpolateNodesFromEdges"],"mappings":"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","file":"bundle-ee1ec9701aa21526be1d.min.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t2: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \"-\" + {\"0\":\"e39022e92bac2b39e832\",\"1\":\"e26f992d4b596bbcd5f5\"}[chunkId] + \".min.js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([109,4]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","\"use strict\";\r\n\r\nimport {DataSet} from 'vis/index-network';\r\nimport help from './util/genericHelpers';\r\nimport GraphImmut from './classes/GraphImmut/GraphImmut';\r\nimport {EdgeImmutPlain} from \"./classes/GraphImmut/EdgeImmut\";\r\nimport NodeImmut, {NodeImmutPlain} from \"./classes/GraphImmut/NodeImmut\";\r\nimport {GraphPlain} from \"./util/predefinedGraphs\";\r\n\r\ninterface UpToDateProperties {\r\n    name: string;\r\n    upToDate: boolean;\r\n    type: string;\r\n    always?: boolean;\r\n    applyFunc?: (ignoreDuplicate?: boolean) => any;\r\n    [index: string]: undefined|string|boolean|((ignoreDuplicate?: boolean) => any)\r\n}\r\n\r\ninterface GraphProperties {\r\n    vertices: number;\r\n    edges: number;\r\n    eulerian: boolean;\r\n    \"Chromatic Number\": number | null;\r\n    \"Connected Components\": number | null;\r\n    \"Strongly Connected Components\": number | null;\r\n    cyclic: boolean;\r\n\r\n    [index: string]: boolean | number | null;\r\n}\r\n\r\ninterface GraphStateData {\r\n    stronglyConnectedComponents: null | { [key: number]: number };\r\n    connectedComponents: null | { [key: number]: number };\r\n    graphColoring: null | number[];\r\n\r\n    [index: string]: null | number[] | { [key: number]: number };\r\n}\r\n\r\nexport interface AddNodeI {\r\n    id?: number\r\n    label: string;\r\n    x: number;\r\n    y: number;\r\n    color?:string;\r\n}\r\n\r\nexport interface GraphStateHistory {\r\n    upToDate: UpToDateProperties[];\r\n    state: GraphStateData;\r\n    graph: GraphImmut;\r\n    graphProperties: GraphProperties;\r\n    [index: string]: UpToDateProperties[]|GraphStateData|GraphImmut|GraphProperties;\r\n}\r\n\r\nconst getInt = (v: string|number): number => {\r\n    if(typeof v === 'number'){\r\n        return v;\r\n    }\r\n    return parseInt(v);\r\n};\r\n\r\nexport default class GraphState {\r\n    public static workerPool: (Worker|null)[] = [];\r\n    public static backHistory: GraphStateHistory[] = [];\r\n    public static forwardHistory: GraphStateHistory[] = [];\r\n    public static maxHistory = 10;\r\n    public static upToDate: UpToDateProperties[] = [\r\n        {\r\n            name: \"Chromatic Number\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {\r\n            name: \"graphColoring\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintGraphColoring();\r\n            }\r\n        },\r\n        {name: \"vertices\", upToDate: true, always: true, type: \"property\"},\r\n        {name: \"edges\", upToDate: true, always: true, type: \"property\"},\r\n        {\r\n            name: \"eulerian\", upToDate: false, type: \"property\",\r\n            applyFunc: (i) => {\r\n                return window.ui.makeAndPrintEulerian(i);\r\n            }\r\n        },\r\n        {\r\n            name: \"Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components')!.applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"connectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components')!.applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"Strongly Connected Components\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components')!.applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"stronglyConnectedComponents\", upToDate: false, type: \"state\",\r\n            applyFunc: () => {\r\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components')!.applyFunc();\r\n            }\r\n        },\r\n        {\r\n            name: \"cyclic\", upToDate: false, type: \"property\",\r\n            applyFunc: () => {\r\n                return window.ui.makeAndPrintIsCyclic();\r\n            }\r\n        },\r\n    ];\r\n    public static state: GraphStateData = {\r\n        stronglyConnectedComponents: null,\r\n        connectedComponents: null,\r\n        graphColoring: null,\r\n    };\r\n    public static graph: GraphImmut;\r\n    public static graphProperties: GraphProperties = {\r\n        vertices: 0,\r\n        edges: 0,\r\n        eulerian: false,\r\n        \"Chromatic Number\": null,\r\n        \"Connected Components\": null,\r\n        \"Strongly Connected Components\": null,\r\n        cyclic: false,\r\n    };\r\n\r\n    static setUpToDate(value = false, listOptions?: string[]) {\r\n        const all = listOptions === null || typeof listOptions === \"undefined\";\r\n        let property = false;\r\n        GraphState.upToDate.forEach((v) => {\r\n            if ((!(\"always\" in v) || !v.always) && (all || listOptions!.indexOf(v.name) > -1)) {\r\n                v.upToDate = value;\r\n                if (v.type === \"property\") {\r\n                    property = true;\r\n                }\r\n            }\r\n        });\r\n        if (property) {\r\n            GraphState.makeAndPrintProperties();\r\n        }\r\n    }\r\n\r\n    static async getProperty(property: string, updateIfNotUpdated = false, ignoreDuplicate = false): Promise<any> {\r\n        const a = GraphState.upToDate.find((v) => {\r\n            return (\"name\" in v && v.name === property);\r\n        })!;\r\n        if (!a.upToDate) {\r\n            if (\"applyFunc\" in a && typeof a.applyFunc === \"function\" && updateIfNotUpdated) {\r\n                await a.applyFunc(ignoreDuplicate);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        }\r\n        if (a.type === \"state\") {\r\n            return Promise.resolve(GraphState.state[property]);\r\n        }\r\n        return Promise.resolve(GraphState.graphProperties[property]);\r\n    }\r\n\r\n    static async makeAndPrintProperties(recalcLong = false) {\r\n        const directional = window.settings.getOption(\"direction\");\r\n\r\n        GraphState.graphProperties.vertices = GraphState.graph.getNumberOfNodes();\r\n        GraphState.graphProperties.edges = GraphState.graph.getNumberOfEdges();\r\n\r\n        if (!directional) {\r\n            await GraphState.getProperty(\"eulerian\", true, true);\r\n        }\r\n\r\n        const p = Object.keys(GraphState.graphProperties);\r\n        if (recalcLong) {\r\n            p.forEach(async (v) => {\r\n                await GraphState.getProperty(v, true);\r\n            });\r\n        }\r\n\r\n        const printableProperties: any = {};\r\n        await Promise.all(p.map(async (v) => {\r\n            printableProperties[v] = await GraphState.getProperty(v);\r\n        }));\r\n\r\n        GraphState.printGraphProperties(printableProperties);\r\n    }\r\n\r\n    static printGraphProperties(properties: any) {\r\n        let p = \"\";\r\n        Object.keys(properties).forEach((k) => {\r\n            if (properties[k] !== null) {\r\n                p += `${help.toTitleCase(k)}: ${properties[k]}\\n`;\r\n            }\r\n        });\r\n        p = p.trim();\r\n        p = help.htmlEncode(p);\r\n        document.getElementById(\"graphProps\")!.innerHTML = `<p class='nav-link'>${p}</p>`;\r\n    }\r\n\r\n    static addEdge(from: number|string, to: number|string, weight = 0, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        graph = graph.addEdge(edgeFrom, edgeTo, weight);\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: GraphState.clearColorFromEdges(graph.getAllEdges() as EdgeImmutPlain[])\r\n        });\r\n    }\r\n\r\n    static addNode(data: AddNodeI, graph = GraphState.graph) {\r\n        graph = graph.addNode({label: data.label, x: data.x, y: data.y});\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: GraphState.clearColorFromEdges(graph.getAllEdges() as EdgeImmutPlain[])\r\n        });\r\n    }\r\n\r\n    static editNode(id: number|string, label: string, graph = GraphState.graph) {\r\n        const iId = getInt(id);\r\n        graph = graph.editNode(iId, {label});\r\n        window.main.setData(GraphState.getGraphData(graph), false, false);\r\n    }\r\n\r\n    static editEdge(from: number | string, to: number | string,\r\n                    newWeight: number, oldWeight: number, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        const newGraph = graph.editEdge(edgeFrom, edgeTo, newWeight, oldWeight);\r\n        if (newGraph instanceof GraphImmut) {\r\n            window.main.setData(GraphState.getGraphData(newGraph), false, false);\r\n        }\r\n    }\r\n\r\n    static deleteEdge(from: number|string, to: number|string, weight: (undefined|null|number) = null, graph = GraphState.graph) {\r\n        const edgeFrom = getInt(from);\r\n        const edgeTo = getInt(to);\r\n        graph = graph.deleteEdge(edgeFrom, edgeTo, weight, false);\r\n        window.main.setData({\r\n            nodes: GraphState.clearColorFromNodes(graph.getAllNodes() as NodeImmutPlain[]),\r\n            edges: GraphState.clearColorFromEdges(graph.getAllEdges() as EdgeImmutPlain[])\r\n        });\r\n    }\r\n\r\n    static deleteNode(id: number|string, graph = GraphState.graph) {\r\n        const iId = getInt(id);\r\n        const newGraph = graph.deleteNode(iId);\r\n        if (newGraph instanceof GraphImmut) {\r\n            window.main.setData({\r\n                nodes: GraphState.clearColorFromNodes(newGraph.getAllNodes() as NodeImmutPlain[]),\r\n                edges: GraphState.clearColorFromEdges(graph.getAllEdges() as EdgeImmutPlain[])\r\n            });\r\n        }\r\n    }\r\n\r\n    static clearColorFromNodes(nodes: NodeImmutPlain[]): NodeImmutPlain[] {\r\n        nodes.forEach((v) => {\r\n            v.color = null;\r\n        });\r\n        return nodes;\r\n    }\r\n\r\n    static clearColorFromEdges(edges: EdgeImmutPlain[]): EdgeImmutPlain[] {\r\n        edges.forEach((v) => {\r\n            delete v.color;\r\n        });\r\n        return edges;\r\n    }\r\n\r\n    static nodeIDToLabel(id: number, graph = GraphState.graph): string {\r\n        const n = graph.getNode(id, true);\r\n        if (n !== false && n !== null && n instanceof NodeImmut && n.getLabel().trim().length > 0) {\r\n            return n.getLabel().trim();\r\n        }\r\n\r\n        return id.toString();\r\n    }\r\n\r\n    // Preferentially search by ID, label, and case-insensitive label\r\n    static nodeLabelToID(label: string, graph = GraphState.graph) {\r\n        let n = graph.getAllNodes(true) as NodeImmut[];\r\n        n = n.filter((node) => {\r\n            return node.getLabel().toLowerCase() === label.toLowerCase() || node.getID().toString() === label;\r\n        });\r\n\r\n        if (n.length === 0) {\r\n            return -1;\r\n        }\r\n        else if (n.length === 1) {\r\n            return n[0].getID();\r\n        }\r\n\r\n        let rID = -1;\r\n        let found = false;\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getID().toString() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel() === label) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        if (found) {\r\n            return rID;\r\n        }\r\n\r\n        n.forEach((node) => {\r\n            if (!found && node.getLabel().toLowerCase() === label.toLowerCase()) {\r\n                rID = node.getID();\r\n                found = true;\r\n            }\r\n        });\r\n\r\n        return rID;\r\n    }\r\n\r\n    // Return graph as a Vis compatible dataset\r\n    static getGraphAsDataSet(graph: GraphImmut): { nodes: DataSet<vis.Node>; edges: DataSet<vis.Edge> } {\r\n        const d = GraphState.getGraphData(graph);\r\n        if (graph.isWeighted()) {\r\n            d.edges.forEach((e) => {\r\n                e.label = e.weight.toString();\r\n            });\r\n        }\r\n        d.edges.forEach((e) => {\r\n            if('color' in e) {\r\n                e.color = {color: e.color};\r\n            }\r\n        });\r\n\r\n        return {nodes: new DataSet(d.nodes as vis.Node[]), edges: new DataSet(d.edges as vis.Edge[])};\r\n    }\r\n\r\n    static setLocations(locations: {[key: string]: {x: number; y: number}}, graph = GraphState.graph): GraphImmut {\r\n        let newNodes = graph.getAllNodesAsImmutableList();\r\n        Object.keys(locations).forEach((i) => {\r\n            const v = locations[i];\r\n            const node = newNodes.get(parseInt(i))!;\r\n            // Only change when there is actually a new position\r\n            if (node.getAttribute(\"x\") !== v.x || node.getAttribute(\"y\") !== v.y) {\r\n                // Batch up all changes that we'll be making\r\n                newNodes = newNodes.set(parseInt(i), node.editNode(node.getLabel(), {x: v.x, y: v.y}));\r\n            }\r\n        });\r\n\r\n        return new GraphImmut(newNodes, graph.getAllEdgesAsImmutableList(), graph.isDirected(), graph.isWeighted());\r\n    }\r\n\r\n    static getGraphData(graph = GraphState.graph, clearNodeColors = false, clearEdgeColors = false): GraphPlain {\r\n        const nodes = graph.getAllNodes() as NodeImmutPlain[];\r\n        const edges = graph.getAllEdges() as EdgeImmutPlain[];\r\n        return {\r\n            nodes: clearNodeColors ? GraphState.clearColorFromNodes(nodes) : nodes,\r\n            edges: clearEdgeColors ? GraphState.clearColorFromEdges(edges) : edges,\r\n            directed: graph.isDirected(),\r\n            weighted: graph.isWeighted()\r\n        };\r\n    }\r\n}\r\n","\"use strict\";\n\nexport interface EdgeImmutPlain {\n    label?: string;\n    from: number;\n    to: number;\n    weight: number;\n\n    [key: string]: any;\n\n    [key: number]: any;\n}\n\nexport default class EdgeImmut {\n    private readonly from: Readonly<number>;\n    private readonly to: Readonly<number>;\n    private readonly weight: Readonly<number>;\n    private readonly attributes: any;\n\n    constructor(from: number | EdgeImmutPlain, to?: number, weight: number | string = 1, extraAttrs: any = null) {\n        if (typeof from === \"object\") {\n            extraAttrs = Object.keys(from)\n                .filter(key => ![\"from\", \"to\", \"weight\"].includes(key))\n                .reduce((obj: any, key: string) => {\n                    obj[key] = (<EdgeImmutPlain>from)[key];\n                    return obj;\n                }, {});\n\n            to = from.to;\n            weight = from.weight;\n            from = from.from;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.from = Object.freeze(from);\n        this.to = Object.freeze(to!);\n        this.weight = Object.freeze(parseFloat(weight as string));\n\n        if (new.target === EdgeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getFrom(): Readonly<number> {\n        return this.from;\n    }\n\n    getTo(): Readonly<number> {\n        return this.to;\n    }\n\n    getWeight(): Readonly<number> {\n        return this.weight;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    toPlain(): EdgeImmutPlain {\n        const toReturn: EdgeImmutPlain = { from: this.from, to: this.to, weight: this.weight };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    editEdge(newWeight: number | null, extraAttrs: any = {}): EdgeImmut {\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        Object.keys(extraAttrs).forEach(key => {\n            attributes[key] = extraAttrs[key];\n        });\n\n        return new EdgeImmut(\n            this.getFrom(),\n            this.getTo(),\n            newWeight === null ? this.getWeight() : newWeight,\n            attributes\n        );\n    }\n}\n","\"use strict\";\r\n\r\nimport help from './util/genericHelpers';\r\nimport randomColor from 'randomcolor';\r\nimport GraphState, {AddNodeI, GraphStateHistory} from './graphState';\r\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\r\nimport {NodeImmutPlain} from \"./classes/GraphImmut/NodeImmut\";\r\nimport {EdgeImmutPlain} from \"./classes/GraphImmut/EdgeImmut\";\r\nimport {GraphPlain} from \"./util/predefinedGraphs\";\r\n\r\nexport interface MainI {\r\n    graphState: typeof GraphState;\r\n    container: HTMLElement;\r\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback: Function) => void;\r\n    visOptions: {\r\n        interaction: { hover: boolean };\r\n        manipulation: {\r\n            addNode: (data: AddNodeI, callback: Function) => void;\r\n            editNode: (data: AddNodeI, callback: Function) => void;\r\n            addEdge: (data: VisEdgeInternal, callback?: Function) => void;\r\n            editEdge: (data: VisEdgeInternal, callback: Function) => void;\r\n            deleteEdge: (data: { edges: string[] }, callback?: Function) => void;\r\n            deleteNode: (data: { nodes: string[] }, callback: Function) => void\r\n        }\r\n    };\r\n    cancelEdit: (callback: Function) => void;\r\n    saveData: (data: any, callback: Function, operation: string, label: string) => void;\r\n    nodeLabelIDValidator: (v: string) => (boolean | string);\r\n    applyColors: () => Promise<void>;\r\n    setData: (data: GraphPlain, recalcProps?: boolean, graphChanged?: boolean, rearrangeGraph?: boolean) => void;\r\n    saveState: () => void;\r\n    getStateForSaving: () => GraphStateHistory;\r\n    undo: () => void;\r\n    redo: () => void;\r\n    applyState: (undo?: boolean, newState?: any) => void;\r\n    saveStateLocalStorage: () => void;\r\n    shuffleNetworkLayout: () => void;\r\n    randomizeNetworkLayoutSeed: (network: VisNetworkInternals) => void;\r\n    addNetworkListeners: (network: vis.Network) => void\r\n}\r\n\r\ninterface VisNetworkEvent {\r\n    edges: vis.DataSet<vis.Edge>;\r\n    nodes: vis.DataSet<vis.Node>;\r\n}\r\n\r\ninterface VisNetworkInternals extends vis.Network {\r\n    layoutEngine: {\r\n        randomSeed: number,\r\n        initialRandomSeed: number\r\n    }\r\n}\r\n\r\ninterface VisEditEdgeInternal {\r\n    from: { id: string | number };\r\n    to: { id: string | number };\r\n    label?: string\r\n}\r\n\r\ninterface VisEdgeInternal {\r\n    from: string | number;\r\n    to: string | number;\r\n    id: string;\r\n    label?: string\r\n}\r\n\r\nconst self: MainI = {\r\n    graphState: GraphState,\r\n    container: document.getElementById('network')!,\r\n    // Function used to overwrite the edge edit functionality when weights are active\r\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback) => {\r\n        help.showFormModal(($modal, vals) => {\r\n            callback(null);\r\n            $modal.modal(\"hide\");\r\n            const value = parseFloat(vals[0]);\r\n            GraphState.editEdge(data.from.id, data.to.id, value, parseFloat(data.label!));\r\n        }, \"Edit Edge\", \"Save\", [\r\n            {\r\n                type: \"numeric\",\r\n                label: \"Weight/Capacity\",\r\n                initialValue: parseFloat(data.label!)\r\n            }\r\n        ]);\r\n    },\r\n    visOptions: {\r\n        interaction: {hover: true},\r\n        manipulation: {\r\n            addNode: async (data, callback) => {\r\n                const $popup = help.makeFormModal(\"Add Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: `<p>Node ID: ${await GraphState.getProperty(\"vertices\")}</p>`\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: await GraphState.getProperty(\"vertices\")}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"add\", $popup.find(\"input\").first().val() as string);\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            editNode: (data, callback) => {\r\n                const $popup = help.makeFormModal(\"Edit Node\", \"Save\", [\r\n                    {\r\n                        type: \"html\",\r\n                        initialValue: `<p>Node ID: ${data.id}</p>`\r\n                    },\r\n                    {type: \"text\", label: \"Label\", initialValue: data.label}\r\n                ]);\r\n\r\n                $popup.on(\"click\", \".btn-success\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.saveData(data, callback, \"editNode\", $popup.find(\"input\").first().val() as string);\r\n                }).on(\"click\", \".btn-cancel\", () => {\r\n                    $popup.modal(\"hide\");\r\n                    self.cancelEdit(callback);\r\n                }).on(\"hidden.bs.modal\", () => {\r\n                    $popup.remove();\r\n                    self.cancelEdit(callback);\r\n                }).modal(\"show\");\r\n            },\r\n            addEdge: (data, callback) => {\r\n                const apply = () => {\r\n                    if (typeof callback === \"function\") {\r\n                        callback(null);\r\n                    }\r\n                    GraphState.addEdge(data.from, data.to);\r\n                };\r\n                if (data.from === data.to) {\r\n                    if (confirm(\"Do you want to connect the node to itself?\")) {\r\n                        apply();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                apply();\r\n            },\r\n            editEdge: (data, callback) => {\r\n                callback(null);\r\n                self.visOptions.manipulation.deleteEdge({edges: [data.id]});\r\n                self.visOptions.manipulation.addEdge(data);\r\n            },\r\n            deleteEdge: (data, callback) => {\r\n                if (typeof callback === \"function\") {\r\n                    callback(null);\r\n                }\r\n                data.edges.forEach((v: any) => {\r\n                    let weight = null;\r\n                    if (typeof (window.network as any).body.data.edges._data[v].label !== \"undefined\") {\r\n                        weight = parseFloat((window.network as any).body.data.edges._data[v].label);\r\n                    }\r\n\r\n                    GraphState.deleteEdge((window.network as any).body.edges[v].fromId,\r\n                        (window.network as any).body.edges[v].toId, weight);\r\n                });\r\n            },\r\n            deleteNode: (data, callback) => {\r\n                callback(null);\r\n                data.nodes.forEach((v: string) => {\r\n                    GraphState.deleteNode(v);\r\n                });\r\n            },\r\n        },\r\n    },\r\n\r\n    cancelEdit: (callback) => {\r\n        if (typeof callback === \"function\") {\r\n            callback(null);\r\n        }\r\n    },\r\n\r\n    saveData: (data, callback, operation, label) => {\r\n        callback(null);\r\n\r\n        data.label = label;\r\n        if (operation === \"add\") {\r\n            GraphState.addNode(data);\r\n        }\r\n        else if (operation === \"editNode\") {\r\n            GraphState.editNode(data.id, data.label);\r\n        }\r\n    },\r\n\r\n    nodeLabelIDValidator: (v) => {\r\n        if (GraphState.nodeLabelToID(v) > -1) {\r\n            return true;\r\n        }\r\n        return \"Invalid Label or ID\";\r\n    },\r\n\r\n    applyColors: async () => {\r\n        if (window.settings.getOption(\"direction\")) {\r\n            return;\r\n        }\r\n        const graphColors = await GraphState.getProperty(\"graphColoring\", true);\r\n        const chromaticNumber = await GraphState.getProperty(\"Chromatic Number\", true);\r\n\r\n        const colors = randomColor({count: chromaticNumber, luminosity: \"light\"});\r\n        let G = GraphState.graph;\r\n        (G.getAllNodes() as NodeImmutPlain[]).forEach((v) => {\r\n            G = G.editNode(v.id, {color: colors[graphColors[v.id]]});\r\n        });\r\n        self.setData(GraphState.getGraphData(G), false, false);\r\n    },\r\n\r\n    setData: (data, recalcProps = false, graphChanged = true, rearrangeGraph = false) => {\r\n        // Store existing positions in the data if we're supposed to keep the layout\r\n        if (rearrangeGraph) {\r\n            data.nodes.forEach((v) => {\r\n                delete v.x;\r\n                delete v.y;\r\n            });\r\n        }\r\n\r\n        if (graphChanged) {\r\n            self.saveState();\r\n        }\r\n\r\n        if (\"directed\" in data && typeof data.directed !== \"undefined\") {\r\n            window.settings.changeOption(\"direction\", data.directed);\r\n        }\r\n        if (\"weighted\" in data && typeof data.weighted !== \"undefined\") {\r\n            window.settings.changeOption(\"weights\", data.weighted);\r\n        }\r\n        const directional = window.settings.getOption(\"direction\") as boolean;\r\n        const weighted = window.settings.getOption(\"weights\") as boolean;\r\n\r\n        const g = new GraphImmut(data.nodes, data.edges, directional, weighted);\r\n        GraphState.graph = g;\r\n\r\n        // Set a new random seed so that the layout will be different\r\n        self.randomizeNetworkLayoutSeed(window.network as VisNetworkInternals);\r\n        window.network.setData(GraphState.getGraphAsDataSet(g));\r\n        GraphState.graph = GraphState.setLocations(window.network.getPositions());\r\n\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        if (graphChanged) {\r\n            window.ui.stopLoadingAnimation();\r\n            window.ui.isRunning = {};\r\n            window.ui.terminateAllWebWorkers();\r\n            window.ui.printGraphAlgorithms();\r\n            help.printout(\"\");\r\n            GraphState.setUpToDate();\r\n            GraphState.makeAndPrintProperties(recalcProps);\r\n        }\r\n\r\n        self.saveStateLocalStorage();\r\n    },\r\n\r\n    saveState: () => {\r\n        if (GraphState.graph === null) {\r\n            return;\r\n        }\r\n\r\n        if (GraphState.backHistory.length >= GraphState.maxHistory) {\r\n            GraphState.backHistory.shift();\r\n        }\r\n\r\n        GraphState.backHistory.push(self.getStateForSaving());\r\n        GraphState.forwardHistory = [];\r\n        document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\r\n    },\r\n\r\n    getStateForSaving: () => {\r\n        const state: any = {};\r\n        Object.keys(GraphState).forEach((k: string) => {\r\n            const v: any = (GraphState as any)[k];\r\n            if (typeof v !== \"function\") {\r\n                if (typeof v !== \"object\") {\r\n                    state[k] = v;\r\n                }\r\n                else {\r\n                    if (k === \"graph\" && v !== null) {\r\n                        state[k] = v;\r\n                    }\r\n                    if (!k.toLowerCase().includes(\"history\")) {\r\n                        state[k] = help.deepCopy(true, Array.isArray(v) ? [] : {}, v);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        return state as GraphStateHistory;\r\n    },\r\n\r\n    undo: () => {\r\n        if (GraphState.backHistory.length > 0) {\r\n            self.applyState(true);\r\n        }\r\n    },\r\n\r\n    redo: () => {\r\n        if (GraphState.forwardHistory.length > 0) {\r\n            self.applyState(false);\r\n        }\r\n    },\r\n\r\n    applyState: (undo = true, newState: null|GraphStateHistory = null) => {\r\n        const firstLoad = newState !== null;\r\n        const currentState = self.getStateForSaving();\r\n\r\n        if (!firstLoad) {\r\n            if (undo) {\r\n                newState = GraphState.backHistory.pop()!;\r\n            }\r\n            else {\r\n                newState = GraphState.forwardHistory.pop()!;\r\n            }\r\n        }\r\n\r\n        //@ts-ignore Ignore accessing private props. I do this because saving the state lost the type of the data\r\n        newState.graph = new GraphImmut(newState.graph.nodes, newState.graph.edges, newState.graph.directed, newState.graph.weighted);\r\n\r\n        window.settings.changeOption(\"direction\", newState!.graph.isDirected());\r\n        window.settings.changeOption(\"weights\", newState!.graph.isWeighted());\r\n\r\n        GraphState.graph = newState!.graph;\r\n\r\n        window.network.setData(GraphState.getGraphAsDataSet(GraphState.graph));\r\n        window.network.disableEditMode();\r\n        window.network.enableEditMode();\r\n\r\n        window.ui.printGraphAlgorithms();\r\n        help.printout(\"\");\r\n\r\n        Object.keys(newState!).forEach((k: string) => {\r\n            const v = newState![k];\r\n            if (typeof v !== \"object\") {\r\n                (GraphState as any)[k] = v;\r\n            }\r\n            else if (!k.toLowerCase().includes(\"history\") && k.toLowerCase() !== \"graph\") {\r\n                if (k.toLowerCase() === \"uptodate\") {\r\n                    Object.keys((GraphState as any)[k]).forEach((oldKey) => {\r\n                        (GraphState as any)[k][oldKey].upToDate = (v as any)[oldKey].upToDate;\r\n                    });\r\n                }\r\n                else {\r\n                    (GraphState as any)[k] = help.deepCopy(true, (GraphState as any)[k], v);\r\n                }\r\n            }\r\n        });\r\n\r\n        GraphState.makeAndPrintProperties().then(() => {\r\n            if (undo && !firstLoad) {\r\n                document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\r\n                if (GraphState.backHistory.length === 0) {\r\n                    document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\r\n                }\r\n                GraphState.forwardHistory.push(currentState);\r\n            }\r\n            else if (!undo && !firstLoad) {\r\n                document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\r\n                if (GraphState.forwardHistory.length === 0) {\r\n                    document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\r\n                }\r\n                GraphState.backHistory.push(currentState);\r\n            }\r\n\r\n            self.saveStateLocalStorage();\r\n        });\r\n    },\r\n\r\n    saveStateLocalStorage: () => {\r\n        if (window.settings.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.lastState\", JSON.stringify(self.getStateForSaving()));\r\n        }\r\n    },\r\n\r\n    shuffleNetworkLayout: () => {\r\n        self.setData({\r\n            nodes: GraphState.graph.getAllNodes() as NodeImmutPlain[],\r\n            edges: GraphState.graph.getAllEdges() as EdgeImmutPlain[]\r\n        }, false, false, true);\r\n    },\r\n\r\n    randomizeNetworkLayoutSeed: (network) => {\r\n        const r = Math.round(Math.random() * 1000000);\r\n        network.layoutEngine.randomSeed = r;\r\n        network.layoutEngine.initialRandomSeed = r;\r\n    },\r\n\r\n    addNetworkListeners: (network) => {\r\n        // Enable edit node/edge when double clicking\r\n        network.on(\"doubleClick\", (p: VisNetworkEvent) => {\r\n            if (window.settings.getOption(\"weights\") && \"edges\" in p && p.edges.length === 1) {\r\n                network.editEdgeMode();\r\n            }\r\n            if (\"nodes\" in p && p.nodes.length === 1) {\r\n                network.editNode();\r\n            }\r\n        });\r\n\r\n        // Save locations of nodes after dragging\r\n        network.on(\"dragEnd\", () => {\r\n            GraphState.graph = GraphState.setLocations(network.getPositions());\r\n            self.saveStateLocalStorage(); // Save the new locations as part of the state\r\n        });\r\n\r\n        // Delete nodes/edges when hit \"Delete\"\r\n        let lastNetworkClickEvent: Event|null = null;\r\n        network.on('click', (event) => {\r\n            lastNetworkClickEvent = event;\r\n        });\r\n\r\n        // Delete key to delete node or edge\r\n        document.addEventListener('keyup', (key) => {\r\n            if (key.key === \"Delete\" && lastNetworkClickEvent !== null) {\r\n                if (self.container.contains((lastNetworkClickEvent as any).event.target)) {\r\n                    if ((\"edges\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).edges.length === 1)\r\n                        || (\"nodes\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).nodes.length === 1)) {\r\n                        network.deleteSelected();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Undo/Redo keyboard commands\r\n        document.addEventListener(\"keydown\", (e) => {\r\n            if ((e.key.toLowerCase() === 'y' && e.ctrlKey) || (e.key.toLowerCase() === 'z' && e.ctrlKey && e.shiftKey)) {\r\n                self.redo();\r\n            }\r\n            else if (e.key.toLowerCase() === 'z' && e.ctrlKey) {\r\n                self.undo();\r\n            }\r\n        });\r\n\r\n        // When clicking off of the network, remove the Delete functionality\r\n        document.addEventListener(\"click\", (e) => {\r\n            if (self.container !== e.target && !self.container.contains(e.target as Node)) {\r\n                lastNetworkClickEvent = null;\r\n            }\r\n        });\r\n    },\r\n\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\ninterface SettingsList {\r\n    nodePhysics: boolean;\r\n    direction: boolean;\r\n    weights: boolean;\r\n\r\n    [index: string]: boolean;\r\n}\r\n\r\nexport default class Settings {\r\n    private static readonly defaults: SettingsList = {\r\n        nodePhysics: true,\r\n        direction: false,\r\n        weights: false\r\n    };\r\n    private static current: any = {};\r\n\r\n    public static checkForLocalStorage() {\r\n        try {\r\n            const x = \"__storage_test__\";\r\n            localStorage.setItem(x, x);\r\n            localStorage.removeItem(x);\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static saveSettings() {\r\n        if (Settings.checkForLocalStorage()) {\r\n            localStorage.setItem(\"graphPlayground.settings\", JSON.stringify(Settings.current));\r\n        }\r\n    }\r\n\r\n    public static loadSettings() {\r\n        if (Settings.checkForLocalStorage()) {\r\n            const settings = localStorage.getItem(\"graphPlayground.settings\");\r\n            if (settings === null) {\r\n                Settings.current = settings;\r\n            } else {\r\n                Settings.current = JSON.parse(settings);\r\n            }\r\n        }\r\n        if (Settings.current === null) {\r\n            Settings.current = {};\r\n        }\r\n        Settings.setAll();\r\n    }\r\n\r\n    public static setAll() {\r\n        window.network.setOptions({ nodes: { physics: Settings.getOption(\"nodePhysics\") as boolean } });\r\n        window.network.setOptions({ edges: { arrows: { to: Settings.getOption(\"direction\") as boolean } } });\r\n        if (Settings.getOption(\"weights\")) {\r\n            window.network.setOptions({\r\n                manipulation: {\r\n                    editEdge: {\r\n                        editWithoutDrag: window.main.visWeightEdgeEdit\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            window.network.setOptions({ manipulation: { editEdge: window.main.visOptions.manipulation.editEdge } });\r\n        }\r\n    }\r\n\r\n    public static changeOption(option: string, value: string | boolean): void {\r\n        Settings.current[option] = value;\r\n        Settings.saveSettings();\r\n        Settings.setAll();\r\n    }\r\n\r\n    public static getOption(option: string): string | boolean {\r\n        if (option in Settings.current) {\r\n            return Settings.current[option];\r\n        }\r\n        return Settings.defaults[option];\r\n    }\r\n}\r\n","import gHelp from \"./util/graphHelpers\";\nimport help from \"./util/genericHelpers\";\nimport GraphState from \"./graphState\";\nimport { FlowResult, MSTResult, ShortestPathResult } from \"./GraphAlgorithms\";\n//@ts-ignore\nimport Worker from \"worker-loader!./workers/GraphAlgorithmWorker\";\nimport NodeImmut from \"./classes/GraphImmut/NodeImmut\";\nimport EdgeImmut from \"./classes/GraphImmut/EdgeImmut\";\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\n\ninterface AlgorithmI {\n    name: string;\n    directional?: boolean;\n    weighted?: boolean;\n    applyFunc: () => any;\n    display: boolean;\n}\n\nconst makeAndPrintShortestPath = (title: string, fn: string, weighted: boolean): void => {\n    const myName = \"Shortest Path\";\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const source = GraphState.nodeLabelToID(values[0]);\n            const sink = GraphState.nodeLabelToID(values[1]);\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                if (a === false) {\n                    if (title.includes(\"Dijkstra\")) {\n                        help.showSimpleModal(\n                            \"Dijkstra Error\",\n                            \"<p>The Dijkstra algorithm only works on graphs\" +\n                                \" with totally non-negative edge weights. Please fix the graph so that there are no\" +\n                                \" negative edge weights.</p><p>Alternatively, try the Bellman-Ford algorithm which solves\" +\n                                \" exactly this problem.</p>\"\n                        );\n                    } else if (title.includes(\"Bellman\")) {\n                        help.showSimpleModal(\n                            \"Bellman-Ford Error\",\n                            \"<p>The Bellman-Ford algorithm only works on graphs\" +\n                                \" with no negative edge-weight cycles. Please remove the negative cycle and try again.</p>\"\n                        );\n                    }\n                    return;\n                }\n\n                a = a as ShortestPathResult;\n\n                let p = `<h3>${title}</h3><hr>No path exists from ${help.htmlEncode(\n                    source.toString()\n                )} to ${help.htmlEncode(sink.toString())}`;\n\n                if (a.pathExists) {\n                    p = `${title} From ${GraphState.nodeIDToLabel(source)} to `;\n                    p += `${GraphState.nodeIDToLabel(sink)}: ${a.distance}`;\n                    if (weighted) {\n                        p += `\\nWith weighted cost: ${a.cost}`;\n                    }\n                    p += \"\\n\\nUsing Path: \";\n\n                    p = help.htmlEncode(p);\n                    let graph = GraphState.getGraphData(GraphState.graph, false, true);\n                    let G = new GraphImmut(graph.nodes, graph.edges, graph.directed, graph.weighted);\n                    a.path.forEach((v: number, i: number) => {\n                        p += `${help.htmlEncode(GraphState.nodeIDToLabel(v))} &rarr; `;\n                        if (i > 0) {\n                            G = G.editEdge(a.path[i - 1], v, null, null, \"#FF0000\") as GraphImmut;\n                        }\n                    });\n                    GraphState.graph = G;\n                    window.main.setData(GraphState.getGraphData(G), false, false, false);\n                    p = p.slice(0, -8);\n                    p = `<h3>${title}</h3><hr>${p}`;\n                }\n\n                help.printout(p);\n            });\n            w.send({\n                type: fn,\n                args: [source, sink],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        },\n        title,\n        \"Go\",\n        [\n            {\n                label: \"Start Node\",\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            },\n            {\n                label: \"End Node\",\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            }\n        ]\n    );\n};\n\nconst makeAndPrintComponents = async (stronglyConnected: boolean): Promise<void> => {\n    let a = null;\n    let cc = \"Connected Components\";\n    let componentKey = \"connectedComponents\";\n\n    if (stronglyConnected) {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        cc = \"Strongly \" + cc;\n        componentKey = \"stronglyConnectedComponents\";\n    } else {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n    }\n\n    if (UIInteractions.isRunning[cc]) {\n        UIInteractions.printAlreadyRunning(cc);\n        return Promise.reject(\"Already Running\");\n    }\n    UIInteractions.isRunning[cc] = true;\n\n    const iStartedProgress = UIInteractions.startLoadingAnimation();\n    const w = UIInteractions.getWorkerIfPossible(e => {\n        a = e.data;\n        w.cleanup();\n\n        GraphState.graphProperties[cc] = a.count;\n        GraphState.setUpToDate(true, [cc, componentKey]);\n        GraphState.state[componentKey] = a.components;\n\n        const components = help.flatten(a.components);\n        let p = `Number of ${cc}: ${a.count}`;\n        p += \"\\n\\n\";\n\n        components.forEach((v, i) => {\n            p += `Vertex ${GraphState.nodeIDToLabel(i)} is in connected component #${v}\\n`;\n        });\n\n        p += `\\n${JSON.stringify(help.rotate(a.components), null, 4)}\\n\\n`;\n        p = `<h3>${cc}</h3><hr>${help.htmlEncode(p)}`;\n\n        if (iStartedProgress) {\n            UIInteractions.stopLoadingAnimation();\n        }\n        UIInteractions.isRunning[cc] = false;\n\n        help.printout(p);\n    });\n    w.send({\n        type: componentKey,\n        args: [],\n        graph: window.main.graphState.getGraphData(),\n        convertToGraphImmut: true\n    });\n};\n\nclass WorkerProxy {\n    private readonly worker: Worker;\n    private readonly id: number;\n    private readonly listener: (e: { data: any }) => any;\n\n    constructor(id: number, w: Worker, listener: ((e: { data: any }) => any)) {\n        this.id = id;\n        this.worker = w;\n        this.listener = listener;\n        w.postMessage({ type: \"id\", id });\n        w.onmessage = (e: MessageEvent) => {\n            this.listener({ data: e.data.data });\n        };\n    }\n\n    public send(data: any) {\n        this.worker.postMessage(data);\n    }\n\n    public cleanup() {\n        this.worker.terminate();\n        GraphState.workerPool[this.id] = null;\n    }\n}\n\nexport default class UIInteractions {\n    public static isRunning: { [index: string]: boolean } = {};\n    static getAlgorithms(): AlgorithmI[] {\n        return [\n            {\n                name: \"Graph Coloring\",\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintGraphColoring,\n                display: true\n            },\n            {\n                name: \"Connected Components\",\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintComponents(false);\n                },\n                display: true\n            },\n            {\n                name: \"Strongly Connected Components\",\n                directional: true,\n                display: true,\n                applyFunc: () => {\n                    makeAndPrintComponents(true);\n                }\n            },\n            {\n                name: \"Breadth-First Shortest Path\",\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(\"Breadth-First Shortest Path\", \"breadthFirstSearch\", false);\n                },\n                display: true\n            },\n            {\n                name: \"Dijkstra Shortest Path\",\n                applyFunc: () => {\n                    makeAndPrintShortestPath(\"Dijkstra Shortest Path\", \"dijkstraSearch\", true);\n                },\n                display: true\n            },\n            {\n                name: \"Bellman-Ford Shortest Path\",\n                weighted: true,\n                directional: true,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(\"Bellman-Ford Shortest Path\", \"bellmanFord\", true);\n                },\n                display: true\n            },\n            {\n                name: \"Ford-Fulkerson\",\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintFFMCMF,\n                display: true\n            },\n            {\n                name: \"Kruskal Minimum Spanning Tree\",\n                weighted: true,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintKruskal,\n                display: true\n            },\n            {\n                name: \"Cyclic\",\n                applyFunc: UIInteractions.makeAndPrintIsCyclic,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Topological Sort\",\n                applyFunc: UIInteractions.makeAndPrintTopologicalSort,\n                directional: true,\n                display: true\n            },\n            {\n                name: \"Eulerian\",\n                directional: false,\n                display: false,\n                applyFunc: null\n            },\n            {\n                name: \"Eulerian\",\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintDirectionalEulerian\n            }\n        ] as AlgorithmI[];\n    }\n\n    static registerListeners(): void {\n        const makeSimpleClickListener = (selector: string, fn: () => any) => {\n            document.querySelector(selector)!.addEventListener(\"click\", e => {\n                e.preventDefault();\n                fn();\n            });\n        };\n\n        makeSimpleClickListener(\"#print-help-link\", UIInteractions.printHelp);\n        makeSimpleClickListener(\"#graph-options-link\", UIInteractions.printOptions);\n        makeSimpleClickListener(\"#load-petersen-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            window.main.setData(predefined.Petersen(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-konigsberg-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            window.main.setData(predefined.Konigsberg(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-complete-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Complete();\n        });\n        makeSimpleClickListener(\"#load-hypercube-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Hypercube();\n        });\n        makeSimpleClickListener(\"#load-custom-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Custom();\n        });\n        makeSimpleClickListener(\"#undo-link\", window.main.undo);\n        makeSimpleClickListener(\"#redo-link\", window.main.redo);\n        makeSimpleClickListener(\"#calculate-all-properties-link\", async () => {\n            return GraphState.makeAndPrintProperties(true);\n        });\n        makeSimpleClickListener(\"#new-graph-layout-link\", window.main.shuffleNetworkLayout);\n        makeSimpleClickListener(\"#import-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportFileModal();\n        });\n        makeSimpleClickListener(\"#import-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportTextModal();\n        });\n        makeSimpleClickListener(\"#export-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportFileModal();\n        });\n        makeSimpleClickListener(\"#export-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportTextModal();\n        });\n    }\n\n    static printHelp(): void {\n        help.showSimpleModal(\n            \"Help\",\n            \"<h4>For support see the \" +\n                \"<a href='https://github.com/MikeDombo/graphPlayground' target='_blank'>GitHub repository</a>\" +\n                \" for guides</h4> <h4>See <a href='https://github.com/MikeDombo/graphPlayground/issues' target='_blank'>\" +\n                \"GitHub issues</a> to submit bugs or feature requests.</h4>\"\n        );\n    }\n\n    static printOptions(): void {\n        help.showFormModal(\n            ($modal, vals) => {\n                $modal.modal(\"hide\");\n                if (window.settings.getOption(\"nodePhysics\") !== vals[0]) {\n                    window.settings.changeOption(\"nodePhysics\", vals[0]); // Physics\n                }\n                if (window.settings.getOption(\"direction\") !== vals[1]) {\n                    window.settings.changeOption(\"direction\", vals[1]);\n                    let G = GraphState.graph;\n                    G = vals[1] ? G.asDirected(true) : G.asUndirected();\n                    // Clear node coloring because graph color doesn't apply to directed graphs\n                    window.main.setData(GraphState.getGraphData(G, true));\n                }\n                if (window.settings.getOption(\"weights\") !== vals[2]) {\n                    window.settings.changeOption(\"weights\", vals[2]);\n                    let G = GraphState.graph;\n                    G = vals[2] ? G.asWeighted() : G.asUnweighted();\n                    window.main.setData(GraphState.getGraphData(G));\n                }\n            },\n            \"Options\",\n            \"Save\",\n            [\n                {\n                    label: \"Graph Physics\",\n                    initialValue: window.settings.getOption(\"nodePhysics\"),\n                    type: \"checkbox\"\n                },\n                {\n                    label: \"Directed Graph\",\n                    initialValue: window.settings.getOption(\"direction\"),\n                    type: \"checkbox\"\n                },\n                {\n                    label: \"Weighted Graph\",\n                    initialValue: window.settings.getOption(\"weights\"),\n                    type: \"checkbox\"\n                }\n            ],\n            null\n        );\n    }\n\n    static terminateAllWebWorkers(): void {\n        for (const v of GraphState.workerPool) {\n            if (v !== null && v instanceof window.Worker) {\n                v.terminate();\n            }\n        }\n        GraphState.workerPool = [];\n    }\n\n    static getWorkerIfPossible(onmessage: (d: { data: any }) => any): WorkerProxy {\n        let nextIndex = GraphState.workerPool.findIndex(v => {\n            return v === null || typeof v === \"undefined\";\n        });\n        if (nextIndex === -1) {\n            nextIndex = GraphState.workerPool.length;\n        }\n\n        const w = new Worker();\n        GraphState.workerPool[nextIndex] = w;\n        return new WorkerProxy(nextIndex, w, onmessage);\n    }\n\n    static startLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"flex\") {\n            prog.style.display = \"flex\";\n            return true;\n        }\n        return false;\n    }\n\n    static stopLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"none\") {\n            prog.style.display = \"none\";\n        }\n    }\n\n    static printAlreadyRunning(name?: string) {\n        let n = \"This task\";\n        if (name) {\n            n = name;\n        }\n        help.showSimpleModal(\n            \"Task Already Running\",\n            \"<p>\" + n + \" is already running, please wait for it to finish first.</p>\"\n        );\n    }\n\n    static makeAndPrintGraphColoring(): Promise<void> {\n        const myName = \"Graph Coloring\";\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(\"Already Running\");\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            // Use cached responses when able\n            let a = {\n                chromaticNumber: (await GraphState.getProperty(\"Chromatic Number\")) as number,\n                colors: GraphState.state.graphColoring as {}\n            };\n\n            const printGC = () => {\n                GraphState.graphProperties[\"Chromatic Number\"] = a.chromaticNumber;\n                GraphState.setUpToDate(true, [\"Chromatic Number\", \"graphColoring\"]);\n                (GraphState.state.graphColoring as {}) = a.colors;\n\n                const colors = help.flatten(a.colors);\n                let p = `Number of Vertices: ${colors.length}`;\n                p += `\\nChromatic Number: ${a.chromaticNumber}`;\n                p += \"\\n\\n\";\n\n                colors.forEach((v, i) => {\n                    p += `Vertex ${GraphState.nodeIDToLabel(i)} gets color ${v}\\n`;\n                });\n\n                p += `\\n${JSON.stringify(help.rotate(a.colors), null, 4)}\\n\\n`;\n\n                p = `<h3>Graph Coloring Using Welsh-Powell Algorithm</h3><hr>${help.htmlEncode(p)}`;\n                p +=\n                    \"<br/><button class='btn btn-primary' onclick='main.applyColors()'>Apply New Colors To Graph</button>\";\n\n                help.printout(p);\n                window.main.applyColors();\n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            if (!(a.chromaticNumber !== null && (await GraphState.getProperty(\"graphColoring\")) !== null)) {\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    printGC();\n                    w.cleanup();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    UIInteractions.isRunning[myName] = false;\n                    resolve(e.data);\n                });\n                w.send({\n                    type: \"colorNetwork\",\n                    args: [],\n                    graph: window.main.graphState.getGraphData(),\n                    convertToGraphImmut: true\n                });\n            } else {\n                printGC();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n            }\n        });\n    }\n\n    static makeAndPrintDirectionalEulerian(): Promise<void> {\n        const myName = \"Eulerian\";\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(\"Already Running\");\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (!window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n\n            const scc = await GraphState.getProperty(\"stronglyConnectedComponents\", true);\n\n            w.send({\n                type: \"directionalEulerian\",\n                args: [gHelp.findVertexDegreesDirectional(GraphState.graph.getFullAdjacency()), scc]\n            });\n        });\n    }\n\n    static makeAndPrintEulerian(ignoreDuplicate = false): Promise<void> {\n        const myName = \"Eulerian\";\n        if (UIInteractions.isRunning[myName]) {\n            if (ignoreDuplicate) {\n                return Promise.resolve();\n            }\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(\"Already Running\");\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve(UIInteractions.makeAndPrintDirectionalEulerian());\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const cc = await GraphState.getProperty(\"connectedComponents\", true);\n\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                w.cleanup();\n                resolve(e.data);\n            });\n            w.send({\n                type: \"hasEulerianCircuit\",\n                args: [GraphState.graph.getAllOutDegrees(), cc]\n            });\n        });\n    }\n\n    static makeAndPrintFFMCMF(): void {\n        if (!window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n        const myName = \"Ford-Fulkerson\";\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        help.showFormModal(\n            async ($modal, values) => {\n                $modal.modal(\"hide\");\n\n                const source = GraphState.nodeLabelToID(values[0]);\n                const sink = GraphState.nodeLabelToID(values[1]);\n\n                let a: boolean | FlowResult | null = null;\n\n                const cb = () => {\n                    let p = `<h3>Ford-Fulkerson</h3><hr>No path exists from `;\n                    p += `${help.htmlEncode(GraphState.nodeIDToLabel(source))} to ${help.htmlEncode(\n                        GraphState.nodeIDToLabel(sink)\n                    )}`;\n\n                    if (a === false) {\n                        help.printout(p);\n                        return;\n                    }\n                    a = a as { maxFlow: number; flowPath: any[] };\n\n                    p = `Ford-Fulkerson MaxFlow-MinCut Max Flow From ${GraphState.nodeIDToLabel(source)} `;\n                    p += `to ${GraphState.nodeIDToLabel(sink)}: ${a.maxFlow}`;\n                    p += \"\\n\\nUsing Capacities:\\n\\n\";\n                    p = help.htmlEncode(p);\n                    a.flowPath.forEach(v => {\n                        p += `${GraphState.nodeIDToLabel(v.from)}&rarr;${GraphState.nodeIDToLabel(v.to)} using ${\n                            v.flow\n                        } of ${v.capacity}\\n`;\n                    });\n                    p = p.trim();\n                    p = \"<h3>Ford-Fulkerson MaxFlow-MinCut</h3><hr>\" + p;\n\n                    help.printout(p);\n                };\n\n                const iStartedProgress = UIInteractions.startLoadingAnimation();\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    UIInteractions.isRunning[myName] = false;\n                    cb();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    w.cleanup();\n                });\n                w.send({\n                    type: \"fordFulkerson\",\n                    args: [source, sink],\n                    convertToGraphImmut: true,\n                    graph: window.main.graphState.getGraphData()\n                });\n            },\n            \"Ford-Fulkerson MaxFlow-MinCut\",\n            \"Go\",\n            [\n                {\n                    label: \"Source Node\",\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                },\n                {\n                    label: \"Sink Node\",\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                }\n            ]\n        );\n    }\n\n    static makeAndPrintKruskal(): void {\n        if (window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n\n        const myName = \"Kruskal\";\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: MSTResult = e.data;\n            w.cleanup();\n\n            let p = `Kruskal's Minimum Spanning Tree Total Weight: ${a.totalWeight}`;\n            p += \"\\n\\nUsing Edges:\\n\\n\";\n            p = help.htmlEncode(p);\n            a.mst.forEach(v => {\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getFrom())}&rarr;`;\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getTo())}\\n`;\n            });\n            p = p.trim();\n            p = `<h3>Kruskal Minimum Spanning Tree</h3><hr>${p}`;\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"kruskal\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static makeAndPrintIsCyclic(): Promise<void> {\n        if (!window.settings.getOption(\"direction\")) {\n            return Promise.resolve();\n        }\n\n        const myName = \"Cyclic\";\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(\"Already Running\");\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(resolve => {\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.cyclic = e.data;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve();\n            });\n            w.send({\n                type: \"isGraphCyclic\",\n                args: [],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        });\n    }\n\n    static makeAndPrintTopologicalSort(): void {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const myName = \"Topological Sort\";\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: boolean | NodeImmut[] = e.data;\n            w.cleanup();\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            if (a === true) {\n                GraphState.graphProperties.cyclic = true;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                help.printout(\n                    \"<h3>Topological Sorting Failed</h3><hr>Topological sorting failed because the graph contains a cycle\"\n                );\n\n                return;\n            }\n\n            let p = \"Topological Sorting:\\n\\n\";\n            p = help.htmlEncode(p);\n            (a as any[]).forEach(v => {\n                p += `${GraphState.nodeIDToLabel(v.id)}, `;\n            });\n            p = p.slice(0, -2);\n            p = `<h3>Topological Sorting</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"topologicalSort\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static printGraphAlgorithms(): void {\n        const $div = document.getElementById(\"algorithms-pane\")!;\n        $div.innerHTML = \"\";\n        const directional = window.settings.getOption(\"direction\");\n        const weighted = window.settings.getOption(\"weights\");\n\n        const addAlgoToPane = (alg: AlgorithmI) => {\n            const navlink = document.createElement(\"a\");\n            navlink.classList.add(\"nav-link\");\n            navlink.setAttribute(\"href\", \"#\");\n            navlink.innerText = alg.name;\n            navlink.addEventListener(\"click\", e => {\n                e.preventDefault();\n                alg.applyFunc();\n            });\n\n            $div.appendChild(navlink);\n        };\n\n        const a = UIInteractions.getAlgorithms();\n        a.forEach(alg => {\n            if (!alg.display) {\n                return;\n            }\n            if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            } else if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n        });\n    }\n}\n","\"use strict\";\r\n\r\nimport \"bootstrap\";\r\nimport { Network } from \"vis/index-network\";\r\nimport { default as main, MainI } from \"./main\";\r\nimport Settings from \"./settings\";\r\nimport UI from \"./UIInteractions\";\r\nimport { GraphPlain } from \"./util/predefinedGraphs\";\r\nimport * as Sentry from '@sentry/browser';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        main: MainI;\r\n        network: Network;\r\n        settings: typeof Settings;\r\n        ui: typeof UI;\r\n        Worker: Function;\r\n    }\r\n}\r\n\r\nwindow.main = main;\r\nwindow.network = new Network(main.container, {}, main.visOptions);\r\nwindow.settings = Settings;\r\nwindow.ui = UI;\r\n\r\n// Initialize Sentry.io error logging\r\nSentry.init({\r\n dsn: \"https://92aaeee7e2fb4ef4837a2261a029e8ed@sentry.home.mikedombrowski.com/2\"\r\n});\r\n\r\nmain.addNetworkListeners(window.network);\r\n\r\nSettings.loadSettings();\r\n\r\nlet loadDefault = true;\r\nif (Settings.checkForLocalStorage()) {\r\n    const s = localStorage.getItem(\"graphPlayground.lastState\");\r\n    if (s !== null) {\r\n        const jsonGraph: any = JSON.parse(s);\r\n        if (\"graph\" in jsonGraph && \"nodes\" in jsonGraph.graph) {\r\n            loadDefault = false;\r\n            main.applyState(false, jsonGraph as { graph: GraphPlain });\r\n        }\r\n    }\r\n}\r\nif (loadDefault) {\r\n    (async () => {\r\n        const predefined = (await import(\"./util/predefinedGraphs\")).default;\r\n        main.setData(predefined.Petersen(), false, true, true);\r\n    })();\r\n}\r\n\r\nwindow.ui.registerListeners();\r\n","\"use strict\";\n\nimport {List} from 'immutable';\nimport {default as NodeImmut, NodeImmutPlain} from './NodeImmut';\nimport {default as EdgeImmut, EdgeImmutPlain} from './EdgeImmut';\n\ninterface NodeMapping {\n    [key: number]: number\n}\n\nconst filterExtraAttr = (data: any, labels: any) => {\n    return Object.keys(data)\n        .filter((key) => !(labels).includes(key))\n        .reduce((obj: any, key) => {\n            obj[key] = data[key];\n            return obj;\n        }, {});\n};\n\nconst filterNodeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"label\", \"id\"]);\n};\n\nconst filterEdgeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"from\", \"to\", \"weight\"]);\n};\n\nconst genericEdgesToImmutEdges = (edges: any, nodeMap: NodeMapping = {}): boolean | List<EdgeImmut> => {\n    if (edges === null) {\n        return false;\n    }\n\n    let newEdges: List<EdgeImmut> = List();\n\n    if (typeof edges === 'object') {\n        edges.forEach((edge: any) => {\n            let weight = 0;\n            let from = 0;\n            let to = 0;\n            let extraAttrs = {};\n\n            if (\"weight\" in edge) {\n                weight = parseFloat(edge.weight);\n            }\n            if (\"from\" in edge) {\n                from = nodeMap[edge.from];\n            }\n            if (\"to\" in edge) {\n                to = nodeMap[edge.to];\n            }\n            if (\"attributes\" in edge) {\n                extraAttrs = filterEdgeExtraAttr(edge.attributes);\n            }\n            else {\n                extraAttrs = filterEdgeExtraAttr(edge);\n            }\n\n            newEdges = newEdges.push(new EdgeImmut(from, to, weight, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return newEdges;\n};\n\nconst genericNodesToImmutNodes = (nodes: any): boolean | { nodes: Readonly<List<NodeImmut>>; map: { [key: number]: number } } => {\n    if (nodes === null) {\n        return false;\n    }\n\n    let newNodes: List<NodeImmut> = List();\n    const nodeMap: NodeMapping = {};\n\n    if (typeof nodes === \"number\") {\n        // Create the nodes\n        for (let i = 0; i < Math.floor(nodes); i++) {\n            newNodes = newNodes.set(i, new NodeImmut(i));\n            nodeMap[i] = i;\n        }\n    }\n    else if (typeof nodes === 'object') {\n        let nodeNum = 0;\n        nodes.forEach((n: any) => {\n            const id = nodeNum++;\n            let label = null;\n            let extraAttrs = null;\n\n            if (\"label\" in n) {\n                label = n.label;\n            }\n            if (\"id\" in n) {\n                nodeMap[n.id] = id;\n                if (\"label\" in n && n.label === n.id.toString()) {\n                    label = id.toString();\n                }\n            }\n            else {\n                nodeMap[id] = id;\n            }\n            if (\"attributes\" in n) {\n                extraAttrs = filterNodeExtraAttr(n.attributes);\n            }\n            else {\n                extraAttrs = filterNodeExtraAttr(n);\n            }\n\n            newNodes = newNodes.set(id, new NodeImmut(id, label, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return {nodes: Object.freeze(newNodes), map: nodeMap};\n};\n\nexport default class GraphImmut {\n    private readonly directed: Readonly<boolean>;\n    private readonly weighted: Readonly<boolean>;\n    private readonly nodes: Readonly<List<NodeImmut>>;\n    private readonly numNodes: Readonly<number>;\n    private readonly edges: Readonly<List<EdgeImmut>>;\n    private readonly numEdges: Readonly<number>;\n\n    constructor(nodes: number | Readonly<List<NodeImmut>> | NodeImmutPlain[],\n                edges: null | Readonly<List<EdgeImmut>> | EdgeImmutPlain[] = null,\n                directed = false, weighted = false) {\n        this.directed = Object.freeze(directed);\n        this.weighted = Object.freeze(weighted);\n        let nodeMap = {};\n\n        // Make Nodes\n        if (typeof nodes === \"number\" || (typeof nodes === \"object\" && !(nodes instanceof List))) {\n            const n = genericNodesToImmutNodes(nodes);\n            if (typeof n !== \"object\") {\n                throw new Error(\"Unable to parse node input!\");\n            }\n            this.nodes = n.nodes;\n            nodeMap = n.map;\n        }\n        else if (nodes instanceof List) {\n            this.nodes = nodes as List<NodeImmut>;\n        }\n        else {\n            throw new Error(\"Illegal type of 'node' input to GraphImmut constructor\");\n        }\n        this.nodes = Object.freeze(this.nodes);\n        this.numNodes = Object.freeze(this.nodes.size);\n\n        // If we are given edges, add them to the graph\n        if (edges !== null && typeof edges === \"object\" && !(edges instanceof List)) {\n            const e = genericEdgesToImmutEdges(edges, nodeMap);\n            if (typeof e !== \"object\") {\n                throw new Error(\"Unable to parse Edge input\");\n            }\n            this.edges = e;\n        }\n        else if (edges instanceof List) {\n            this.edges = edges as List<EdgeImmut>;\n        }\n        else {\n            this.edges = List();\n        }\n        this.edges = Object.freeze(this.edges);\n        this.numEdges = Object.freeze(this.edges.size);\n\n        if (new.target === GraphImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getNode(id: number, rich = false): NodeImmut | NodeImmutPlain | boolean {\n        if (id >= this.numNodes) {\n            return false;\n        }\n        const node = this.nodes.get(id);\n        if(typeof node === \"undefined\"){\n            return false;\n        }\n        if (rich) {\n            return node;\n        }\n        return node.toPlain();\n    }\n\n    addNode(data: any = null): GraphImmut {\n        if (data === null) {\n            data = {};\n        }\n\n        const id = this.numNodes;\n        if (!(\"label\" in data)) {\n            data.label = id.toString();\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n\n        return new GraphImmut(this.nodes.set(id, new NodeImmut(id, data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    editNode(id: number, data: any): any {\n        if (!this.nodes.has(id)) {\n            return false;\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n        if (!(\"label\" in data)) {\n            data.label = (this.getNode(id, true) as NodeImmut).getLabel();\n        }\n        return new GraphImmut(this.nodes.set(id, (this.getNode(id, true) as NodeImmut).editNode(data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    deleteNode(id: number): GraphImmut | boolean {\n        // Make sure the ID exists\n        if (!(id >= 0 && id < this.numNodes)) {\n            return false;\n        }\n\n        const nodeMap: NodeMapping = {}; // Map for old IDs to new ones since we're deleting an entry\n\n        // Remove it from the node list\n        let nodeCount = 0;\n        const newNodes: List<NodeImmut> = this.nodes\n            .filter((n) => {\n                if (n.getID() === id) {\n                    nodeMap[n.getID()] = -1;\n                }\n                else {\n                    nodeMap[n.getID()] = nodeCount++;\n                }\n\n                return n.getID() !== id;\n            })\n            .map((node) => {\n                let label = node.getLabel();\n                if (node.getID().toString() === label) {\n                    label = nodeMap[node.getID()].toString();\n                }\n\n                return new NodeImmut(nodeMap[node.getID()], label, node.getAllAttributes());\n            }) as List<NodeImmut>;\n\n        // Remap edges\n        const newEdges: List<EdgeImmut> = this.edges\n            .filter((edge) => {\n                return !(edge.getFrom() === id || edge.getTo() === id);\n            })\n            .map((edge) => {\n                return new EdgeImmut(nodeMap[edge.getFrom()], nodeMap[edge.getTo()], edge.getWeight(), edge.getAllAttributes());\n            }) as List<EdgeImmut>;\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    addEdge(from: number, to: number, weight: any = 1): GraphImmut {\n        if (!this.weighted) {\n            weight = 1; // Ensure that edge weights are 1 if this is an unweighted graph\n        }\n\n        const newEdges = this.edges.push(new EdgeImmut(from, to, parseFloat(weight)));\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    deleteEdge(from: number, to: number, weight: any = null, deleteAll = true): GraphImmut {\n        if (weight !== null) {\n            weight = parseFloat(weight);\n        }\n\n        let foundOneEdge = false;\n        const newEdges: List<EdgeImmut> = this.edges.filter((edge) => {\n            // If we're not deleting everything and we have found one edge, then do not filter anymore\n            if (foundOneEdge && !deleteAll) {\n                return true;\n            }\n\n            // If we have an exact match\n            if (edge.getFrom() === from && edge.getTo() === to && (weight === null || edge.getWeight() === weight)) {\n                foundOneEdge = true;\n                return false; // Remove this edge\n            }\n\n            // If we are undirected, check for opposing matches\n            if (!this.directed) {\n                if (edge.getFrom() === to && edge.getTo() === from && (weight === null || edge.getWeight() === weight)) {\n                    foundOneEdge = true;\n                    return false; // Remove this edge\n                }\n            }\n\n            return true;\n        }) as List<EdgeImmut>;\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    editEdge(from: number, to: number, newWeight: any, oldWeight: any = null, color: string | null = null): GraphImmut | boolean {\n        let foundFirst = false;\n\n        if (oldWeight !== null) {\n            oldWeight = parseFloat(oldWeight);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge, index) => {\n            if (foundFirst) {\n                return;\n            }\n\n            if (((edge.getFrom() === from && edge.getTo() === to)\n                || (!this.isDirected() && edge.getFrom() === to && edge.getTo() === from))\n                && (oldWeight === null || edge.getWeight() === oldWeight)) {\n\n                if (color !== null) {\n                    newEdges = newEdges.set(index,\n                        edge.editEdge(newWeight === null ? null : parseFloat(newWeight),\n                            {color: color}));\n                }\n                else {\n                    newEdges = newEdges.set(index, edge.editEdge(newWeight === null ? null : parseFloat(newWeight)));\n                }\n                foundFirst = true;\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    getAllNodes(rich = false): NodeImmut[] | NodeImmutPlain[] {\n        if (rich) {\n            return this.nodes.toArray();\n        }\n        return this.nodes.map((node) => {\n            return node.toPlain();\n        }).toArray();\n    }\n\n    getAllNodesAsImmutableList(): Readonly<List<NodeImmut>> {\n        return this.nodes;\n    }\n\n    getAllEdgesAsImmutableList(): Readonly<List<EdgeImmut>> {\n        return this.edges;\n    }\n\n    getAllEdges(rich = false): EdgeImmut[] | EdgeImmutPlain[] {\n        if (rich) {\n            return this.edges.toArray();\n        }\n        return this.edges.map((edge) => {\n            return edge.toPlain();\n        }).toArray();\n    }\n\n    getNumberOfNodes(): number {\n        return this.numNodes;\n    }\n\n    getNumberOfEdges(): number {\n        return this.numEdges;\n    }\n\n    getAllOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.nodes.forEach((_, i) => {\n            degrees[i] = 0;\n        });\n        this.edges.forEach((edge) => {\n            if (degrees.includes(edge.getFrom())) {\n                degrees[edge.getFrom()]++;\n            }\n            else {\n                degrees[edge.getFrom()] = 1;\n            }\n        });\n\n        return degrees;\n    }\n\n    asWeighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, true);\n    }\n\n    asUnweighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, false);\n    }\n\n    asDirected(doubleEdges = false): GraphImmut {\n        if (!doubleEdges) {\n            return new GraphImmut(this.nodes, this.edges, true, this.weighted);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.getTo(), edge.getFrom(), edge.getWeight(), edge.getAllAttributes()));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, true, this.weighted);\n    }\n\n    asUndirected(): GraphImmut {\n        let newEdges: List<EdgeImmut> = List();\n        const addedEdges: { [key: string]: null } = {};\n\n        this.edges.forEach((edge) => {\n            let from = edge.getFrom();\n            let to = edge.getTo();\n            if (to < from) {\n                from = to;\n                to = edge.getFrom();\n            }\n            if (!(`${from}_${to}` in addedEdges)) {\n                addedEdges[`${from}_${to}`] = null;\n                newEdges = newEdges.push(new EdgeImmut(from, to, edge.getWeight(), edge.getAllAttributes()));\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, false, this.weighted);\n    }\n\n    asChangedDirectedWeighted(directed: boolean, weighted: boolean): GraphImmut {\n        let G: GraphImmut = this;\n        if (directed && !this.directed) {\n            G = G.asDirected();\n        }\n        else if (!directed && this.directed) {\n            G = G.asUndirected();\n        }\n\n        if (weighted && !this.weighted) {\n            G = G.asWeighted();\n        }\n        else if (!weighted && this.weighted) {\n            G = G.asUnweighted();\n        }\n\n        return G;\n    }\n\n    getNodeAdjacency(id: number): number[] {\n        const adj: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() === id) {\n                adj.push(edge.getTo());\n            }\n            else if (!this.directed && edge.getTo() === id) {\n                adj.push(edge.getFrom());\n            }\n        });\n\n        return adj;\n    }\n\n    getFullAdjacency(): number[][] {\n        const adj: number[][] = [];\n        this.nodes.forEach((n) => {\n            adj[n.getID()] = this.getNodeAdjacency(n.getID());\n        });\n\n        return adj;\n    }\n\n    areAdjacent(id1: number, id2: number): boolean {\n        return this.getNodeAdjacency(id1).includes(id2);\n    }\n\n    getEdgesBetween(id1: number, id2: number): EdgeImmut[] {\n        const edgeList: EdgeImmut[] = [];\n        if (id1 >= this.numNodes || id2 >= this.numNodes) {\n            return edgeList;\n        }\n\n        this.edges.forEach((edge) => {\n            if (!this.directed && edge.getFrom() === id2 && edge.getTo() === id1) {\n                edgeList.push(edge);\n            }\n\n            if (edge.getFrom() === id1 && edge.getTo() === id2) {\n                edgeList.push(edge);\n            }\n        });\n\n        return edgeList;\n    }\n\n    getMinWeightEdgeBetween(id1: number, id2: number): number {\n        let minWeight = Infinity;\n        this.getEdgesBetween(id1, id2).forEach((edge) => {\n            if (edge.getWeight() < minWeight) {\n                minWeight = edge.getWeight();\n            }\n        });\n\n        return minWeight;\n    }\n\n    // Take a multigraph and reduce all multiple edges to a single edge, weighted using the reducer\n    reduceMultiGraph(reducer: (a: number, b: number) => number = Math.min, initialValue: any = Infinity): GraphImmut {\n        const multiEdges: EdgeImmutPlain[] = [];\n        this.nodes.forEach((node) => {\n            // If we have duplicates\n            const adj = this.getNodeAdjacency(node.getID());\n            const uniques = new Set(adj);\n            if (uniques.size < adj.length) {\n                uniques.forEach((to) => {\n                    const newWeight = this.getEdgesBetween(node.getID(), to).reduce((acc, edge) => {\n                        return reducer(acc, edge.getWeight());\n                    }, initialValue);\n\n                    multiEdges.push({from: node.getID(), to, weight: parseFloat(newWeight)});\n                });\n            }\n        });\n\n        // Remove all multigraph edges and replace them with single new edges\n        let newEdges = this.edges.filter((edge) => {\n            let keep = true;\n            multiEdges.forEach((duplicateEdge) => {\n                if (edge.getFrom() === duplicateEdge.from && edge.getTo() === duplicateEdge.to) {\n                    keep = false;\n                }\n            });\n\n            return keep;\n        }) as List<EdgeImmut>;\n        multiEdges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.from, edge.to, edge.weight));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    isWeighted() {\n        return this.weighted;\n    }\n\n    isDirected() {\n        return this.directed;\n    }\n}\n","\"use strict\";\n\nexport interface NodeImmutPlain {\n    id: Readonly<number>;\n    label: string;\n    [key: string]: any;\n    [key: number]: any;\n}\n\nexport default class NodeImmut {\n    private readonly id: Readonly<number>;\n    private readonly label: Readonly<string>;\n    private readonly attributes: any;\n\n    constructor(id: any, label: null | string = null, extraAttrs: null | any = null) {\n        if (label === null) {\n            this.label = id.toString();\n        } else {\n            this.label = label;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.label = Object.freeze(this.label);\n        this.id = Object.freeze(id);\n\n        if (new.target === NodeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    toPlain(): NodeImmutPlain {\n        const toReturn: NodeImmutPlain = { id: this.id, label: this.label };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    getID(): Readonly<number> {\n        return this.id;\n    }\n\n    getLabel(): Readonly<string> {\n        return this.label;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    editNode(label: any = null, extraAttrs: any = null): NodeImmut {\n        if (label === null) {\n            label = this.getLabel();\n        }\n\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        if (extraAttrs !== null) {\n            Object.keys(extraAttrs).forEach(key => {\n                attributes[key] = extraAttrs[key];\n            });\n        }\n\n        return new NodeImmut(this.getID(), label, attributes);\n    }\n}\n","\"use strict\";\r\n\r\nimport * as $ from \"jquery\";\r\n\r\ndeclare interface ModalFormRow {\r\n    type: string;\r\n    label?: string;\r\n    initialValue?: any;\r\n    id?: string | number;\r\n    extraAttrs?: any;\r\n    validationFunc?: (value: any, container: JQuery) => boolean | string;\r\n    clickDismiss?: boolean;\r\n    onclick?: (...args: any[]) => void;\r\n    optionText?: any[];\r\n    optionValues?: any[];\r\n}\r\n\r\ndeclare interface BasicMapType {\r\n    class: string;\r\n    id: string;\r\n    value: any;\r\n\r\n    [key: number]: any;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nconst defaultCancelCb = ($modal: JQuery) => {\r\n    $modal.modal(\"hide\");\r\n};\r\n\r\nconst self = {\r\n    deepCopy(deep: boolean, clone: any, copy: any) {\r\n        const isPlainObject = (obj: any) => {\r\n            if (!obj || {}.toString.call(obj) !== \"[object Object]\") {\r\n                return false;\r\n            }\r\n\r\n            let proto = Object.getPrototypeOf(obj);\r\n\r\n            if (!proto) {\r\n                return true;\r\n            }\r\n\r\n            // Objects with prototype are plain iff they were constructed by a global Object function\r\n            let Ctor = {}.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\r\n            return (\r\n                typeof Ctor === \"function\" &&\r\n                {}.hasOwnProperty.toString.call(Ctor) === {}.hasOwnProperty.toString.call(Object)\r\n            );\r\n        };\r\n\r\n        let options,\r\n            name,\r\n            src,\r\n            copyIsArray,\r\n            target = arguments[0] || {},\r\n            i = 1,\r\n            length = arguments.length;\r\n\r\n        // Handle a deep copy situation\r\n        if (typeof target === \"boolean\") {\r\n            deep = target;\r\n\r\n            // Skip the boolean and the target\r\n            target = arguments[i] || {};\r\n            i++;\r\n        }\r\n\r\n        // Handle case when target is a string or something (possible in deep copy)\r\n        if (typeof target !== \"object\" && typeof target !== \"function\") {\r\n            target = {};\r\n        }\r\n\r\n        if (i === length) {\r\n            target = this;\r\n            i--;\r\n        }\r\n\r\n        for (; i < length; i++) {\r\n            // Only deal with non-null/undefined values\r\n            if ((options = arguments[i]) != null) {\r\n                // Extend the base object\r\n                for (name in options) {\r\n                    src = target[name];\r\n                    copy = options[name];\r\n\r\n                    // Prevent never-ending loop\r\n                    if (target === copy) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Recurse if we're merging plain objects or arrays\r\n                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\r\n                        if (copyIsArray) {\r\n                            copyIsArray = false;\r\n                            clone = src && Array.isArray(src) ? src : [];\r\n                        } else {\r\n                            clone = src && isPlainObject(src) ? src : {};\r\n                        }\r\n\r\n                        // Never move original objects, clone them\r\n                        target[name] = self.deepCopy(deep, clone, copy);\r\n\r\n                        // Don't bring in undefined values\r\n                    } else if (copy !== undefined) {\r\n                        target[name] = copy;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Return the modified object\r\n        return target;\r\n    },\r\n\r\n    deepFreeze: <T extends Object>(o: T): Readonly<T> => {\r\n        Object.freeze(o);\r\n\r\n        Object.getOwnPropertyNames(o).forEach((prop: string | number) => {\r\n            if (\r\n                o.hasOwnProperty(prop) &&\r\n                (o as any)[prop] !== null &&\r\n                (typeof (o as any)[prop] === \"object\" || typeof (o as any)[prop] === \"function\") &&\r\n                !Object.isFrozen((o as any)[prop])\r\n            ) {\r\n                self.deepFreeze((o as any)[prop]);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    },\r\n\r\n    sort: <T>(arr: T[], compareFunction: (a: any, b: any) => number): T[] => {\r\n        return [...arr].sort(compareFunction);\r\n    },\r\n\r\n    datasetToArray: (ds: any, key: string): Readonly<any[]> => {\r\n        const r: any[] = [];\r\n        ds.forEach((v: { [index: string]: any }) => {\r\n            r.push(v[key]);\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    keepOnlyKeys: <T>(arr: T[], keys: string[]): Readonly<T[]> => {\r\n        arr = arr.slice();\r\n        arr.forEach((v: any) => {\r\n            const k = Object.keys(v);\r\n            k.forEach(key => {\r\n                if (keys.indexOf(key) < 0) {\r\n                    delete v[key];\r\n                }\r\n            });\r\n        });\r\n        return self.deepFreeze(arr);\r\n    },\r\n\r\n    getFileExtension: (filename: string): string => {\r\n        return filename.split(\".\").splice(-1)[0];\r\n    },\r\n\r\n    htmlEncode: (string: string): string => {\r\n        const t = document.createElement(\"textarea\");\r\n        t.textContent = string;\r\n        string = t.innerHTML.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\");\r\n        return string;\r\n    },\r\n\r\n    printout: (text: string, escape?: string): void => {\r\n        if (escape) {\r\n            text = self.htmlEncode(escape);\r\n        }\r\n        document.getElementById(\"printout\")!.innerHTML = text;\r\n    },\r\n\r\n    flatten: <T>(map: { [key: string]: T }): Readonly<T[]> => {\r\n        const r: T[] = [];\r\n        Object.keys(map).forEach(i => {\r\n            r.push(map[i]);\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    rotate: (map: { [key: string]: any }): Readonly<any> => {\r\n        const r: any = {};\r\n        Object.keys(map).forEach(i => {\r\n            if (map[i] in r) {\r\n                r[map[i]].push(i);\r\n            } else {\r\n                r[map[i]] = [i];\r\n            }\r\n        });\r\n        return self.deepFreeze(r);\r\n    },\r\n\r\n    max: (iterable: any[]): number => {\r\n        return iterable.reduce((a, b) => {\r\n            return Math.max(a, b);\r\n        });\r\n    },\r\n\r\n    toTitleCase: (str: string): string => {\r\n        return str.replace(/(?:^|\\s)\\w/g, match => {\r\n            return match.toUpperCase();\r\n        });\r\n    },\r\n\r\n    showSimpleModal: (title: string, body: string): void => {\r\n        self.showFormModal(null, title, null, [{ type: \"html\", initialValue: body }], null, false);\r\n    },\r\n\r\n    makeFormModal: (title: string, successText: string | null, form: ModalFormRow[], footer = true): JQuery => {\r\n        const f = $(\"<div>\", { class: \"modal-body form-group\" });\r\n        form.forEach((formRow, i) => {\r\n            if (!(\"initialValue\" in formRow)) {\r\n                formRow.initialValue = \"\";\r\n            }\r\n\r\n            let id = \"form-modal-\" + i;\r\n            if (\"id\" in formRow && formRow.id !== \"\" && formRow.id !== null && typeof formRow.id === \"string\") {\r\n                id = formRow.id;\r\n            }\r\n\r\n            const basicMap: BasicMapType = { class: \"form-control\", id, value: formRow.initialValue };\r\n\r\n            if (\"extraAttrs\" in formRow) {\r\n                Object.keys(formRow.extraAttrs).forEach(attrname => {\r\n                    if (typeof formRow.extraAttrs[attrname] !== \"function\") {\r\n                        basicMap[attrname] = formRow.extraAttrs[attrname];\r\n                    }\r\n                });\r\n            }\r\n\r\n            let validFunc: typeof formRow[\"validationFunc\"] = () => true;\r\n            if (\"validationFunc\" in formRow && typeof formRow.validationFunc === \"function\") {\r\n                validFunc = formRow.validationFunc;\r\n            }\r\n\r\n            const generalValidator = (event: any, valueMutator: null | ((v: any) => any) = null) => {\r\n                const $v = $(event.target);\r\n                let val = $v.val();\r\n                if (valueMutator !== null && typeof valueMutator === \"function\") {\r\n                    val = valueMutator(val);\r\n                }\r\n                const valid = validFunc!(val, $v);\r\n\r\n                if (valid === true) {\r\n                    $v.removeClass(\"is-invalid\")\r\n                        .next(\"#feedback-\" + i)\r\n                        .remove();\r\n                } else {\r\n                    $v.addClass(\"is-invalid\");\r\n                    if ($v.next(\"#feedback-\" + i).length === 0) {\r\n                        $v.after($(\"<div>\", { class: \"invalid-feedback\", id: \"feedback-\" + i }).text(valid));\r\n                    }\r\n                }\r\n            };\r\n\r\n            if (formRow.type === \"html\") {\r\n                f.append($(formRow.initialValue));\r\n            } else if (formRow.type === \"checkbox\") {\r\n                basicMap.type = \"checkbox\";\r\n                basicMap.class = \"form-check-input\";\r\n                delete basicMap.value;\r\n                if (formRow.initialValue) {\r\n                    basicMap.checked = \"\";\r\n                }\r\n\r\n                f.append(\r\n                    $(\"<div>\", { class: \"form-check\" }).append(\r\n                        $(\"<label>\", { for: id, class: \"form-check-label\" })\r\n                            .text(formRow.label!)\r\n                            .prepend($(\"<input>\", basicMap))\r\n                    )\r\n                );\r\n            } else {\r\n                f.append($(\"<label>\", { for: id, class: \"col-form-label\" }).text(formRow.label!));\r\n\r\n                if (formRow.type === \"button\") {\r\n                    if (\"clickDismiss\" in formRow && formRow.clickDismiss === true) {\r\n                        basicMap.class += \" btn-dismiss\";\r\n                    }\r\n                    const $b = $(\"<button>\", basicMap).text(formRow.initialValue);\r\n                    if (\"onclick\" in formRow && typeof formRow.onclick === \"function\") {\r\n                        $b.on(\"click\", formRow.onclick);\r\n                    }\r\n                    f.append($b);\r\n                } else if (formRow.type === \"numeric\") {\r\n                    basicMap.type = \"number\";\r\n                    f.append(\r\n                        $(\"<input>\", basicMap).on(\"blur validate\", e => {\r\n                            generalValidator(e, parseFloat);\r\n                        })\r\n                    );\r\n                } else if (formRow.type === \"text\") {\r\n                    basicMap.type = \"text\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                } else if (formRow.type === \"file\") {\r\n                    basicMap.type = \"file\";\r\n                    basicMap.class = \"form-control-file form-control\";\r\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\r\n                } else if (formRow.type === \"textarea\") {\r\n                    const $b = $(\"<textarea>\", basicMap).on(\"blur validate\", generalValidator);\r\n                    if (\"onclick\" in formRow) {\r\n                        $b.on(\"click\", formRow.onclick!);\r\n                    }\r\n                    f.append($b);\r\n                } else if (formRow.type === \"select\") {\r\n                    const $options = $(\"<select>\", basicMap);\r\n                    formRow.optionText!.forEach((oText, oIndex) => {\r\n                        if (oIndex < formRow.optionValues!.length) {\r\n                            $options.append($(\"<option>\", { value: formRow.optionValues![oIndex] }).text(oText));\r\n                        } else {\r\n                            $options.append($(\"<option>\").text(oText));\r\n                        }\r\n                    });\r\n                    f.append($options.on(\"blur validate\", generalValidator));\r\n                }\r\n            }\r\n        });\r\n\r\n        let $footer: JQuery<HTMLElement> | null = $(\"<div>\", { class: \"modal-footer\" })\r\n            .append($(\"<button>\", { class: \"btn btn-success\", type: \"button\" }).text(successText!))\r\n            .append($(\"<button>\", { class: \"btn btn-danger btn-cancel\", type: \"button\" }).text(\"Cancel\"));\r\n\r\n        if (footer === false) {\r\n            $footer = null;\r\n        }\r\n\r\n        const $modal = $(\"<div>\", { class: \"modal fade\", tabindex: \"-1\", role: \"dialog\", \"aria-hidden\": \"true\" });\r\n        $modal.append(\r\n            $(\"<div>\", { class: \"modal-dialog\" }).append(\r\n                $(\"<div>\", { class: \"modal-content\" })\r\n                    .append(\r\n                        $(\"<div>\", { class: \"modal-header\" })\r\n                            .append($(\"<h5>\", { class: \"modal-title\" }).text(title))\r\n                            .append(\r\n                                $(\"<button>\", {\r\n                                    class: \"close\",\r\n                                    \"data-dismiss\": \"modal\",\r\n                                    \"aria-label\": \"close\"\r\n                                }).append($(\"<span>\", { \"aria-hidden\": \"true\" }).html(\"&times;\"))\r\n                            )\r\n                    )\r\n                    .append(f)\r\n                    .append($footer!)\r\n            )\r\n        );\r\n        $modal\r\n            .find(\"input, textarea\")\r\n            .off(\"keyup\")\r\n            .on(\"keyup\", e => {\r\n                if (e.key === \"Enter\") {\r\n                    $(\".btn-success\")\r\n                        .last()\r\n                        .trigger(\"click\");\r\n                }\r\n            });\r\n        $modal.on(\"shown.bs.modal\", () => {\r\n            $modal\r\n                .find(\"input[type='text'], input[type='number'], textarea\")\r\n                .first()\r\n                .trigger(\"focus\");\r\n        });\r\n\r\n        return $modal;\r\n    },\r\n\r\n    showFormModal: (\r\n        successCb: null | (($modal: JQuery, vals: any[]) => void),\r\n        title: string,\r\n        successText: string | null,\r\n        form: ModalFormRow[],\r\n        cancelCb: null | (($modal: JQuery) => void) = defaultCancelCb,\r\n        footer = true\r\n    ) => {\r\n        const $modal = self.makeFormModal(title, successText, form, footer);\r\n\r\n        $modal\r\n            .on(\"click\", \".btn-cancel\", () => {\r\n                if (typeof cancelCb === \"function\") {\r\n                    cancelCb($modal);\r\n                } else {\r\n                    $modal.modal(\"hide\");\r\n                }\r\n            })\r\n            .on(\"click\", \".btn-dismiss\", () => {\r\n                $modal.modal(\"hide\");\r\n            })\r\n            .on(\"click\", \".btn-success\", () => {\r\n                const vals: any[] = [];\r\n                let hasErrors = false;\r\n\r\n                $modal.find(\"input, textarea, select\").each((i, v) => {\r\n                    const $v = $(v);\r\n\r\n                    if (($v as any).tagName === \"SELECT\") {\r\n                        vals.push($v.find(\":selected\").val());\r\n                    } else if ($v.attr(\"type\") === \"checkbox\") {\r\n                        vals.push($v.prop(\"checked\"));\r\n                    } else if ($v.attr(\"type\") === \"file\") {\r\n                        vals.push(($v.get(0) as any).files);\r\n                    } else if ($v.attr(\"type\") === \"number\") {\r\n                        vals.push(parseFloat($v.val() as string));\r\n                    } else {\r\n                        vals.push($v.val());\r\n                    }\r\n\r\n                    if ($v.trigger(\"validate\").hasClass(\"is-invalid\")) {\r\n                        hasErrors = true;\r\n                    }\r\n                });\r\n\r\n                if (!hasErrors && typeof successCb === \"function\") {\r\n                    successCb($modal, vals);\r\n                }\r\n            })\r\n            .on(\"hidden.bs.modal\", () => {\r\n                $modal.remove();\r\n            })\r\n            .modal(\"show\");\r\n    }\r\n};\r\n\r\nexport default self;\r\n","\"use strict\";\r\n\r\nimport {EdgeImmutPlain} from \"../classes/GraphImmut/EdgeImmut\";\r\nimport {NodeImmutPlain} from \"../classes/GraphImmut/NodeImmut\";\r\n\r\ninterface Degree {\r\n    in: number;\r\n    out: number;\r\n}\r\n\r\nexport default {\r\n    findVertexDegreesDirectional: (adjacencyMatrix: Array<Array<number>>): Degree[] => {\r\n        // Adjacency stores IDs of edges TO\r\n        const degrees: Degree[] = [];\r\n        adjacencyMatrix.forEach((v, i) => {\r\n            if (i in degrees) {\r\n                degrees[i].out += v.length;\r\n            }\r\n            else {\r\n                degrees[i] = {out: v.length, in: 0};\r\n            }\r\n            v.forEach((outV) => {\r\n                if (outV in degrees) {\r\n                    degrees[outV].in += 1;\r\n                }\r\n                else {\r\n                    degrees[outV] = {in: 1, out: 0};\r\n                }\r\n            });\r\n        });\r\n\r\n        return degrees;\r\n    },\r\n\r\n    interpolateNodesFromEdges: (edges: EdgeImmutPlain[]): NodeImmutPlain[] => {\r\n        const nodes: NodeImmutPlain[] = [];\r\n        edges.forEach((v) => {\r\n            nodes[v.from] = {id: v.from, label: v.from.toString()};\r\n            nodes[v.to] = {id: v.to, label: v.to.toString()};\r\n        });\r\n\r\n        return nodes;\r\n    },\r\n};\r\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"01a937389b3f180db18d.worker.js\");\n};"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/js/dataImportExport.ts"],"names":["self","importByString","string","format","toLowerCase","n","JSON","parse","window","network","setData","main","_genericHelpers__WEBPACK_IMPORTED_MODULE_1__","showSimpleModal","err","graph_1","error_1","split","forEach","l","vals","_GraphImmut_GraphImmut__WEBPACK_IMPORTED_MODULE_2__","parseInt","addEdge","d","_graphState__WEBPACK_IMPORTED_MODULE_3__","getGraphData","nodes","v","label","id","toString","makeImportTextModal","showFormModal","$modal","values","modal","type","extraAttrs","style","optionValues","optionText","makeImportFileModal","files","length","file_1","reader","FileReader","onload","event","target","result","getFileExtension","name","readAsText","validationFunc","val","$files","get","makeExportFileModal","initialValue","onclick","exportToFile","class","clickDismiss","makeExportTextModal","exportToText","jquery__WEBPACK_IMPORTED_MODULE_0__","trigger","document","execCommand","downloadFile","getDataAsJSON","getDataAsDIMACS","text","stringify","graph","keepOnlyKeys","edges","g","adj","getFullAdjacency","filter","i","indexOf","push","edgeCount","edgeText","from","to","trim","filename","blob","Blob","navigator","msSaveOrOpenBlob","msSaveBlob","a","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","revokeObjectURL","__webpack_exports__"],"mappings":"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","file":"1-f984315220208949733e.min.js","sourcesContent":["\"use strict\";\r\n\r\nimport * as $ from 'jquery';\r\nimport help from './genericHelpers';\r\nimport GraphImmut from './GraphImmut/GraphImmut';\r\nimport {EdgeImmutPlain} from \"./GraphImmut/EdgeImmut\";\r\nimport {NodeImmutPlain} from \"./GraphImmut/NodeImmut\";\r\nimport GraphState from \"./graphState\";\r\n\r\nconst exportedTextSelector = \"#exportedText\";\r\n\r\nconst self = {\r\n    importByString: (string: string, format: string): void => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            try {\r\n                const n = JSON.parse(string);\r\n                if (\"nodes\" in n && \"edges\" in n) {\r\n                    window.network.setData({}); // Clear out the existing network in order to import the proper\r\n                    // locations\r\n                    window.main.setData(n, false, true, false);\r\n                }\r\n                else {\r\n                    help.showSimpleModal(\"Data Import Error\", \"<p>The provided input does not conform the the\" +\r\n                        \" import specifications.</p>\");\r\n                }\r\n            }\r\n            catch (err) {\r\n                help.showSimpleModal(\"JSON Parse Error\", `<p>There was an error parsing your input as JSON.</p><pre>${err}</pre>`);\r\n            }\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            const lines = string.split(/\\r?\\n/);\r\n            let graph: GraphImmut = null;\r\n            let error = false;\r\n            lines.forEach((l) => {\r\n                const vals = l.split(/\\s+/);\r\n                if (vals[0].toLowerCase() === \"p\") {\r\n                    if (vals[1].toLowerCase() !== \"edge\") {\r\n                        help.showSimpleModal(\"DIMACS Parse Error\", \"<p>Sorry, but I only know how to parse\" +\r\n                            \" &quot;edge&quot; formatted DIMACS files.</p>\");\r\n                        error = true;\r\n                        return;\r\n                    }\r\n                    graph = new GraphImmut(parseInt(vals[2]));\r\n                }\r\n                else if (vals[0].toLowerCase() === \"e\" && graph !== null) {\r\n                    graph = graph.addEdge(parseInt(vals[1]) - 1, parseInt(vals[2]) - 1);\r\n                }\r\n            });\r\n\r\n            if (graph === null && !error) {\r\n                help.showSimpleModal(\"DIMACS Parse Error\", \"<p>No program line found!</p>\");\r\n                error = true;\r\n            }\r\n\r\n            if (!error) {\r\n                const d: GraphPlain = GraphState.getGraphData(graph);\r\n                d.nodes.forEach((v) => {\r\n                    v.label = v.id.toString();\r\n                });\r\n                window.main.setData(d, false, true, true);\r\n            }\r\n        }\r\n        else {\r\n            help.showSimpleModal(\"Unrecognized Input Format\", \"<p>The format of your input is incorrect.</p>\");\r\n        }\r\n    },\r\n\r\n    makeImportTextModal: (): void => {\r\n        help.showFormModal(($modal, values) => {\r\n                $modal.modal(\"hide\");\r\n                self.importByString(values[0], values[1]);\r\n            }, \"Import Graph From Text\", \"Import\",\r\n            [{type: \"textarea\", label: \"Input Text\", extraAttrs: {style: \"height: 20vh; min-height:400px;\"}},\r\n                {type: \"select\", label: \"Format\", optionValues: [\"json\", \"dimacs\"], optionText: [\"JSON\", \"DIMACS\"]}\r\n            ]);\r\n    },\r\n\r\n    makeImportFileModal: (): void => {\r\n        help.showFormModal(($modal, values) => {\r\n                $modal.modal(\"hide\");\r\n\r\n                const files = values[0];\r\n                if (files.length === 1) {\r\n                    const file = files[0];\r\n                    const reader = new FileReader();\r\n                    reader.onload = function (event: any) {\r\n                        self.importByString(event.target.result, help.getFileExtension(file.name));\r\n                    };\r\n\r\n                    reader.readAsText(file);\r\n                }\r\n            }, \"Import Graph From File\", \"Import\",\r\n            [{\r\n                type: \"file\", label: \"Upload File\", validationFunc: (val, $files) => {\r\n                    const files = ($files.get(0) as any).files;\r\n                    if (files.length >= 1) {\r\n                        return true;\r\n                    }\r\n                    return \"You must choose a file first\";\r\n                }\r\n            }]);\r\n    },\r\n\r\n    makeExportFileModal: (): void => {\r\n        help.showFormModal(null, \"Export Graph To File\", null,\r\n            [{\r\n                type: \"button\",\r\n                initialValue: \"Export to JSON\",\r\n                onclick: () => {\r\n                    self.exportToFile(\"json\");\r\n                },\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary m-1\"\r\n\r\n                },\r\n                clickDismiss: true\r\n            },\r\n                {\r\n                    type: \"button\",\r\n                    initialValue: \"Export to DIMACS\",\r\n                    onclick: () => {\r\n                        self.exportToFile(\"dimacs\");\r\n                    },\r\n                    extraAttrs: {\r\n                        class: \"btn btn-sm btn-primary\"\r\n                    },\r\n                    clickDismiss: true\r\n                }\r\n            ], null, false);\r\n    },\r\n\r\n    makeExportTextModal: (): void => {\r\n        help.showFormModal(null, \"Export Graph To Text\", null,\r\n            [{\r\n                type: \"button\",\r\n                initialValue: \"Export to JSON\",\r\n                onclick: () => {\r\n                    self.exportToText(\"json\");\r\n                },\r\n                extraAttrs: {\r\n                    class: \"btn btn-sm btn-primary m-1\",\r\n                },\r\n                clickDismiss: false\r\n            },\r\n                {\r\n                    type: \"button\",\r\n                    initialValue: \"Export to DIMACS\",\r\n                    onclick: () => {\r\n                        self.exportToText(\"dimacs\");\r\n                    },\r\n                    extraAttrs: {\r\n                        class: \"btn btn-sm btn-primary\",\r\n                    },\r\n                    clickDismiss: false\r\n                },\r\n                {\r\n                    type: \"textarea\", label: \"\", initialValue: \"\", extraAttrs: {\r\n                        style: \"height: 20vh;\" +\r\n                        \" min-height:400px; white-space:nowrap; margin-top: 1rem;\"\r\n                    },\r\n                    onclick: () => {\r\n                        $(exportedTextSelector).trigger(\"select\");\r\n                        document.execCommand(\"copy\");\r\n                    }, id: \"exportedText\"\r\n                }\r\n            ], ($modal) => {\r\n                $modal.modal(\"hide\");\r\n            }, false);\r\n    },\r\n\r\n    exportToFile: (format: string): void => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            self.downloadFile(\"graph.json\", self.getDataAsJSON());\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            self.downloadFile(\"graph.dimacs\", self.getDataAsDIMACS());\r\n        }\r\n    },\r\n\r\n    exportToText: (format: string): void => {\r\n        if (format.toLowerCase() === \"json\") {\r\n            $(exportedTextSelector).text(JSON.stringify(JSON.parse(self.getDataAsJSON()), null, 2));\r\n        }\r\n        else if (format.toLowerCase() === \"dimacs\") {\r\n            $(exportedTextSelector).text(self.getDataAsDIMACS());\r\n        }\r\n    },\r\n\r\n    getDataAsJSON: (): string => {\r\n        const d = GraphState.getGraphData(GraphState.graph);\r\n        const nodeKeys = [\"id\", \"label\", \"color\", \"x\", \"y\"];\r\n        const edgeKeys = [\"from\", \"to\", \"weight\"];\r\n        d.nodes = help.keepOnlyKeys(d.nodes, nodeKeys) as NodeImmutPlain[];\r\n        d.edges = help.keepOnlyKeys(d.edges, edgeKeys) as EdgeImmutPlain[];\r\n\r\n        return JSON.stringify(d);\r\n    },\r\n\r\n    getDataAsDIMACS: (): string => {\r\n        // If I add direction, DIMACS cannot be used, it only works for undirected graphs\r\n        const g = GraphState.getGraphData();\r\n        let text = \"c This Graph was generated and exported from Michael Dombrowski's Graph Playground \" +\r\n            \"-- https://md100play.github.io/graphPlayground -- https://mikedombrowski.com\";\r\n\r\n        let adj = GraphState.graph.getFullAdjacency();\r\n        adj = adj.filter((v: number[]) => {\r\n            return v.length !== 0;\r\n        });\r\n\r\n        const nodes: number[] = [];\r\n        adj.forEach((v: number[], i: number) => {\r\n            if (nodes.indexOf(i + 1) === -1) {\r\n                nodes.push(i + 1);\r\n            }\r\n            v.forEach((n: number) => {\r\n                if (nodes.indexOf(n + 1) === -1) {\r\n                    nodes.push(n + 1);\r\n                }\r\n            });\r\n        });\r\n\r\n        let edgeCount = 0;\r\n        let edgeText = \"\";\r\n        g.edges.forEach((v: EdgeImmutPlain) => {\r\n            edgeText += `e ${v.from + 1} ${v.to + 1}`;\r\n            edgeCount++;\r\n        });\r\n        edgeText = edgeText.trim();\r\n\r\n        text += `p edge ${nodes.length} ${edgeCount}`;\r\n        return text + edgeText;\r\n    },\r\n\r\n    downloadFile: (filename: string, text: string): void => {\r\n        const blob = new Blob([text], {type: 'text/plain'});\r\n        if (window.navigator.msSaveOrOpenBlob) {\r\n            window.navigator.msSaveBlob(blob, filename);\r\n        }\r\n        else {\r\n            const a = window.document.createElement('a');\r\n            a.href = window.URL.createObjectURL(blob);\r\n            a.download = filename;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(blob as any);\r\n        }\r\n    },\r\n};\r\n\r\nexport default self;\r\n"],"sourceRoot":""}
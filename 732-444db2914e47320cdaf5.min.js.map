{"version":3,"file":"732-444db2914e47320cdaf5.min.js","mappings":"+GAAA,IAAIA,EAAgB,YAEhBC,EAAe,CAAC,cAGpB,MAAMC,EAAgCC,KAGtCD,EAAIE,iBAAiB,WAAYC,IAC7BA,EAAMC,UACFC,OACKC,KAAKR,GACLS,MAAKC,GAASA,EAAMC,OAAOV,KAC3BQ,MAAK,IAAMP,EAAIU,gBACvB,IAGLV,EAAIE,iBAAiB,YAAY,KAC7BF,EAAIW,QAAQC,OAAO,IAKvBZ,EAAIE,iBAAiB,SAAUC,IAC3BA,EAAMU,YACFC,MAAMX,EAAMY,SACPR,MAAKS,GACEb,EAAMY,QAAQE,IAAIC,SAAS,uBACpBF,EAGJX,OAAOC,KAAKR,GAAeS,MAAKC,IACnC,MAAMW,EAAUH,EAASI,QAKzB,OAHKD,EAAQF,IAAIC,SAAS,UAAqC,QAAzBf,EAAMY,QAAQM,QAChDb,EAAMc,IAAInB,EAAMY,QAASI,GAEtBH,CAAQ,MAGtBO,OAAM,IACIlB,OAAOmB,MAAMrB,EAAMY,WAErC,G","sources":["webpack://graphPlayground/./src/js/workers/pwaServiceWorker.ts"],"sourcesContent":["let dataCacheName = \"graphs-v1\";\n\nlet filesToCache = [\"index.html\"];\n\n// @ts-ignore\nconst ctx: ServiceWorkerGlobalScope = self as any;\n\n// @ts-ignore\nctx.addEventListener(\"install\", (event: ExtendableEvent) => {\n    event.waitUntil(\n        caches\n            .open(dataCacheName)\n            .then(cache => cache.addAll(filesToCache))\n            .then(() => ctx.skipWaiting())\n    );\n});\n\nctx.addEventListener(\"activate\", () => {\n    ctx.clients.claim();\n});\n\n// Get files from network first (cache if not cached already), then the cache\n// @ts-ignore\nctx.addEventListener(\"fetch\", (event: FetchEvent) => {\n    event.respondWith(\n        fetch(event.request)\n            .then(response => {\n                if (event.request.url.includes(\"chrome-extension://\")) {\n                    return response;\n                }\n\n                return caches.open(dataCacheName).then(cache => {\n                    const newResp = response.clone();\n                    // Check if the response is for a real URL, not base64 encoded data and it is a GET request\n                    if (!newResp.url.includes(\"data:\") && event.request.method === \"GET\") {\n                        cache.put(event.request, newResp);\n                    }\n                    return response;\n                });\n            })\n            .catch(() => {\n                return caches.match(event.request) as Promise<Response>;\n            })\n    );\n});\n"],"names":["dataCacheName","filesToCache","ctx","self","addEventListener","event","waitUntil","caches","open","then","cache","addAll","skipWaiting","clients","claim","respondWith","fetch","request","response","url","includes","newResp","clone","method","put","catch","match"],"sourceRoot":""}
{"version":3,"file":"304-a4156951a6dcf68a19a1.min.js","mappings":"+GAAA,IAAIA,EAAgB,YAEhBC,EAAe,CAAC,cAGdC,EAAgCC,KAGtCD,EAAIE,iBAAiB,WAAW,SAACC,GAC7BA,EAAMC,UACFC,OACKC,KAAKR,GACLS,MAAK,SAAAC,GAAS,OAAAA,EAAMC,OAAOV,MAC3BQ,MAAK,WAAM,OAAAP,EAAIU,qBAI5BV,EAAIE,iBAAiB,YAAY,WAC7BF,EAAIW,QAAQC,WAKhBZ,EAAIE,iBAAiB,SAAS,SAACC,GAC3BA,EAAMU,YACFC,MAAMX,EAAMY,SACPR,MAAK,SAAAS,GACF,OAAIb,EAAMY,QAAQE,IAAIC,SAAS,uBACpBF,EAGJX,OAAOC,KAAKR,GAAeS,MAAK,SAAAC,GACnC,IAAMW,EAAUH,EAASI,QAKzB,OAHKD,EAAQF,IAAIC,SAAS,UAAqC,QAAzBf,EAAMY,QAAQM,QAChDb,EAAMc,IAAInB,EAAMY,QAASI,GAEtBH,QAGdO,OAAM,WACH,OAAOlB,OAAOmB,MAAMrB,EAAMY","sources":["webpack://graphPlayground/./src/js/workers/pwaServiceWorker.ts"],"sourcesContent":["let dataCacheName = \"graphs-v1\";\r\n\r\nlet filesToCache = [\"index.html\"];\r\n\r\n// @ts-ignore\r\nconst ctx: ServiceWorkerGlobalScope = self as any;\r\n\r\n// @ts-ignore\r\nctx.addEventListener(\"install\", (event: ExtendableEvent) => {\r\n    event.waitUntil(\r\n        caches\r\n            .open(dataCacheName)\r\n            .then(cache => cache.addAll(filesToCache))\r\n            .then(() => ctx.skipWaiting())\r\n    );\r\n});\r\n\r\nctx.addEventListener(\"activate\", () => {\r\n    ctx.clients.claim();\r\n});\r\n\r\n// Get files from network first (cache if not cached already), then the cache\r\n// @ts-ignore\r\nctx.addEventListener(\"fetch\", (event: FetchEvent) => {\r\n    event.respondWith(\r\n        fetch(event.request)\r\n            .then(response => {\r\n                if (event.request.url.includes(\"chrome-extension://\")) {\r\n                    return response;\r\n                }\r\n\r\n                return caches.open(dataCacheName).then(cache => {\r\n                    const newResp = response.clone();\r\n                    // Check if the response is for a real URL, not base64 encoded data and it is a GET request\r\n                    if (!newResp.url.includes(\"data:\") && event.request.method === \"GET\") {\r\n                        cache.put(event.request, newResp);\r\n                    }\r\n                    return response;\r\n                });\r\n            })\r\n            .catch(() => {\r\n                return caches.match(event.request) as Promise<Response>;\r\n            })\r\n    );\r\n});\r\n"],"names":["dataCacheName","filesToCache","ctx","self","addEventListener","event","waitUntil","caches","open","then","cache","addAll","skipWaiting","clients","claim","respondWith","fetch","request","response","url","includes","newResp","clone","method","put","catch","match"],"sourceRoot":""}
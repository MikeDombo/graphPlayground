{"version":3,"file":"bundle-12924099a502ffafeb1a.min.js","mappings":"UAAIA,ECCAC,EADAC,ECAAC,EACAC,E,2FCDW,SAASC,IACtB,OAAO,IAAIC,OAAO,IAA0B,0DAC9C,C,42CCiBMC,EAA2B,SAACC,EAAeC,EAAYC,GACzD,IAAMC,EAASC,EAAUC,QAAQC,aAC7BC,EAAeC,UAAUL,GACzBI,EAAeE,oBAAoBN,IAGvCI,EAAeC,UAAUL,IAAU,EAEnC,UAAKO,eACD,SAACC,EAAQC,GACLD,EAAOE,MAAM,QAEb,IAAMC,EAAS,UAAWC,cAAcH,EAAO,IACzCI,EAAO,UAAWD,cAAcH,EAAO,IAEvCK,EAAmBV,EAAeW,wBAClCC,EAAIZ,EAAea,qBAAoB,SAAAC,GACzC,IAAIC,EAAID,EAAEE,KAOV,GANAJ,EAAEK,UACEP,GACAV,EAAekB,uBAEnBlB,EAAeC,UAAUL,IAAU,GAEzB,IAANmB,EAAJ,CAiBA,IAAII,EAAI,OAAO1B,EAAK,YAAY,UAAK2B,kBAAkBvB,EAAUC,QAAQuB,eACrE,UAAKC,WAAWf,EAAOgB,YAAa,UAAKD,WAAWb,EAAKc,aAE7D,GAAIR,EAAES,WAAY,CACdL,EAAI,UAAKC,kBAAkBvB,EAAUC,QAAQ2B,qBAAsBhC,EAC/D,UAAWiC,cAAcnB,GAAS,UAAWmB,cAAcjB,GAAOM,EAAEY,UACpEhC,IACAwB,GAAK,KAAK,UAAKC,kBAAkBvB,EAAUC,QAAQ8B,iBAAkBb,EAAEc,OAE3EV,GAAK,OAAStB,EAAUC,QAAQgC,UAEhCX,EAAI,UAAKG,WAAWH,GACpB,IAAIY,EAAQ,UAAWC,aAAa,UAAWD,OAAO,GAAO,GACzD,EAAI,IAAIE,EAAA,QAAWF,EAAMG,MAAOH,EAAMI,MAAOJ,EAAMK,SAAUL,EAAMpC,UACvEoB,EAAEsB,KAAKC,SAAQ,SAACC,EAAWC,GACvBrB,GAAQ,UAAKG,WAAW,UAAWI,cAAca,IAAG,WAChDC,EAAI,IACJ,EAAI,EAAEC,SAAS1B,EAAEsB,KAAKG,EAAI,GAAID,EAAG,KAAM,KAAM,WAErD,IACA,UAAWR,MAAQ,EACnBW,OAAOC,KAAKC,QAAQ,UAAWZ,aAAa,IAAI,GAAO,GAAO,GAC9Db,EAAIA,EAAE0B,MAAM,GAAI,GAChB1B,EAAI,OAAO1B,EAAK,YAAY0B,C,CAGhC,UAAK2B,SAAS3B,E,MA1CNzB,EAAGqD,SAAS,YACZ,UAAKC,gBACDnD,EAAUC,QAAQmD,cAClBpD,EAAUC,QAAQoD,mBAEfxD,EAAGqD,SAAS,YACnB,UAAKC,gBACDnD,EAAUC,QAAQqD,iBAClBtD,EAAUC,QAAQsD,qBAmClC,IACAxC,EAAEyC,KAAK,CACHC,KAAM5D,EACN6D,KAAM,CAAChD,EAAQE,GACf+C,qBAAqB,EACrBzB,MAAOW,OAAOC,KAAKc,WAAWzB,gBAEtC,GACAvC,EACAI,EAAUC,QAAQ4D,GAClB7D,EAAUC,QAAQ6D,OAClB,CACI,CACIC,MAAO/D,EAAUC,QAAQ+D,UACzBP,KAAM,OACNQ,eAAgBpB,OAAOC,KAAKoB,sBAEhC,CACIH,MAAO/D,EAAUC,QAAQkE,QACzBV,KAAM,OACNQ,eAAgBpB,OAAOC,KAAKoB,wBAGpC,SAAC3D,GACGJ,EAAeC,UAAUL,IAAU,EACnCQ,EAAOE,MAAM,OACjB,IAER,EAEM2D,EAAyB,SAAOC,GAA0B,0C,yCAK5D,GAJInD,EAAI,KACJoD,EAAKtE,EAAUC,QAAQsE,oBACvBC,EAAe,sBAEfH,EAAmB,CACnB,IAAKxB,OAAO4B,SAASC,UAAU,aAC3B,UAEJJ,EAAKtE,EAAUC,QAAQ0E,4BACvBH,EAAe,6B,MAEf,GAAI3B,OAAO4B,SAASC,UAAU,aAC1B,UAIR,OAAIvE,EAAeC,UAAUkE,IACzBnE,EAAeE,oBAAoBiE,GAC5B,CAAP,EAAOM,QAAQC,OAAO7E,EAAUC,QAAQ6E,uBAE5C3E,EAAeC,UAAUkE,IAAM,EAEzBzD,EAAmBV,EAAeW,yBAClCC,EAAIZ,EAAea,qBAAoB,SAAAC,GACzCC,EAAID,EAAEE,KACNJ,EAAEK,UAEF,UAAW2D,gBAAgBT,GAAMpD,EAAE8D,MACnC,UAAWC,aAAY,EAAM,CAACX,EAAIE,IAClC,UAAWU,MAAMV,GAAgBtD,EAAEiE,WAEnC,IAAMA,EAAa,UAAKC,QAAQlE,EAAEiE,YAC9B7D,EAAI,UAAKC,kBAAkBvB,EAAUC,QAAQoF,4BAA6Bf,EAAIpD,EAAE8D,OACpF1D,GAAK,OAEL6D,EAAW1C,SAAQ,SAACC,EAAGC,GACnBrB,GAAK,UAAKC,kBAAkBvB,EAAUC,QAAQqF,mCAAoC,UAAWzD,cAAcc,GAAID,EAAI,IAAM,IAC7H,IAEApB,GAAK,KAAKiE,KAAKC,UAAU,UAAKC,OAAOvE,EAAEiE,YAAa,KAAM,GAAE,OAC5D7D,EAAI,OAAOgD,EAAE,YAAY,UAAK7C,WAAWH,GAErCT,GACAV,EAAekB,uBAEnBlB,EAAeC,UAAUkE,IAAM,EAE/B,UAAKrB,SAAS3B,EAClB,KACEkC,KAAK,CACHC,KAAMe,EACNd,KAAM,GACNxB,MAAOW,OAAOC,KAAKc,WAAWzB,eAC9BwB,qBAAqB,I,YAI7B,aAKI,WAAY+B,EAAY3E,EAAW4E,GAAnC,WACIC,KAAKF,GAAKA,EACVE,KAAKC,OAAS9E,EACd6E,KAAKD,SAAWA,EAChB5E,EAAE+E,YAAY,CAAErC,KAAM,KAAMiC,GAAE,IAC9B3E,EAAEgF,UAAY,SAAC9E,GACX,EAAK0E,SAAS,CAAExE,KAAMF,EAAEE,KAAKA,MACjC,CACJ,CAUJ,OARW,YAAAqC,KAAP,SAAYrC,GACRyE,KAAKC,OAAOC,YAAY3E,EAC5B,EAEO,YAAAC,QAAP,WACIwE,KAAKC,OAAOG,YACZ,UAAWC,WAAWL,KAAKF,IAAM,IACrC,EACJ,EAvBA,GAyBA,0BAwpBA,QAtpBW,EAAAQ,cAAP,WACI,MAAO,CACH,CACIC,KAAMnG,EAAUC,QAAQmG,cACxBC,aAAa,EACbC,UAAWnG,EAAeoG,0BAC1BC,SAAS,GAEb,CACIL,KAAMnG,EAAUC,QAAQsE,oBACxB8B,aAAa,EACbC,UAAW,WACPlC,GAAuB,EAC3B,EACAoC,SAAS,GAEb,CACIL,KAAMnG,EAAUC,QAAQ0E,4BACxB0B,aAAa,EACbG,SAAS,EACTF,UAAW,WACPlC,GAAuB,EAC3B,GAEJ,CACI+B,KAAMnG,EAAUC,QAAQwG,IACxBJ,aAAa,EACbC,UAAW,WACP3G,EAAyBK,EAAUC,QAAQwG,IAAK,sBAAsB,EAC1E,EACAD,SAAS,GAEb,CACIL,KAAMnG,EAAUC,QAAQyG,SACxBJ,UAAW,WACP3G,EAAyBK,EAAUC,QAAQyG,SAAU,kBAAkB,EAC3E,EACAF,SAAS,GAEb,CACIL,KAAMnG,EAAUC,QAAQ0G,YACxB7G,UAAU,EACVuG,aAAa,EACbC,UAAW,WACP3G,EAAyBK,EAAUC,QAAQ0G,YAAa,eAAe,EAC3E,EACAH,SAAS,GAEb,CACIL,KAAMnG,EAAUC,QAAQ2G,cACxB9G,UAAU,EACVuG,aAAa,EACbC,UAAWnG,EAAe0G,mBAC1BL,SAAS,GAEb,CACIL,KAAMnG,EAAUC,QAAQ6G,WACxBhH,UAAU,EACVuG,aAAa,EACbC,UAAWnG,EAAe4G,oBAC1BP,SAAS,GAEb,CACIL,KAAMnG,EAAUC,QAAQ+G,OACxBV,UAAWnG,EAAe8G,qBAC1BZ,aAAa,EACbG,SAAS,GAEb,CACIL,KAAMnG,EAAUC,QAAQiH,SACxBZ,UAAWnG,EAAegH,4BAC1Bd,aAAa,EACbG,SAAS,GAEb,CACIL,KAAMnG,EAAUC,QAAQmH,SACxBf,aAAa,EACbG,SAAS,EACTF,UAAW,MAEf,CACIH,KAAMnG,EAAUC,QAAQmH,SACxBf,aAAa,EACbG,SAAS,EACTF,UAAWnG,EAAekH,iCAGtC,EAEO,EAAAC,kBAAP,sBACUC,EAA0B,SAACC,EAAkB3H,GAC/C4H,SAASC,cAAcF,GAAWG,iBAAiB,SAAS,SAAA1G,GACxDA,EAAE2G,iBACF/H,GACJ,GACJ,EAEA0H,EAAwB,mBAAoBpH,EAAe0H,WAC3DN,EAAwB,sBAAuBpH,EAAe2H,cAC9DP,EAAwB,uBAAuB,gD,wDACvB,SAAM,8B,cAApBQ,EAAc,SAAyCC,QAC7DnF,OAAOC,KAAKC,QAAQgF,EAAWE,YAAY,GAAO,GAAM,G,cAE5DV,EAAwB,yBAAyB,gD,wDACzB,SAAM,8B,cAApBQ,EAAc,SAAyCC,QAC7DnF,OAAOC,KAAKC,QAAQgF,EAAWG,cAAc,GAAO,GAAM,G,cAE9DX,EAAwB,uBAAuB,gD,kDACvB,SAAM,8B,cAAN,SAAyCS,QAClDG,W,cAEfZ,EAAwB,wBAAwB,gD,kDACxB,SAAM,8B,cAAN,SAAyCS,QAClDI,Y,cAEfb,EAAwB,qBAAqB,gD,kDACrB,SAAM,8B,cAAN,SAAyCS,QAClDK,S,cAEfd,EAAwB,aAAc1E,OAAOC,KAAKwF,MAClDf,EAAwB,aAAc1E,OAAOC,KAAKyF,MAClDhB,EAAwB,kCAAkC,gD,2BACtD,MAAO,CAAP,EAAO,UAAWiB,wBAAuB,G,UAE7CjB,EAAwB,yBAA0B1E,OAAOC,KAAK2F,sBAC9DlB,EAAwB,qBAAqB,gD,kDAC5B,SAAM,8B,cAAN,SAAoCS,QAC7CU,sB,cAERnB,EAAwB,qBAAqB,gD,kDAC5B,SAAM,8B,cAAN,SAAoCS,QAC7CW,sB,cAERpB,EAAwB,qBAAqB,gD,kDAC5B,SAAM,8B,cAAN,SAAoCS,QAC7CY,sB,cAERrB,EAAwB,qBAAqB,gD,kDAC5B,SAAM,8B,cAAN,SAAoCS,QAC7Ca,sB,cAEPpB,SAASC,cAAc,iBAAuCoB,UAAY9I,EAAUC,QAAQ8I,KAC5FtB,SAASC,cAAc,qBAA2CoB,UAAY9I,EAAUC,QAAQ+I,WAChGvB,SAASC,cAAc,qBAA2CoB,UAAY9I,EAAUC,QAAQgJ,WAChGxB,SAASC,cAAc,qBAA2CoB,UAAY9I,EAAUC,QAAQiJ,WAChGzB,SAASC,cAAc,qBAA2CoB,UAAY9I,EAAUC,QAAQkJ,WAEhG1B,SAASC,cAAc,kCAAwDoB,UAAY9I,EAAUC,QAAQmJ,uBAC7G3B,SAASC,cAAc,0BAAgDoB,UAAY9I,EAAUC,QAAQoJ,eACrG5B,SAASC,cAAc,uBAA6CoB,UAAY9I,EAAUC,QAAQqJ,aAClG7B,SAASC,cAAc,oBAA0CoB,UAAY9I,EAAUC,QAAQsJ,KAE/F9B,SAASC,cAAc,yBAAgDoB,UAAY9I,EAAUC,QAAQuJ,cACrG/B,SAASC,cAAc,uBAA6CoB,UAAY9I,EAAUC,QAAQwJ,aAClGhC,SAASC,cAAc,yBAA+CoB,UAAY9I,EAAUC,QAAQyJ,eACpGjC,SAASC,cAAc,uBAA6CoB,UAAY9I,EAAUC,QAAQ0J,aAClGlC,SAASC,cAAc,wBAA8CoB,UAAY9I,EAAUC,QAAQ2J,cACnGnC,SAASC,cAAc,qBAA2CoB,UAAY9I,EAAUC,QAAQ4J,WAEhGpC,SAASC,cAAc,qBAAyCoB,UAAY9I,EAAUC,QAAQ6J,WAE9FrC,SAASC,cAAc,2BAA+CoB,UAAY9I,EAAUC,QAAQ8J,gBACpGtC,SAASC,cAAc,kBAAsCoB,UAAY9I,EAAUC,QAAQ+J,OAChG,EAEO,EAAAnC,UAAP,WACI,UAAK1E,gBACDnD,EAAUC,QAAQsJ,KAClBvJ,EAAUC,QAAQgK,WAE1B,EAEO,EAAAnC,aAAP,WACI,UAAKxH,eACD,SAACC,EAAQ2J,GAKL,GAJA3J,EAAOE,MAAM,QACToC,OAAO4B,SAASC,UAAU,iBAAmBwF,EAAK,IAClDrH,OAAO4B,SAAS0F,aAAa,cAAeD,EAAK,IAEjDrH,OAAO4B,SAASC,UAAU,eAAiBwF,EAAK,GAAI,CACpDrH,OAAO4B,SAAS0F,aAAa,YAAaD,EAAK,IAC/C,IAAIE,EAAI,UAAWlI,MACnBkI,EAAIF,EAAK,GAAKE,EAAEC,YAAW,GAAQD,EAAEE,eAErCzH,OAAOC,KAAKC,QAAQ,UAAWZ,aAAaiI,GAAG,G,CAE/CvH,OAAO4B,SAASC,UAAU,aAAewF,EAAK,KAC9CrH,OAAO4B,SAAS0F,aAAa,UAAWD,EAAK,IACzCE,EAAI,UAAWlI,MACnBkI,EAAIF,EAAK,GAAKE,EAAEG,aAAeH,EAAEI,eACjC3H,OAAOC,KAAKC,QAAQ,UAAWZ,aAAaiI,KAE5CvH,OAAO4B,SAASC,UAAU,kBAAoBwF,EAAK,IACnDrH,OAAO4B,SAAS0F,aAAa,eAAgBD,EAAK,GAE1D,GACAlK,EAAUC,QAAQwK,QAClBzK,EAAUC,QAAQyK,KAClB1K,EAAUC,QAAQ6D,OAClB,CACI,CACIC,MAAO/D,EAAUC,QAAQ0K,aACzBC,aAAc/H,OAAO4B,SAASC,UAAU,eACxCjB,KAAM,YAEV,CACIM,MAAO/D,EAAUC,QAAQ4K,QACzBD,aAAc/H,OAAO4B,SAASC,UAAU,aACxCjB,KAAM,YAEV,CACIM,MAAO/D,EAAUC,QAAQ6K,cACzBF,aAAc/H,OAAO4B,SAASC,UAAU,WACxCjB,KAAM,YAEV,CACIM,MAAO/D,EAAUC,QAAQ8K,iBACzBH,aAAc/H,OAAO4B,SAASC,UAAU,gBACxCjB,KAAM,aAGd,KAER,EAEO,EAAAuH,uBAAP,WACI,IAAgB,oBAAW/E,WAAX,eAAuB,CAAlC,IAAMvD,EAAC,KACE,OAANA,GAAcA,aAAaG,OAAOnD,QAClCgD,EAAEsD,W,CAIV,UAAWC,WAAa,GACxB9F,EAAekB,uBACflB,EAAeC,UAAY,CAAC,CAChC,EAEO,EAAAY,oBAAP,SAA2B+E,GACvB,IAAIkF,EAAY,UAAWhF,WAAWiF,WAAU,SAAAxI,GAC5C,OAAOA,OACX,KACmB,IAAfuI,IACAA,EAAY,UAAWhF,WAAWkF,QAGtC,IAAMpK,EAAI,IAAI,EAEd,OADA,UAAWkF,WAAWgF,GAAalK,EAC5B,IAAIqK,EAAYH,EAAWlK,EAAGgF,EACzC,EAEO,EAAAjF,sBAAP,WACI,IAAMuK,EAAO5D,SAAS6D,eAAe,gBACrC,MAA2B,SAAvBD,EAAKE,MAAM/E,UACX6E,EAAKE,MAAM/E,QAAU,QACd,EAGf,EAEO,EAAAnF,qBAAP,WACI,IAAMgK,EAAO5D,SAAS6D,eAAe,gBACV,SAAvBD,EAAKE,MAAM/E,UACX6E,EAAKE,MAAM/E,QAAU,OAE7B,EAEO,EAAAnG,oBAAP,SAA2B8F,GACvB,IAAIqF,EAAIxL,EAAUC,QAAQwL,SACtBtF,IACAqF,EAAIrF,GAER,UAAKhD,gBACDnD,EAAUC,QAAQ6E,mBAClB,MAAQ,UAAKvD,kBAAkBvB,EAAUC,QAAQyL,uBAAwBF,GAAK,OAEtF,EAEO,EAAAjF,0BAAP,sBACUxG,EAASC,EAAUC,QAAQmG,cACjC,OAAIjG,EAAeC,UAAUL,IACzBI,EAAeE,oBAAoBN,GAC5B6E,QAAQC,OAAO7E,EAAUC,QAAQ6E,sBAE5C3E,EAAeC,UAAUL,IAAU,EAE5B,IAAI6E,SAAc,SAAM+G,GAAO,qC,kEAClC,OAAI9I,OAAO4B,SAASC,UAAU,cAC1BvE,EAAeC,UAAUL,IAAU,EAC5B,CAAP,EAAO4L,O,KAKW,GAAM,UAAWC,YAAY,sB,cAA/C,EAAAC,gBAAkB,SAClB,EAAAC,OAAQ,UAAW5G,MAAM6G,cAFzB7K,E,EAKE8K,EAAU,WACZ,UAAWjH,gBAAgB,oBAAsB7D,EAAE2K,gBACnD,UAAW5G,aAAY,EAAM,CAAC,mBAAoB,kBACjD,UAAWC,MAAM6G,cAAuB7K,EAAE4K,OAE3C,IAAMA,EAAS,UAAK1G,QAAQlE,EAAE4K,QAC1BxK,EAAI,UAAKC,kBAAkBvB,EAAUC,QAAQgM,iBAAkBH,EAAOX,OAAS,IACnF7J,GAAK,KAAO,UAAKC,kBAAkBvB,EAAUC,QAAQiM,kBAAmBhL,EAAE2K,gBAAkB,IAC5FvK,GAAK,OAELwK,EAAOrJ,SAAQ,SAACC,EAAGC,GACfrB,GAAK,UAAKC,kBAAkBvB,EAAUC,QAAQkM,gBAAiB,UAAWtK,cAAcc,GAAID,EAAI,IAAM,IAC1G,IAEApB,GAAK,KAAKiE,KAAKC,UAAU,UAAKC,OAAOvE,EAAE4K,QAAS,KAAM,GAAE,OAExDxK,EAAI,OAAOtB,EAAUC,QAAQmM,mBAAkB,YAAY,UAAK3K,WAAWH,GAC3EA,GAAK,qEAAqEtB,EAAUC,QAAQoM,QAAO,YAEnG,UAAKpJ,SAAS3B,GACduB,OAAOC,KAAKwJ,aAChB,EAEMzL,EAAmBV,EAAeW,yBAElC,EAAsB,OAAtBI,EAAE2K,iBAA6B,GAAM,UAAWD,YAAY,kBAA5D,M,OAA8B,EAAoD,OAAnD,S,wBAAhC,GAkBDI,IACInL,GACAV,EAAekB,uBAEnBlB,EAAeC,UAAUL,IAAU,IArB7B,EAAII,EAAea,qBAAoB,SAAAC,GACzCC,EAAID,EAAEE,KACN6K,IACA,EAAE5K,UACEP,GACAV,EAAekB,uBAEnBlB,EAAeC,UAAUL,IAAU,EACnC4L,EAAQ1K,EAAEE,KACd,KACEqC,KAAK,CACHC,KAAM,eACNC,KAAM,GACNxB,MAAOW,OAAOC,KAAKc,WAAWzB,eAC9BwB,qBAAqB,I,cAUrC,EAEO,EAAA0D,gCAAP,sBACUtH,EAASC,EAAUC,QAAQmH,SACjC,OAAIjH,EAAeC,UAAUL,IACzBI,EAAeE,oBAAoBN,GAC5B6E,QAAQC,OAAO7E,EAAUC,QAAQ6E,sBAE5C3E,EAAeC,UAAUL,IAAU,EAE5B,IAAI6E,SAAc,SAAM+G,GAAO,qC,4DAClC,OAAK9I,OAAO4B,SAASC,UAAU,cAKzB7D,EAAmBV,EAAeW,wBAClCC,EAAIZ,EAAea,qBAAoB,SAAAC,GACzC,UAAW8D,gBAAgBwH,SAAWtL,EAAEE,KACxC,UAAW8D,aAAY,EAAM,CAAC,aAC9BlE,EAAEK,UACEP,GACAV,EAAekB,uBAEnBlB,EAAeC,UAAUL,IAAU,EACnC4L,EAAQ1K,EAAEE,KACd,IAEY,GAAM,UAAWyK,YAAY,+BAA+B,MAhBpEzL,EAAeC,UAAUL,IAAU,EAC5B,CAAP,EAAO4L,M,cAeLa,EAAM,SAEZzL,EAAEyC,KAAK,CACHC,KAAM,sBACNC,KAAM,CAAC,UAAM+I,6BAA6B,UAAWvK,MAAMwK,oBAAqBF,K,cAG5F,EAEO,EAAAG,qBAAP,SAA4BC,GAA5B,gBAA4B,IAAAA,IAAAA,GAAA,GACxB,IAAM7M,EAASC,EAAUC,QAAQmH,SACjC,OAAIjH,EAAeC,UAAUL,GACrB6M,EACOhI,QAAQ+G,WAEnBxL,EAAeE,oBAAoBN,GAC5B6E,QAAQC,OAAO7E,EAAUC,QAAQ6E,sBAE5C3E,EAAeC,UAAUL,IAAU,EAE5B,IAAI6E,SAAc,SAAM+G,GAAO,qC,4DAClC,OAAI9I,OAAO4B,SAASC,UAAU,cAC1BvE,EAAeC,UAAUL,IAAU,EAC5B,CAAP,EAAO4L,EAAQxL,EAAekH,sCAG5BxG,EAAmBV,EAAeW,wBAC7B,GAAM,UAAW8K,YAAY,uBAAuB,K,cAAzDtH,EAAK,UAELvD,EAAIZ,EAAea,qBAAoB,SAAAC,GACzC,UAAW8D,gBAAgBwH,SAAWtL,EAAEE,KACxC,UAAW8D,aAAY,EAAM,CAAC,aAC1BpE,GACAV,EAAekB,uBAEnBlB,EAAeC,UAAUL,IAAU,EACnCgB,EAAEK,UACFuK,EAAQ1K,EAAEE,KACd,KACEqC,KAAK,CACHC,KAAM,qBACNC,KAAM,CAAC,UAAWxB,MAAM2K,mBAAoBvI,K,cAGxD,EAEO,EAAAuC,mBAAP,sBACI,GAAKhE,OAAO4B,SAASC,UAAU,cAAiB7B,OAAO4B,SAASC,UAAU,WAA1E,CAGA,IAAM3E,EAASC,EAAUC,QAAQ2G,cAC7BzG,EAAeC,UAAUL,GACzBI,EAAeE,oBAAoBN,IAGvCI,EAAeC,UAAUL,IAAU,EAEnC,UAAKO,eACD,SAAOC,EAAQC,GAAM,qC,kDACjBD,EAAOE,MAAM,QAEPC,EAAS,UAAWC,cAAcH,EAAO,IACzCI,EAAO,UAAWD,cAAcH,EAAO,IAEzCU,EAAiC,KAE/B4L,EAAK,WACP,IAAIxL,EAAI,OAAOtB,EAAUC,QAAQ2G,cAAa,YAAY,UAAKrF,kBAAkBvB,EAAUC,QAAQuB,eAC/F,UAAKC,WAAW,UAAWI,cAAcnB,IAAU,UAAKe,WAAW,UAAWI,cAAcjB,MAEtF,IAANM,GAMJI,EAAOtB,EAAUC,QAAQ8M,2BAA0B,IAAI,UAAKxL,kBAAkBvB,EAAUC,QAAQ+M,gBAC5F,UAAWnL,cAAcnB,GAAS,UAAWmB,cAAcjB,GAAOM,EAAE+L,QAAU,IAClF3L,GAAK,OAAOtB,EAAUC,QAAQiN,gBAAe,OAC7C5L,EAAI,UAAKG,WAAWH,GACpBJ,EAAEiM,SAAS1K,SAAQ,SAAAC,GACfpB,GAAK,UAAKC,kBAAkBvB,EAAUC,QAAQmN,iBAAkB,UAAWvL,cAAca,EAAE2K,MACvF,UAAWxL,cAAca,EAAE4K,IAAK5K,EAAE6K,KAAO,GAAI7K,EAAE8K,SAAW,IAC9DlM,GAAK,IACT,IACAA,EAAIA,EAAEmM,OACNnM,EAAI,OAAOtB,EAAUC,QAAQ8M,2BAA0B,YAAczL,EAErE,UAAK2B,SAAS3B,IAjBV,UAAK2B,SAAS3B,EAkBtB,EAEMT,EAAmBV,EAAeW,yBAClCC,EAAIZ,EAAea,qBAAoB,SAAAC,GACzCC,EAAID,EAAEE,KACNhB,EAAeC,UAAUL,IAAU,EACnC+M,IACIjM,GACAV,EAAekB,uBAEnBN,EAAEK,SACN,KACEoC,KAAK,CACHC,KAAM,gBACNC,KAAM,CAAChD,EAAQE,GACf+C,qBAAqB,EACrBzB,MAAOW,OAAOC,KAAKc,WAAWzB,iB,YAGtCnC,EAAUC,QAAQ8M,2BAClB/M,EAAUC,QAAQ4D,GAClB7D,EAAUC,QAAQ6D,OAClB,CACI,CACIC,MAAO/D,EAAUC,QAAQyN,WACzBjK,KAAM,OACNQ,eAAgBpB,OAAOC,KAAKoB,sBAEhC,CACIH,MAAO/D,EAAUC,QAAQ0N,SACzBlK,KAAM,OACNQ,eAAgBpB,OAAOC,KAAKoB,wBAGpC,SAAC3D,GACGJ,EAAeC,UAAUL,IAAU,EACnCQ,EAAOE,MAAM,OACjB,I,CAER,EAEO,EAAAsG,oBAAP,WACI,IAAIlE,OAAO4B,SAASC,UAAU,cAAiB7B,OAAO4B,SAASC,UAAU,WAAzE,CAIA,IAAM3E,EAASC,EAAUC,QAAQ6G,WACjC,GAAI3G,EAAeC,UAAUL,GACzBI,EAAeE,oBAAoBN,OADvC,CAIAI,EAAeC,UAAUL,IAAU,EAEnC,IAAMc,EAAmBV,EAAeW,wBAClCC,EAAIZ,EAAea,qBAAoB,SAAAC,GACzC,IAAMC,EAAeD,EAAEE,KACvBJ,EAAEK,UAEF,IAAIE,EAAI,UAAKC,kBAAkBvB,EAAUC,QAAQ2N,sBAAuB1M,EAAE2M,YAAc,IACxFvM,GAAK,OAAOtB,EAAUC,QAAQ6N,WAAU,OACxCxM,EAAI,UAAKG,WAAWH,GACpBJ,EAAE6M,IAAItL,SAAQ,SAAAC,GACVpB,GAAQ,UAAWO,cAAc,IAAImM,EAAA,QAAUtL,GAAGuL,WAAU,SAC5D3M,GAAQ,UAAWO,cAAc,IAAImM,EAAA,QAAUtL,GAAGwL,SAAQ,IAC9D,IACA5M,EAAIA,EAAEmM,OACNnM,EAAI,OAAOtB,EAAUC,QAAQ6G,WAAU,YAAYxF,EAE/CT,GACAV,EAAekB,uBAEnBlB,EAAeC,UAAUL,IAAU,EAEnC,UAAKkD,SAAS3B,EAClB,IACAP,EAAEyC,KAAK,CACHC,KAAM,UACNC,KAAM,GACNC,qBAAqB,EACrBzB,MAAOW,OAAOC,KAAKc,WAAWzB,gB,EAEtC,EAEO,EAAA8E,qBAAP,WACI,IAAKpE,OAAO4B,SAASC,UAAU,aAC3B,OAAOE,QAAQ+G,UAGnB,IAAM5L,EAASC,EAAUC,QAAQ+G,OACjC,OAAI7G,EAAeC,UAAUL,IACzBI,EAAeE,oBAAoBN,GAC5B6E,QAAQC,OAAO7E,EAAUC,QAAQ6E,sBAE5C3E,EAAeC,UAAUL,IAAU,EAE5B,IAAI6E,SAAc,SAAA+G,GACrB,IAAM9K,EAAmBV,EAAeW,wBAClCC,EAAIZ,EAAea,qBAAoB,SAAAC,GACzC,UAAW8D,gBAAgBoJ,OAASlN,EAAEE,KACtC,UAAW8D,aAAY,EAAM,CAAC,WAC9BlE,EAAEK,UACEP,GACAV,EAAekB,uBAEnBlB,EAAeC,UAAUL,IAAU,EACnC4L,GACJ,IACA5K,EAAEyC,KAAK,CACHC,KAAM,gBACNC,KAAM,GACNC,qBAAqB,EACrBzB,MAAOW,OAAOC,KAAKc,WAAWzB,gBAEtC,IACJ,EAEO,EAAAgF,4BAAP,WACI,GAAKtE,OAAO4B,SAASC,UAAU,aAA/B,CAIA,IAAM3E,EAASC,EAAUC,QAAQiH,SACjC,GAAI/G,EAAeC,UAAUL,GACzBI,EAAeE,oBAAoBN,OADvC,CAIAI,EAAeC,UAAUL,IAAU,EAEnC,IAAMc,EAAmBV,EAAeW,wBAClCC,EAAIZ,EAAea,qBAAoB,SAAAC,GACzC,IAAMC,EAA2BD,EAAEE,KAQnC,GAPAJ,EAAEK,UAEEP,GACAV,EAAekB,uBAEnBlB,EAAeC,UAAUL,IAAU,GAEzB,IAANmB,EAIA,OAHA,UAAW6D,gBAAgBoJ,QAAS,EACpC,UAAWlJ,aAAY,EAAM,CAAC,gBAC9B,UAAKhC,SAASjD,EAAUC,QAAQmO,mBAIpC,IAAI9M,EAAItB,EAAUC,QAAQiH,SAAW,QACrC5F,EAAI,UAAKG,WAAWH,GACnBJ,EAAYuB,SAAQ,SAAAC,GACjBpB,GAAQ,UAAWO,cAAca,EAAEgD,IAAG,IAC1C,IACApE,EAAIA,EAAE0B,MAAM,GAAI,GAChB1B,EAAI,OAAOtB,EAAUC,QAAQiH,SAAQ,YAAY5F,EAEjD,UAAK2B,SAAS3B,EAClB,IACAP,EAAEyC,KAAK,CACHC,KAAM,kBACNC,KAAM,GACNC,qBAAqB,EACrBzB,MAAOW,OAAOC,KAAKc,WAAWzB,gB,EAEtC,EAEO,EAAAkM,qBAAP,WACI,IAAMC,EAAO7G,SAAS6D,eAAe,mBACrCgD,EAAKC,UAAY,GACjB,IAAMlI,EAAcxD,OAAO4B,SAASC,UAAU,aACxC5E,EAAW+C,OAAO4B,SAASC,UAAU,WAErC8J,EAAgB,SAACC,GACnB,IAAMC,EAAUjH,SAASkH,cAAc,KACvCD,EAAQE,UAAUC,IAAI,YACtBH,EAAQI,aAAa,OAAQ,KAC7BJ,EAAQ5F,UAAY2F,EAAItI,KACxBuI,EAAQ/G,iBAAiB,SAAS,SAAA1G,GAC9BA,EAAE2G,iBACF6G,EAAInI,WACR,IAEAgI,EAAKS,YAAYL,EACrB,EAEUvO,EAAe+F,gBACvBzD,SAAQ,SAAAgM,GACDA,EAAIjI,UAGJ,gBAAiBiI,GAAOA,EAAIpI,cAAgBA,KAAkB,gBAAiBoI,IAC3E,aAAcA,GAAOA,EAAI3O,WAAaA,KAAe,aAAc2O,KACpED,EAAcC,IAEV,aAAcA,GAAOA,EAAI3O,WAAaA,KAAe,aAAc2O,MACtE,gBAAiBA,GAAOA,EAAIpI,cAAgBA,KAAkB,gBAAiBoI,KAChFD,EAAcC,GAG1B,GACJ,EAtpBc,EAAArO,UAA0C,CAAC,EAupB7D,C,CAxpBA,G,oGCpLAyC,OAAOC,KAAO,UACdD,OAAO4B,SAAW,UAElB,gBAAwBuK,MAAK,WACzBnM,OAAOoM,GAAK,UACZpM,OAAOoM,GAAG3H,oBAEV,UAAK4H,WAAWC,QAAU,UAAkBC,UAC5C,UAAKF,WAAWG,OAAS,GACzBxM,OAAOyM,QAAU,IAAI,EAAAC,QAAQ,UAAKC,UAAW,CAAC,EAAG,UAAKN,YACtD,UAASO,eAET,UAAKC,oBAAoB7M,OAAOyM,SAEhC,I,QAAIK,GAAc,EAClB,GAAI,UAASC,uBAAwB,CACjC,IAAMC,EAAIC,aAAaC,QAAQ,6BAC/B,GAAU,OAANF,EAAY,CACZ,IAAMG,EAAiBzK,KAAK0K,MAAMJ,GAC9B,UAAWG,GAAa,UAAWA,EAAU9N,QAC7CyN,GAAc,EACd,UAAKO,YAAW,EAAOF,G,EAI/BL,I,OACC,E,OAAA,E,EAAA,W,2lCACuB,SAAM,8B,cAApB5H,EAAc,SAAyCC,QAC7D,UAAKjF,QAAQgF,EAAWE,YAAY,GAAO,GAAM,G,qBAFpD,K,kQAKT,G,mECtCA,WAMI,WAAYoF,EAA+BC,EAAa6C,EAA6BC,G,uBAArF,YAAwD,IAAAD,IAAAA,EAAA,QAA6B,IAAAC,IAAAA,EAAA,MAC7D,iBAAT/C,IACP+C,EAAaC,OAAOC,KAAKjD,GACpBkD,QAAO,SAAAC,GAAO,OAAC,CAAC,OAAQ,KAAM,UAAUtN,SAASsN,EAAnC,IACdC,QAAO,SAACC,EAAUF,GAEf,OADAE,EAAIF,GAAwBnD,EAAMmD,GAC3BE,CACX,GAAG,CAAC,GAERpD,EAAKD,EAAKC,GACV6C,EAAS9C,EAAK8C,OACd9C,EAAOA,EAAKA,MAGhBzH,KAAK+K,WAAa,CAAC,EACA,OAAfP,GAA6C,iBAAfA,GAC9BC,OAAOC,KAAKF,GAAY3N,SAAQ,SAAA+N,GAC5B,EAAKG,WAAWH,GAAOH,OAAOO,OAAOR,EAAWI,GACpD,IAGJ5K,KAAK+K,WAAaN,OAAOO,OAAOhL,KAAK+K,YACrC/K,KAAKyH,KAAOgD,OAAOO,OAAOvD,GAC1BzH,KAAK0H,GAAK+C,OAAOO,OAAOtD,GACxB1H,KAAKuK,OAASE,OAAOO,OAAOC,WAAWV,IAEnC,IAAenC,GACfqC,OAAOO,OAAOhL,KAEtB,CAmDJ,OAjDI,YAAAqI,QAAA,WACI,OAAOrI,KAAKyH,IAChB,EAEA,YAAAa,MAAA,WACI,OAAOtI,KAAK0H,EAChB,EAEA,YAAAwD,UAAA,WACI,OAAOlL,KAAKuK,MAChB,EAEA,YAAAY,aAAA,SAAaC,GACT,OAAIA,KAAapL,KAAK+K,WACX/K,KAAK+K,WAAWK,GAGpB,IACX,EAEA,YAAAC,iBAAA,WACI,OAAOrL,KAAK+K,UAChB,EAEA,YAAAO,QAAA,sBACUC,EAA2B,CAAE9D,KAAMzH,KAAKyH,KAAMC,GAAI1H,KAAK0H,GAAI6C,OAAQvK,KAAKuK,QAO9E,OANAE,OAAOC,KAAK1K,KAAK+K,YAAYlO,SAAQ,SAAA+N,GAC3BA,KAAOW,IACTA,EAASX,GAAO,EAAKG,WAAWH,GAExC,IAEOW,CACX,EAEA,YAAAvO,SAAA,SAASwO,EAA0BhB,QAAA,IAAAA,IAAAA,EAAA,IAE/B,IAAMO,EAAaN,OAAOgB,OAAO,CAAC,EAAGzL,KAAK+K,YAK1C,OAJAN,OAAOC,KAAKF,GAAY3N,SAAQ,SAAA+N,GAC5BG,EAAWH,GAAOJ,EAAWI,EACjC,IAEO,IAAIxC,EACPpI,KAAKqI,UACLrI,KAAKsI,QACS,OAAdkD,EAAqBxL,KAAKkL,YAAcM,EACxCT,EAER,EACJ,EAtFA,E,0FCHMW,EAAkB,SAACnQ,EAAWoQ,GAChC,OAAOlB,OAAOC,KAAKnP,GACdoP,QAAO,SAACC,GAAQ,OAAC,EAAStN,SAASsN,EAAnB,IAChBC,QAAO,SAACC,EAAUF,GAEf,OADAE,EAAIF,GAAOrP,EAAKqP,GACTE,CACX,GAAG,CAAC,EACZ,EAEMc,EAAsB,SAACrQ,GACzB,OAAOmQ,EAAgBnQ,EAAM,CAAC,QAAS,MAC3C,E,QAiGA,WAQI,WAAYkB,EACRC,EACAC,EAAkBzC,G,4BADlB,IAAAwC,IAAAA,EAAA,WACA,IAAAC,IAAAA,GAAA,QAAkB,IAAAzC,IAAAA,GAAA,GAClB8F,KAAKrD,SAAW8N,OAAOO,OAAOrO,GAC9BqD,KAAK9F,SAAWuQ,OAAOO,OAAO9Q,GAC9B,IAAI2R,EAAU,CAAC,EAGf,GAAqB,iBAAVpP,IAAwC,iBAAVA,GAAwBA,aAAiB,MAQ7E,MAAIA,aAAiB,MAItB,MAAM,IAAIqP,MAAM,0DAHhB9L,KAAKvD,MAAQA,C,KATyE,CACtF,IAAMmJ,EApEe,SAACnJ,GAC9B,GAAc,OAAVA,EACA,OAAO,EAGX,IAAIsP,GAA4B,UAC1BF,EAAuB,CAAC,EAE9B,GAAqB,iBAAVpP,EAEP,IAAK,IAAIM,EAAI,EAAGA,EAAIiP,KAAKC,MAAMxP,GAAQM,IACnCgP,EAAWA,EAASG,IAAInP,EAAG,IAAI,UAAUA,IACzC8O,EAAQ9O,GAAKA,MAGhB,IAAqB,iBAAVN,EA8BZ,OAAO,EA7BP,IAAI,EAAU,EACdA,EAAMI,SAAQ,SAAC+I,GACX,IAEI4E,EAFE1K,EAAK,IACP3B,EAAQ,KAGR,UAAWyH,IACXzH,EAAQyH,EAAEzH,OAEV,OAAQyH,GACRiG,EAAQjG,EAAE9F,IAAMA,EACZ,UAAW8F,GAAKA,EAAEzH,QAAUyH,EAAE9F,GAAGhE,aACjCqC,EAAQ2B,EAAGhE,aAIf+P,EAAQ/L,GAAMA,EAGd0K,EAAaoB,EADb,eAAgBhG,EACiBA,EAAEmF,WAGFnF,GAGrCmG,EAAWA,EAASG,IAAIpM,EAAI,IAAI,UAAUA,EAAI3B,EAAOqM,GACzD,G,CAMJ,MAAO,CAAE/N,MAAOgO,OAAOO,OAAOe,GAAWI,IAAKN,EAClD,CAmBsBO,CAAyB3P,GACnC,GAAiB,iBAANmJ,EACP,MAAM,IAAIkG,MAAM,+BAEpB9L,KAAKvD,MAAQmJ,EAAEnJ,MACfoP,EAAUjG,EAAEuG,G,CAYhB,GAJAnM,KAAKvD,MAAQgO,OAAOO,OAAOhL,KAAKvD,OAChCuD,KAAKqM,SAAW5B,OAAOO,OAAOhL,KAAKvD,MAAM6P,MAG3B,OAAV5P,GAAmC,iBAAVA,GAAwBA,aAAiB,KAO7DA,aAAiB,KACtBsD,KAAKtD,MAAQA,EAGbsD,KAAKtD,OAAQ,cAX4D,CACzE,IAAMrB,EA9He,SAACqB,EAAYmP,GAC1C,QAD0C,IAAAA,IAAAA,EAAA,IAC5B,OAAVnP,EACA,OAAO,EAGX,IAAI6P,GAA4B,UAEhC,MAAqB,iBAAV7P,IACPA,EAAMG,SAAQ,SAAC2P,GACX,IAbiBjR,EAabgP,EAAS,EACT9C,EAAO,EACPC,EAAK,EACL8C,EAAa,CAAC,EAEd,WAAYgC,IACZjC,EAASU,WAAWuB,EAAKjC,SAEzB,SAAUiC,IACV/E,EAAOoE,EAAQW,EAAK/E,OAEpB,OAAQ+E,IACR9E,EAAKmE,EAAQW,EAAK9E,KAzBLnM,EA2Bb,eAAgBiR,EACiBA,EAAKzB,WAGLyB,EAHjChC,EA3BLkB,EAAgBnQ,EAAM,CAAC,OAAQ,KAAM,WAiCpCgR,EAAWA,EAASE,KAAK,IAAI,UAAUhF,EAAMC,EAAI6C,EAAQC,GAC7D,IAMG+B,EACX,CAwFsBG,CAAyBhQ,EAAOmP,GAC1C,GAAiB,iBAANxQ,EACP,MAAM,IAAIyQ,MAAM,8BAEpB9L,KAAKtD,MAAQrB,C,CAQjB2E,KAAKtD,MAAQ+N,OAAOO,OAAOhL,KAAKtD,OAChCsD,KAAK2M,SAAWlC,OAAOO,OAAOhL,KAAKtD,MAAM4P,MAErC,IAAe9P,GACfiO,OAAOO,OAAOhL,KAEtB,CAkXJ,OAhXI,YAAA4M,QAAA,SAAQ9M,EAAY+M,GAChB,QADgB,IAAAA,IAAAA,GAAA,GACZ/M,GAAME,KAAKqM,SACX,OAAO,EAEX,IAAMS,EAAO9M,KAAKvD,MAAMsQ,IAAIjN,GAC5B,YAAoB,IAATgN,IAGPD,EACOC,EAEJA,EAAKxB,UAChB,EAEA,YAAA0B,QAAA,SAAQzR,QAAA,IAAAA,IAAAA,EAAA,MACS,OAATA,IACAA,EAAO,CAAC,GAGZ,IAAMuE,EAAKE,KAAKqM,SACV,UAAW9Q,IACbA,EAAK4C,MAAQ2B,EAAGhE,YAGpB,IAAM0O,EAAaoB,EAAoBrQ,GAEvC,OAAO,IAAIiB,EAAWwD,KAAKvD,MAAMyP,IAAIpM,EAAI,IAAI,UAAUA,EAAIvE,EAAK4C,MAAOqM,IACnExK,KAAKtD,MAAOsD,KAAKrD,SAAUqD,KAAK9F,SACxC,EAEA,YAAA+S,SAAA,SAASnN,EAAYvE,GACjB,IAAKyE,KAAKvD,MAAMyQ,IAAIpN,GAChB,OAAO,EAGX,IAAM0K,EAAaoB,EAAoBrQ,GAIvC,MAHM,UAAWA,IACbA,EAAK4C,MAAS6B,KAAK4M,QAAQ9M,GAAI,GAAoBqN,YAEhD,IAAI3Q,EAAWwD,KAAKvD,MAAMyP,IAAIpM,EAAKE,KAAK4M,QAAQ9M,GAAI,GAAoBmN,SAAS1R,EAAK4C,MAAOqM,IAChGxK,KAAKtD,MAAOsD,KAAKrD,SAAUqD,KAAK9F,SACxC,EAEA,YAAAkT,WAAA,SAAWtN,GAEP,KAAMA,GAAM,GAAKA,EAAKE,KAAKqM,UACvB,OAAO,EAGX,IAAMR,EAAuB,CAAC,EAG1BwB,EAAY,EA8BhB,OAAO,IAAI7Q,EA7BuBwD,KAAKvD,MAClCkO,QAAO,SAAC/E,GAQL,OAPIA,EAAE0H,UAAYxN,EACd+L,EAAQjG,EAAE0H,UAAY,EAGtBzB,EAAQjG,EAAE0H,SAAWD,IAGlBzH,EAAE0H,UAAYxN,CACzB,IACCqM,KAAI,SAACW,GACF,IAAI3O,EAAQ2O,EAAKK,WAKjB,OAJIL,EAAKQ,QAAQxR,aAAeqC,IAC5BA,EAAQ0N,EAAQiB,EAAKQ,SAASxR,YAG3B,IAAI,UAAU+P,EAAQiB,EAAKQ,SAAUnP,EAAO2O,EAAKzB,mBAC5D,IAG8BrL,KAAKtD,MAClCiO,QAAO,SAAC6B,GACL,QAASA,EAAKnE,YAAcvI,GAAM0M,EAAKlE,UAAYxI,EACvD,IACCqM,KAAI,SAACK,GACF,OAAO,IAAI,UAAUX,EAAQW,EAAKnE,WAAYwD,EAAQW,EAAKlE,SAAUkE,EAAKtB,YAAasB,EAAKnB,mBAChG,IAEsCrL,KAAKrD,SAAUqD,KAAK9F,SAClE,EAEA,YAAAqT,QAAA,SAAQ9F,EAAcC,EAAY6C,QAAA,IAAAA,IAAAA,EAAA,GACzBvK,KAAK9F,WACNqQ,EAAS,GAGb,IAAMgC,EAAWvM,KAAKtD,MAAM+P,KAAK,IAAI,UAAUhF,EAAMC,EAAIuD,WAAWV,KACpE,OAAO,IAAI/N,EAAWwD,KAAKvD,MAAO8P,EAAUvM,KAAKrD,SAAUqD,KAAK9F,SACpE,EAEA,YAAAsT,WAAA,SAAW/F,EAAcC,EAAY6C,EAAoBkD,GAAzD,gBAAqC,IAAAlD,IAAAA,EAAA,WAAoB,IAAAkD,IAAAA,GAAA,GACtC,OAAXlD,IACAA,EAASU,WAAWV,IAGxB,IAAImD,GAAe,EACbnB,EAA4BvM,KAAKtD,MAAMiO,QAAO,SAAC6B,GAEjD,SAAIkB,GAAiBD,KAKjBjB,EAAKnE,YAAcZ,GAAQ+E,EAAKlE,UAAYZ,GAAkB,OAAX6C,GAAmBiC,EAAKtB,cAAgBX,OAM1F,EAAK5N,UACF6P,EAAKnE,YAAcX,GAAM8E,EAAKlE,UAAYb,GAAoB,OAAX8C,GAAmBiC,EAAKtB,cAAgBX,KAN/FmD,GAAe,GACR,EAYf,IAEA,OAAO,IAAIlR,EAAWwD,KAAKvD,MAAO8P,EAAUvM,KAAKrD,SAAUqD,KAAK9F,SACpE,EAEA,YAAA8C,SAAA,SAASyK,EAAcC,EAAY8D,EAAgBmC,EAAuBC,GAA1E,gBAAmD,IAAAD,IAAAA,EAAA,WAAuB,IAAAC,IAAAA,EAAA,MACtE,IAAIC,GAAa,EAEC,OAAdF,IACAA,EAAY1C,WAAW0C,IAG3B,IAAIpB,EAAWvM,KAAKtD,MAsBpB,OArBAsD,KAAKtD,MAAMG,SAAQ,SAAC2P,EAAMsB,GAClBD,KAIErB,EAAKnE,YAAcZ,GAAQ+E,EAAKlE,UAAYZ,IACzC,EAAKqG,cAAgBvB,EAAKnE,YAAcX,GAAM8E,EAAKlE,UAAYb,IAClD,OAAdkG,GAAsBnB,EAAKtB,cAAgByC,IAG3CpB,EADU,OAAVqB,EACWrB,EAASL,IAAI4B,EACpBtB,EAAKxP,SAAuB,OAAdwO,EAAqB,KAAOP,WAAWO,GACjD,CAAEoC,MAAOA,KAGNrB,EAASL,IAAI4B,EAAOtB,EAAKxP,SAAuB,OAAdwO,EAAqB,KAAOP,WAAWO,KAExFqC,GAAa,EAErB,IAEO,IAAIrR,EAAWwD,KAAKvD,MAAO8P,EAAUvM,KAAKrD,SAAUqD,KAAK9F,SACpE,EAEA,YAAA8T,YAAA,SAAYnB,GACR,YADQ,IAAAA,IAAAA,GAAA,GACJA,EACO7M,KAAKvD,MAAMwR,UAEfjO,KAAKvD,MAAM0P,KAAI,SAACW,GACnB,OAAOA,EAAKxB,SAChB,IAAG2C,SACP,EAEA,YAAAC,2BAAA,WACI,OAAOlO,KAAKvD,KAChB,EAEA,YAAA0R,2BAAA,WACI,OAAOnO,KAAKtD,KAChB,EAEA,YAAA0R,YAAA,SAAYvB,GACR,YADQ,IAAAA,IAAAA,GAAA,GACJA,EACO7M,KAAKtD,MAAMuR,UAEfjO,KAAKtD,MAAMyP,KAAI,SAACK,GACnB,OAAOA,EAAKlB,SAChB,IAAG2C,SACP,EAEA,YAAAI,iBAAA,WACI,OAAOrO,KAAKqM,QAChB,EAEA,YAAAiC,iBAAA,WACI,OAAOtO,KAAK2M,QAChB,EAEA,YAAA1F,iBAAA,WACI,IAAMsH,EAAoB,GAQ1B,OAPAvO,KAAKvD,MAAMI,SAAQ,SAAC2R,EAAGzR,GACnBwR,EAAQxR,GAAK,CACjB,IACAiD,KAAKtD,MAAMG,SAAQ,SAAC2P,GAChB+B,EAAQ/B,EAAKnE,YACjB,IAEOkG,CACX,EAEA,YAAA5J,WAAA,WACI,OAAO,IAAInI,EAAWwD,KAAKvD,MAAOuD,KAAKtD,MAAMyP,KAAI,SAACK,GAC9C,OAAOA,EAAKxP,SAAS,EACzB,IAAuBgD,KAAKrD,UAAU,EAC1C,EAEA,YAAAiI,aAAA,WACI,OAAO,IAAIpI,EAAWwD,KAAKvD,MAAOuD,KAAKtD,MAAMyP,KAAI,SAACK,GAC9C,OAAOA,EAAKxP,SAAS,EACzB,IAAuBgD,KAAKrD,UAAU,EAC1C,EAEA,YAAA8H,WAAA,SAAWgK,GACP,QADO,IAAAA,IAAAA,GAAA,IACFA,EACD,OAAO,IAAIjS,EAAWwD,KAAKvD,MAAOuD,KAAKtD,OAAO,EAAMsD,KAAK9F,UAG7D,IAAIqS,EAAWvM,KAAKtD,MAKpB,OAJAsD,KAAKtD,MAAMG,SAAQ,SAAC2P,GAChBD,EAAWA,EAASE,KAAK,IAAI,UAAUD,EAAKlE,QAASkE,EAAKnE,UAAWmE,EAAKtB,YAAasB,EAAKnB,oBAChG,IAEO,IAAI7O,EAAWwD,KAAKvD,MAAO8P,GAAU,EAAMvM,KAAK9F,SAC3D,EAEA,YAAAwK,aAAA,WACI,IAAI6H,GAA4B,UAC1BmC,EAAsC,CAAC,EAe7C,OAbA1O,KAAKtD,MAAMG,SAAQ,SAAC2P,GAChB,IAAI/E,EAAO+E,EAAKnE,UACZX,EAAK8E,EAAKlE,QACVZ,EAAKD,IACLA,EAAOC,EACPA,EAAK8E,EAAKnE,WAELZ,EAAI,IAAIC,KAAQgH,IACrBA,EAAcjH,EAAI,IAAIC,GAAQ,KAC9B6E,EAAWA,EAASE,KAAK,IAAI,UAAUhF,EAAMC,EAAI8E,EAAKtB,YAAasB,EAAKnB,qBAEhF,IAEO,IAAI7O,EAAWwD,KAAKvD,MAAO8P,GAAU,EAAOvM,KAAK9F,SAC5D,EAEA,YAAAyU,0BAAA,SAA0BhS,EAAmBzC,GACzC,IAAIsK,EAAgBxE,KAepB,OAdIrD,IAAaqD,KAAKrD,SAClB6H,EAAIA,EAAEC,cAEA9H,GAAYqD,KAAKrD,WACvB6H,EAAIA,EAAEE,gBAGNxK,IAAa8F,KAAK9F,SAClBsK,EAAIA,EAAEG,cAEAzK,GAAY8F,KAAK9F,WACvBsK,EAAIA,EAAEI,gBAGHJ,CACX,EAEA,YAAAoK,iBAAA,SAAiB9O,GAAjB,WACU+O,EAAgB,GAUtB,OATA7O,KAAKtD,MAAMG,SAAQ,SAAC2P,GACZA,EAAKnE,YAAcvI,EACnB+O,EAAIpC,KAAKD,EAAKlE,SAER,EAAK3L,UAAY6P,EAAKlE,UAAYxI,GACxC+O,EAAIpC,KAAKD,EAAKnE,UAEtB,IAEOwG,CACX,EAEA,YAAA/H,iBAAA,sBACU+H,EAAkB,GAKxB,OAJA7O,KAAKvD,MAAMI,SAAQ,SAAC+I,GAChBiJ,EAAIjJ,EAAE0H,SAAW,EAAKsB,iBAAiBhJ,EAAE0H,QAC7C,IAEOuB,CACX,EAEA,YAAAC,YAAA,SAAYC,EAAaC,GACrB,OAAOhP,KAAK4O,iBAAiBG,GAAKzR,SAAS0R,EAC/C,EAEA,YAAAC,gBAAA,SAAgBF,EAAaC,GAA7B,WACUE,EAAwB,GAC9B,OAAIH,GAAO/O,KAAKqM,UAAY2C,GAAOhP,KAAKqM,UAIxCrM,KAAKtD,MAAMG,SAAQ,SAAC2P,GACX,EAAK7P,UAAY6P,EAAKnE,YAAc2G,GAAOxC,EAAKlE,UAAYyG,GAC7DG,EAASzC,KAAKD,GAGdA,EAAKnE,YAAc0G,GAAOvC,EAAKlE,UAAY0G,GAC3CE,EAASzC,KAAKD,EAEtB,IAXW0C,CAcf,EAEA,YAAAC,wBAAA,SAAwBJ,EAAaC,GACjC,IAAII,EAAYC,IAOhB,OANArP,KAAKiP,gBAAgBF,EAAKC,GAAKnS,SAAQ,SAAC2P,GAChCA,EAAKtB,YAAckE,IACnBA,EAAY5C,EAAKtB,YAEzB,IAEOkE,CACX,EAGA,YAAAE,iBAAA,SAAiBC,EAAsDvK,GAAvE,gBAAiB,IAAAuK,IAAAA,EAA4CvD,KAAKwD,UAAK,IAAAxK,IAAAA,EAAA,KACnE,IAAMyK,EAA+B,GACrCzP,KAAKvD,MAAMI,SAAQ,SAACiQ,GAEhB,IAAM+B,EAAM,EAAKD,iBAAiB9B,EAAKQ,SACjCoC,EAAU,IAAIC,IAAId,GACpBa,EAAQpD,KAAOuC,EAAItJ,QACnBmK,EAAQ7S,SAAQ,SAAC6K,GACb,IAAM8D,EAAY,EAAKyD,gBAAgBnC,EAAKQ,QAAS5F,GAAImD,QAAO,SAAC+E,EAAKpD,GAClE,OAAO+C,EAAQK,EAAKpD,EAAKtB,YAC7B,GAAGlG,GAEHyK,EAAWhD,KAAK,CAAEhF,KAAMqF,EAAKQ,QAAS5F,GAAE,EAAE6C,OAAQU,WAAWO,IACjE,GAER,IAGA,IAAIe,EAAWvM,KAAKtD,MAAMiO,QAAO,SAAC6B,GAC9B,IAAIqD,GAAO,EAOX,OANAJ,EAAW5S,SAAQ,SAACiT,GACZtD,EAAKnE,YAAcyH,EAAcrI,MAAQ+E,EAAKlE,UAAYwH,EAAcpI,KACxEmI,GAAO,EAEf,IAEOA,CACX,IAKA,OAJAJ,EAAW5S,SAAQ,SAAC2P,GAChBD,EAAWA,EAASE,KAAK,IAAI,UAAUD,EAAK/E,KAAM+E,EAAK9E,GAAI8E,EAAKjC,QACpE,IAEO,IAAI/N,EAAWwD,KAAKvD,MAAO8P,EAAUvM,KAAKrD,SAAUqD,KAAK9F,SACpE,EAEA,YAAA6V,WAAA,WACI,OAAO/P,KAAK9F,QAChB,EAEA,YAAA6T,WAAA,WACI,OAAO/N,KAAKrD,QAChB,EACJ,EAvaA,E,mEC7GA,WAKI,WAAYmD,EAAS3B,EAA6BqM,G,uBAAlD,YAAqB,IAAArM,IAAAA,EAAA,WAA6B,IAAAqM,IAAAA,EAAA,MAE1CxK,KAAK7B,MADK,OAAVA,EACa2B,EAAGhE,WAEHqC,EAGjB6B,KAAK+K,WAAa,CAAC,EACA,OAAfP,GAA6C,iBAAfA,GAC9BC,OAAOC,KAAKF,GAAY3N,SAAQ,SAAA+N,GAC5B,EAAKG,WAAWH,GAAOH,OAAOO,OAAOR,EAAWI,GACpD,IAGJ5K,KAAK+K,WAAaN,OAAOO,OAAOhL,KAAK+K,YACrC/K,KAAK7B,MAAQsM,OAAOO,OAAOhL,KAAK7B,OAChC6B,KAAKF,GAAK2K,OAAOO,OAAOlL,GAEpB,IAAekQ,GACfvF,OAAOO,OAAOhL,KAEtB,CAgDJ,OA9CI,YAAAsL,QAAA,sBACUC,EAA2B,CAAEzL,GAAIE,KAAKF,GAAI3B,MAAO6B,KAAK7B,OAO5D,OANAsM,OAAOC,KAAK1K,KAAK+K,YAAYlO,SAAQ,SAAA+N,GAC3BA,KAAOW,IACTA,EAASX,GAAO,EAAKG,WAAWH,GAExC,IAEOW,CACX,EAEA,YAAA+B,MAAA,WACI,OAAOtN,KAAKF,EAChB,EAEA,YAAAqN,SAAA,WACI,OAAOnN,KAAK7B,KAChB,EAEA,YAAAgN,aAAA,SAAaC,GACT,OAAIA,KAAapL,KAAK+K,WACX/K,KAAK+K,WAAWK,GAGpB,IACX,EAEA,YAAAC,iBAAA,WACI,OAAOrL,KAAK+K,UAChB,EAEA,YAAAkC,SAAA,SAAS9O,EAAmBqM,QAAnB,IAAArM,IAAAA,EAAA,WAAmB,IAAAqM,IAAAA,EAAA,MACV,OAAVrM,IACAA,EAAQ6B,KAAKmN,YAIjB,IAAMpC,EAAaN,OAAOgB,OAAO,CAAC,EAAGzL,KAAK+K,YAO1C,OANmB,OAAfP,GACAC,OAAOC,KAAKF,GAAY3N,SAAQ,SAAA+N,GAC5BG,EAAWH,GAAOJ,EAAWI,EACjC,IAGG,IAAIoF,EAAUhQ,KAAKsN,QAASnP,EAAO4M,EAC9C,EACJ,EA1EA,E,g7CC8CMkF,EAAS,SAACnT,GACZ,MAAiB,iBAANA,EACAA,EAEJoT,SAASpT,EACpB,E,QAEA,wBAuTA,QA9OW,EAAAuC,YAAP,SAAmB8Q,EAAeC,QAAf,IAAAD,IAAAA,GAAA,GACf,IAAME,EAAMD,QACRE,GAAW,EACfC,EAAWC,SAAS3T,SAAQ,SAACC,GAClB,WAAYA,GAAOA,EAAE2T,UAAYJ,GAAOD,EAAaM,QAAQ5T,EAAEyD,OAAS,KAC3EzD,EAAE0T,SAAWL,EACE,aAAXrT,EAAEe,OACFyS,GAAW,GAGvB,IACIA,GACAC,EAAW3N,wBAEnB,EAEa,EAAAoD,YAAb,SAAyBsK,EAAiCK,EAA4B3J,G,YAA5B,IAAA2J,IAAAA,GAAA,QAA4B,IAAA3J,IAAAA,GAAA,G,gGAC5E1L,EAAIiV,EAAWC,SAASI,MAAK,SAAC9T,GAChC,MAAQ,SAAUA,GAAKA,EAAEyD,OAAS+P,CACtC,KACOE,SAAH,MACI,cAAelV,GAA4B,mBAAhBA,EAAEoF,WAA4BiQ,EACzD,GAAMrV,EAAEoF,UAAUsG,IADlB,M,cACA,S,aAGA,MAAO,CAAP,EAAO,M,OAGf,MAAe,UAAX1L,EAAEuC,KACK,CAAP,EAAOmB,QAAQ+G,QAAQwK,EAAWjR,MAAMgR,KAErC,CAAP,EAAOtR,QAAQ+G,QAAQwK,EAAWpR,gBAAgBmR,K,QAGzC,EAAA1N,uBAAb,SAAoCiO,G,YAAA,IAAAA,IAAAA,GAAA,G,2GAC1BpQ,EAAcxD,OAAO4B,SAASC,UAAU,aAE9CyR,EAAWpR,gBAAgB2R,SAAWP,EAAWjU,MAAM+R,mBACvDkC,EAAWpR,gBAAgBzC,MAAQ6T,EAAWjU,MAAMgS,mBAE/C7N,EAAD,MACA,GAAM8P,EAAWvK,YAAY,YAAY,GAAM,I,OAA/C,S,iBAWJ,OARMtK,EAAI+O,OAAOC,KAAK6F,EAAWpR,iBAC7B0R,GACAnV,EAAEmB,SAAQ,SAAOC,GAAC,qC,kDACd,SAAMyT,EAAWvK,YAAYlJ,GAAG,I,cAAhC,S,cAIFiU,EAA2B,CAAC,EAClC,GAAM/R,QAAQqR,IAAI3U,EAAEyQ,KAAI,SAAOrP,GAAC,qC,0DACH,OAAzB,EAAAiU,EAAoB,EAAAjU,EAAK,GAAMyT,EAAWvK,YAAYlJ,I,cAAtD,KAAyB,S,8BAD7B,SAIAyT,EAAWS,qBAAqBD,G,YAG7B,EAAAC,qBAAP,SAA4BC,GACxB,IAAIvV,EAAI,GACR+O,OAAOC,KAAKuG,GAAYpU,SAAQ,SAACqU,GACP,OAAlBD,EAAWC,KACXxV,GAAQ,UAAKyV,YAAYD,GAAE,KAAKD,EAAWC,GAAE,KAErD,IACAxV,EAAIA,EAAEmM,OACNnM,EAAI,UAAKG,WAAWH,GACpBmG,SAAS6D,eAAe,cAAeiD,UAAY,uBAAuBjN,EAAC,MAC/E,EAEe,EAAA0V,YAAf,SAA2B9U,QAAA,IAAAA,IAAAA,EAAQiU,EAAWjU,OAC1C,IAAIG,EAAQH,EAAM0R,cACdtR,EAAQJ,EAAM8R,cACbnR,OAAO4B,SAASC,UAAU,kBAC3BrC,EAAQ8T,EAAWc,oBAAoB5U,GACvCC,EAAQ6T,EAAWe,oBAAoB5U,IAE3CO,OAAOC,KAAKC,QAAQ,CAAEV,MAAK,EAAEC,MAAK,GACtC,EAEO,EAAA6Q,QAAP,SAAe9F,EAAuBC,EAAqB6C,EAAYjO,QAAZ,IAAAiO,IAAAA,EAAA,QAAY,IAAAjO,IAAAA,EAAQiU,EAAWjU,OACtF,IAAMiV,EAAWtB,EAAOxI,GAClB+J,EAASvB,EAAOvI,GACtBpL,EAAQA,EAAMiR,QAAQgE,EAAUC,EAAQjH,GACxCvK,KAAKoR,YAAY9U,EACrB,EAEO,EAAA0Q,QAAP,SAAezR,EAAgBe,QAAA,IAAAA,IAAAA,EAAQiU,EAAWjU,OAC9CA,EAAQA,EAAM0Q,QAAQ,CAAE7O,MAAO5C,EAAK4C,MAAOsT,EAAGlW,EAAKkW,EAAGC,EAAGnW,EAAKmW,EAAG9D,MAAOrS,EAAKqS,QAC7E5N,KAAKoR,YAAY9U,EACrB,EAEO,EAAA2Q,SAAP,SAAgBnN,EAAqB3B,EAAeyP,EAAgBtR,QAAA,IAAAA,IAAAA,EAAQiU,EAAWjU,OACnF,IAAMqV,EAAM1B,EAAOnQ,GACnBxD,EAAQA,EAAM2Q,SAAS0E,EAAK,CAAExT,MAAK,EAAEyP,MAAK,IAC1C3Q,OAAOC,KAAKC,QAAQoT,EAAWhU,aAAaD,IAAQ,GAAO,EAC/D,EAEO,EAAAU,SAAP,SAAgByK,EAAuBC,EACnC8D,EAAmBmC,EAAmBrR,QAAA,IAAAA,IAAAA,EAAQiU,EAAWjU,OACzD,IAAMiV,EAAWtB,EAAOxI,GAClB+J,EAASvB,EAAOvI,GAChBkK,EAAWtV,EAAMU,SAASuU,EAAUC,EAAQhG,EAAWmC,GACzDiE,aAAoB,WACpB3U,OAAOC,KAAKC,QAAQoT,EAAWhU,aAAaqV,IAAW,GAAO,EAEtE,EAEO,EAAApE,WAAP,SAAkB/F,EAAuBC,EAAqB6C,EAA4CjO,QAA5C,IAAAiO,IAAAA,EAAA,WAA4C,IAAAjO,IAAAA,EAAQiU,EAAWjU,OACzH,IAAMiV,EAAWtB,EAAOxI,GAClB+J,EAASvB,EAAOvI,GACtBpL,EAAQA,EAAMkR,WAAW+D,EAAUC,EAAQjH,GAAQ,GACnDvK,KAAKoR,YAAY9U,EACrB,EAEO,EAAA8Q,WAAP,SAAkBtN,EAAqBxD,QAAA,IAAAA,IAAAA,EAAQiU,EAAWjU,OACtD,IAAMqV,EAAM1B,EAAOnQ,GACb8R,EAAWtV,EAAM8Q,WAAWuE,GAC9BC,aAAoB,WACpB5R,KAAKoR,YAAYQ,EAEzB,EAEO,EAAAP,oBAAP,SAA2B5U,GAIvB,OAHAA,EAAMI,SAAQ,SAACC,GACXA,EAAE8Q,MAAQ,IACd,IACOnR,CACX,EAEO,EAAA6U,oBAAP,SAA2B5U,GAIvB,OAHAA,EAAMG,SAAQ,SAACC,UACJA,EAAE8Q,KACb,IACOlR,CACX,EAEO,EAAAT,cAAP,SAAqB6D,EAAYxD,QAAA,IAAAA,IAAAA,EAAQiU,EAAWjU,OAChD,IAAMsJ,EAAItJ,EAAMsQ,QAAQ9M,GAAI,GAC5B,OAAU,IAAN8F,GAAqB,OAANA,GAAcA,aAAa,WAAaA,EAAEuH,WAAWtF,OAAOtC,OAAS,EAC7EK,EAAEuH,WAAWtF,OAGjB/H,EAAGhE,UACd,EAGO,EAAAf,cAAP,SAAqBoD,EAAe7B,QAAA,IAAAA,IAAAA,EAAQiU,EAAWjU,OACnD,IAAIsJ,EAAItJ,EAAM0R,aAAY,GAK1B,GAAiB,KAJjBpI,EAAIA,EAAE+E,QAAO,SAACmC,GACV,OAAOA,EAAKK,WAAW0E,gBAAkB1T,EAAM0T,eAAiB/E,EAAKQ,QAAQxR,aAAeqC,CAChG,KAEMoH,OACF,OAAQ,EAEP,GAAiB,IAAbK,EAAEL,OACP,OAAOK,EAAE,GAAG0H,QAGhB,IAAIwE,GAAO,EACPC,GAAQ,EASZ,OAPAnM,EAAE/I,SAAQ,SAACiQ,GACFiF,GAASjF,EAAKQ,QAAQxR,aAAeqC,IACtC2T,EAAMhF,EAAKQ,QACXyE,GAAQ,EAEhB,IAEIA,IAIJnM,EAAE/I,SAAQ,SAACiQ,GACFiF,GAASjF,EAAKK,aAAehP,IAC9B2T,EAAMhF,EAAKQ,QACXyE,GAAQ,EAEhB,IAEIA,GAIJnM,EAAE/I,SAAQ,SAACiQ,GACFiF,GAASjF,EAAKK,WAAW0E,gBAAkB1T,EAAM0T,gBAClDC,EAAMhF,EAAKQ,QACXyE,GAAQ,EAEhB,KAnBWD,CAsBf,EAGO,EAAAE,kBAAP,SAAyB1V,GACrB,IAAM2V,EAAI1B,EAAWhU,aAAaD,GAYlC,OAXIA,EAAMyT,cACNkC,EAAEvV,MAAMG,SAAQ,SAACxB,GACbA,EAAE8C,MAAQ9C,EAAEkP,OAAOzO,UACvB,IAEJmW,EAAEvV,MAAMG,SAAQ,SAACxB,GACT,UAAWA,IACXA,EAAEuS,MAAQ,CAAEA,MAAOvS,EAAEuS,OAE7B,IAEO,CAAEnR,MAAO,IAAI,EAAAyV,QAAQD,EAAExV,OAAkBC,MAAO,IAAI,EAAAwV,QAAQD,EAAEvV,OACzE,EAEO,EAAAyV,aAAP,SAAoBC,EAAwD9V,QAAA,IAAAA,IAAAA,EAAQiU,EAAWjU,OAC3F,IAAIyP,EAAWzP,EAAM4R,6BAWrB,OAVAzD,OAAOC,KAAK0H,GAAWvV,SAAQ,SAACE,GAC5B,IAAMD,EAAIsV,EAAUrV,GACd+P,EAAOf,EAASgB,IAAImD,SAASnT,IAE/B+P,EAAK3B,aAAa,OAASrO,EAAE2U,GAAK3E,EAAK3B,aAAa,OAASrO,EAAE4U,IAE/D3F,EAAWA,EAASG,IAAIgE,SAASnT,GAAI+P,EAAKG,SAASH,EAAKK,WAAY,CAAEsE,EAAG3U,EAAE2U,EAAGC,EAAG5U,EAAE4U,KAE3F,IAEO,IAAI,UAAW3F,EAAUzP,EAAM6R,6BAA8B7R,EAAMyR,aAAczR,EAAMyT,aAClG,EAEO,EAAAxT,aAAP,SAAoBD,EAA0B+V,EAAyBC,QAAnD,IAAAhW,IAAAA,EAAQiU,EAAWjU,YAAO,IAAA+V,IAAAA,GAAA,QAAyB,IAAAC,IAAAA,GAAA,GACnE,IAAM7V,EAAQH,EAAM0R,cACdtR,EAAQJ,EAAM8R,cACpB,MAAO,CACH3R,MAAO4V,EAAkB9B,EAAWc,oBAAoB5U,GAASA,EACjEC,MAAO4V,EAAkB/B,EAAWe,oBAAoB5U,GAASA,EACjEC,SAAUL,EAAMyR,aAChB7T,SAAUoC,EAAMyT,aAExB,EArTc,EAAA1P,WAAgC,GAChC,EAAAkS,YAAmC,GACnC,EAAAC,eAAsC,GACtC,EAAAC,WAAa,GACb,EAAAjC,SAAiC,CAC3C,CACIjQ,KAAM,mBAAoBiQ,UAAU,EAAO3S,KAAM,WACjD6C,UAAW,WACP,OAAOzD,OAAOoM,GAAG1I,2BACrB,GAEJ,CACIJ,KAAM,gBAAiBiQ,UAAU,EAAO3S,KAAM,QAC9C6C,UAAW,WACP,OAAOzD,OAAOoM,GAAG1I,2BACrB,GAEJ,CAAEJ,KAAM,WAAYiQ,UAAU,EAAMC,QAAQ,EAAM5S,KAAM,YACxD,CAAE0C,KAAM,QAASiQ,UAAU,EAAMC,QAAQ,EAAM5S,KAAM,YACrD,CACI0C,KAAM,WAAYiQ,UAAU,EAAO3S,KAAM,WACzC6C,UAAW,SAAC3D,GACR,OAAOE,OAAOoM,GAAGtC,qBAAqBhK,EAC1C,GAEJ,CACIwD,KAAM,uBAAwBiQ,UAAU,EAAO3S,KAAM,WACrD6C,UAAW,WACPzD,OAAOoM,GAAG/I,gBAAgBsQ,MAAK,SAAC9T,GAAM,MAAW,yBAAXA,EAAEyD,IAAF,IAAoCG,WAC9E,GAEJ,CACIH,KAAM,sBAAuBiQ,UAAU,EAAO3S,KAAM,QACpD6C,UAAW,WACPzD,OAAOoM,GAAG/I,gBAAgBsQ,MAAK,SAAC9T,GAAM,MAAW,yBAAXA,EAAEyD,IAAF,IAAoCG,WAC9E,GAEJ,CACIH,KAAM,gCAAiCiQ,UAAU,EAAO3S,KAAM,WAC9D6C,UAAW,WACPzD,OAAOoM,GAAG/I,gBAAgBsQ,MAAK,SAAC9T,GAAM,MAAW,kCAAXA,EAAEyD,IAAF,IAA6CG,WACvF,GAEJ,CACIH,KAAM,8BAA+BiQ,UAAU,EAAO3S,KAAM,QAC5D6C,UAAW,WACPzD,OAAOoM,GAAG/I,gBAAgBsQ,MAAK,SAAC9T,GAAM,MAAW,kCAAXA,EAAEyD,IAAF,IAA6CG,WACvF,GAEJ,CACIH,KAAM,SAAUiQ,UAAU,EAAO3S,KAAM,WACvC6C,UAAW,WACP,OAAOzD,OAAOoM,GAAGhI,sBACrB,IAGM,EAAA/B,MAAwB,CAClCoT,4BAA6B,KAC7BC,oBAAqB,KACrBxM,cAAe,MAGL,EAAAhH,gBAAmC,CAC7C2R,SAAU,EACVpU,MAAO,EACPiK,UAAU,EACV,mBAAoB,KACpB,uBAAwB,KACxB,gCAAiC,KACjC4B,QAAQ,GAiPhB,C,CAvTA,E,iGC5DYqK,GAAZ,SAAYA,GACR,eAEH,CAHD,CAAYA,IAAAA,EAAS,KAKd,IAAIvY,EAAU,CAAC,EAGTwY,EAAc,kB,OAAA,E,OAAA,E,EAAA,W,qlCACZ,SAAM,OAAO,MAAM5V,OAAO4B,SAASC,UAAU,aAAe8T,EAAUE,OAAK,Q,cAAtFzY,EAAW,SAAmF+H,Q,qBADvE,K,+sDC8DrB2Q,EAAqB,CACvB,QAAW,UACX,IAAO,MACP,OAAU,SACV,OAAU,SACV,MAAS,QACT,KAAQ,OACR,MAAS,QACT,KAAQ,OACR,KAAQ,OACR,KAAQ,OACR,KAAQ,OACR,QAAW,UACX,OAAU,UAGRC,EAAc,CAChBhV,WAAY,UACZ4L,UAAW/H,SAAS6D,eAAe,WAEnCuN,kBAAmB,SAAC1X,EAA2B2X,GAC3C,UAAKxY,eAAc,SAACC,EAAQ2J,GACxB4O,EAAS,MACTvY,EAAOE,MAAM,QACb,IAAMsV,EAAQlF,WAAW3G,EAAK,IAC9B,UAAWtH,SAASzB,EAAKkM,KAAK3H,GAAIvE,EAAKmM,GAAG5H,GAAIqQ,EAAOlF,WAAW1P,EAAK4C,OACzE,GAAG,UAAkBgV,SAAU,UAAkBrO,KAAM,UAAkB5G,OAAQ,CAC7E,CACIL,KAAM,UACNM,MAAO,UAAkBiV,eACzBpO,aAAciG,WAAW1P,EAAK4C,SAG1C,EACAmL,WAAY,CACR+J,YAAa,CAAEC,OAAO,GACtBC,aAAc,CACVvG,QAAS,SAAOzR,EAAM2X,GAAQ,0C,0EAKmD,OAJvEM,EAAevW,OAAO4B,SAASC,UAAU,gB,GAGvCjB,KAAM,Q,QACc,gBAAKlC,kB,GAAkB,UAAkB8X,QAAQ,GAAM,UAAWzN,YAAY,a,OAEnC,O,IAF/D,EAAAhB,aAAc,EAAM,oBAAiD,YAAyC,O,OAEhHnH,KAAM,OAAQM,MAAO,UAAkBuV,YAA0B,GAAM,UAAW1N,YAAY,a,cAL9F2N,EAAO,WAK4C,EAAA3O,aAAc,SAAwC,KAE3GwO,GACAG,EAAQlH,KAAK,CAAE5O,KAAM,SAAUM,MAAO,UAAkByV,MAAOC,WAAYpJ,OAAOC,KAAKqI,GAAqBe,aAAcrJ,OAAO7P,OAAOmY,MAEtIgB,EAAS,UAAKC,cAAc,UAAkBC,QAAS,UAAkBnP,KAAM,UAAkB5G,OAAQyV,IAExGO,GAAG,QAAS,gBAAgB,WAC/BH,EAAOlZ,MAAM,QACbmY,EAAKmB,SAAS5Y,EAAM2X,EAAU,MAAOa,EAAOnD,KAAK,SAASwD,QAAQC,MAAiBN,EAAOnD,KAAK,UAAUwD,QAAQC,MACrH,IAAGH,GAAG,QAAS,eAAe,WAC1BH,EAAOlZ,MAAM,QACbmY,EAAKsB,WAAWpB,EACpB,IAAGgB,GAAG,mBAAmB,WACrBH,EAAOQ,SACPvB,EAAKsB,WAAWpB,EACpB,IAAGrY,MAAM,Q,YAEboS,SAAU,SAAC1R,EAAM2X,GACb,IAAMM,EAAevW,OAAO4B,SAASC,UAAU,gBACzC0V,EAAe/J,OAAOgK,oBAAoBlZ,EAAKqS,OAAOtQ,SAAS,cAAiB/B,EAAKqS,MAAc8G,WAAa,UAEhHf,EAA0B,CAC5B,CACI9V,KAAM,OACNmH,aAAc,MAAM,UAAKrJ,kBAAkB,UAAkB8X,OAAQlY,EAAKuE,GAAK,IAAG,QAEtF,CAAEjC,KAAM,OAAQM,MAAO,UAAkBuV,WAAY1O,aAAczJ,EAAK4C,QAExEqV,GACAG,EAAQlH,KAAK,CAAE5O,KAAM,SAAUM,MAAO,UAAkByV,MAAOC,WAAYpJ,OAAOC,KAAKqI,GAAqBe,aAAcrJ,OAAO7P,OAAOmY,GAAqB/N,aAAcwP,IAE/K,IAAMT,EAAS,UAAKC,cAAc,UAAkBW,SAAU,UAAkB7P,KAAM,UAAkB5G,OAAQyV,GAEhHI,EAAOG,GAAG,QAAS,gBAAgB,WAC/BH,EAAOlZ,MAAM,QACbmY,EAAKmB,SAAS5Y,EAAM2X,EAAU,WAAYa,EAAOnD,KAAK,SAASwD,QAAQC,MAAiBN,EAAOnD,KAAK,UAAUwD,QAAQC,MAC1H,IAAGH,GAAG,QAAS,eAAe,WAC1BH,EAAOlZ,MAAM,QACbmY,EAAKsB,WAAWpB,EACpB,IAAGgB,GAAG,mBAAmB,WACrBH,EAAOQ,SACPvB,EAAKsB,WAAWpB,EACpB,IAAGrY,MAAM,OACb,EACA0S,QAAS,SAAChS,EAAM2X,IAOR3X,EAAKkM,OAASlM,EAAKmM,IACfkN,QAAQ,UAAkBC,oCANN,mBAAb3B,GACPA,EAAS,MAEb,UAAW3F,QAAQhS,EAAKkM,KAAMlM,EAAKmM,IAU3C,EACA1K,SAAU,SAACzB,EAAM2X,GACbA,EAAS,MACTF,EAAK1J,WAAWiK,aAAa/F,WAAW,CAAE9Q,MAAO,CAACnB,EAAKuE,MACvDkT,EAAK1J,WAAWiK,aAAahG,QAAQhS,EACzC,EACAiS,WAAY,SAACjS,EAAM2X,GACS,mBAAbA,GACPA,EAAS,MAEb3X,EAAKmB,MAAMG,SAAQ,SAACC,GAChB,IAAIyN,EAAS,KACPiC,EAAQvP,OAAOyM,QAAgBoL,KAAKvZ,KAAKmB,MAAMqQ,IAAIjQ,GACnDiY,EAAkBvI,EAAKrO,WACE,IAApB4W,IACPxK,EAASU,WAAW8J,IAGxB,UAAWvH,WAAWhB,EAAK/E,KAAM+E,EAAK9E,GAAI6C,EAC9C,GACJ,EACA6C,WAAY,SAAC7R,EAAM2X,GACfA,EAAS,MACT3X,EAAKkB,MAAMI,SAAQ,SAACC,GAChB,UAAWsQ,WAAWtQ,EAC1B,GACJ,IAIRwX,WAAY,SAACpB,GACe,mBAAbA,GACPA,EAAS,KAEjB,EAEAiB,SAAU,SAAO5Y,EAAM2X,EAAU8B,EAAW7W,EAAOyP,GAAK,0C,kCACpDsF,EAAS,MAET3X,EAAK4C,MAAQA,EACb5C,EAAKqS,MAAQA,EACC,YAAVA,IACArS,EAAKqS,WAAQqH,GAEC,QAAdD,EACA,UAAWhI,QAAQzR,GAEA,aAAdyZ,GACL,UAAW/H,SAAS1R,EAAKuE,GAAIvE,EAAK4C,MAAO5C,EAAKqS,O,WAItDtP,qBAAsB,SAACxB,GACnB,OAAI,UAAW/B,cAAc+B,IAAM,GAG5B,UAAkBoY,gBAC7B,EAEAxO,YAAa,qD,8DACT,OAAIzJ,OAAO4B,SAASC,UAAU,aAC1B,IAEgB,GAAM,UAAWkH,YAAY,iBAAiB,I,OAC1C,OADlBmP,EAAc,SACI,GAAM,UAAWnP,YAAY,oBAAoB,I,cAAnEC,EAAkB,SAElBC,EAAS,IAAY,CAAE9G,MAAO6G,EAAiBmP,WAAY,WAC7D5Q,EAAI,UAAWlI,OAChB0R,cAAmCnR,SAAQ,SAACC,GAC3C0H,EAAIA,EAAEyI,SAASnQ,EAAEgD,GAAI,CAAE8N,MAAO1H,EAAOiP,EAAYrY,EAAEgD,MACvD,IACAkT,EAAK7V,QAAQ,UAAWZ,aAAaiI,IAAI,GAAO,G,YAGpDrH,QAAS,SAAC5B,EAAM8Z,EAAqBC,EAAqBC,QAA1C,IAAAF,IAAAA,GAAA,QAAqB,IAAAC,IAAAA,GAAA,QAAqB,IAAAC,IAAAA,GAAA,GAElDA,GACAha,EAAKkB,MAAMI,SAAQ,SAACC,UACTA,EAAE2U,SACF3U,EAAE4U,CACb,IAGA4D,GACAtC,EAAKwC,YAGL,aAAcja,QAAiC,IAAlBA,EAAKoB,UAClCM,OAAO4B,SAAS0F,aAAa,YAAahJ,EAAKoB,UAE/C,aAAcpB,QAAiC,IAAlBA,EAAKrB,UAClC+C,OAAO4B,SAAS0F,aAAa,UAAWhJ,EAAKrB,UAEjD,IAAMuG,EAAcxD,OAAO4B,SAASC,UAAU,aACxC5E,EAAW+C,OAAO4B,SAASC,UAAU,WAErC2W,EAAI,IAAI,UAAWla,EAAKkB,MAAOlB,EAAKmB,MAAO+D,EAAavG,GAC9D,UAAWoC,MAAQmZ,EAGnBzC,EAAK0C,2BAA2BzY,OAAOyM,SACvCzM,OAAOyM,QAAQvM,QAAQ,UAAW6U,kBAAkByD,IACpD,UAAWnZ,MAAQ,UAAW6V,aAAalV,OAAOyM,QAAQiM,gBAE1D1Y,OAAOyM,QAAQkM,kBACf3Y,OAAOyM,QAAQmM,iBAEXP,IACArY,OAAOoM,GAAG5N,uBACVwB,OAAOoM,GAAG7O,UAAY,CAAC,EACvByC,OAAOoM,GAAGjE,yBACVnI,OAAOoM,GAAGZ,uBACV,UAAKpL,SAAS,IACd,UAAWgC,cACX,UAAWuD,uBAAuByS,IAGtCrC,EAAK8C,uBACT,EAEAN,UAAW,WACkB,OAArB,UAAWlZ,QAIX,UAAWiW,YAAYhN,QAAU,UAAWkN,YAC5C,UAAWF,YAAYwD,QAG3B,UAAWxD,YAAY9F,KAAKuG,EAAKgD,qBACjC,UAAWxD,eAAiB,GAC5B3Q,SAASoU,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAenN,UAAUC,IAAI,UACvG,EAEA+M,kBAAmB,WACf,IAAM1W,EAAa,CAAC,EAkBpB,OAjBAmL,OAAOC,KAAK,WAAY7N,SAAQ,SAACqU,GAC7B,IAAMpU,EAAU,UAAmBoU,GAClB,mBAANpU,IACU,iBAANA,EACPwC,EAAM4R,GAAKpU,GAGD,UAANoU,GAAuB,OAANpU,IACjBwC,EAAM4R,GAAKpU,GAEVoU,EAAEW,cAAcvU,SAAS,aAC1BgC,EAAM4R,GAAK,UAAKkF,UAAS,EAAMC,MAAMC,QAAQxZ,GAAK,GAAK,CAAC,EAAGA,KAI3E,IAEOwC,CACX,EAEAoD,KAAM,WACE,UAAW6P,YAAYhN,OAAS,GAChCyN,EAAK1I,YAAW,EAExB,EAEA3H,KAAM,WACE,UAAW6P,eAAejN,OAAS,GACnCyN,EAAK1I,YAAW,EAExB,EAEAA,WAAY,SAAC5H,EAAa6T,QAAb,IAAA7T,IAAAA,GAAA,QAAa,IAAA6T,IAAAA,EAAA,MACtB,IAAMC,EAAyB,OAAbD,EACZE,EAAezD,EAAKgD,oBAErBQ,IAEGD,EADA7T,EACW,UAAW6P,YAAYmE,MAGvB,UAAWlE,eAAekE,OAK7CH,EAASja,MAAQ,IAAI,UAAWia,EAASja,MAAMG,MAAO8Z,EAASja,MAAMI,MAAO6Z,EAASja,MAAMK,SAAU4Z,EAASja,MAAMpC,UAEpH+C,OAAO4B,SAAS0F,aAAa,YAAagS,EAAUja,MAAMyR,cAC1D9Q,OAAO4B,SAAS0F,aAAa,UAAWgS,EAAUja,MAAMyT,cAExD,UAAWzT,MAAQia,EAAUja,MAE7BW,OAAOyM,QAAQvM,QAAQ,UAAW6U,kBAAkB,UAAW1V,QAC/DW,OAAOyM,QAAQkM,kBACf3Y,OAAOyM,QAAQmM,iBAEf5Y,OAAOoM,GAAGZ,uBACV,UAAKpL,SAAS,IAEdoN,OAAOC,KAAK6L,GAAW1Z,SAAQ,SAACqU,GAC5B,IAAMpU,EAAIyZ,EAAUrF,GACH,iBAANpU,EACN,UAAmBoU,GAAKpU,EAEnBoU,EAAEW,cAAcvU,SAAS,YAAkC,UAApB4T,EAAEW,gBACvB,aAApBX,EAAEW,cACFpH,OAAOC,KAAM,UAAmBwG,IAAIrU,SAAQ,SAAC8Z,GACxC,UAAmBzF,GAAGyF,GAAQnG,SAAY1T,EAAU6Z,GAAQnG,QACjE,IAGC,UAAmBU,GAAK,UAAKkF,UAAS,EAAO,UAAmBlF,GAAIpU,GAGjF,IAEA,UAAW8F,yBAAyBwG,MAAK,WACjC1G,IAAS8T,GACT3U,SAASoU,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAenN,UAAUC,IAAI,UAC7D,IAAlC,UAAWsJ,YAAYhN,QACvB1D,SAASoU,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAenN,UAAUuL,OAAO,UAE1G,UAAW/B,eAAe/F,KAAKgK,IAEzB/T,GAAS8T,IACf3U,SAASoU,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAenN,UAAUC,IAAI,UAC1D,IAArC,UAAWuJ,eAAejN,QAC1B1D,SAASoU,uBAAuB,aAAcC,KAAK,GAAIC,cAAeA,cAAenN,UAAUuL,OAAO,UAE1G,UAAWhC,YAAY9F,KAAKgK,IAGhCzD,EAAK8C,uBACT,GACJ,EAEAA,sBAAuB,WACf7Y,OAAO4B,SAASmL,wBAChBE,aAAa0M,QAAQ,4BAA6BjX,KAAKC,UAAUoT,EAAKgD,qBAE9E,EAEAnT,qBAAsB,WAClBmQ,EAAK7V,QAAQ,CACTV,MAAO,UAAWH,MAAM0R,cACxBtR,MAAO,UAAWJ,MAAM8R,gBACzB,GAAO,GAAO,EACrB,EAEAsH,2BAA4B,SAAChM,GACzB,IAAMmN,EAAI7K,KAAK8K,MAAsB,IAAhB9K,KAAK+K,UAC1BrN,EAAQsN,aAAaC,WAAaJ,EAClCnN,EAAQsN,aAAaE,kBAAoBL,CAC7C,EAEA/M,oBAAqB,SAACJ,GAElBA,EAAQwK,GAAG,eAAe,SAACxY,GACnBuB,OAAO4B,SAASC,UAAU,YAAc,UAAWpD,GAAwB,IAAnBA,EAAEgB,MAAM6I,QAChEmE,EAAQyN,eAER,UAAWzb,GAAwB,IAAnBA,EAAEe,MAAM8I,SACxB6R,EAAwB,KACxB1N,EAAQuD,WAEhB,IAGAvD,EAAQwK,GAAG,WAAW,WAClB,UAAW5X,MAAQ,UAAW6V,aAAazI,EAAQiM,gBACnD3C,EAAK8C,uBACT,IAGA,IAAIsB,EAAsC,KAC1C1N,EAAQwK,GAAG,SAAS,SAACmD,GACjBD,EAAwBC,CAC5B,IAGAxV,SAASE,iBAAiB,SAAS,SAAC6I,GAChB,WAAZA,EAAIA,KAA8C,OAA1BwM,GACpBpE,EAAKpJ,UAAU0N,SAAUF,EAA8BC,MAAME,UACxD,UAAWH,GAAyE,IAA/CA,EAA8B1a,MAAM6I,QACtE,UAAW6R,GAAyE,IAA/CA,EAA8B3a,MAAM8I,SAC7EmE,EAAQ8N,gBAIxB,IAGA3V,SAASE,iBAAiB,WAAW,SAAC1G,GACL,MAAxBA,EAAEuP,IAAIiH,eAAyBxW,EAAEoc,SAAqC,MAAxBpc,EAAEuP,IAAIiH,eAAyBxW,EAAEoc,SAAWpc,EAAEqc,SAC7F1E,EAAKrQ,OAEwB,MAAxBtH,EAAEuP,IAAIiH,eAAyBxW,EAAEoc,SACtCzE,EAAKtQ,MAEb,IAGAb,SAASE,iBAAiB,SAAS,SAAC1G,GAC5B2X,EAAKpJ,YAAcvO,EAAEkc,QAAWvE,EAAKpJ,UAAU0N,SAASjc,EAAEkc,UAC1DH,EAAwB,KAEhC,GACJ,GAIJ,S,mEC3dA,wBAoEA,QA5DkB,EAAApN,qBAAd,WACI,IACI,IAAMyH,EAAI,mBAGV,OAFAvH,aAAa0M,QAAQnF,EAAGA,GACxBvH,aAAayN,WAAWlG,IACjB,C,CACT,MAAOpW,GACL,OAAO,C,CAEf,EAEc,EAAAuc,aAAd,WACQC,EAAS7N,wBACTE,aAAa0M,QAAQ,2BAA4BjX,KAAKC,UAAUiY,EAASxd,SAEjF,EAEc,EAAAwP,aAAd,WACI,GAAIgO,EAAS7N,uBAAwB,CACjC,IAAMnL,EAAWqL,aAAaC,QAAQ,4BAElC0N,EAASxd,QADI,OAAbwE,EACmBA,EAEAc,KAAK0K,MAAMxL,E,CAGb,OAArBgZ,EAASxd,UACTwd,EAASxd,QAAU,CAAC,GAExBwd,EAASC,QACb,EAEc,EAAAA,OAAd,WACI7a,OAAOyM,QAAQqO,WAAW,CAAEtb,MAAO,CAAEub,QAASH,EAAS/Y,UAAU,kBACjE7B,OAAOyM,QAAQqO,WAAW,CAAErb,MAAO,CAAEub,OAAQ,CAAEvQ,GAAImQ,EAAS/Y,UAAU,iBAClE+Y,EAAS/Y,UAAU,WACnB7B,OAAOyM,QAAQqO,WAAW,CACtBxE,aAAc,CACVvW,SAAU,CACNkb,gBAAiBjb,OAAOC,KAAK+V,sBAKzChW,OAAOyM,QAAQqO,WAAW,CAAExE,aAAc,CAAEvW,SAAUC,OAAOC,KAAKoM,WAAWiK,aAAavW,WAElG,EAEc,EAAAuH,aAAd,SAA2B4T,EAAgBhI,GACvC0H,EAASxd,QAAQ8d,GAAUhI,EAC3B0H,EAASD,eACTC,EAASC,QACb,EAEc,EAAAhZ,UAAd,SAAwBqZ,GACpB,OAAIA,KAAUN,EAASxd,QACZwd,EAASxd,QAAQ8d,GAErBN,EAASO,SAASD,EAC7B,EAlEwB,EAAAC,SAAyB,CAC7CC,aAAa,EACbC,WAAW,EACXC,SAAS,GAEE,EAAAle,QAAe,CAAC,EA8DnC,C,CApEA,E,wECkBMme,EAAkB,SAAC7d,GACrBA,EAAOE,MAAM,OACjB,EAEMmY,EAAO,CACToD,SAAA,SAASqC,EAAeC,EAAYC,GAChC,IAmBIhF,EACApT,EACAqY,EACAC,EAtBEC,EAAgB,SAAChO,GACnB,IAAKA,GAAiC,oBAA1B,CAAC,EAAEhP,SAASid,KAAKjO,GACzB,OAAO,EAGX,IAAIkO,EAAQvO,OAAOwO,eAAenO,GAElC,IAAKkO,EACD,OAAO,EAIX,IAAIE,EAAO,CAAC,EAAEC,eAAeJ,KAAKC,EAAO,gBAAkBA,EAAMI,YACjE,MACoB,mBAATF,GACP,CAAC,EAAEC,eAAerd,SAASid,KAAKG,KAAU,CAAC,EAAEC,eAAerd,SAASid,KAAKtO,OAElF,EAMI8M,EAAS8B,UAAU,IAAM,CAAC,EAC1Btc,EAAI,EACJwI,EAAS8T,UAAU9T,OAqBvB,IAlBsB,kBAAXgS,IACPkB,EAAOlB,EAGPA,EAAS8B,UAAUtc,IAAM,CAAC,EAC1BA,KAIkB,iBAAXwa,GAAyC,mBAAXA,IACrCA,EAAS,CAAC,GAGVxa,IAAMwI,IACNgS,EAASvX,KACTjD,KAGGA,EAAIwI,EAAQxI,IAEf,GAAgC,OAA3B4W,EAAU0F,UAAUtc,IAErB,IAAKwD,KAAQoT,EACTiF,EAAMrB,EAAOhX,GAITgX,KAHJoB,EAAOhF,EAAQpT,MAQXkY,GAAQE,IAASG,EAAcH,KAAUE,EAAcxC,MAAMC,QAAQqC,MACjEE,GACAA,GAAc,EACdH,EAAQE,GAAOvC,MAAMC,QAAQsC,GAAOA,EAAM,IAE1CF,EAAQE,GAAOE,EAAcF,GAAOA,EAAM,CAAC,EAI/CrB,EAAOhX,GAAQyS,EAAKoD,SAASqC,EAAMC,EAAOC,SAG1B1D,IAAT0D,IACPpB,EAAOhX,GAAQoY,IAO/B,OAAOpB,CACX,EAEA+B,WAAY,SAAmBC,GAc3B,OAbA9O,OAAOO,OAAOuO,GAEd9O,OAAOgK,oBAAoB8E,GAAG1c,SAAQ,SAAC2c,IAE/BD,EAAEJ,eAAeK,IACI,OAApBD,EAAUC,IACkB,iBAApBD,EAAUC,IAAkD,mBAApBD,EAAUC,IAC1D/O,OAAOgP,SAAUF,EAAUC,KAE5BxG,EAAKsG,WAAYC,EAAUC,GAEnC,IAEOD,CACX,EAEAG,KAAM,SAAIC,EAAUC,GAChB,O,qLAAO,CAAID,GAAKD,KAAKE,EACzB,EAEAC,eAAgB,SAACC,EAASlP,GACtB,IAAMiM,EAAW,GAIjB,OAHAiD,EAAGjd,SAAQ,SAACC,GACR+Z,EAAEpK,KAAK3P,EAAE8N,GACb,IACOoI,EAAKsG,WAAWzC,EAC3B,EAEAkD,aAAc,SAAIJ,EAAUjP,GAUxB,OATAiP,EAAMA,EAAIvc,SACNP,SAAQ,SAACC,GACC2N,OAAOC,KAAK5N,GACpBD,SAAQ,SAAA+N,GACFF,EAAKgG,QAAQ9F,GAAO,UACb9N,EAAE8N,EAEjB,GACJ,IACOoI,EAAKsG,WAAWK,EAC3B,EAEAK,iBAAkB,SAACC,GACf,OAAOA,EAASC,MAAM,KAAKC,QAAQ,GAAG,EAC1C,EAEAte,WAAY,SAACue,GACT,IAAMC,EAAIxY,SAASkH,cAAc,YAGjC,OAFAsR,EAAEC,YAAcF,EACPC,EAAE1R,UAAU4R,QAAQ,kBAAmB,QAEpD,EAEAld,SAAU,SAACmd,EAAcC,GACjBA,IACAD,EAAOxH,EAAKnX,WAAW4e,IAE3B5Y,SAAS6D,eAAe,YAAaiD,UAAY6R,CACrD,EAEAhb,QAAS,SAAI2M,GACT,IAAM0K,EAAS,GAIf,OAHApM,OAAOC,KAAKyB,GAAKtP,SAAQ,SAAAE,GACrB8Z,EAAEpK,KAAKN,EAAIpP,GACf,IACOiW,EAAKsG,WAAWzC,EAC3B,EAEAhX,OAAQ,SAACsM,GACL,IAAM0K,EAAS,CAAC,EAQhB,OAPApM,OAAOC,KAAKyB,GAAKtP,SAAQ,SAAAE,GACjBoP,EAAIpP,KAAM8Z,EACVA,EAAE1K,EAAIpP,IAAI0P,KAAK1P,GAEf8Z,EAAE1K,EAAIpP,IAAM,CAACA,EAErB,IACOiW,EAAKsG,WAAWzC,EAC3B,EAEA6D,IAAK,SAACC,GACF,OAAOA,EAAS9P,QAAO,SAACvP,EAAGsf,GACvB,OAAO5O,KAAK0O,IAAIpf,EAAGsf,EACvB,GACJ,EAEAzJ,YAAa,SAAC0J,GACV,OAAOA,EAAIN,QAAQ,eAAe,SAAAO,GAC9B,OAAOA,EAAMC,aACjB,GACJ,EAEApf,kBAAmB,SAACkf,G,IAAa,wDAC7B,OAAOG,EAAanQ,QAAO,SAACwJ,EAAK4G,EAAale,GAC1C,OAAOsX,EAAIkG,QAAQ,KAAIxd,EAAI,GAAKke,EACpC,GAAGJ,EACP,EAEAtd,gBAAiB,SAACvD,EAAe8a,GAC7B9B,EAAKtY,cAAc,KAAMV,EAAO,KAAM,KAAM,CAAC,CAAE6D,KAAM,OAAQmH,aAAc8P,IAAS,MAAM,EAC9F,EAEAd,cAAe,SAACha,EAAekhB,EAA4BC,EAA2BC,EAAsBC,QAAA,IAAAA,IAAAA,GAAA,GACxG,IAAMC,EAAI,EAAE,QAAS,CAAEC,MAAO,0BAC9BH,EAAKve,SAAQ,SAAC2e,EAASze,GACb,iBAAkBye,IACpBA,EAAQxW,aAAe,IAG3B,IAAIlF,EAAK,cAAgB/C,EACrB,OAAQye,GAA0B,KAAfA,EAAQ1b,IAA4B,OAAf0b,EAAQ1b,IAAqC,iBAAf0b,EAAQ1b,KAC9EA,EAAK0b,EAAQ1b,IAGjB,IAAM2b,EAAyB,CAAEF,MAAO,eAAgBzb,GAAE,EAAEqQ,MAAOqL,EAAQxW,cAEvE,eAAgBwW,GAChB/Q,OAAOC,KAAK8Q,EAAQhR,YAAY3N,SAAQ,SAAA6e,GACQ,mBAAjCF,EAAQhR,WAAWkR,KAC1BD,EAASC,GAAYF,EAAQhR,WAAWkR,GAEhD,IAGJ,IAAIC,EAA8C,WAAM,UACpD,mBAAoBH,GAA6C,mBAA3BA,EAAQnd,iBAC9Csd,EAAYH,EAAQnd,gBAGxB,IAAMud,EAAmB,SAACvE,EAAYwE,QAAA,IAAAA,IAAAA,EAAA,MAClC,IAAMC,EAAK,EAAEzE,EAAME,QACflD,EAAMyH,EAAGzH,MACQ,OAAjBwH,GAAiD,mBAAjBA,IAChCxH,EAAMwH,EAAaxH,IAEvB,IAAM0H,EAAQJ,EAAWtH,EAAKyH,IAEhB,IAAVC,EACAD,EAAGE,YAAY,cACVC,KAAK,aAAelf,GACpBwX,UAELuH,EAAGI,SAAS,cAC6B,IAArCJ,EAAGG,KAAK,aAAelf,GAAGwI,QAC1BuW,EAAGK,MAAM,EAAE,QAAS,CAAEZ,MAAO,mBAAoBzb,GAAI,YAAc/C,IAAKyd,KAAKuB,IAGzF,EAEA,GAAqB,SAAjBP,EAAQ3d,KACRyd,EAAEc,OAAO,EAAEZ,EAAQxW,oBAChB,GAAqB,aAAjBwW,EAAQ3d,KACf4d,EAAS5d,KAAO,WAChB4d,EAASF,MAAQ,0BACVE,EAAStL,MACZqL,EAAQxW,eACRyW,EAASY,QAAU,IAGvBf,EAAEc,OACE,EAAE,QAAS,CAAEb,MAAO,eAAgBa,OAChC,EAAE,UAAW,CAAEE,IAAKxc,EAAIyb,MAAO,qBAC1Bf,KAAKgB,EAAQrd,OACboe,QAAQ,EAAE,UAAWd,WAMlC,GAFAH,EAAEc,OAAO,EAAE,UAAW,CAAEE,IAAKxc,EAAIyb,MAAO,mBAAoBf,KAAKgB,EAAQrd,QAEpD,WAAjBqd,EAAQ3d,KAAmB,CACvB,iBAAkB2d,IAAoC,IAAzBA,EAAQgB,eACrCf,EAASF,OAAS,gBAEtB,IAAMkB,EAAK,EAAE,WAAYhB,GAAUjB,KAAKgB,EAAQxW,cAC5C,YAAawW,GAAsC,mBAApBA,EAAQkB,SACvCD,EAAGvI,GAAG,QAASsH,EAAQkB,SAE3BpB,EAAEc,OAAOK,E,MACN,GAAqB,YAAjBjB,EAAQ3d,KACf4d,EAAS5d,KAAO,SAChByd,EAAEc,OACE,EAAE,UAAWX,GAAUvH,GAAG,iBAAiB,SAAA7Y,GACvCugB,EAAiBvgB,EAAG4P,WACxB,UAED,GAAqB,SAAjBuQ,EAAQ3d,KACf4d,EAAS5d,KAAO,OAChByd,EAAEc,OAAO,EAAE,UAAWX,GAAUvH,GAAG,gBAAiB0H,SACjD,GAAqB,SAAjBJ,EAAQ3d,KACf4d,EAAS5d,KAAO,OAChB4d,EAASF,MAAQ,iCACjBD,EAAEc,OAAO,EAAE,UAAWX,GAAUvH,GAAG,gBAAiB0H,SACjD,GAAqB,aAAjBJ,EAAQ3d,KACT4e,EAAK,EAAE,aAAchB,GAAUvH,GAAG,gBAAiB0H,GACrD,YAAaJ,GACbiB,EAAGvI,GAAG,QAASsH,EAAQkB,SAE3BpB,EAAEc,OAAOK,QACN,GAAqB,WAAjBjB,EAAQ3d,KAAmB,CAClC,IAAM,EAAW,EAAE,WAAY4d,GAC/BD,EAAQ3H,WAAYhX,SAAQ,SAAC8f,EAAOC,GAChC,GAAIA,EAASpB,EAAQ1H,aAAcvO,OAAQ,CACvC,IAAIsX,GAAW,EACXrB,EAAQxW,eAAiBwW,EAAQ1H,aAAc8I,KAC/CC,GAAW,GAEf,EAAST,OAAO,EAAE,WAAY,CAAEjM,MAAOqL,EAAQ1H,aAAc8I,GAASC,SAAQ,IAAIrC,KAAKmC,G,MAEnFE,GAAW,EACXrB,EAAQxW,eAAiB2X,IACzBE,GAAW,GAEf,EAAST,OAAO,EAAE,WAAY,CAAES,SAAQ,IAAIrC,KAAKmC,GAEzD,IACArB,EAAEc,OAAO,EAASlI,GAAG,gBAAiB0H,G,CAGlD,IAEA,IAAIkB,EAAsC,EAAE,QAAS,CAAEvB,MAAO,iBACzDa,OAAO,EAAE,WAAY,CAAEb,MAAO,kBAAmB1d,KAAM,WAAY2c,KAAKU,IACxEkB,OAAO,EAAE,WAAY,CAAEb,MAAO,4BAA6B1d,KAAM,WAAY2c,KAAKW,KAExE,IAAXE,IACAyB,EAAU,MAGd,IAAMniB,EAAS,EAAE,QAAS,CAAE4gB,MAAO,aAAcwB,SAAU,KAAMC,KAAM,SAAU,cAAe,SAoChG,OAnCAriB,EAAOyhB,OACH,EAAE,QAAS,CAAEb,MAAO,iBAAkBa,OAClC,EAAE,QAAS,CAAEb,MAAO,kBACfa,OACG,EAAE,QAAS,CAAEb,MAAO,iBACfa,OAAO,EAAE,OAAQ,CAAEb,MAAO,gBAAiBf,KAAKxgB,IAChDoiB,OACG,EAAE,WAAY,CACVb,MAAO,QACP,eAAgB,QAChB,aAAc,UACfa,OAAO,EAAE,SAAU,CAAE,cAAe,SAAUa,KAAK,cAGjEb,OAAOd,GACPc,OAAOU,KAGpBniB,EACKiW,KAAK,mBACLsM,IAAI,SACJhJ,GAAG,SAAS,SAAA7Y,GACK,UAAVA,EAAEuP,KACF,EAAE,gBACGuS,OACAC,QAAQ,QAErB,IACJziB,EAAOuZ,GAAG,kBAAkB,WACxBvZ,EACKiW,KAAK,sDACLwD,QACAgJ,QAAQ,QACjB,IAEOziB,CACX,EAEAD,cAAe,SACX2iB,EACArjB,EACAkhB,EACAC,EACAC,EACAkC,EACAjC,QADA,IAAAiC,IAAAA,EAAA,QACA,IAAAjC,IAAAA,GAAA,GAEA,IAAM1gB,EAASqY,EAAKgB,cAAcha,EAAOkhB,EAAaC,EAAYC,EAAMC,GAExE1gB,EACKuZ,GAAG,QAAS,eAAe,WACA,mBAAboJ,EACPA,EAAS3iB,GAETA,EAAOE,MAAM,OAErB,IACCqZ,GAAG,QAAS,gBAAgB,WACzBvZ,EAAOE,MAAM,OACjB,IACCqZ,GAAG,QAAS,gBAAgB,WACzB,IAAM5P,EAAc,GAChBiZ,GAAY,EAEhB5iB,EAAOiW,KAAK,2BAA2B4M,MAAK,SAACzgB,EAAGD,GAC5C,IAAMgf,EAAK,EAAEhf,GAEe,WAAvBgf,EAAW2B,QACZnZ,EAAKmI,KAAKqP,EAAGlL,KAAK,aAAayD,OACJ,aAApByH,EAAG4B,KAAK,QACfpZ,EAAKmI,KAAKqP,EAAGtC,KAAK,YACS,SAApBsC,EAAG4B,KAAK,QACfpZ,EAAKmI,KAAMqP,EAAG/O,IAAI,GAAW4Q,OACF,WAApB7B,EAAG4B,KAAK,QACfpZ,EAAKmI,KAAKxB,WAAW6Q,EAAGzH,QAExB/P,EAAKmI,KAAKqP,EAAGzH,OAGbyH,EAAGsB,QAAQ,YAAYQ,SAAS,gBAChCL,GAAY,EAEpB,IAEKA,GAAkC,mBAAdF,GACrBA,EAAU1iB,EAAQ2J,EAE1B,IACC4P,GAAG,mBAAmB,WACK,mBAAboJ,GACPA,EAAS3iB,GAEbA,EAAO4Z,QACX,IACC1Z,MAAM,OACf,GAGJ,S,2DCjbA,SACIgM,6BAA8B,SAACgX,GAE3B,IAAMtP,EAAoB,GAkB1B,OAjBAsP,EAAgBhhB,SAAQ,SAACC,EAAGC,GACpBA,KAAKwR,EACLA,EAAQxR,GAAG+gB,KAAOhhB,EAAEyI,OAGpBgJ,EAAQxR,GAAK,CAAC+gB,IAAKhhB,EAAEyI,OAAQwY,GAAI,GAErCjhB,EAAED,SAAQ,SAACmhB,GACHA,KAAQzP,EACRA,EAAQyP,GAAMD,IAAM,EAGpBxP,EAAQyP,GAAQ,CAACD,GAAI,EAAGD,IAAK,EAErC,GACJ,IAEOvP,CACX,EAEA0P,0BAA2B,SAACvhB,GACxB,IAAMD,EAA0B,GAMhC,OALAC,EAAMG,SAAQ,SAACC,GACXL,EAAMK,EAAE2K,MAAQ,CAAC3H,GAAIhD,EAAE2K,KAAMtJ,MAAOrB,EAAE2K,KAAK3L,YAC3CW,EAAMK,EAAE4K,IAAM,CAAC5H,GAAIhD,EAAE4K,GAAIvJ,MAAOrB,EAAE4K,GAAG5L,WACzC,IAEOW,CACX,E,gBC1CJ,IAAI0P,EAAM,CACT,aAAc,CACb,IACA,EACA,KAED,gBAAiB,CAChB,IACA,EACA,KAED,0BAA2B,CAC1B,IACA,EACA,KAED,yBAA0B,CACzB,IACA,GAED,cAAe,CACd,IACA,GAED,uCAAwC,CACvC,IACA,GAED,wCAAyC,CACxC,IACA,GAED,uCAAwC,CACvC,IACA,GAED,+BAAgC,CAC/B,IACA,EACA,KAED,2BAA4B,CAC3B,IACA,EACA,KAED,qBAAsB,CACrB,IACA,GAED,oBAAqB,CACpB,IACA,GAED,eAAgB,CACf,IACA,GAED,mBAAoB,CACnB,IACA,GAED,8BAA+B,CAC9B,IACA,GAED,4BAA6B,CAC5B,IACA,GAED,gCAAiC,CAChC,IACA,EACA,KAED,uCAAwC,CACvC,GACA,EACA,IAED,mCAAoC,CACnC,IACA,EACA,KAED,uBAAwB,CACvB,IACA,EACA,MAGF,SAAS+R,EAAoBC,GAC5B,IAAIC,EAAoB7E,EAAEpN,EAAKgS,GAC9B,OAAOnf,QAAQ+G,UAAUqD,MAAK,KAC7B,IAAI/N,EAAI,IAAIyQ,MAAM,uBAAyBqS,EAAM,KAEjD,MADA9iB,EAAEgjB,KAAO,mBACHhjB,CAAC,IAIT,IAAIijB,EAAMnS,EAAIgS,GAAMre,EAAKwe,EAAI,GAC7B,OAAOtf,QAAQqR,IAAIiO,EAAIlhB,MAAM,GAAG+O,IAAIiS,EAAoB/iB,IAAI+N,MAAK,IACzDgV,EAAoB/D,EAAEva,EAAa,GAATwe,EAAI,KAEvC,CACAJ,EAAoBxT,KAAO,IAAOD,OAAOC,KAAKyB,GAC9C+R,EAAoBpe,GAAK,IACzBye,EAAOC,QAAUN,C,GC1GbO,EAA2B,CAAC,EAGhC,SAASL,EAAoBM,GAE5B,IAAIC,EAAeF,EAAyBC,GAC5C,QAAqBzJ,IAAjB0J,EACH,OAAOA,EAAaH,QAGrB,IAAID,EAASE,EAAyBC,GAAY,CACjD5e,GAAI4e,EACJE,QAAQ,EACRJ,QAAS,CAAC,GAUX,OANAK,EAAoBH,GAAU3F,KAAKwF,EAAOC,QAASD,EAAQA,EAAOC,QAASJ,GAG3EG,EAAOK,QAAS,EAGTL,EAAOC,OACf,CAGAJ,EAAoBU,EAAID,EhB5BpBrlB,EAAW,GACf4kB,EAAoBW,EAAI,CAACC,EAAQC,EAAUhlB,EAAIilB,KAC9C,IAAGD,EAAH,CAMA,IAAIE,EAAe9P,IACnB,IAAStS,EAAI,EAAGA,EAAIvD,EAAS+L,OAAQxI,IAAK,CAGzC,IAFA,IAAKkiB,EAAUhlB,EAAIilB,GAAY1lB,EAASuD,GACpCqiB,GAAY,EACPC,EAAI,EAAGA,EAAIJ,EAAS1Z,OAAQ8Z,MACpB,EAAXH,GAAsBC,GAAgBD,IAAazU,OAAOC,KAAK0T,EAAoBW,GAAGO,OAAO1U,GAASwT,EAAoBW,EAAEnU,GAAKqU,EAASI,MAC9IJ,EAAS9E,OAAOkF,IAAK,IAErBD,GAAY,EACTF,EAAWC,IAAcA,EAAeD,IAG7C,GAAGE,EAAW,CACb5lB,EAAS2gB,OAAOpd,IAAK,GACrB,IAAI8Z,EAAI5c,SACEgb,IAAN4B,IAAiBmI,EAASnI,EAC/B,CACD,CACA,OAAOmI,CAnBP,CAJCE,EAAWA,GAAY,EACvB,IAAI,IAAIniB,EAAIvD,EAAS+L,OAAQxI,EAAI,GAAKvD,EAASuD,EAAI,GAAG,GAAKmiB,EAAUniB,IAAKvD,EAASuD,GAAKvD,EAASuD,EAAI,GACrGvD,EAASuD,GAAK,CAACkiB,EAAUhlB,EAAIilB,EAqBjB,EiBzBdd,EAAoBxY,EAAK2Y,IACxB,IAAIgB,EAAShB,GAAUA,EAAOiB,WAC7B,IAAOjB,EAAiB,QACxB,IAAM,EAEP,OADAH,EAAoBnM,EAAEsN,EAAQ,CAAEjkB,EAAGikB,IAC5BA,CAAM,EhBNV7lB,EAAW+Q,OAAOwO,eAAkBnO,GAASL,OAAOwO,eAAenO,GAASA,GAASA,EAAa,UAQtGsT,EAAoB/D,EAAI,SAASlK,EAAOsP,GAEvC,GADU,EAAPA,IAAUtP,EAAQnQ,KAAKmQ,IAChB,EAAPsP,EAAU,OAAOtP,EACpB,GAAoB,iBAAVA,GAAsBA,EAAO,CACtC,GAAW,EAAPsP,GAAatP,EAAMqP,WAAY,OAAOrP,EAC1C,GAAW,GAAPsP,GAAoC,mBAAftP,EAAM/G,KAAqB,OAAO+G,CAC5D,CACA,IAAIuP,EAAKjV,OAAOkV,OAAO,MACvBvB,EAAoBvH,EAAE6I,GACtB,IAAIE,EAAM,CAAC,EACXnmB,EAAiBA,GAAkB,CAAC,KAAMC,EAAS,CAAC,GAAIA,EAAS,IAAKA,EAASA,IAC/E,IAAI,IAAIW,EAAiB,EAAPolB,GAAYtP,EAAyB,iBAAX9V,KAAyBZ,EAAeiX,QAAQrW,GAAUA,EAAUX,EAASW,GACxHoQ,OAAOgK,oBAAoBpa,GAASwC,SAAS+N,GAASgV,EAAIhV,GAAO,IAAOuF,EAAMvF,KAI/E,OAFAgV,EAAa,QAAI,IAAM,EACvBxB,EAAoBnM,EAAEyN,EAAIE,GACnBF,CACR,EiBxBAtB,EAAoBnM,EAAI,CAACuM,EAASqB,KACjC,IAAI,IAAIjV,KAAOiV,EACXzB,EAAoB7E,EAAEsG,EAAYjV,KAASwT,EAAoB7E,EAAEiF,EAAS5T,IAC5EH,OAAOqV,eAAetB,EAAS5T,EAAK,CAAEmV,YAAY,EAAMhT,IAAK8S,EAAWjV,IAE1E,ECNDwT,EAAoB9C,EAAI,CAAC,EAGzB8C,EAAoB/iB,EAAK2kB,GACjBhhB,QAAQqR,IAAI5F,OAAOC,KAAK0T,EAAoB9C,GAAGzQ,QAAO,CAACoV,EAAUrV,KACvEwT,EAAoB9C,EAAE1Q,GAAKoV,EAASC,GAC7BA,IACL,KCNJ7B,EAAoB8B,EAAKF,GAEZA,EAAU,IAAM,CAAC,GAAK,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,wBAAwBA,GAAW,UCH9S5B,EAAoB3I,EAAI,WACvB,GAA0B,iBAAf0K,WAAyB,OAAOA,WAC3C,IACC,OAAOngB,MAAQ,IAAIogB,SAAS,cAAb,EAChB,CAAE,MAAO/kB,GACR,GAAsB,iBAAX4B,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxBmhB,EAAoB7E,EAAI,CAACzO,EAAK0O,IAAU/O,OAAO4V,UAAUlH,eAAeJ,KAAKjO,EAAK0O,GpBA9E7f,EAAa,CAAC,EACdC,EAAoB,mBAExBwkB,EAAoBkC,EAAI,CAACC,EAAKC,EAAM5V,EAAKoV,KACxC,GAAGrmB,EAAW4mB,GAAQ5mB,EAAW4mB,GAAK9T,KAAK+T,OAA3C,CACA,IAAIC,EAAQC,EACZ,QAAWzL,IAARrK,EAEF,IADA,IAAI+V,EAAU9e,SAAS+e,qBAAqB,UACpC7jB,EAAI,EAAGA,EAAI4jB,EAAQpb,OAAQxI,IAAK,CACvC,IAAIkN,EAAI0W,EAAQ5jB,GAChB,GAAGkN,EAAEkB,aAAa,QAAUoV,GAAOtW,EAAEkB,aAAa,iBAAmBvR,EAAoBgR,EAAK,CAAE6V,EAASxW,EAAG,KAAO,CACpH,CAEGwW,IACHC,GAAa,GACbD,EAAS5e,SAASkH,cAAc,WAEzB8X,QAAU,QACjBJ,EAAOK,QAAU,IACb1C,EAAoB2C,IACvBN,EAAOvX,aAAa,QAASkV,EAAoB2C,IAElDN,EAAOvX,aAAa,eAAgBtP,EAAoBgR,GAExD6V,EAAO7H,IAAM2H,GAEd5mB,EAAW4mB,GAAO,CAACC,GACnB,IAAIQ,EAAmB,CAACC,EAAM5J,KAE7BoJ,EAAOS,QAAUT,EAAOU,OAAS,KACjCC,aAAaN,GACb,IAAIO,EAAU1nB,EAAW4mB,GAIzB,UAHO5mB,EAAW4mB,GAClBE,EAAOa,YAAcb,EAAOa,WAAWC,YAAYd,GACnDY,GAAWA,EAAQxkB,SAAS5C,GAAQA,EAAGod,KACpC4J,EAAM,OAAOA,EAAK5J,EAAM,EAExByJ,EAAUU,WAAWR,EAAiBS,KAAK,UAAMxM,EAAW,CAAEpX,KAAM,UAAW0Z,OAAQkJ,IAAW,MACtGA,EAAOS,QAAUF,EAAiBS,KAAK,KAAMhB,EAAOS,SACpDT,EAAOU,OAASH,EAAiBS,KAAK,KAAMhB,EAAOU,QACnDT,GAAc7e,SAAS6f,KAAKvY,YAAYsX,EApCkB,CAoCX,EqBvChDrC,EAAoBvH,EAAK2H,IACH,oBAAXmD,QAA0BA,OAAOC,aAC1CnX,OAAOqV,eAAetB,EAASmD,OAAOC,YAAa,CAAEzR,MAAO,WAE7D1F,OAAOqV,eAAetB,EAAS,aAAc,CAAErO,OAAO,GAAO,ECL9DiO,EAAoByD,IAAOtD,IAC1BA,EAAOuD,MAAQ,GACVvD,EAAOwD,WAAUxD,EAAOwD,SAAW,IACjCxD,GCHRH,EAAoB1iB,EAAI,G,MCKxB,IAAIsmB,EAAkB,CACrB,IAAK,GAGN5D,EAAoB9C,EAAE+D,EAAI,CAACW,EAASC,KAElC,IAAIgC,EAAqB7D,EAAoB7E,EAAEyI,EAAiBhC,GAAWgC,EAAgBhC,QAAW/K,EACtG,GAA0B,IAAvBgN,EAGF,GAAGA,EACFhC,EAASxT,KAAKwV,EAAmB,QAC3B,CAGL,IAAIC,EAAU,IAAIljB,SAAQ,CAAC+G,EAAS9G,IAAYgjB,EAAqBD,EAAgBhC,GAAW,CAACja,EAAS9G,KAC1GghB,EAASxT,KAAKwV,EAAmB,GAAKC,GAGtC,IAAI3B,EAAMnC,EAAoB1iB,EAAI0iB,EAAoB8B,EAAEF,GAEpDmC,EAAQ,IAAIrW,MAgBhBsS,EAAoBkC,EAAEC,GAfFlJ,IACnB,GAAG+G,EAAoB7E,EAAEyI,EAAiBhC,KAEf,KAD1BiC,EAAqBD,EAAgBhC,MACRgC,EAAgBhC,QAAW/K,GACrDgN,GAAoB,CACtB,IAAIG,EAAY/K,IAAyB,SAAfA,EAAMxZ,KAAkB,UAAYwZ,EAAMxZ,MAChEwkB,EAAUhL,GAASA,EAAME,QAAUF,EAAME,OAAOqB,IACpDuJ,EAAMG,QAAU,iBAAmBtC,EAAU,cAAgBoC,EAAY,KAAOC,EAAU,IAC1FF,EAAM5hB,KAAO,iBACb4hB,EAAMtkB,KAAOukB,EACbD,EAAMI,QAAUF,EAChBJ,EAAmB,GAAGE,EACvB,CACD,GAEwC,SAAWnC,EAASA,EAE/D,CACD,EAWF5B,EAAoBW,EAAEM,EAAKW,GAA0C,IAA7BgC,EAAgBhC,GAGxD,IAAIwC,EAAuB,CAACC,EAA4BlnB,KACvD,IAGImjB,EAAUsB,GAHTf,EAAUyD,EAAaC,GAAWpnB,EAGhBwB,EAAI,EAC3B,GAAGkiB,EAAS2D,MAAM9iB,GAAgC,IAAxBkiB,EAAgBliB,KAAa,CACtD,IAAI4e,KAAYgE,EACZtE,EAAoB7E,EAAEmJ,EAAahE,KACrCN,EAAoBU,EAAEJ,GAAYgE,EAAYhE,IAGhD,GAAGiE,EAAS,IAAI3D,EAAS2D,EAAQvE,EAClC,CAEA,IADGqE,GAA4BA,EAA2BlnB,GACrDwB,EAAIkiB,EAAS1Z,OAAQxI,IACzBijB,EAAUf,EAASliB,GAChBqhB,EAAoB7E,EAAEyI,EAAiBhC,IAAYgC,EAAgBhC,IACrEgC,EAAgBhC,GAAS,KAE1BgC,EAAgBhC,GAAW,EAE5B,OAAO5B,EAAoBW,EAAEC,EAAO,EAGjC6D,EAAqB7P,KAAkC,4BAAIA,KAAkC,6BAAK,GACtG6P,EAAmBhmB,QAAQ2lB,EAAqBf,KAAK,KAAM,IAC3DoB,EAAmBpW,KAAO+V,EAAqBf,KAAK,KAAMoB,EAAmBpW,KAAKgV,KAAKoB,G,KClFvF,IAAIC,EAAsB1E,EAAoBW,OAAE9J,EAAW,CAAC,MAAM,IAAOmJ,EAAoB,OAC7F0E,EAAsB1E,EAAoBW,EAAE+D,E","sources":["webpack://graphPlayground/webpack/runtime/chunk loaded","webpack://graphPlayground/webpack/runtime/create fake namespace object","webpack://graphPlayground/webpack/runtime/load script","webpack://graphPlayground/./src/js/workers/GraphAlgorithmWorker.ts?dbca","webpack://graphPlayground/./src/js/UIInteractions.ts","webpack://graphPlayground/./src/js/app.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/EdgeImmut.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/GraphImmut.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/NodeImmut.ts","webpack://graphPlayground/./src/js/graphState.ts","webpack://graphPlayground/./src/js/languages.ts","webpack://graphPlayground/./src/js/main.ts","webpack://graphPlayground/./src/js/settings.ts","webpack://graphPlayground/./src/js/util/genericHelpers.ts","webpack://graphPlayground/./src/js/util/graphHelpers.ts","webpack://graphPlayground/./src/ lazy ^\\.\\/.*\\.ts$ namespace object","webpack://graphPlayground/webpack/bootstrap","webpack://graphPlayground/webpack/runtime/compat get default export","webpack://graphPlayground/webpack/runtime/define property getters","webpack://graphPlayground/webpack/runtime/ensure chunk","webpack://graphPlayground/webpack/runtime/get javascript chunk filename","webpack://graphPlayground/webpack/runtime/global","webpack://graphPlayground/webpack/runtime/hasOwnProperty shorthand","webpack://graphPlayground/webpack/runtime/make namespace object","webpack://graphPlayground/webpack/runtime/node module decorator","webpack://graphPlayground/webpack/runtime/publicPath","webpack://graphPlayground/webpack/runtime/jsonp chunk loading","webpack://graphPlayground/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"graphPlayground:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"GraphAlgorithmWorker-1972db90b91f8607a581.min.worker.js\");\n}\n","import gHelp from \"./util/graphHelpers\";\nimport help from \"./util/genericHelpers\";\nimport GraphState from \"./graphState\";\nimport { FlowResult, MSTResult, ShortestPathResult } from \"./GraphAlgorithms\";\n//@ts-ignore\nimport Worker from \"worker-loader!./workers/GraphAlgorithmWorker\";\nimport NodeImmut from \"./classes/GraphImmut/NodeImmut\";\nimport EdgeImmut from \"./classes/GraphImmut/EdgeImmut\";\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport * as languages from \"./languages\";\n\ninterface AlgorithmI {\n    name: string;\n    directional?: boolean;\n    weighted?: boolean;\n    applyFunc: () => any;\n    display: boolean;\n}\n\nconst makeAndPrintShortestPath = (title: string, fn: string, weighted: boolean): void => {\n    const myName = languages.current.ShortestPath;\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const source = GraphState.nodeLabelToID(values[0]);\n            const sink = GraphState.nodeLabelToID(values[1]);\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                if (a === false) {\n                    if (fn.includes(\"dijkstra\")) {\n                        help.showSimpleModal(\n                            languages.current.DijkstraError,\n                            languages.current.DijkstraErrorHTML\n                        );\n                    } else if (fn.includes(\"bellman\")) {\n                        help.showSimpleModal(\n                            languages.current.BellmanFordError,\n                            languages.current.BellmanFordErrorHTML\n                        );\n                    }\n                    return;\n                }\n\n                a = a as ShortestPathResult;\n\n                let p = `<h3>${title}</h3><hr>${help.stringReplacement(languages.current.NoPathFromAToB,\n                    help.htmlEncode(source.toString()), help.htmlEncode(sink.toString()))}`;\n\n                if (a.pathExists) {\n                    p = help.stringReplacement(languages.current.ShortestPathFromAToB, title,\n                        GraphState.nodeIDToLabel(source), GraphState.nodeIDToLabel(sink), a.distance);\n                    if (weighted) {\n                        p += `\\n${help.stringReplacement(languages.current.WithWeightedCost, a.cost)}`;\n                    }\n                    p += \"\\n\\n\" + languages.current.UsingPath;\n\n                    p = help.htmlEncode(p);\n                    let graph = GraphState.getGraphData(GraphState.graph, false, true);\n                    let G = new GraphImmut(graph.nodes, graph.edges, graph.directed, graph.weighted);\n                    a.path.forEach((v: number, i: number) => {\n                        p += `${help.htmlEncode(GraphState.nodeIDToLabel(v))} &rarr; `;\n                        if (i > 0) {\n                            G = G.editEdge(a.path[i - 1], v, null, null, \"#FF0000\") as GraphImmut;\n                        }\n                    });\n                    GraphState.graph = G;\n                    window.main.setData(GraphState.getGraphData(G), false, false, false);\n                    p = p.slice(0, -8);\n                    p = `<h3>${title}</h3><hr>${p}`;\n                }\n\n                help.printout(p);\n            });\n            w.send({\n                type: fn,\n                args: [source, sink],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        },\n        title,\n        languages.current.Go,\n        languages.current.Cancel,\n        [\n            {\n                label: languages.current.StartNode,\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            },\n            {\n                label: languages.current.EndNode,\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            }\n        ],\n        ($modal) => {\n            UIInteractions.isRunning[myName] = false;\n            $modal.modal(\"hide\");\n        }\n    );\n};\n\nconst makeAndPrintComponents = async (stronglyConnected: boolean): Promise<void> => {\n    let a = null;\n    let cc = languages.current.ConnectedComponents;\n    let componentKey = \"connectedComponents\";\n\n    if (stronglyConnected) {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        cc = languages.current.StronglyConnectedComponents;\n        componentKey = \"stronglyConnectedComponents\";\n    } else {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n    }\n\n    if (UIInteractions.isRunning[cc]) {\n        UIInteractions.printAlreadyRunning(cc);\n        return Promise.reject(languages.current.TaskAlreadyRunning);\n    }\n    UIInteractions.isRunning[cc] = true;\n\n    const iStartedProgress = UIInteractions.startLoadingAnimation();\n    const w = UIInteractions.getWorkerIfPossible(e => {\n        a = e.data;\n        w.cleanup();\n\n        GraphState.graphProperties[cc] = a.count;\n        GraphState.setUpToDate(true, [cc, componentKey]);\n        GraphState.state[componentKey] = a.components;\n\n        const components = help.flatten(a.components);\n        let p = help.stringReplacement(languages.current.NumberOfConnectedComponents, cc, a.count);\n        p += \"\\n\\n\";\n\n        components.forEach((v, i) => {\n            p += help.stringReplacement(languages.current.VertexIsInConnectedComponentNumber, GraphState.nodeIDToLabel(i), v + \"\") + \"\\n\";\n        });\n\n        p += `\\n${JSON.stringify(help.rotate(a.components), null, 4)}\\n\\n`;\n        p = `<h3>${cc}</h3><hr>${help.htmlEncode(p)}`;\n\n        if (iStartedProgress) {\n            UIInteractions.stopLoadingAnimation();\n        }\n        UIInteractions.isRunning[cc] = false;\n\n        help.printout(p);\n    });\n    w.send({\n        type: componentKey,\n        args: [],\n        graph: window.main.graphState.getGraphData(),\n        convertToGraphImmut: true\n    });\n};\n\nclass WorkerProxy {\n    private readonly worker: Worker;\n    private readonly id: number;\n    private readonly listener: (e: { data: any }) => any;\n\n    constructor(id: number, w: Worker, listener: ((e: { data: any }) => any)) {\n        this.id = id;\n        this.worker = w;\n        this.listener = listener;\n        w.postMessage({ type: \"id\", id });\n        w.onmessage = (e: MessageEvent) => {\n            this.listener({ data: e.data.data });\n        };\n    }\n\n    public send(data: any) {\n        this.worker.postMessage(data);\n    }\n\n    public cleanup() {\n        this.worker.terminate();\n        GraphState.workerPool[this.id] = null;\n    }\n}\n\nexport default class UIInteractions {\n    public static isRunning: { [index: string]: boolean } = {};\n    static getAlgorithms(): AlgorithmI[] {\n        return [\n            {\n                name: languages.current.GraphColoring,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintGraphColoring,\n                display: true\n            },\n            {\n                name: languages.current.ConnectedComponents,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintComponents(false);\n                },\n                display: true\n            },\n            {\n                name: languages.current.StronglyConnectedComponents,\n                directional: true,\n                display: true,\n                applyFunc: () => {\n                    makeAndPrintComponents(true);\n                }\n            },\n            {\n                name: languages.current.BFS,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.BFS, \"breadthFirstSearch\", false);\n                },\n                display: true\n            },\n            {\n                name: languages.current.Dijkstra,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.Dijkstra, \"dijkstraSearch\", true);\n                },\n                display: true\n            },\n            {\n                name: languages.current.BellmanFord,\n                weighted: true,\n                directional: true,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.BellmanFord, \"bellmanFord\", true);\n                },\n                display: true\n            },\n            {\n                name: languages.current.FordFulkerson,\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintFFMCMF,\n                display: true\n            },\n            {\n                name: languages.current.KruskalMST,\n                weighted: true,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintKruskal,\n                display: true\n            },\n            {\n                name: languages.current.Cyclic,\n                applyFunc: UIInteractions.makeAndPrintIsCyclic,\n                directional: true,\n                display: true\n            },\n            {\n                name: languages.current.TopoSort,\n                applyFunc: UIInteractions.makeAndPrintTopologicalSort,\n                directional: true,\n                display: true\n            },\n            {\n                name: languages.current.Eulerian,\n                directional: false,\n                display: false,\n                applyFunc: null\n            },\n            {\n                name: languages.current.Eulerian,\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintDirectionalEulerian\n            }\n        ] as AlgorithmI[];\n    }\n\n    static registerListeners(): void {\n        const makeSimpleClickListener = (selector: string, fn: () => any) => {\n            document.querySelector(selector)!.addEventListener(\"click\", e => {\n                e.preventDefault();\n                fn();\n            });\n        };\n\n        makeSimpleClickListener(\"#print-help-link\", UIInteractions.printHelp);\n        makeSimpleClickListener(\"#graph-options-link\", UIInteractions.printOptions);\n        makeSimpleClickListener(\"#load-petersen-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            window.main.setData(predefined.Petersen(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-konigsberg-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            window.main.setData(predefined.Konigsberg(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-complete-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Complete();\n        });\n        makeSimpleClickListener(\"#load-hypercube-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Hypercube();\n        });\n        makeSimpleClickListener(\"#load-custom-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Custom();\n        });\n        makeSimpleClickListener(\"#undo-link\", window.main.undo);\n        makeSimpleClickListener(\"#redo-link\", window.main.redo);\n        makeSimpleClickListener(\"#calculate-all-properties-link\", async () => {\n            return GraphState.makeAndPrintProperties(true);\n        });\n        makeSimpleClickListener(\"#new-graph-layout-link\", window.main.shuffleNetworkLayout);\n        makeSimpleClickListener(\"#import-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportFileModal();\n        });\n        makeSimpleClickListener(\"#import-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportTextModal();\n        });\n        makeSimpleClickListener(\"#export-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportFileModal();\n        });\n        makeSimpleClickListener(\"#export-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportTextModal();\n        });\n        (document.querySelector(\"#fileDropdown\") as HTMLAnchorElement).innerText = languages.current.File;\n        (document.querySelector(\"#import-file-link\") as HTMLAnchorElement).innerText = languages.current.ImportFile;\n        (document.querySelector(\"#import-text-link\") as HTMLAnchorElement).innerText = languages.current.ImportText;\n        (document.querySelector(\"#export-file-link\") as HTMLAnchorElement).innerText = languages.current.ExportFile;\n        (document.querySelector(\"#export-text-link\") as HTMLAnchorElement).innerText = languages.current.ExportText;\n\n        (document.querySelector(\"#calculate-all-properties-link\") as HTMLAnchorElement).innerText = languages.current.CalculateAllProperties;\n        (document.querySelector(\"#new-graph-layout-link\") as HTMLAnchorElement).innerText = languages.current.NewGraphLayout;\n        (document.querySelector(\"#graph-options-link\") as HTMLAnchorElement).innerText = languages.current.GraphOptions;\n        (document.querySelector(\"#print-help-link\") as HTMLAnchorElement).innerText = languages.current.Help;\n\n        (document.querySelector(\"#example-graphs-label\") as HTMLHeadingElement).innerText = languages.current.ExampleGraphs;\n        (document.querySelector(\"#load-petersen-link\") as HTMLAnchorElement).innerText = languages.current.LoadPetersen;\n        (document.querySelector(\"#load-konigsberg-link\") as HTMLAnchorElement).innerText = languages.current.LoadKonigsberg;\n        (document.querySelector(\"#load-complete-link\") as HTMLAnchorElement).innerText = languages.current.LoadComplete;\n        (document.querySelector(\"#load-hypercube-link\") as HTMLAnchorElement).innerText = languages.current.LoadHypercube;\n        (document.querySelector(\"#load-custom-link\") as HTMLAnchorElement).innerText = languages.current.LoadCustom;\n\n        (document.querySelector(\"#algorithms-label\") as HTMLHeadElement).innerText = languages.current.Algorithms;\n\n        (document.querySelector(\"#graph-properties-label\") as HTMLHeadElement).innerText = languages.current.GraphProperties;\n        (document.querySelector(\"#results-label\") as HTMLHeadElement).innerText = languages.current.Results;\n    }\n\n    static printHelp(): void {\n        help.showSimpleModal(\n            languages.current.Help,\n            languages.current.IssuesHTML\n        );\n    }\n\n    static printOptions(): void {\n        help.showFormModal(\n            ($modal, vals) => {\n                $modal.modal(\"hide\");\n                if (window.settings.getOption(\"nodePhysics\") !== vals[0]) {\n                    window.settings.changeOption(\"nodePhysics\", vals[0]); // Physics\n                }\n                if (window.settings.getOption(\"direction\") !== vals[1]) {\n                    window.settings.changeOption(\"direction\", vals[1]);\n                    let G = GraphState.graph;\n                    G = vals[1] ? G.asDirected(true) : G.asUndirected();\n                    // Clear node coloring because graph color doesn't apply to directed graphs\n                    window.main.setData(GraphState.getGraphData(G, true));\n                }\n                if (window.settings.getOption(\"weights\") !== vals[2]) {\n                    window.settings.changeOption(\"weights\", vals[2]);\n                    let G = GraphState.graph;\n                    G = vals[2] ? G.asWeighted() : G.asUnweighted();\n                    window.main.setData(GraphState.getGraphData(G));\n                }\n                if (window.settings.getOption(\"customColors\") !== vals[3]) {\n                    window.settings.changeOption(\"customColors\", vals[3]);\n                }\n            },\n            languages.current.Options,\n            languages.current.Save,\n            languages.current.Cancel,\n            [\n                {\n                    label: languages.current.GraphPhysics,\n                    initialValue: window.settings.getOption(\"nodePhysics\"),\n                    type: \"checkbox\"\n                },\n                {\n                    label: languages.current.DiGraph,\n                    initialValue: window.settings.getOption(\"direction\"),\n                    type: \"checkbox\"\n                },\n                {\n                    label: languages.current.WeightedGraph,\n                    initialValue: window.settings.getOption(\"weights\"),\n                    type: \"checkbox\"\n                },\n                {\n                    label: languages.current.CustomNodeColors,\n                    initialValue: window.settings.getOption(\"customColors\"),\n                    type: \"checkbox\"\n                }\n            ],\n            null\n        );\n    }\n\n    static terminateAllWebWorkers(): void {\n        for (const v of GraphState.workerPool) {\n            if (v !== null && v instanceof window.Worker) {\n                v.terminate();\n            }\n        }\n        // Cleanup state\n        GraphState.workerPool = [];\n        UIInteractions.stopLoadingAnimation();\n        UIInteractions.isRunning = {};\n    }\n\n    static getWorkerIfPossible(onmessage: (d: { data: any }) => any): WorkerProxy {\n        let nextIndex = GraphState.workerPool.findIndex(v => {\n            return v === null || typeof v === \"undefined\";\n        });\n        if (nextIndex === -1) {\n            nextIndex = GraphState.workerPool.length;\n        }\n\n        const w = new Worker();\n        GraphState.workerPool[nextIndex] = w;\n        return new WorkerProxy(nextIndex, w, onmessage);\n    }\n\n    static startLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"flex\") {\n            prog.style.display = \"flex\";\n            return true;\n        }\n        return false;\n    }\n\n    static stopLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"none\") {\n            prog.style.display = \"none\";\n        }\n    }\n\n    static printAlreadyRunning(name?: string) {\n        let n = languages.current.ThisTask;\n        if (name) {\n            n = name;\n        }\n        help.showSimpleModal(\n            languages.current.TaskAlreadyRunning,\n            \"<p>\" + help.stringReplacement(languages.current.TaskAlreadyRunningBody, n) + \"</p>\"\n        );\n    }\n\n    static makeAndPrintGraphColoring(): Promise<void> {\n        const myName = languages.current.GraphColoring;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            // Use cached responses when able\n            let a = {\n                chromaticNumber: (await GraphState.getProperty(\"Chromatic Number\")) as number,\n                colors: GraphState.state.graphColoring as {}\n            };\n\n            const printGC = () => {\n                GraphState.graphProperties[\"Chromatic Number\"] = a.chromaticNumber;\n                GraphState.setUpToDate(true, [\"Chromatic Number\", \"graphColoring\"]);\n                (GraphState.state.graphColoring as {}) = a.colors;\n\n                const colors = help.flatten(a.colors);\n                let p = help.stringReplacement(languages.current.NumberOfVertices, colors.length + \"\");\n                p += \"\\n\" + help.stringReplacement(languages.current.ChromaticNumberIs, a.chromaticNumber + \"\");\n                p += \"\\n\\n\";\n\n                colors.forEach((v, i) => {\n                    p += help.stringReplacement(languages.current.VertexGetsColor, GraphState.nodeIDToLabel(i), v + \"\") + \"\\n\";\n                });\n\n                p += `\\n${JSON.stringify(help.rotate(a.colors), null, 4)}\\n\\n`;\n\n                p = `<h3>${languages.current.GraphColoringTitle}</h3><hr>${help.htmlEncode(p)}`;\n                p += `<br/><button class='btn btn-primary' onclick='main.applyColors()'>${languages.current.ReColor}</button>`;\n\n                help.printout(p);\n                window.main.applyColors();\n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            if (!(a.chromaticNumber !== null && (await GraphState.getProperty(\"graphColoring\")) !== null)) {\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    printGC();\n                    w.cleanup();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    UIInteractions.isRunning[myName] = false;\n                    resolve(e.data);\n                });\n                w.send({\n                    type: \"colorNetwork\",\n                    args: [],\n                    graph: window.main.graphState.getGraphData(),\n                    convertToGraphImmut: true\n                });\n            } else {\n                printGC();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n            }\n        });\n    }\n\n    static makeAndPrintDirectionalEulerian(): Promise<void> {\n        const myName = languages.current.Eulerian;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (!window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n\n            const scc = await GraphState.getProperty(\"stronglyConnectedComponents\", true);\n\n            w.send({\n                type: \"directionalEulerian\",\n                args: [gHelp.findVertexDegreesDirectional(GraphState.graph.getFullAdjacency()), scc]\n            });\n        });\n    }\n\n    static makeAndPrintEulerian(ignoreDuplicate = false): Promise<void> {\n        const myName = languages.current.Eulerian;\n        if (UIInteractions.isRunning[myName]) {\n            if (ignoreDuplicate) {\n                return Promise.resolve();\n            }\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve(UIInteractions.makeAndPrintDirectionalEulerian());\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const cc = await GraphState.getProperty(\"connectedComponents\", true);\n\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                w.cleanup();\n                resolve(e.data);\n            });\n            w.send({\n                type: \"hasEulerianCircuit\",\n                args: [GraphState.graph.getAllOutDegrees(), cc]\n            });\n        });\n    }\n\n    static makeAndPrintFFMCMF(): void {\n        if (!window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n        const myName = languages.current.FordFulkerson;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        help.showFormModal(\n            async ($modal, values) => {\n                $modal.modal(\"hide\");\n\n                const source = GraphState.nodeLabelToID(values[0]);\n                const sink = GraphState.nodeLabelToID(values[1]);\n\n                let a: boolean | FlowResult | null = null;\n\n                const cb = () => {\n                    let p = `<h3>${languages.current.FordFulkerson}</h3><hr>${help.stringReplacement(languages.current.NoPathFromAToB,\n                        help.htmlEncode(GraphState.nodeIDToLabel(source)), help.htmlEncode(GraphState.nodeIDToLabel(sink)))}`;\n\n                    if (a === false) {\n                        help.printout(p);\n                        return;\n                    }\n                    a = a as { maxFlow: number; flowPath: any[] };\n\n                    p = `${languages.current.FordFulkersonMaxFlowMinCut} ${help.stringReplacement(languages.current.MaxFlowFromAToB,\n                        GraphState.nodeIDToLabel(source), GraphState.nodeIDToLabel(sink), a.maxFlow + \"\")}`;\n                    p += `\\n\\n${languages.current.UsingCapacities}\\n\\n`;\n                    p = help.htmlEncode(p);\n                    a.flowPath.forEach(v => {\n                        p += help.stringReplacement(languages.current.FlowWithCapacity, GraphState.nodeIDToLabel(v.from),\n                            GraphState.nodeIDToLabel(v.to), v.flow + \"\", v.capacity + \"\");\n                        p += \"\\n\";\n                    });\n                    p = p.trim();\n                    p = `<h3>${languages.current.FordFulkersonMaxFlowMinCut}</h3><hr>` + p;\n\n                    help.printout(p);\n                };\n\n                const iStartedProgress = UIInteractions.startLoadingAnimation();\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    UIInteractions.isRunning[myName] = false;\n                    cb();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    w.cleanup();\n                });\n                w.send({\n                    type: \"fordFulkerson\",\n                    args: [source, sink],\n                    convertToGraphImmut: true,\n                    graph: window.main.graphState.getGraphData()\n                });\n            },\n            languages.current.FordFulkersonMaxFlowMinCut,\n            languages.current.Go,\n            languages.current.Cancel,\n            [\n                {\n                    label: languages.current.SourceNode,\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                },\n                {\n                    label: languages.current.SinkNode,\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                }\n            ],\n            ($modal) => {\n                UIInteractions.isRunning[myName] = false;\n                $modal.modal(\"hide\");\n            }\n        );\n    }\n\n    static makeAndPrintKruskal(): void {\n        if (window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n\n        const myName = languages.current.KruskalMST;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: MSTResult = e.data;\n            w.cleanup();\n\n            let p = help.stringReplacement(languages.current.KruskalMSTTotalWeight, a.totalWeight + \"\");\n            p += `\\n\\n${languages.current.UsingEdges}\\n\\n`;\n            p = help.htmlEncode(p);\n            a.mst.forEach(v => {\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getFrom())}&rarr;`;\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getTo())}\\n`;\n            });\n            p = p.trim();\n            p = `<h3>${languages.current.KruskalMST}</h3><hr>${p}`;\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"kruskal\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static makeAndPrintIsCyclic(): Promise<void> {\n        if (!window.settings.getOption(\"direction\")) {\n            return Promise.resolve();\n        }\n\n        const myName = languages.current.Cyclic;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(resolve => {\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.cyclic = e.data;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve();\n            });\n            w.send({\n                type: \"isGraphCyclic\",\n                args: [],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        });\n    }\n\n    static makeAndPrintTopologicalSort(): void {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const myName = languages.current.TopoSort;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: boolean | NodeImmut[] = e.data;\n            w.cleanup();\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            if (a === true) {\n                GraphState.graphProperties.cyclic = true;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                help.printout(languages.current.TopoSortErrorHTML);\n                return;\n            }\n\n            let p = languages.current.TopoSort + \":\\n\\n\";\n            p = help.htmlEncode(p);\n            (a as any[]).forEach(v => {\n                p += `${GraphState.nodeIDToLabel(v.id)}, `;\n            });\n            p = p.slice(0, -2);\n            p = `<h3>${languages.current.TopoSort}</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"topologicalSort\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static printGraphAlgorithms(): void {\n        const $div = document.getElementById(\"algorithms-pane\")!;\n        $div.innerHTML = \"\";\n        const directional = window.settings.getOption(\"direction\");\n        const weighted = window.settings.getOption(\"weights\");\n\n        const addAlgoToPane = (alg: AlgorithmI) => {\n            const navlink = document.createElement(\"a\");\n            navlink.classList.add(\"nav-link\");\n            navlink.setAttribute(\"href\", \"#\");\n            navlink.innerText = alg.name;\n            navlink.addEventListener(\"click\", e => {\n                e.preventDefault();\n                alg.applyFunc();\n            });\n\n            $div.appendChild(navlink);\n        };\n\n        const a = UIInteractions.getAlgorithms();\n        a.forEach(alg => {\n            if (!alg.display) {\n                return;\n            }\n            if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            } else if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n        });\n    }\n}\n","\"use strict\";\n\nimport \"bootstrap\";\nimport { Network } from \"vis-network\";\nimport { default as main, MainI } from \"./main\";\nimport Settings from \"./settings\";\nimport UI from \"./UIInteractions\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport * as languages from \"./languages\";\n\ndeclare global {\n    interface Window {\n        main: MainI;\n        network: Network;\n        settings: typeof Settings;\n        ui: typeof UI;\n        Worker: Function;\n    }\n}\n\nwindow.main = main;\nwindow.settings = Settings;\n\nlanguages.setLanguage().then(() => {\n    window.ui = UI;\n    window.ui.registerListeners();\n\n    main.visOptions.locales = languages.current.VisLocale;\n    main.visOptions.locale = \"\";\n    window.network = new Network(main.container, {}, main.visOptions);\n    Settings.loadSettings();\n\n    main.addNetworkListeners(window.network);\n\n    let loadDefault = true;\n    if (Settings.checkForLocalStorage()) {\n        const s = localStorage.getItem(\"graphPlayground.lastState\");\n        if (s !== null) {\n            const jsonGraph: any = JSON.parse(s);\n            if (\"graph\" in jsonGraph && \"nodes\" in jsonGraph.graph) {\n                loadDefault = false;\n                main.applyState(false, jsonGraph as { graph: GraphPlain });\n            }\n        }\n    }\n    if (loadDefault) {\n        (async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            main.setData(predefined.Petersen(), false, true, true);\n        })();\n    }\n});\n","\"use strict\";\n\nexport interface EdgeImmutPlain {\n    label?: string;\n    from: number;\n    to: number;\n    weight: number;\n\n    [key: string]: any;\n\n    [key: number]: any;\n}\n\nexport default class EdgeImmut {\n    private readonly from: Readonly<number>;\n    private readonly to: Readonly<number>;\n    private readonly weight: Readonly<number>;\n    private readonly attributes: any;\n\n    constructor(from: number | EdgeImmutPlain, to?: number, weight: number | string = 1, extraAttrs: any = null) {\n        if (typeof from === \"object\") {\n            extraAttrs = Object.keys(from)\n                .filter(key => ![\"from\", \"to\", \"weight\"].includes(key))\n                .reduce((obj: any, key: string) => {\n                    obj[key] = (<EdgeImmutPlain>from)[key];\n                    return obj;\n                }, {});\n\n            to = from.to;\n            weight = from.weight;\n            from = from.from;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.from = Object.freeze(from);\n        this.to = Object.freeze(to!);\n        this.weight = Object.freeze(parseFloat(weight as string));\n\n        if (new.target === EdgeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getFrom(): Readonly<number> {\n        return this.from;\n    }\n\n    getTo(): Readonly<number> {\n        return this.to;\n    }\n\n    getWeight(): Readonly<number> {\n        return this.weight;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    toPlain(): EdgeImmutPlain {\n        const toReturn: EdgeImmutPlain = { from: this.from, to: this.to, weight: this.weight };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    editEdge(newWeight: number | null, extraAttrs: any = {}): EdgeImmut {\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        Object.keys(extraAttrs).forEach(key => {\n            attributes[key] = extraAttrs[key];\n        });\n\n        return new EdgeImmut(\n            this.getFrom(),\n            this.getTo(),\n            newWeight === null ? this.getWeight() : newWeight,\n            attributes\n        );\n    }\n}\n","\"use strict\";\n\nimport { List } from 'immutable';\nimport { default as NodeImmut, NodeImmutPlain } from './NodeImmut';\nimport { default as EdgeImmut, EdgeImmutPlain } from './EdgeImmut';\n\ninterface NodeMapping {\n    [key: number]: number\n}\n\nconst filterExtraAttr = (data: any, labels: any) => {\n    return Object.keys(data)\n        .filter((key) => !(labels).includes(key))\n        .reduce((obj: any, key) => {\n            obj[key] = data[key];\n            return obj;\n        }, {});\n};\n\nconst filterNodeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"label\", \"id\"]);\n};\n\nconst filterEdgeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"from\", \"to\", \"weight\"]);\n};\n\nconst genericEdgesToImmutEdges = (edges: any, nodeMap: NodeMapping = {}): boolean | List<EdgeImmut> => {\n    if (edges === null) {\n        return false;\n    }\n\n    let newEdges: List<EdgeImmut> = List();\n\n    if (typeof edges === 'object') {\n        edges.forEach((edge: any) => {\n            let weight = 0;\n            let from = 0;\n            let to = 0;\n            let extraAttrs = {};\n\n            if (\"weight\" in edge) {\n                weight = parseFloat(edge.weight);\n            }\n            if (\"from\" in edge) {\n                from = nodeMap[edge.from];\n            }\n            if (\"to\" in edge) {\n                to = nodeMap[edge.to];\n            }\n            if (\"attributes\" in edge) {\n                extraAttrs = filterEdgeExtraAttr(edge.attributes);\n            }\n            else {\n                extraAttrs = filterEdgeExtraAttr(edge);\n            }\n\n            newEdges = newEdges.push(new EdgeImmut(from, to, weight, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return newEdges;\n};\n\nconst genericNodesToImmutNodes = (nodes: any): boolean | { nodes: Readonly<List<NodeImmut>>; map: { [key: number]: number } } => {\n    if (nodes === null) {\n        return false;\n    }\n\n    let newNodes: List<NodeImmut> = List();\n    const nodeMap: NodeMapping = {};\n\n    if (typeof nodes === \"number\") {\n        // Create the nodes\n        for (let i = 0; i < Math.floor(nodes); i++) {\n            newNodes = newNodes.set(i, new NodeImmut(i));\n            nodeMap[i] = i;\n        }\n    }\n    else if (typeof nodes === 'object') {\n        let nodeNum = 0;\n        nodes.forEach((n: any) => {\n            const id = nodeNum++;\n            let label = null;\n            let extraAttrs = null;\n\n            if (\"label\" in n) {\n                label = n.label;\n            }\n            if (\"id\" in n) {\n                nodeMap[n.id] = id;\n                if (\"label\" in n && n.label === n.id.toString()) {\n                    label = id.toString();\n                }\n            }\n            else {\n                nodeMap[id] = id;\n            }\n            if (\"attributes\" in n) {\n                extraAttrs = filterNodeExtraAttr(n.attributes);\n            }\n            else {\n                extraAttrs = filterNodeExtraAttr(n);\n            }\n\n            newNodes = newNodes.set(id, new NodeImmut(id, label, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return { nodes: Object.freeze(newNodes), map: nodeMap };\n};\n\nexport default class GraphImmut {\n    private readonly directed: Readonly<boolean>;\n    private readonly weighted: Readonly<boolean>;\n    private readonly nodes: Readonly<List<NodeImmut>>;\n    private readonly numNodes: Readonly<number>;\n    private readonly edges: Readonly<List<EdgeImmut>>;\n    private readonly numEdges: Readonly<number>;\n\n    constructor(nodes: number | Readonly<List<NodeImmut>> | NodeImmutPlain[],\n        edges: null | Readonly<List<EdgeImmut>> | EdgeImmutPlain[] = null,\n        directed = false, weighted = false) {\n        this.directed = Object.freeze(directed);\n        this.weighted = Object.freeze(weighted);\n        let nodeMap = {};\n\n        // Make Nodes\n        if (typeof nodes === \"number\" || (typeof nodes === \"object\" && !(nodes instanceof List))) {\n            const n = genericNodesToImmutNodes(nodes);\n            if (typeof n !== \"object\") {\n                throw new Error(\"Unable to parse node input!\");\n            }\n            this.nodes = n.nodes;\n            nodeMap = n.map;\n        }\n        else if (nodes instanceof List) {\n            this.nodes = nodes as List<NodeImmut>;\n        }\n        else {\n            throw new Error(\"Illegal type of 'node' input to GraphImmut constructor\");\n        }\n        this.nodes = Object.freeze(this.nodes);\n        this.numNodes = Object.freeze(this.nodes.size);\n\n        // If we are given edges, add them to the graph\n        if (edges !== null && typeof edges === \"object\" && !(edges instanceof List)) {\n            const e = genericEdgesToImmutEdges(edges, nodeMap);\n            if (typeof e !== \"object\") {\n                throw new Error(\"Unable to parse Edge input\");\n            }\n            this.edges = e;\n        }\n        else if (edges instanceof List) {\n            this.edges = edges as List<EdgeImmut>;\n        }\n        else {\n            this.edges = List<EdgeImmut>();\n        }\n        this.edges = Object.freeze(this.edges);\n        this.numEdges = Object.freeze(this.edges.size);\n\n        if (new.target === GraphImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getNode(id: number, rich = false): NodeImmut | NodeImmutPlain | boolean {\n        if (id >= this.numNodes) {\n            return false;\n        }\n        const node = this.nodes.get(id);\n        if (typeof node === \"undefined\") {\n            return false;\n        }\n        if (rich) {\n            return node;\n        }\n        return node.toPlain();\n    }\n\n    addNode(data: any = null): GraphImmut {\n        if (data === null) {\n            data = {};\n        }\n\n        const id = this.numNodes;\n        if (!(\"label\" in data)) {\n            data.label = id.toString();\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n\n        return new GraphImmut(this.nodes.set(id, new NodeImmut(id, data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    editNode(id: number, data: any): any {\n        if (!this.nodes.has(id)) {\n            return false;\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n        if (!(\"label\" in data)) {\n            data.label = (this.getNode(id, true) as NodeImmut).getLabel();\n        }\n        return new GraphImmut(this.nodes.set(id, (this.getNode(id, true) as NodeImmut).editNode(data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    deleteNode(id: number): GraphImmut | boolean {\n        // Make sure the ID exists\n        if (!(id >= 0 && id < this.numNodes)) {\n            return false;\n        }\n\n        const nodeMap: NodeMapping = {}; // Map for old IDs to new ones since we're deleting an entry\n\n        // Remove it from the node list\n        let nodeCount = 0;\n        const newNodes: List<NodeImmut> = this.nodes\n            .filter((n) => {\n                if (n.getID() === id) {\n                    nodeMap[n.getID()] = -1;\n                }\n                else {\n                    nodeMap[n.getID()] = nodeCount++;\n                }\n\n                return n.getID() !== id;\n            })\n            .map((node) => {\n                let label = node.getLabel();\n                if (node.getID().toString() === label) {\n                    label = nodeMap[node.getID()].toString();\n                }\n\n                return new NodeImmut(nodeMap[node.getID()], label, node.getAllAttributes());\n            }) as List<NodeImmut>;\n\n        // Remap edges\n        const newEdges: List<EdgeImmut> = this.edges\n            .filter((edge) => {\n                return !(edge.getFrom() === id || edge.getTo() === id);\n            })\n            .map((edge) => {\n                return new EdgeImmut(nodeMap[edge.getFrom()], nodeMap[edge.getTo()], edge.getWeight(), edge.getAllAttributes());\n            }) as List<EdgeImmut>;\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    addEdge(from: number, to: number, weight: any = 1): GraphImmut {\n        if (!this.weighted) {\n            weight = 1; // Ensure that edge weights are 1 if this is an unweighted graph\n        }\n\n        const newEdges = this.edges.push(new EdgeImmut(from, to, parseFloat(weight)));\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    deleteEdge(from: number, to: number, weight: any = null, deleteAll = true): GraphImmut {\n        if (weight !== null) {\n            weight = parseFloat(weight);\n        }\n\n        let foundOneEdge = false;\n        const newEdges: List<EdgeImmut> = this.edges.filter((edge) => {\n            // If we're not deleting everything and we have found one edge, then do not filter anymore\n            if (foundOneEdge && !deleteAll) {\n                return true;\n            }\n\n            // If we have an exact match\n            if (edge.getFrom() === from && edge.getTo() === to && (weight === null || edge.getWeight() === weight)) {\n                foundOneEdge = true;\n                return false; // Remove this edge\n            }\n\n            // If we are undirected, check for opposing matches\n            if (!this.directed) {\n                if (edge.getFrom() === to && edge.getTo() === from && (weight === null || edge.getWeight() === weight)) {\n                    foundOneEdge = true;\n                    return false; // Remove this edge\n                }\n            }\n\n            return true;\n        }) as List<EdgeImmut>;\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    editEdge(from: number, to: number, newWeight: any, oldWeight: any = null, color: string | null = null): GraphImmut | boolean {\n        let foundFirst = false;\n\n        if (oldWeight !== null) {\n            oldWeight = parseFloat(oldWeight);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge, index) => {\n            if (foundFirst) {\n                return;\n            }\n\n            if (((edge.getFrom() === from && edge.getTo() === to)\n                || (!this.isDirected() && edge.getFrom() === to && edge.getTo() === from))\n                && (oldWeight === null || edge.getWeight() === oldWeight)) {\n\n                if (color !== null) {\n                    newEdges = newEdges.set(index,\n                        edge.editEdge(newWeight === null ? null : parseFloat(newWeight),\n                            { color: color }));\n                }\n                else {\n                    newEdges = newEdges.set(index, edge.editEdge(newWeight === null ? null : parseFloat(newWeight)));\n                }\n                foundFirst = true;\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    getAllNodes(rich = false): NodeImmut[] | NodeImmutPlain[] {\n        if (rich) {\n            return this.nodes.toArray();\n        }\n        return this.nodes.map((node) => {\n            return node.toPlain();\n        }).toArray();\n    }\n\n    getAllNodesAsImmutableList(): Readonly<List<NodeImmut>> {\n        return this.nodes;\n    }\n\n    getAllEdgesAsImmutableList(): Readonly<List<EdgeImmut>> {\n        return this.edges;\n    }\n\n    getAllEdges(rich = false): EdgeImmut[] | EdgeImmutPlain[] {\n        if (rich) {\n            return this.edges.toArray();\n        }\n        return this.edges.map((edge) => {\n            return edge.toPlain();\n        }).toArray();\n    }\n\n    getNumberOfNodes(): number {\n        return this.numNodes;\n    }\n\n    getNumberOfEdges(): number {\n        return this.numEdges;\n    }\n\n    getAllOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.nodes.forEach((_, i) => {\n            degrees[i] = 0;\n        });\n        this.edges.forEach((edge) => {\n            degrees[edge.getFrom()]++;\n        });\n\n        return degrees;\n    }\n\n    asWeighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, true);\n    }\n\n    asUnweighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, false);\n    }\n\n    asDirected(doubleEdges = false): GraphImmut {\n        if (!doubleEdges) {\n            return new GraphImmut(this.nodes, this.edges, true, this.weighted);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.getTo(), edge.getFrom(), edge.getWeight(), edge.getAllAttributes()));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, true, this.weighted);\n    }\n\n    asUndirected(): GraphImmut {\n        let newEdges: List<EdgeImmut> = List();\n        const addedEdges: { [key: string]: null } = {};\n\n        this.edges.forEach((edge) => {\n            let from = edge.getFrom();\n            let to = edge.getTo();\n            if (to < from) {\n                from = to;\n                to = edge.getFrom();\n            }\n            if (!(`${from}_${to}` in addedEdges)) {\n                addedEdges[`${from}_${to}`] = null;\n                newEdges = newEdges.push(new EdgeImmut(from, to, edge.getWeight(), edge.getAllAttributes()));\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, false, this.weighted);\n    }\n\n    asChangedDirectedWeighted(directed: boolean, weighted: boolean): GraphImmut {\n        let G: GraphImmut = this;\n        if (directed && !this.directed) {\n            G = G.asDirected();\n        }\n        else if (!directed && this.directed) {\n            G = G.asUndirected();\n        }\n\n        if (weighted && !this.weighted) {\n            G = G.asWeighted();\n        }\n        else if (!weighted && this.weighted) {\n            G = G.asUnweighted();\n        }\n\n        return G;\n    }\n\n    getNodeAdjacency(id: number): number[] {\n        const adj: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() === id) {\n                adj.push(edge.getTo());\n            }\n            else if (!this.directed && edge.getTo() === id) {\n                adj.push(edge.getFrom());\n            }\n        });\n\n        return adj;\n    }\n\n    getFullAdjacency(): number[][] {\n        const adj: number[][] = [];\n        this.nodes.forEach((n) => {\n            adj[n.getID()] = this.getNodeAdjacency(n.getID());\n        });\n\n        return adj;\n    }\n\n    areAdjacent(id1: number, id2: number): boolean {\n        return this.getNodeAdjacency(id1).includes(id2);\n    }\n\n    getEdgesBetween(id1: number, id2: number): EdgeImmut[] {\n        const edgeList: EdgeImmut[] = [];\n        if (id1 >= this.numNodes || id2 >= this.numNodes) {\n            return edgeList;\n        }\n\n        this.edges.forEach((edge) => {\n            if (!this.directed && edge.getFrom() === id2 && edge.getTo() === id1) {\n                edgeList.push(edge);\n            }\n\n            if (edge.getFrom() === id1 && edge.getTo() === id2) {\n                edgeList.push(edge);\n            }\n        });\n\n        return edgeList;\n    }\n\n    getMinWeightEdgeBetween(id1: number, id2: number): number {\n        let minWeight = Infinity;\n        this.getEdgesBetween(id1, id2).forEach((edge) => {\n            if (edge.getWeight() < minWeight) {\n                minWeight = edge.getWeight();\n            }\n        });\n\n        return minWeight;\n    }\n\n    // Take a multigraph and reduce all multiple edges to a single edge, weighted using the reducer\n    reduceMultiGraph(reducer: (a: number, b: number) => number = Math.min, initialValue: any = Infinity): GraphImmut {\n        const multiEdges: EdgeImmutPlain[] = [];\n        this.nodes.forEach((node) => {\n            // If we have duplicates\n            const adj = this.getNodeAdjacency(node.getID());\n            const uniques = new Set(adj);\n            if (uniques.size < adj.length) {\n                uniques.forEach((to) => {\n                    const newWeight = this.getEdgesBetween(node.getID(), to).reduce((acc, edge) => {\n                        return reducer(acc, edge.getWeight());\n                    }, initialValue);\n\n                    multiEdges.push({ from: node.getID(), to, weight: parseFloat(newWeight) });\n                });\n            }\n        });\n\n        // Remove all multigraph edges and replace them with single new edges\n        let newEdges = this.edges.filter((edge) => {\n            let keep = true;\n            multiEdges.forEach((duplicateEdge) => {\n                if (edge.getFrom() === duplicateEdge.from && edge.getTo() === duplicateEdge.to) {\n                    keep = false;\n                }\n            });\n\n            return keep;\n        }) as List<EdgeImmut>;\n        multiEdges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.from, edge.to, edge.weight));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    isWeighted() {\n        return this.weighted;\n    }\n\n    isDirected() {\n        return this.directed;\n    }\n}\n","\"use strict\";\n\nexport interface NodeImmutPlain {\n    id: Readonly<number>;\n    label: string;\n    [key: string]: any;\n    [key: number]: any;\n}\n\nexport default class NodeImmut {\n    private readonly id: Readonly<number>;\n    private readonly label: Readonly<string>;\n    private readonly attributes: any;\n\n    constructor(id: any, label: null | string = null, extraAttrs: null | any = null) {\n        if (label === null) {\n            this.label = id.toString();\n        } else {\n            this.label = label;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.label = Object.freeze(this.label);\n        this.id = Object.freeze(id);\n\n        if (new.target === NodeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    toPlain(): NodeImmutPlain {\n        const toReturn: NodeImmutPlain = { id: this.id, label: this.label };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    getID(): Readonly<number> {\n        return this.id;\n    }\n\n    getLabel(): Readonly<string> {\n        return this.label;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    editNode(label: any = null, extraAttrs: any = null): NodeImmut {\n        if (label === null) {\n            label = this.getLabel();\n        }\n\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        if (extraAttrs !== null) {\n            Object.keys(extraAttrs).forEach(key => {\n                attributes[key] = extraAttrs[key];\n            });\n        }\n\n        return new NodeImmut(this.getID(), label, attributes);\n    }\n}\n","\"use strict\";\n\nimport { DataSet } from 'vis-data';\nimport { Node, Edge } from 'vis-network';\nimport help from './util/genericHelpers';\nimport GraphImmut from './classes/GraphImmut/GraphImmut';\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport NodeImmut, { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\n\ninterface UpToDateProperties {\n    name: string;\n    upToDate: boolean;\n    type: string;\n    always?: boolean;\n    applyFunc?: (ignoreDuplicate?: boolean) => any;\n    [index: string]: undefined | string | boolean | ((ignoreDuplicate?: boolean) => any)\n}\n\ninterface GraphProperties {\n    vertices: number;\n    edges: number;\n    eulerian: boolean;\n    \"Chromatic Number\": number | null;\n    \"Connected Components\": number | null;\n    \"Strongly Connected Components\": number | null;\n    cyclic: boolean;\n\n    [index: string]: boolean | number | null;\n}\n\ninterface GraphStateData {\n    stronglyConnectedComponents: null | { [key: number]: number };\n    connectedComponents: null | { [key: number]: number };\n    graphColoring: null | number[];\n\n    [index: string]: null | number[] | { [key: number]: number };\n}\n\nexport interface AddNodeI {\n    id?: number\n    label: string;\n    x: number;\n    y: number;\n    color?: string;\n}\n\nexport interface GraphStateHistory {\n    upToDate: UpToDateProperties[];\n    state: GraphStateData;\n    graph: GraphImmut;\n    graphProperties: GraphProperties;\n    [index: string]: UpToDateProperties[] | GraphStateData | GraphImmut | GraphProperties;\n}\n\nconst getInt = (v: string | number): number => {\n    if (typeof v === 'number') {\n        return v;\n    }\n    return parseInt(v);\n};\n\nexport default class GraphState {\n    public static workerPool: (Worker | null)[] = [];\n    public static backHistory: GraphStateHistory[] = [];\n    public static forwardHistory: GraphStateHistory[] = [];\n    public static maxHistory = 10;\n    public static upToDate: UpToDateProperties[] = [\n        {\n            name: \"Chromatic Number\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                return window.ui.makeAndPrintGraphColoring();\n            }\n        },\n        {\n            name: \"graphColoring\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                return window.ui.makeAndPrintGraphColoring();\n            }\n        },\n        { name: \"vertices\", upToDate: true, always: true, type: \"property\" },\n        { name: \"edges\", upToDate: true, always: true, type: \"property\" },\n        {\n            name: \"eulerian\", upToDate: false, type: \"property\",\n            applyFunc: (i) => {\n                return window.ui.makeAndPrintEulerian(i);\n            }\n        },\n        {\n            name: \"Connected Components\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"connectedComponents\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"Strongly Connected Components\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"stronglyConnectedComponents\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"cyclic\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                return window.ui.makeAndPrintIsCyclic();\n            }\n        },\n    ];\n    public static state: GraphStateData = {\n        stronglyConnectedComponents: null,\n        connectedComponents: null,\n        graphColoring: null,\n    };\n    public static graph: GraphImmut;\n    public static graphProperties: GraphProperties = {\n        vertices: 0,\n        edges: 0,\n        eulerian: false,\n        \"Chromatic Number\": null,\n        \"Connected Components\": null,\n        \"Strongly Connected Components\": null,\n        cyclic: false,\n    };\n\n    static setUpToDate(value = false, listOptions?: string[]) {\n        const all = listOptions === null || typeof listOptions === \"undefined\";\n        let property = false;\n        GraphState.upToDate.forEach((v) => {\n            if ((!(\"always\" in v) || !v.always) && (all || listOptions!.indexOf(v.name) > -1)) {\n                v.upToDate = value;\n                if (v.type === \"property\") {\n                    property = true;\n                }\n            }\n        });\n        if (property) {\n            GraphState.makeAndPrintProperties();\n        }\n    }\n\n    static async getProperty(property: keyof GraphProperties, updateIfNotUpdated = false, ignoreDuplicate = false): Promise<any> {\n        const a = GraphState.upToDate.find((v) => {\n            return (\"name\" in v && v.name === property);\n        })!;\n        if (!a.upToDate) {\n            if (\"applyFunc\" in a && typeof a.applyFunc === \"function\" && updateIfNotUpdated) {\n                await a.applyFunc(ignoreDuplicate);\n            }\n            else {\n                return null;\n            }\n        }\n        if (a.type === \"state\") {\n            return Promise.resolve(GraphState.state[property]);\n        }\n        return Promise.resolve(GraphState.graphProperties[property]);\n    }\n\n    static async makeAndPrintProperties(recalcLong = false) {\n        const directional = window.settings.getOption(\"direction\");\n\n        GraphState.graphProperties.vertices = GraphState.graph.getNumberOfNodes();\n        GraphState.graphProperties.edges = GraphState.graph.getNumberOfEdges();\n\n        if (!directional) {\n            await GraphState.getProperty(\"eulerian\", true, true);\n        }\n\n        const p = Object.keys(GraphState.graphProperties);\n        if (recalcLong) {\n            p.forEach(async (v) => {\n                await GraphState.getProperty(v, true);\n            });\n        }\n\n        const printableProperties: any = {};\n        await Promise.all(p.map(async (v) => {\n            printableProperties[v] = await GraphState.getProperty(v);\n        }));\n\n        GraphState.printGraphProperties(printableProperties);\n    }\n\n    static printGraphProperties(properties: any) {\n        let p = \"\";\n        Object.keys(properties).forEach((k) => {\n            if (properties[k] !== null) {\n                p += `${help.toTitleCase(k)}: ${properties[k]}\\n`;\n            }\n        });\n        p = p.trim();\n        p = help.htmlEncode(p);\n        document.getElementById(\"graphProps\")!.innerHTML = `<p class='nav-link'>${p}</p>`;\n    }\n\n    private static updateGraph(graph = GraphState.graph) {\n        let nodes = graph.getAllNodes() as NodeImmutPlain[];\n        let edges = graph.getAllEdges() as EdgeImmutPlain[];\n        if (!window.settings.getOption(\"customColors\")) {\n            nodes = GraphState.clearColorFromNodes(nodes);\n            edges = GraphState.clearColorFromEdges(edges);\n        }\n        window.main.setData({ nodes, edges });\n    }\n\n    static addEdge(from: number | string, to: number | string, weight = 0, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        graph = graph.addEdge(edgeFrom, edgeTo, weight);\n        this.updateGraph(graph);\n    }\n\n    static addNode(data: AddNodeI, graph = GraphState.graph) {\n        graph = graph.addNode({ label: data.label, x: data.x, y: data.y, color: data.color });\n        this.updateGraph(graph);\n    }\n\n    static editNode(id: number | string, label: string, color?: string, graph = GraphState.graph) {\n        const iId = getInt(id);\n        graph = graph.editNode(iId, { label, color });\n        window.main.setData(GraphState.getGraphData(graph), false, false);\n    }\n\n    static editEdge(from: number | string, to: number | string,\n        newWeight: number, oldWeight: number, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        const newGraph = graph.editEdge(edgeFrom, edgeTo, newWeight, oldWeight);\n        if (newGraph instanceof GraphImmut) {\n            window.main.setData(GraphState.getGraphData(newGraph), false, false);\n        }\n    }\n\n    static deleteEdge(from: number | string, to: number | string, weight: (undefined | null | number) = null, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        graph = graph.deleteEdge(edgeFrom, edgeTo, weight, false);\n        this.updateGraph(graph);\n    }\n\n    static deleteNode(id: number | string, graph = GraphState.graph) {\n        const iId = getInt(id);\n        const newGraph = graph.deleteNode(iId);\n        if (newGraph instanceof GraphImmut) {\n            this.updateGraph(newGraph);\n        }\n    }\n\n    static clearColorFromNodes(nodes: NodeImmutPlain[]): NodeImmutPlain[] {\n        nodes.forEach((v) => {\n            v.color = null;\n        });\n        return nodes;\n    }\n\n    static clearColorFromEdges(edges: EdgeImmutPlain[]): EdgeImmutPlain[] {\n        edges.forEach((v) => {\n            delete v.color;\n        });\n        return edges;\n    }\n\n    static nodeIDToLabel(id: number, graph = GraphState.graph): string {\n        const n = graph.getNode(id, true);\n        if (n !== false && n !== null && n instanceof NodeImmut && n.getLabel().trim().length > 0) {\n            return n.getLabel().trim();\n        }\n\n        return id.toString();\n    }\n\n    // Preferentially search by ID, label, and case-insensitive label\n    static nodeLabelToID(label: string, graph = GraphState.graph) {\n        let n = graph.getAllNodes(true) as NodeImmut[];\n        n = n.filter((node) => {\n            return node.getLabel().toLowerCase() === label.toLowerCase() || node.getID().toString() === label;\n        });\n\n        if (n.length === 0) {\n            return -1;\n        }\n        else if (n.length === 1) {\n            return n[0].getID();\n        }\n\n        let rID = -1;\n        let found = false;\n\n        n.forEach((node) => {\n            if (!found && node.getID().toString() === label) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        if (found) {\n            return rID;\n        }\n\n        n.forEach((node) => {\n            if (!found && node.getLabel() === label) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        if (found) {\n            return rID;\n        }\n\n        n.forEach((node) => {\n            if (!found && node.getLabel().toLowerCase() === label.toLowerCase()) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        return rID;\n    }\n\n    // Return graph as a Vis compatible dataset\n    static getGraphAsDataSet(graph: GraphImmut): { nodes: DataSet<Node>; edges: DataSet<Edge> } {\n        const d = GraphState.getGraphData(graph);\n        if (graph.isWeighted()) {\n            d.edges.forEach((e) => {\n                e.label = e.weight.toString();\n            });\n        }\n        d.edges.forEach((e) => {\n            if ('color' in e) {\n                e.color = { color: e.color };\n            }\n        });\n\n        return { nodes: new DataSet(d.nodes as Node[]), edges: new DataSet(d.edges as Edge[]) };\n    }\n\n    static setLocations(locations: { [key: string]: { x: number; y: number } }, graph = GraphState.graph): GraphImmut {\n        let newNodes = graph.getAllNodesAsImmutableList();\n        Object.keys(locations).forEach((i) => {\n            const v = locations[i];\n            const node = newNodes.get(parseInt(i))!;\n            // Only change when there is actually a new position\n            if (node.getAttribute(\"x\") !== v.x || node.getAttribute(\"y\") !== v.y) {\n                // Batch up all changes that we'll be making\n                newNodes = newNodes.set(parseInt(i), node.editNode(node.getLabel(), { x: v.x, y: v.y }));\n            }\n        });\n\n        return new GraphImmut(newNodes, graph.getAllEdgesAsImmutableList(), graph.isDirected(), graph.isWeighted());\n    }\n\n    static getGraphData(graph = GraphState.graph, clearNodeColors = false, clearEdgeColors = false): GraphPlain {\n        const nodes = graph.getAllNodes() as NodeImmutPlain[];\n        const edges = graph.getAllEdges() as EdgeImmutPlain[];\n        return {\n            nodes: clearNodeColors ? GraphState.clearColorFromNodes(nodes) : nodes,\n            edges: clearEdgeColors ? GraphState.clearColorFromEdges(edges) : edges,\n            directed: graph.isDirected(),\n            weighted: graph.isWeighted()\n        };\n    }\n}\n","import EN_US from \"src/EN_US\";\n\nexport enum Languages {\n    EN_US = \"EN_US\",\n\n}\n\nexport let current = {} as typeof EN_US;\n\n\nexport const setLanguage = async () => {\n    current = (await import(`../${window.settings.getOption(\"language\") || Languages.EN_US}.ts`)).default;\n};\n","\"use strict\";\n\nimport help, { ModalFormRow } from './util/genericHelpers';\nimport randomColor from 'randomcolor';\nimport GraphState, { AddNodeI, GraphStateHistory } from './graphState';\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport { Network, Node as VisNode, Edge } from \"vis-network\";\nimport { DataSet } from \"vis-data\";\nimport * as languages from \"./languages\";\n\n\nexport interface MainI {\n    graphState: typeof GraphState;\n    container: HTMLElement;\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback: Function) => void;\n    visOptions: {\n        interaction: { hover: boolean };\n        manipulation: {\n            addNode: (data: AddNodeI, callback: Function) => void;\n            editNode: (data: AddNodeI, callback: Function) => void;\n            addEdge: (data: VisEdgeInternal, callback?: Function) => void;\n            editEdge: (data: VisEdgeInternal, callback: Function) => void;\n            deleteEdge: (data: { edges: string[] }, callback?: Function) => void;\n            deleteNode: (data: { nodes: string[] }, callback: Function) => void\n        },\n        locale?: string,\n        locales?: any,\n    };\n    cancelEdit: (callback: Function) => void;\n    saveData: (data: any, callback: Function, operation: string, label: string, color: string) => Promise<void>;\n    nodeLabelIDValidator: (v: string) => (boolean | string);\n    applyColors: () => Promise<void>;\n    setData: (data: GraphPlain, recalcProps?: boolean, graphChanged?: boolean, rearrangeGraph?: boolean) => void;\n    saveState: () => void;\n    getStateForSaving: () => GraphStateHistory;\n    undo: () => void;\n    redo: () => void;\n    applyState: (undo?: boolean, newState?: any) => void;\n    saveStateLocalStorage: () => void;\n    shuffleNetworkLayout: () => void;\n    randomizeNetworkLayoutSeed: (network: VisNetworkInternals) => void;\n    addNetworkListeners: (network: Network) => void\n}\n\ninterface VisNetworkEvent {\n    edges: DataSet<Edge>;\n    nodes: DataSet<VisNode>;\n}\n\ninterface VisNetworkInternals extends Network {\n    layoutEngine: {\n        randomSeed: number,\n        initialRandomSeed: number\n    }\n}\n\ninterface VisEditEdgeInternal {\n    from: { id: string | number };\n    to: { id: string | number };\n    label?: string\n}\n\ninterface VisEdgeInternal {\n    from: string | number;\n    to: string | number;\n    id: string;\n    label?: string\n}\n\nconst customColorPallete = {\n    \"Default\": \"DEFAULT\",\n    \"Red\": \"red\",\n    \"Maroon\": \"maroon\",\n    \"Yellow\": \"yellow\",\n    \"Olive\": \"olive\",\n    \"Lime\": \"lime\",\n    \"Green\": \"green\",\n    \"Aqua\": \"aqua\",\n    \"Teal\": \"teal\",\n    \"Blue\": \"blue\",\n    \"Navy\": \"navy\",\n    \"Fuchsia\": \"fuchsia\",\n    \"Purple\": \"purple\",\n};\n\nconst self: MainI = {\n    graphState: GraphState,\n    container: document.getElementById('network')!,\n    // Function used to overwrite the edge edit functionality when weights are active\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback) => {\n        help.showFormModal(($modal, vals) => {\n            callback(null);\n            $modal.modal(\"hide\");\n            const value = parseFloat(vals[0]);\n            GraphState.editEdge(data.from.id, data.to.id, value, parseFloat(data.label!));\n        }, languages.current.EditEdge, languages.current.Save, languages.current.Cancel, [\n            {\n                type: \"numeric\",\n                label: languages.current.WeightCapacity,\n                initialValue: parseFloat(data.label!)\n            }\n        ]);\n    },\n    visOptions: {\n        interaction: { hover: true },\n        manipulation: {\n            addNode: async (data, callback) => {\n                const customColors = window.settings.getOption(\"customColors\");\n                const options: ModalFormRow[] = [\n                    {\n                        type: \"html\",\n                        initialValue: `<p>${help.stringReplacement(languages.current.NodeId, await GraphState.getProperty(\"vertices\"))}</p>`\n                    },\n                    { type: \"text\", label: languages.current.LabelLabel, initialValue: await GraphState.getProperty(\"vertices\") },\n                ];\n                if (customColors) {\n                    options.push({ type: \"select\", label: languages.current.Color, optionText: Object.keys(customColorPallete), optionValues: Object.values(customColorPallete) });\n                }\n                const $popup = help.makeFormModal(languages.current.AddNode, languages.current.Save, languages.current.Cancel, options);\n\n                $popup.on(\"click\", \".btn-success\", () => {\n                    $popup.modal(\"hide\");\n                    self.saveData(data, callback, \"add\", $popup.find(\"input\").first().val() as string, $popup.find(\"select\").first().val() as string);\n                }).on(\"click\", \".btn-cancel\", () => {\n                    $popup.modal(\"hide\");\n                    self.cancelEdit(callback);\n                }).on(\"hidden.bs.modal\", () => {\n                    $popup.remove();\n                    self.cancelEdit(callback);\n                }).modal(\"show\");\n            },\n            editNode: (data, callback) => {\n                const customColors = window.settings.getOption(\"customColors\");\n                const initialColor = Object.getOwnPropertyNames(data.color).includes(\"background\") ? (data.color as any).background : \"DEFAULT\";\n\n                const options: ModalFormRow[] = [\n                    {\n                        type: \"html\",\n                        initialValue: `<p>${help.stringReplacement(languages.current.NodeId, data.id + \"\")}</p>`\n                    },\n                    { type: \"text\", label: languages.current.LabelLabel, initialValue: data.label },\n                ];\n                if (customColors) {\n                    options.push({ type: \"select\", label: languages.current.Color, optionText: Object.keys(customColorPallete), optionValues: Object.values(customColorPallete), initialValue: initialColor });\n                }\n                const $popup = help.makeFormModal(languages.current.EditNode, languages.current.Save, languages.current.Cancel, options);\n\n                $popup.on(\"click\", \".btn-success\", () => {\n                    $popup.modal(\"hide\");\n                    self.saveData(data, callback, \"editNode\", $popup.find(\"input\").first().val() as string, $popup.find(\"select\").first().val() as string);\n                }).on(\"click\", \".btn-cancel\", () => {\n                    $popup.modal(\"hide\");\n                    self.cancelEdit(callback);\n                }).on(\"hidden.bs.modal\", () => {\n                    $popup.remove();\n                    self.cancelEdit(callback);\n                }).modal(\"show\");\n            },\n            addEdge: (data, callback) => {\n                const apply = () => {\n                    if (typeof callback === \"function\") {\n                        callback(null);\n                    }\n                    GraphState.addEdge(data.from, data.to);\n                };\n                if (data.from === data.to) {\n                    if (confirm(languages.current.ConnectNodeToItselfConfirmation)) {\n                        apply();\n                    }\n                    return;\n                }\n\n                apply();\n            },\n            editEdge: (data, callback) => {\n                callback(null);\n                self.visOptions.manipulation.deleteEdge({ edges: [data.id] });\n                self.visOptions.manipulation.addEdge(data);\n            },\n            deleteEdge: (data, callback) => {\n                if (typeof callback === \"function\") {\n                    callback(null);\n                }\n                data.edges.forEach((v: any) => {\n                    let weight = null;\n                    const edge = (window.network as any).body.data.edges.get(v);\n                    const weightFromLabel = edge.label;\n                    if (typeof weightFromLabel !== \"undefined\") {\n                        weight = parseFloat(weightFromLabel);\n                    }\n\n                    GraphState.deleteEdge(edge.from, edge.to, weight);\n                });\n            },\n            deleteNode: (data, callback) => {\n                callback(null);\n                data.nodes.forEach((v: string) => {\n                    GraphState.deleteNode(v);\n                });\n            },\n        },\n    },\n\n    cancelEdit: (callback) => {\n        if (typeof callback === \"function\") {\n            callback(null);\n        }\n    },\n\n    saveData: async (data, callback, operation, label, color) => {\n        callback(null);\n\n        data.label = label;\n        data.color = color;\n        if (color === \"DEFAULT\") {\n            data.color = undefined;\n        }\n        if (operation === \"add\") {\n            GraphState.addNode(data);\n        }\n        else if (operation === \"editNode\") {\n            GraphState.editNode(data.id, data.label, data.color);\n        }\n    },\n\n    nodeLabelIDValidator: (v) => {\n        if (GraphState.nodeLabelToID(v) > -1) {\n            return true;\n        }\n        return languages.current.InvalidLabelOrId;\n    },\n\n    applyColors: async () => {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n        const graphColors = await GraphState.getProperty(\"graphColoring\", true);\n        const chromaticNumber = await GraphState.getProperty(\"Chromatic Number\", true);\n\n        const colors = randomColor({ count: chromaticNumber, luminosity: \"light\" });\n        let G = GraphState.graph;\n        (G.getAllNodes() as NodeImmutPlain[]).forEach((v) => {\n            G = G.editNode(v.id, { color: colors[graphColors[v.id]] });\n        });\n        self.setData(GraphState.getGraphData(G), false, false);\n    },\n\n    setData: (data, recalcProps = false, graphChanged = true, rearrangeGraph = false) => {\n        // Store existing positions in the data if we're supposed to keep the layout\n        if (rearrangeGraph) {\n            data.nodes.forEach((v) => {\n                delete v.x;\n                delete v.y;\n            });\n        }\n\n        if (graphChanged) {\n            self.saveState();\n        }\n\n        if (\"directed\" in data && typeof data.directed !== \"undefined\") {\n            window.settings.changeOption(\"direction\", data.directed);\n        }\n        if (\"weighted\" in data && typeof data.weighted !== \"undefined\") {\n            window.settings.changeOption(\"weights\", data.weighted);\n        }\n        const directional = window.settings.getOption(\"direction\") as boolean;\n        const weighted = window.settings.getOption(\"weights\") as boolean;\n\n        const g = new GraphImmut(data.nodes, data.edges, directional, weighted);\n        GraphState.graph = g;\n\n        // Set a new random seed so that the layout will be different\n        self.randomizeNetworkLayoutSeed(window.network as unknown as VisNetworkInternals);\n        window.network.setData(GraphState.getGraphAsDataSet(g));\n        GraphState.graph = GraphState.setLocations(window.network.getPositions());\n\n        window.network.disableEditMode();\n        window.network.enableEditMode();\n\n        if (graphChanged) {\n            window.ui.stopLoadingAnimation();\n            window.ui.isRunning = {};\n            window.ui.terminateAllWebWorkers();\n            window.ui.printGraphAlgorithms();\n            help.printout(\"\");\n            GraphState.setUpToDate();\n            GraphState.makeAndPrintProperties(recalcProps);\n        }\n\n        self.saveStateLocalStorage();\n    },\n\n    saveState: () => {\n        if (GraphState.graph === null) {\n            return;\n        }\n\n        if (GraphState.backHistory.length >= GraphState.maxHistory) {\n            GraphState.backHistory.shift();\n        }\n\n        GraphState.backHistory.push(self.getStateForSaving());\n        GraphState.forwardHistory = [];\n        document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n    },\n\n    getStateForSaving: () => {\n        const state: any = {};\n        Object.keys(GraphState).forEach((k: string) => {\n            const v: any = (GraphState as any)[k];\n            if (typeof v !== \"function\") {\n                if (typeof v !== \"object\") {\n                    state[k] = v;\n                }\n                else {\n                    if (k === \"graph\" && v !== null) {\n                        state[k] = v;\n                    }\n                    if (!k.toLowerCase().includes(\"history\")) {\n                        state[k] = help.deepCopy(true, Array.isArray(v) ? [] : {}, v);\n                    }\n                }\n            }\n        });\n\n        return state as GraphStateHistory;\n    },\n\n    undo: () => {\n        if (GraphState.backHistory.length > 0) {\n            self.applyState(true);\n        }\n    },\n\n    redo: () => {\n        if (GraphState.forwardHistory.length > 0) {\n            self.applyState(false);\n        }\n    },\n\n    applyState: (undo = true, newState: null | GraphStateHistory = null) => {\n        const firstLoad = newState !== null;\n        const currentState = self.getStateForSaving();\n\n        if (!firstLoad) {\n            if (undo) {\n                newState = GraphState.backHistory.pop()!;\n            }\n            else {\n                newState = GraphState.forwardHistory.pop()!;\n            }\n        }\n\n        //@ts-ignore Ignore accessing private props. I do this because saving the state lost the type of the data\n        newState.graph = new GraphImmut(newState.graph.nodes, newState.graph.edges, newState.graph.directed, newState.graph.weighted);\n\n        window.settings.changeOption(\"direction\", newState!.graph.isDirected());\n        window.settings.changeOption(\"weights\", newState!.graph.isWeighted());\n\n        GraphState.graph = newState!.graph;\n\n        window.network.setData(GraphState.getGraphAsDataSet(GraphState.graph));\n        window.network.disableEditMode();\n        window.network.enableEditMode();\n\n        window.ui.printGraphAlgorithms();\n        help.printout(\"\");\n\n        Object.keys(newState!).forEach((k: string) => {\n            const v = newState![k];\n            if (typeof v !== \"object\") {\n                (GraphState as any)[k] = v;\n            }\n            else if (!k.toLowerCase().includes(\"history\") && k.toLowerCase() !== \"graph\") {\n                if (k.toLowerCase() === \"uptodate\") {\n                    Object.keys((GraphState as any)[k]).forEach((oldKey) => {\n                        (GraphState as any)[k][oldKey].upToDate = (v as any)[oldKey].upToDate;\n                    });\n                }\n                else {\n                    (GraphState as any)[k] = help.deepCopy(true, (GraphState as any)[k], v);\n                }\n            }\n        });\n\n        GraphState.makeAndPrintProperties().then(() => {\n            if (undo && !firstLoad) {\n                document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n                if (GraphState.backHistory.length === 0) {\n                    document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\n                }\n                GraphState.forwardHistory.push(currentState);\n            }\n            else if (!undo && !firstLoad) {\n                document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n                if (GraphState.forwardHistory.length === 0) {\n                    document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\n                }\n                GraphState.backHistory.push(currentState);\n            }\n\n            self.saveStateLocalStorage();\n        });\n    },\n\n    saveStateLocalStorage: () => {\n        if (window.settings.checkForLocalStorage()) {\n            localStorage.setItem(\"graphPlayground.lastState\", JSON.stringify(self.getStateForSaving()));\n        }\n    },\n\n    shuffleNetworkLayout: () => {\n        self.setData({\n            nodes: GraphState.graph.getAllNodes() as NodeImmutPlain[],\n            edges: GraphState.graph.getAllEdges() as EdgeImmutPlain[]\n        }, false, false, true);\n    },\n\n    randomizeNetworkLayoutSeed: (network) => {\n        const r = Math.round(Math.random() * 1000000);\n        network.layoutEngine.randomSeed = r;\n        network.layoutEngine.initialRandomSeed = r;\n    },\n\n    addNetworkListeners: (network) => {\n        // Enable edit node/edge when double clicking\n        network.on(\"doubleClick\", (p: VisNetworkEvent) => {\n            if (window.settings.getOption(\"weights\") && \"edges\" in p && p.edges.length === 1) {\n                network.editEdgeMode();\n            }\n            if (\"nodes\" in p && p.nodes.length === 1) {\n                lastNetworkClickEvent = null;\n                network.editNode();\n            }\n        });\n\n        // Save locations of nodes after dragging\n        network.on(\"dragEnd\", () => {\n            GraphState.graph = GraphState.setLocations(network.getPositions());\n            self.saveStateLocalStorage(); // Save the new locations as part of the state\n        });\n\n        // Delete nodes/edges when hit \"Delete\"\n        let lastNetworkClickEvent: Event | null = null;\n        network.on('click', (event) => {\n            lastNetworkClickEvent = event;\n        });\n\n        // Delete key to delete node or edge\n        document.addEventListener('keyup', (key) => {\n            if (key.key === \"Delete\" && lastNetworkClickEvent !== null) {\n                if (self.container.contains((lastNetworkClickEvent as any).event.target)) {\n                    if ((\"edges\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).edges.length === 1)\n                        || (\"nodes\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).nodes.length === 1)) {\n                        network.deleteSelected();\n                    }\n                }\n            }\n        });\n\n        // Undo/Redo keyboard commands\n        document.addEventListener(\"keydown\", (e) => {\n            if ((e.key.toLowerCase() === 'y' && e.ctrlKey) || (e.key.toLowerCase() === 'z' && e.ctrlKey && e.shiftKey)) {\n                self.redo();\n            }\n            else if (e.key.toLowerCase() === 'z' && e.ctrlKey) {\n                self.undo();\n            }\n        });\n\n        // When clicking off of the network, remove the Delete functionality\n        document.addEventListener(\"click\", (e) => {\n            if (self.container !== e.target && !self.container.contains(e.target as Node)) {\n                lastNetworkClickEvent = null;\n            }\n        });\n    },\n\n};\n\nexport default self;\n","\"use strict\";\ninterface SettingsList {\n    nodePhysics: boolean;\n    direction: boolean;\n    weights: boolean;\n\n    [index: string]: boolean;\n}\n\nexport default class Settings {\n    private static readonly defaults: SettingsList = {\n        nodePhysics: true,\n        direction: false,\n        weights: false\n    };\n    private static current: any = {};\n\n    public static checkForLocalStorage() {\n        try {\n            const x = \"__storage_test__\";\n            localStorage.setItem(x, x);\n            localStorage.removeItem(x);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    public static saveSettings() {\n        if (Settings.checkForLocalStorage()) {\n            localStorage.setItem(\"graphPlayground.settings\", JSON.stringify(Settings.current));\n        }\n    }\n\n    public static loadSettings() {\n        if (Settings.checkForLocalStorage()) {\n            const settings = localStorage.getItem(\"graphPlayground.settings\");\n            if (settings === null) {\n                Settings.current = settings;\n            } else {\n                Settings.current = JSON.parse(settings);\n            }\n        }\n        if (Settings.current === null) {\n            Settings.current = {};\n        }\n        Settings.setAll();\n    }\n\n    public static setAll() {\n        window.network.setOptions({ nodes: { physics: Settings.getOption(\"nodePhysics\") as boolean } });\n        window.network.setOptions({ edges: { arrows: { to: Settings.getOption(\"direction\") as boolean } } });\n        if (Settings.getOption(\"weights\")) {\n            window.network.setOptions({\n                manipulation: {\n                    editEdge: {\n                        editWithoutDrag: window.main.visWeightEdgeEdit\n                    }\n                }\n            });\n        } else {\n            window.network.setOptions({ manipulation: { editEdge: window.main.visOptions.manipulation.editEdge } });\n        }\n    }\n\n    public static changeOption(option: string, value: string | boolean): void {\n        Settings.current[option] = value;\n        Settings.saveSettings();\n        Settings.setAll();\n    }\n\n    public static getOption(option: string): string | boolean {\n        if (option in Settings.current) {\n            return Settings.current[option];\n        }\n        return Settings.defaults[option];\n    }\n}\n","\"use strict\";\n\nimport * as $ from \"jquery\";\n\nexport declare interface ModalFormRow {\n    type: string;\n    label?: string;\n    initialValue?: any;\n    id?: string | number;\n    extraAttrs?: any;\n    validationFunc?: (value: any, container: JQuery) => boolean | string;\n    clickDismiss?: boolean;\n    onclick?: (...args: any[]) => void;\n    optionText?: any[];\n    optionValues?: any[];\n}\n\ndeclare interface BasicMapType {\n    class: string;\n    id: string;\n    value: any;\n\n    [key: number]: any;\n\n    [key: string]: any;\n}\n\nconst defaultCancelCb = ($modal: JQuery) => {\n    $modal.modal(\"hide\");\n};\n\nconst self = {\n    deepCopy(deep: boolean, clone: any, copy: any) {\n        const isPlainObject = (obj: any) => {\n            if (!obj || {}.toString.call(obj) !== \"[object Object]\") {\n                return false;\n            }\n\n            let proto = Object.getPrototypeOf(obj);\n\n            if (!proto) {\n                return true;\n            }\n\n            // Objects with prototype are plain iff they were constructed by a global Object function\n            let Ctor = {}.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n            return (\n                typeof Ctor === \"function\" &&\n                {}.hasOwnProperty.toString.call(Ctor) === {}.hasOwnProperty.toString.call(Object)\n            );\n        };\n\n        let options,\n            name,\n            src,\n            copyIsArray,\n            target = arguments[0] || {},\n            i = 1,\n            length = arguments.length;\n\n        // Handle a deep copy situation\n        if (typeof target === \"boolean\") {\n            deep = target;\n\n            // Skip the boolean and the target\n            target = arguments[i] || {};\n            i++;\n        }\n\n        // Handle case when target is a string or something (possible in deep copy)\n        if (typeof target !== \"object\" && typeof target !== \"function\") {\n            target = {};\n        }\n\n        if (i === length) {\n            target = this;\n            i--;\n        }\n\n        for (; i < length; i++) {\n            // Only deal with non-null/undefined values\n            if ((options = arguments[i]) != null) {\n                // Extend the base object\n                for (name in options) {\n                    src = target[name];\n                    copy = options[name];\n\n                    // Prevent never-ending loop\n                    if (target === copy) {\n                        continue;\n                    }\n\n                    // Recurse if we're merging plain objects or arrays\n                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n                        if (copyIsArray) {\n                            copyIsArray = false;\n                            clone = src && Array.isArray(src) ? src : [];\n                        } else {\n                            clone = src && isPlainObject(src) ? src : {};\n                        }\n\n                        // Never move original objects, clone them\n                        target[name] = self.deepCopy(deep, clone, copy);\n\n                        // Don't bring in undefined values\n                    } else if (copy !== undefined) {\n                        target[name] = copy;\n                    }\n                }\n            }\n        }\n\n        // Return the modified object\n        return target;\n    },\n\n    deepFreeze: <T extends Object>(o: T): Readonly<T> => {\n        Object.freeze(o);\n\n        Object.getOwnPropertyNames(o).forEach((prop: string | number) => {\n            if (\n                o.hasOwnProperty(prop) &&\n                (o as any)[prop] !== null &&\n                (typeof (o as any)[prop] === \"object\" || typeof (o as any)[prop] === \"function\") &&\n                !Object.isFrozen((o as any)[prop])\n            ) {\n                self.deepFreeze((o as any)[prop]);\n            }\n        });\n\n        return o;\n    },\n\n    sort: <T>(arr: T[], compareFunction: (a: any, b: any) => number): T[] => {\n        return [...arr].sort(compareFunction);\n    },\n\n    datasetToArray: (ds: any, key: string): Readonly<any[]> => {\n        const r: any[] = [];\n        ds.forEach((v: { [index: string]: any }) => {\n            r.push(v[key]);\n        });\n        return self.deepFreeze(r);\n    },\n\n    keepOnlyKeys: <T>(arr: T[], keys: string[]): Readonly<T[]> => {\n        arr = arr.slice();\n        arr.forEach((v: any) => {\n            const k = Object.keys(v);\n            k.forEach(key => {\n                if (keys.indexOf(key) < 0) {\n                    delete v[key];\n                }\n            });\n        });\n        return self.deepFreeze(arr);\n    },\n\n    getFileExtension: (filename: string): string => {\n        return filename.split(\".\").splice(-1)[0];\n    },\n\n    htmlEncode: (string: string): string => {\n        const t = document.createElement(\"textarea\");\n        t.textContent = string;\n        string = t.innerHTML.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\");\n        return string;\n    },\n\n    printout: (text: string, escape?: string): void => {\n        if (escape) {\n            text = self.htmlEncode(escape);\n        }\n        document.getElementById(\"printout\")!.innerHTML = text;\n    },\n\n    flatten: <T>(map: { [key: string]: T }): Readonly<T[]> => {\n        const r: T[] = [];\n        Object.keys(map).forEach(i => {\n            r.push(map[i]);\n        });\n        return self.deepFreeze(r);\n    },\n\n    rotate: (map: { [key: string]: any }): Readonly<any> => {\n        const r: any = {};\n        Object.keys(map).forEach(i => {\n            if (map[i] in r) {\n                r[map[i]].push(i);\n            } else {\n                r[map[i]] = [i];\n            }\n        });\n        return self.deepFreeze(r);\n    },\n\n    max: (iterable: any[]): number => {\n        return iterable.reduce((a, b) => {\n            return Math.max(a, b);\n        });\n    },\n\n    toTitleCase: (str: string): string => {\n        return str.replace(/(?:^|\\s)\\w/g, match => {\n            return match.toUpperCase();\n        });\n    },\n\n    stringReplacement: (str: string, ...replacements: string[]) => {\n        return replacements.reduce((val, replacement, i) => {\n            return val.replace(`$${i + 1}`, replacement);\n        }, str);\n    },\n\n    showSimpleModal: (title: string, body: string): void => {\n        self.showFormModal(null, title, null, null, [{ type: \"html\", initialValue: body }], null, false);\n    },\n\n    makeFormModal: (title: string, successText: string | null, cancelText: string | null, form: ModalFormRow[], footer = true): JQuery => {\n        const f = $(\"<div>\", { class: \"modal-body form-group\" });\n        form.forEach((formRow, i) => {\n            if (!(\"initialValue\" in formRow)) {\n                formRow.initialValue = \"\";\n            }\n\n            let id = \"form-modal-\" + i;\n            if (\"id\" in formRow && formRow.id !== \"\" && formRow.id !== null && typeof formRow.id === \"string\") {\n                id = formRow.id;\n            }\n\n            const basicMap: BasicMapType = { class: \"form-control\", id, value: formRow.initialValue };\n\n            if (\"extraAttrs\" in formRow) {\n                Object.keys(formRow.extraAttrs).forEach(attrname => {\n                    if (typeof formRow.extraAttrs[attrname] !== \"function\") {\n                        basicMap[attrname] = formRow.extraAttrs[attrname];\n                    }\n                });\n            }\n\n            let validFunc: typeof formRow[\"validationFunc\"] = () => true;\n            if (\"validationFunc\" in formRow && typeof formRow.validationFunc === \"function\") {\n                validFunc = formRow.validationFunc;\n            }\n\n            const generalValidator = (event: any, valueMutator: null | ((v: any) => any) = null) => {\n                const $v = $(event.target);\n                let val = $v.val();\n                if (valueMutator !== null && typeof valueMutator === \"function\") {\n                    val = valueMutator(val);\n                }\n                const valid = validFunc!(val, $v);\n\n                if (valid === true) {\n                    $v.removeClass(\"is-invalid\")\n                        .next(\"#feedback-\" + i)\n                        .remove();\n                } else {\n                    $v.addClass(\"is-invalid\");\n                    if ($v.next(\"#feedback-\" + i).length === 0) {\n                        $v.after($(\"<div>\", { class: \"invalid-feedback\", id: \"feedback-\" + i }).text(valid));\n                    }\n                }\n            };\n\n            if (formRow.type === \"html\") {\n                f.append($(formRow.initialValue));\n            } else if (formRow.type === \"checkbox\") {\n                basicMap.type = \"checkbox\";\n                basicMap.class = \"form-check-input\";\n                delete basicMap.value;\n                if (formRow.initialValue) {\n                    basicMap.checked = \"\";\n                }\n\n                f.append(\n                    $(\"<div>\", { class: \"form-check\" }).append(\n                        $(\"<label>\", { for: id, class: \"form-check-label\" })\n                            .text(formRow.label!)\n                            .prepend($(\"<input>\", basicMap))\n                    )\n                );\n            } else {\n                f.append($(\"<label>\", { for: id, class: \"col-form-label\" }).text(formRow.label!));\n\n                if (formRow.type === \"button\") {\n                    if (\"clickDismiss\" in formRow && formRow.clickDismiss === true) {\n                        basicMap.class += \" btn-dismiss\";\n                    }\n                    const $b = $(\"<button>\", basicMap).text(formRow.initialValue);\n                    if (\"onclick\" in formRow && typeof formRow.onclick === \"function\") {\n                        $b.on(\"click\", formRow.onclick);\n                    }\n                    f.append($b);\n                } else if (formRow.type === \"numeric\") {\n                    basicMap.type = \"number\";\n                    f.append(\n                        $(\"<input>\", basicMap).on(\"blur validate\", e => {\n                            generalValidator(e, parseFloat);\n                        })\n                    );\n                } else if (formRow.type === \"text\") {\n                    basicMap.type = \"text\";\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\n                } else if (formRow.type === \"file\") {\n                    basicMap.type = \"file\";\n                    basicMap.class = \"form-control-file form-control\";\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\n                } else if (formRow.type === \"textarea\") {\n                    const $b = $(\"<textarea>\", basicMap).on(\"blur validate\", generalValidator);\n                    if (\"onclick\" in formRow) {\n                        $b.on(\"click\", formRow.onclick!);\n                    }\n                    f.append($b);\n                } else if (formRow.type === \"select\") {\n                    const $options = $(\"<select>\", basicMap);\n                    formRow.optionText!.forEach((oText, oIndex) => {\n                        if (oIndex < formRow.optionValues!.length) {\n                            let selected = false;\n                            if (formRow.initialValue === formRow.optionValues![oIndex]) {\n                                selected = true;\n                            }\n                            $options.append($(\"<option>\", { value: formRow.optionValues![oIndex], selected }).text(oText));\n                        } else {\n                            let selected = false;\n                            if (formRow.initialValue === oText) {\n                                selected = true;\n                            }\n                            $options.append($(\"<option>\", { selected }).text(oText));\n                        }\n                    });\n                    f.append($options.on(\"blur validate\", generalValidator));\n                }\n            }\n        });\n\n        let $footer: JQuery<HTMLElement> | null = $(\"<div>\", { class: \"modal-footer\" })\n            .append($(\"<button>\", { class: \"btn btn-success\", type: \"button\" }).text(successText!))\n            .append($(\"<button>\", { class: \"btn btn-danger btn-cancel\", type: \"button\" }).text(cancelText!));\n\n        if (footer === false) {\n            $footer = null;\n        }\n\n        const $modal = $(\"<div>\", { class: \"modal fade\", tabindex: \"-1\", role: \"dialog\", \"aria-hidden\": \"true\" });\n        $modal.append(\n            $(\"<div>\", { class: \"modal-dialog\" }).append(\n                $(\"<div>\", { class: \"modal-content\" })\n                    .append(\n                        $(\"<div>\", { class: \"modal-header\" })\n                            .append($(\"<h5>\", { class: \"modal-title\" }).text(title))\n                            .append(\n                                $(\"<button>\", {\n                                    class: \"close\",\n                                    \"data-dismiss\": \"modal\",\n                                    \"aria-label\": \"close\"\n                                }).append($(\"<span>\", { \"aria-hidden\": \"true\" }).html(\"&times;\"))\n                            )\n                    )\n                    .append(f)\n                    .append($footer!)\n            )\n        );\n        $modal\n            .find(\"input, textarea\")\n            .off(\"keyup\")\n            .on(\"keyup\", e => {\n                if (e.key === \"Enter\") {\n                    $(\".btn-success\")\n                        .last()\n                        .trigger(\"click\");\n                }\n            });\n        $modal.on(\"shown.bs.modal\", () => {\n            $modal\n                .find(\"input[type='text'], input[type='number'], textarea\")\n                .first()\n                .trigger(\"focus\");\n        });\n\n        return $modal;\n    },\n\n    showFormModal: (\n        successCb: null | (($modal: JQuery, vals: any[]) => void),\n        title: string,\n        successText: string | null,\n        cancelText: string | null,\n        form: ModalFormRow[],\n        cancelCb: null | (($modal: JQuery) => void) = defaultCancelCb,\n        footer = true\n    ) => {\n        const $modal = self.makeFormModal(title, successText, cancelText, form, footer);\n\n        $modal\n            .on(\"click\", \".btn-cancel\", () => {\n                if (typeof cancelCb === \"function\") {\n                    cancelCb($modal);\n                } else {\n                    $modal.modal(\"hide\");\n                }\n            })\n            .on(\"click\", \".btn-dismiss\", () => {\n                $modal.modal(\"hide\");\n            })\n            .on(\"click\", \".btn-success\", () => {\n                const vals: any[] = [];\n                let hasErrors = false;\n\n                $modal.find(\"input, textarea, select\").each((i, v) => {\n                    const $v = $(v);\n\n                    if (($v as any).tagName === \"SELECT\") {\n                        vals.push($v.find(\":selected\").val());\n                    } else if ($v.attr(\"type\") === \"checkbox\") {\n                        vals.push($v.prop(\"checked\"));\n                    } else if ($v.attr(\"type\") === \"file\") {\n                        vals.push(($v.get(0) as any).files);\n                    } else if ($v.attr(\"type\") === \"number\") {\n                        vals.push(parseFloat($v.val() as string));\n                    } else {\n                        vals.push($v.val());\n                    }\n\n                    if ($v.trigger(\"validate\").hasClass(\"is-invalid\")) {\n                        hasErrors = true;\n                    }\n                });\n\n                if (!hasErrors && typeof successCb === \"function\") {\n                    successCb($modal, vals);\n                }\n            })\n            .on(\"hidden.bs.modal\", () => {\n                if (typeof cancelCb === \"function\") {\n                    cancelCb($modal);\n                }\n                $modal.remove();\n            })\n            .modal(\"show\");\n    }\n};\n\nexport default self;\n","\"use strict\";\n\nimport {EdgeImmutPlain} from \"../classes/GraphImmut/EdgeImmut\";\nimport {NodeImmutPlain} from \"../classes/GraphImmut/NodeImmut\";\n\ninterface Degree {\n    in: number;\n    out: number;\n}\n\nexport default {\n    findVertexDegreesDirectional: (adjacencyMatrix: Array<Array<number>>): Degree[] => {\n        // Adjacency stores IDs of edges TO\n        const degrees: Degree[] = [];\n        adjacencyMatrix.forEach((v, i) => {\n            if (i in degrees) {\n                degrees[i].out += v.length;\n            }\n            else {\n                degrees[i] = {out: v.length, in: 0};\n            }\n            v.forEach((outV) => {\n                if (outV in degrees) {\n                    degrees[outV].in += 1;\n                }\n                else {\n                    degrees[outV] = {in: 1, out: 0};\n                }\n            });\n        });\n\n        return degrees;\n    },\n\n    interpolateNodesFromEdges: (edges: EdgeImmutPlain[]): NodeImmutPlain[] => {\n        const nodes: NodeImmutPlain[] = [];\n        edges.forEach((v) => {\n            nodes[v.from] = {id: v.from, label: v.from.toString()};\n            nodes[v.to] = {id: v.to, label: v.to.toString()};\n        });\n\n        return nodes;\n    },\n};\n","var map = {\n\t\"./EN_US.ts\": [\n\t\t216,\n\t\t9,\n\t\t872\n\t],\n\t\"./custom.d.ts\": [\n\t\t883,\n\t\t7,\n\t\t883\n\t],\n\t\"./js/GraphAlgorithms.ts\": [\n\t\t446,\n\t\t9,\n\t\t446\n\t],\n\t\"./js/UIInteractions.ts\": [\n\t\t825,\n\t\t9\n\t],\n\t\"./js/app.ts\": [\n\t\t238,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/EdgeImmut.ts\": [\n\t\t268,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/GraphImmut.ts\": [\n\t\t536,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/NodeImmut.ts\": [\n\t\t729,\n\t\t9\n\t],\n\t\"./js/classes/SpanningTree.ts\": [\n\t\t866,\n\t\t9,\n\t\t866\n\t],\n\t\"./js/dataImportExport.ts\": [\n\t\t346,\n\t\t9,\n\t\t346\n\t],\n\t\"./js/graphState.ts\": [\n\t\t669,\n\t\t9\n\t],\n\t\"./js/languages.ts\": [\n\t\t119,\n\t\t9\n\t],\n\t\"./js/main.ts\": [\n\t\t863,\n\t\t9\n\t],\n\t\"./js/settings.ts\": [\n\t\t660,\n\t\t9\n\t],\n\t\"./js/util/genericHelpers.ts\": [\n\t\t485,\n\t\t9\n\t],\n\t\"./js/util/graphHelpers.ts\": [\n\t\t641,\n\t\t9\n\t],\n\t\"./js/util/predefinedGraphs.ts\": [\n\t\t133,\n\t\t9,\n\t\t981\n\t],\n\t\"./js/workers/GraphAlgorithmWorker.ts\": [\n\t\t69,\n\t\t9,\n\t\t69\n\t],\n\t\"./js/workers/pwaServiceWorker.ts\": [\n\t\t304,\n\t\t7,\n\t\t304\n\t],\n\t\"./overloadTypes.d.ts\": [\n\t\t595,\n\t\t7,\n\t\t595\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__.t(id, ids[1] | 16)\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 529;\nmodule.exports = webpackAsyncContext;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \"-\" + {\"69\":\"fe78658085d9d04c2fc7\",\"304\":\"c75bb2081ea5af1e49ef\",\"346\":\"7ef4d9c40c37adef80c6\",\"446\":\"fc1838498df45888bba3\",\"595\":\"344ee0253b4425f47a86\",\"866\":\"81cb318a555089b5d71a\",\"872\":\"f0d41528df5b8524e2a1\",\"883\":\"a38f81f41793f45c91ad\",\"981\":\"3f8b0cd093a8e79764eb\"}[chunkId] + \".min.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t296: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkgraphPlayground\"] = self[\"webpackChunkgraphPlayground\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [216], () => (__webpack_require__(238)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","Worker_fn","Worker","makeAndPrintShortestPath","title","fn","weighted","myName","languages","current","ShortestPath","UIInteractions","isRunning","printAlreadyRunning","showFormModal","$modal","values","modal","source","nodeLabelToID","sink","iStartedProgress","startLoadingAnimation","w","getWorkerIfPossible","e","a","data","cleanup","stopLoadingAnimation","p","stringReplacement","NoPathFromAToB","htmlEncode","toString","pathExists","ShortestPathFromAToB","nodeIDToLabel","distance","WithWeightedCost","cost","UsingPath","graph","getGraphData","GraphImmut","nodes","edges","directed","path","forEach","v","i","editEdge","window","main","setData","slice","printout","includes","showSimpleModal","DijkstraError","DijkstraErrorHTML","BellmanFordError","BellmanFordErrorHTML","send","type","args","convertToGraphImmut","graphState","Go","Cancel","label","StartNode","validationFunc","nodeLabelIDValidator","EndNode","makeAndPrintComponents","stronglyConnected","cc","ConnectedComponents","componentKey","settings","getOption","StronglyConnectedComponents","Promise","reject","TaskAlreadyRunning","graphProperties","count","setUpToDate","state","components","flatten","NumberOfConnectedComponents","VertexIsInConnectedComponentNumber","JSON","stringify","rotate","id","listener","this","worker","postMessage","onmessage","terminate","workerPool","getAlgorithms","name","GraphColoring","directional","applyFunc","makeAndPrintGraphColoring","display","BFS","Dijkstra","BellmanFord","FordFulkerson","makeAndPrintFFMCMF","KruskalMST","makeAndPrintKruskal","Cyclic","makeAndPrintIsCyclic","TopoSort","makeAndPrintTopologicalSort","Eulerian","makeAndPrintDirectionalEulerian","registerListeners","makeSimpleClickListener","selector","document","querySelector","addEventListener","preventDefault","printHelp","printOptions","predefined","default","Petersen","Konigsberg","Complete","Hypercube","Custom","undo","redo","makeAndPrintProperties","shuffleNetworkLayout","makeImportFileModal","makeImportTextModal","makeExportFileModal","makeExportTextModal","innerText","File","ImportFile","ImportText","ExportFile","ExportText","CalculateAllProperties","NewGraphLayout","GraphOptions","Help","ExampleGraphs","LoadPetersen","LoadKonigsberg","LoadComplete","LoadHypercube","LoadCustom","Algorithms","GraphProperties","Results","IssuesHTML","vals","changeOption","G","asDirected","asUndirected","asWeighted","asUnweighted","Options","Save","GraphPhysics","initialValue","DiGraph","WeightedGraph","CustomNodeColors","terminateAllWebWorkers","nextIndex","findIndex","length","WorkerProxy","prog","getElementById","style","n","ThisTask","TaskAlreadyRunningBody","resolve","getProperty","chromaticNumber","colors","graphColoring","printGC","NumberOfVertices","ChromaticNumberIs","VertexGetsColor","GraphColoringTitle","ReColor","applyColors","eulerian","scc","findVertexDegreesDirectional","getFullAdjacency","makeAndPrintEulerian","ignoreDuplicate","getAllOutDegrees","cb","FordFulkersonMaxFlowMinCut","MaxFlowFromAToB","maxFlow","UsingCapacities","flowPath","FlowWithCapacity","from","to","flow","capacity","trim","SourceNode","SinkNode","KruskalMSTTotalWeight","totalWeight","UsingEdges","mst","EdgeImmut","getFrom","getTo","cyclic","TopoSortErrorHTML","printGraphAlgorithms","$div","innerHTML","addAlgoToPane","alg","navlink","createElement","classList","add","setAttribute","appendChild","then","ui","visOptions","locales","VisLocale","locale","network","Network","container","loadSettings","addNetworkListeners","loadDefault","checkForLocalStorage","s","localStorage","getItem","jsonGraph","parse","applyState","weight","extraAttrs","Object","keys","filter","key","reduce","obj","attributes","freeze","parseFloat","getWeight","getAttribute","attribute","getAllAttributes","toPlain","toReturn","newWeight","assign","filterExtraAttr","labels","filterNodeExtraAttr","nodeMap","Error","newNodes","Math","floor","set","map","genericNodesToImmutNodes","numNodes","size","newEdges","edge","push","genericEdgesToImmutEdges","numEdges","getNode","rich","node","get","addNode","editNode","has","getLabel","deleteNode","nodeCount","getID","addEdge","deleteEdge","deleteAll","foundOneEdge","oldWeight","color","foundFirst","index","isDirected","getAllNodes","toArray","getAllNodesAsImmutableList","getAllEdgesAsImmutableList","getAllEdges","getNumberOfNodes","getNumberOfEdges","degrees","_","doubleEdges","addedEdges","asChangedDirectedWeighted","getNodeAdjacency","adj","areAdjacent","id1","id2","getEdgesBetween","edgeList","getMinWeightEdgeBetween","minWeight","Infinity","reduceMultiGraph","reducer","min","multiEdges","uniques","Set","acc","keep","duplicateEdge","isWeighted","NodeImmut","getInt","parseInt","value","listOptions","all","property","GraphState","upToDate","always","indexOf","updateIfNotUpdated","find","recalcLong","vertices","printableProperties","printGraphProperties","properties","k","toTitleCase","updateGraph","clearColorFromNodes","clearColorFromEdges","edgeFrom","edgeTo","x","y","iId","newGraph","toLowerCase","rID","found","getGraphAsDataSet","d","DataSet","setLocations","locations","clearNodeColors","clearEdgeColors","backHistory","forwardHistory","maxHistory","stronglyConnectedComponents","connectedComponents","Languages","setLanguage","EN_US","customColorPallete","self","visWeightEdgeEdit","callback","EditEdge","WeightCapacity","interaction","hover","manipulation","customColors","NodeId","LabelLabel","options","Color","optionText","optionValues","$popup","makeFormModal","AddNode","on","saveData","first","val","cancelEdit","remove","initialColor","getOwnPropertyNames","background","EditNode","confirm","ConnectNodeToItselfConfirmation","body","weightFromLabel","operation","undefined","InvalidLabelOrId","graphColors","luminosity","recalcProps","graphChanged","rearrangeGraph","saveState","g","randomizeNetworkLayoutSeed","getPositions","disableEditMode","enableEditMode","saveStateLocalStorage","shift","getStateForSaving","getElementsByClassName","item","parentElement","deepCopy","Array","isArray","newState","firstLoad","currentState","pop","oldKey","setItem","r","round","random","layoutEngine","randomSeed","initialRandomSeed","editEdgeMode","lastNetworkClickEvent","event","contains","target","deleteSelected","ctrlKey","shiftKey","removeItem","saveSettings","Settings","setAll","setOptions","physics","arrows","editWithoutDrag","option","defaults","nodePhysics","direction","weights","defaultCancelCb","deep","clone","copy","src","copyIsArray","isPlainObject","call","proto","getPrototypeOf","Ctor","hasOwnProperty","constructor","arguments","deepFreeze","o","prop","isFrozen","sort","arr","compareFunction","datasetToArray","ds","keepOnlyKeys","getFileExtension","filename","split","splice","string","t","textContent","replace","text","escape","max","iterable","b","str","match","toUpperCase","replacements","replacement","successText","cancelText","form","footer","f","class","formRow","basicMap","attrname","validFunc","generalValidator","valueMutator","$v","valid","removeClass","next","addClass","after","append","checked","for","prepend","clickDismiss","$b","onclick","oText","oIndex","selected","$footer","tabindex","role","html","off","last","trigger","successCb","cancelCb","hasErrors","each","tagName","attr","files","hasClass","adjacencyMatrix","out","in","outV","interpolateNodesFromEdges","webpackAsyncContext","req","__webpack_require__","code","ids","module","exports","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","m","O","result","chunkIds","priority","notFulfilled","fulfilled","j","every","getter","__esModule","mode","ns","create","def","definition","defineProperty","enumerable","chunkId","promises","u","globalThis","Function","prototype","l","url","done","script","needAttach","scripts","getElementsByTagName","charset","timeout","nc","onScriptComplete","prev","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","head","Symbol","toStringTag","nmd","paths","children","installedChunks","installedChunkData","promise","error","errorType","realSrc","message","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}
{"version":3,"file":"bundle-7d87198a7dbf7b403472.min.js","mappings":"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","sources":["webpack://graphPlayground/webpack/runtime/chunk loaded","webpack://graphPlayground/webpack/runtime/create fake namespace object","webpack://graphPlayground/webpack/runtime/load script","webpack://graphPlayground/./src/js/workers/GraphAlgorithmWorker.ts?dbca","webpack://graphPlayground/./src/js/UIInteractions.ts","webpack://graphPlayground/./src/js/app.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/EdgeImmut.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/GraphImmut.ts","webpack://graphPlayground/./src/js/classes/GraphImmut/NodeImmut.ts","webpack://graphPlayground/./src/js/graphState.ts","webpack://graphPlayground/./src/js/languages.ts","webpack://graphPlayground/./src/js/main.ts","webpack://graphPlayground/./src/js/settings.ts","webpack://graphPlayground/./src/js/util/genericHelpers.ts","webpack://graphPlayground/./src/js/util/graphHelpers.ts","webpack://graphPlayground/./src/ lazy ^\\.\\/.*\\.ts$ namespace object","webpack://graphPlayground/webpack/bootstrap","webpack://graphPlayground/webpack/runtime/compat get default export","webpack://graphPlayground/webpack/runtime/define property getters","webpack://graphPlayground/webpack/runtime/ensure chunk","webpack://graphPlayground/webpack/runtime/get javascript chunk filename","webpack://graphPlayground/webpack/runtime/global","webpack://graphPlayground/webpack/runtime/hasOwnProperty shorthand","webpack://graphPlayground/webpack/runtime/make namespace object","webpack://graphPlayground/webpack/runtime/node module decorator","webpack://graphPlayground/webpack/runtime/publicPath","webpack://graphPlayground/webpack/runtime/jsonp chunk loading","webpack://graphPlayground/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"graphPlayground:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t};\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"GraphAlgorithmWorker-02af1e11ee691c7780b8.min.worker.js\");\n}\n","import gHelp from \"./util/graphHelpers\";\nimport help from \"./util/genericHelpers\";\nimport GraphState from \"./graphState\";\nimport { FlowResult, MSTResult, ShortestPathResult } from \"./GraphAlgorithms\";\n//@ts-ignore\nimport Worker from \"worker-loader!./workers/GraphAlgorithmWorker\";\nimport NodeImmut from \"./classes/GraphImmut/NodeImmut\";\nimport EdgeImmut from \"./classes/GraphImmut/EdgeImmut\";\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport * as languages from \"./languages\";\n\ninterface AlgorithmI {\n    name: string;\n    directional?: boolean;\n    weighted?: boolean;\n    applyFunc: () => any;\n    display: boolean;\n}\n\nconst makeAndPrintShortestPath = (title: string, fn: string, weighted: boolean): void => {\n    const myName = languages.current.ShortestPath;\n    if (UIInteractions.isRunning[myName]) {\n        UIInteractions.printAlreadyRunning(myName);\n        return;\n    }\n    UIInteractions.isRunning[myName] = true;\n\n    help.showFormModal(\n        ($modal, values) => {\n            $modal.modal(\"hide\");\n\n            const source = GraphState.nodeLabelToID(values[0]);\n            const sink = GraphState.nodeLabelToID(values[1]);\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                let a = e.data;\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n\n                if (a === false) {\n                    if (fn.includes(\"dijkstra\")) {\n                        help.showSimpleModal(\n                            languages.current.DijkstraError,\n                            languages.current.DijkstraErrorHTML\n                        );\n                    } else if (fn.includes(\"bellman\")) {\n                        help.showSimpleModal(\n                            languages.current.BellmanFordError,\n                            languages.current.BellmanFordErrorHTML\n                        );\n                    }\n                    return;\n                }\n\n                a = a as ShortestPathResult;\n\n                let p = `<h3>${title}</h3><hr>${help.stringReplacement(languages.current.NoPathFromAToB,\n                    help.htmlEncode(source.toString()), help.htmlEncode(sink.toString()))}`;\n\n                if (a.pathExists) {\n                    p = help.stringReplacement(languages.current.ShortestPathFromAToB, title,\n                        GraphState.nodeIDToLabel(source), GraphState.nodeIDToLabel(sink), a.distance);\n                    if (weighted) {\n                        p += `\\n${help.stringReplacement(languages.current.WithWeightedCost, a.cost)}`;\n                    }\n                    p += \"\\n\\n\" + languages.current.UsingPath;\n\n                    p = help.htmlEncode(p);\n                    let graph = GraphState.getGraphData(GraphState.graph, false, true);\n                    let G = new GraphImmut(graph.nodes, graph.edges, graph.directed, graph.weighted);\n                    a.path.forEach((v: number, i: number) => {\n                        p += `${help.htmlEncode(GraphState.nodeIDToLabel(v))} &rarr; `;\n                        if (i > 0) {\n                            G = G.editEdge(a.path[i - 1], v, null, null, \"#FF0000\") as GraphImmut;\n                        }\n                    });\n                    GraphState.graph = G;\n                    window.main.setData(GraphState.getGraphData(G), false, false, false);\n                    p = p.slice(0, -8);\n                    p = `<h3>${title}</h3><hr>${p}`;\n                }\n\n                help.printout(p);\n            });\n            w.send({\n                type: fn,\n                args: [source, sink],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        },\n        title,\n        languages.current.Go,\n        languages.current.Cancel,\n        [\n            {\n                label: languages.current.StartNode,\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            },\n            {\n                label: languages.current.EndNode,\n                type: \"text\",\n                validationFunc: window.main.nodeLabelIDValidator\n            }\n        ],\n        ($modal) => {\n            UIInteractions.isRunning[myName] = false;\n            $modal.modal(\"hide\");\n        }\n    );\n};\n\nconst makeAndPrintComponents = async (stronglyConnected: boolean): Promise<void> => {\n    let a = null;\n    let cc = languages.current.ConnectedComponents;\n    let componentKey = \"connectedComponents\";\n\n    if (stronglyConnected) {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n        cc = languages.current.StronglyConnectedComponents;\n        componentKey = \"stronglyConnectedComponents\";\n    } else {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n    }\n\n    if (UIInteractions.isRunning[cc]) {\n        UIInteractions.printAlreadyRunning(cc);\n        return Promise.reject(languages.current.TaskAlreadyRunning);\n    }\n    UIInteractions.isRunning[cc] = true;\n\n    const iStartedProgress = UIInteractions.startLoadingAnimation();\n    const w = UIInteractions.getWorkerIfPossible(e => {\n        a = e.data;\n        w.cleanup();\n\n        GraphState.graphProperties[cc] = a.count;\n        GraphState.setUpToDate(true, [cc, componentKey]);\n        GraphState.state[componentKey] = a.components;\n\n        const components = help.flatten(a.components);\n        let p = help.stringReplacement(languages.current.NumberOfConnectedComponents, cc, a.count);\n        p += \"\\n\\n\";\n\n        components.forEach((v, i) => {\n            p += help.stringReplacement(languages.current.VertexIsInConnectedComponentNumber, GraphState.nodeIDToLabel(i), v + \"\") + \"\\n\";\n        });\n\n        p += `\\n${JSON.stringify(help.rotate(a.components), null, 4)}\\n\\n`;\n        p = `<h3>${cc}</h3><hr>${help.htmlEncode(p)}`;\n\n        if (iStartedProgress) {\n            UIInteractions.stopLoadingAnimation();\n        }\n        UIInteractions.isRunning[cc] = false;\n\n        help.printout(p);\n    });\n    w.send({\n        type: componentKey,\n        args: [],\n        graph: window.main.graphState.getGraphData(),\n        convertToGraphImmut: true\n    });\n};\n\nclass WorkerProxy {\n    private readonly worker: Worker;\n    private readonly id: number;\n    private readonly listener: (e: { data: any }) => any;\n\n    constructor(id: number, w: Worker, listener: ((e: { data: any }) => any)) {\n        this.id = id;\n        this.worker = w;\n        this.listener = listener;\n        w.postMessage({ type: \"id\", id });\n        w.onmessage = (e: MessageEvent) => {\n            this.listener({ data: e.data.data });\n        };\n    }\n\n    public send(data: any) {\n        this.worker.postMessage(data);\n    }\n\n    public cleanup() {\n        this.worker.terminate();\n        GraphState.workerPool[this.id] = null;\n    }\n}\n\nexport default class UIInteractions {\n    public static isRunning: { [index: string]: boolean } = {};\n    static getAlgorithms(): AlgorithmI[] {\n        return [\n            {\n                name: languages.current.GraphColoring,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintGraphColoring,\n                display: true\n            },\n            {\n                name: languages.current.ConnectedComponents,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintComponents(false);\n                },\n                display: true\n            },\n            {\n                name: languages.current.StronglyConnectedComponents,\n                directional: true,\n                display: true,\n                applyFunc: () => {\n                    makeAndPrintComponents(true);\n                }\n            },\n            {\n                name: languages.current.BFS,\n                directional: false,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.BFS, \"breadthFirstSearch\", false);\n                },\n                display: true\n            },\n            {\n                name: languages.current.Dijkstra,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.Dijkstra, \"dijkstraSearch\", true);\n                },\n                display: true\n            },\n            {\n                name: languages.current.BellmanFord,\n                weighted: true,\n                directional: true,\n                applyFunc: () => {\n                    makeAndPrintShortestPath(languages.current.BellmanFord, \"bellmanFord\", true);\n                },\n                display: true\n            },\n            {\n                name: languages.current.FordFulkerson,\n                weighted: true,\n                directional: true,\n                applyFunc: UIInteractions.makeAndPrintFFMCMF,\n                display: true\n            },\n            {\n                name: languages.current.KruskalMST,\n                weighted: true,\n                directional: false,\n                applyFunc: UIInteractions.makeAndPrintKruskal,\n                display: true\n            },\n            {\n                name: languages.current.Cyclic,\n                applyFunc: UIInteractions.makeAndPrintIsCyclic,\n                directional: true,\n                display: true\n            },\n            {\n                name: languages.current.TopoSort,\n                applyFunc: UIInteractions.makeAndPrintTopologicalSort,\n                directional: true,\n                display: true\n            },\n            {\n                name: languages.current.Eulerian,\n                directional: false,\n                display: false,\n                applyFunc: null\n            },\n            {\n                name: languages.current.Eulerian,\n                directional: true,\n                display: true,\n                applyFunc: UIInteractions.makeAndPrintDirectionalEulerian\n            }\n        ] as AlgorithmI[];\n    }\n\n    static registerListeners(): void {\n        const makeSimpleClickListener = (selector: string, fn: () => any) => {\n            document.querySelector(selector)!.addEventListener(\"click\", e => {\n                e.preventDefault();\n                fn();\n            });\n        };\n\n        makeSimpleClickListener(\"#print-help-link\", UIInteractions.printHelp);\n        makeSimpleClickListener(\"#graph-options-link\", UIInteractions.printOptions);\n        makeSimpleClickListener(\"#load-petersen-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            window.main.setData(predefined.Petersen(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-konigsberg-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            window.main.setData(predefined.Konigsberg(), false, true, true);\n        });\n        makeSimpleClickListener(\"#load-complete-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Complete();\n        });\n        makeSimpleClickListener(\"#load-hypercube-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Hypercube();\n        });\n        makeSimpleClickListener(\"#load-custom-link\", async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            predefined.Custom();\n        });\n        makeSimpleClickListener(\"#undo-link\", window.main.undo);\n        makeSimpleClickListener(\"#redo-link\", window.main.redo);\n        makeSimpleClickListener(\"#calculate-all-properties-link\", async () => {\n            return GraphState.makeAndPrintProperties(true);\n        });\n        makeSimpleClickListener(\"#new-graph-layout-link\", window.main.shuffleNetworkLayout);\n        makeSimpleClickListener(\"#import-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportFileModal();\n        });\n        makeSimpleClickListener(\"#import-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeImportTextModal();\n        });\n        makeSimpleClickListener(\"#export-file-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportFileModal();\n        });\n        makeSimpleClickListener(\"#export-text-link\", async () => {\n            const imp = (await import(\"./dataImportExport\")).default;\n            imp.makeExportTextModal();\n        });\n        (document.querySelector(\"#fileDropdown\") as HTMLAnchorElement).innerText = languages.current.File;\n        (document.querySelector(\"#import-file-link\") as HTMLAnchorElement).innerText = languages.current.ImportFile;\n        (document.querySelector(\"#import-text-link\") as HTMLAnchorElement).innerText = languages.current.ImportText;\n        (document.querySelector(\"#export-file-link\") as HTMLAnchorElement).innerText = languages.current.ExportFile;\n        (document.querySelector(\"#export-text-link\") as HTMLAnchorElement).innerText = languages.current.ExportText;\n\n        (document.querySelector(\"#calculate-all-properties-link\") as HTMLAnchorElement).innerText = languages.current.CalculateAllProperties;\n        (document.querySelector(\"#new-graph-layout-link\") as HTMLAnchorElement).innerText = languages.current.NewGraphLayout;\n        (document.querySelector(\"#graph-options-link\") as HTMLAnchorElement).innerText = languages.current.GraphOptions;\n        (document.querySelector(\"#print-help-link\") as HTMLAnchorElement).innerText = languages.current.Help;\n\n        (document.querySelector(\"#example-graphs-label\") as HTMLHeadingElement).innerText = languages.current.ExampleGraphs;\n        (document.querySelector(\"#load-petersen-link\") as HTMLAnchorElement).innerText = languages.current.LoadPetersen;\n        (document.querySelector(\"#load-konigsberg-link\") as HTMLAnchorElement).innerText = languages.current.LoadKonigsberg;\n        (document.querySelector(\"#load-complete-link\") as HTMLAnchorElement).innerText = languages.current.LoadComplete;\n        (document.querySelector(\"#load-hypercube-link\") as HTMLAnchorElement).innerText = languages.current.LoadHypercube;\n        (document.querySelector(\"#load-custom-link\") as HTMLAnchorElement).innerText = languages.current.LoadCustom;\n\n        (document.querySelector(\"#algorithms-label\") as HTMLHeadElement).innerText = languages.current.Algorithms;\n\n        (document.querySelector(\"#graph-properties-label\") as HTMLHeadElement).innerText = languages.current.GraphProperties;\n        (document.querySelector(\"#results-label\") as HTMLHeadElement).innerText = languages.current.Results;\n    }\n\n    static printHelp(): void {\n        help.showSimpleModal(\n            languages.current.Help,\n            languages.current.IssuesHTML\n        );\n    }\n\n    static printOptions(): void {\n        help.showFormModal(\n            ($modal, vals) => {\n                $modal.modal(\"hide\");\n                if (window.settings.getOption(\"nodePhysics\") !== vals[0]) {\n                    window.settings.changeOption(\"nodePhysics\", vals[0]); // Physics\n                }\n                if (window.settings.getOption(\"direction\") !== vals[1]) {\n                    window.settings.changeOption(\"direction\", vals[1]);\n                    let G = GraphState.graph;\n                    G = vals[1] ? G.asDirected(true) : G.asUndirected();\n                    // Clear node coloring because graph color doesn't apply to directed graphs\n                    window.main.setData(GraphState.getGraphData(G, true));\n                }\n                if (window.settings.getOption(\"weights\") !== vals[2]) {\n                    window.settings.changeOption(\"weights\", vals[2]);\n                    let G = GraphState.graph;\n                    G = vals[2] ? G.asWeighted() : G.asUnweighted();\n                    window.main.setData(GraphState.getGraphData(G));\n                }\n                if (window.settings.getOption(\"customColors\") !== vals[3]) {\n                    window.settings.changeOption(\"customColors\", vals[3]);\n                }\n            },\n            languages.current.Options,\n            languages.current.Save,\n            languages.current.Cancel,\n            [\n                {\n                    label: languages.current.GraphPhysics,\n                    initialValue: window.settings.getOption(\"nodePhysics\"),\n                    type: \"checkbox\"\n                },\n                {\n                    label: languages.current.DiGraph,\n                    initialValue: window.settings.getOption(\"direction\"),\n                    type: \"checkbox\"\n                },\n                {\n                    label: languages.current.WeightedGraph,\n                    initialValue: window.settings.getOption(\"weights\"),\n                    type: \"checkbox\"\n                },\n                {\n                    label: languages.current.CustomNodeColors,\n                    initialValue: window.settings.getOption(\"customColors\"),\n                    type: \"checkbox\"\n                }\n            ],\n            null\n        );\n    }\n\n    static terminateAllWebWorkers(): void {\n        for (const v of GraphState.workerPool) {\n            if (v !== null && v instanceof window.Worker) {\n                v.terminate();\n            }\n        }\n        // Cleanup state\n        GraphState.workerPool = [];\n        UIInteractions.stopLoadingAnimation();\n        UIInteractions.isRunning = {};\n    }\n\n    static getWorkerIfPossible(onmessage: (d: { data: any }) => any): WorkerProxy {\n        let nextIndex = GraphState.workerPool.findIndex(v => {\n            return v === null || typeof v === \"undefined\";\n        });\n        if (nextIndex === -1) {\n            nextIndex = GraphState.workerPool.length;\n        }\n\n        const w = new Worker();\n        GraphState.workerPool[nextIndex] = w;\n        return new WorkerProxy(nextIndex, w, onmessage);\n    }\n\n    static startLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"flex\") {\n            prog.style.display = \"flex\";\n            return true;\n        }\n        return false;\n    }\n\n    static stopLoadingAnimation() {\n        const prog = document.getElementById(\"task-spinner\")!;\n        if (prog.style.display !== \"none\") {\n            prog.style.display = \"none\";\n        }\n    }\n\n    static printAlreadyRunning(name?: string) {\n        let n = languages.current.ThisTask;\n        if (name) {\n            n = name;\n        }\n        help.showSimpleModal(\n            languages.current.TaskAlreadyRunning,\n            \"<p>\" + help.stringReplacement(languages.current.TaskAlreadyRunningBody, n) + \"</p>\"\n        );\n    }\n\n    static makeAndPrintGraphColoring(): Promise<void> {\n        const myName = languages.current.GraphColoring;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            // Use cached responses when able\n            let a = {\n                chromaticNumber: (await GraphState.getProperty(\"Chromatic Number\")) as number,\n                colors: GraphState.state.graphColoring as {}\n            };\n\n            const printGC = () => {\n                GraphState.graphProperties[\"Chromatic Number\"] = a.chromaticNumber;\n                GraphState.setUpToDate(true, [\"Chromatic Number\", \"graphColoring\"]);\n                (GraphState.state.graphColoring as {}) = a.colors;\n\n                const colors = help.flatten(a.colors);\n                let p = help.stringReplacement(languages.current.NumberOfVertices, colors.length + \"\");\n                p += \"\\n\" + help.stringReplacement(languages.current.ChromaticNumberIs, a.chromaticNumber + \"\");\n                p += \"\\n\\n\";\n\n                colors.forEach((v, i) => {\n                    p += help.stringReplacement(languages.current.VertexGetsColor, GraphState.nodeIDToLabel(i), v + \"\") + \"\\n\";\n                });\n\n                p += `\\n${JSON.stringify(help.rotate(a.colors), null, 4)}\\n\\n`;\n\n                p = `<h3>${languages.current.GraphColoringTitle}</h3><hr>${help.htmlEncode(p)}`;\n                p += `<br/><button class='btn btn-primary' onclick='main.applyColors()'>${languages.current.ReColor}</button>`;\n\n                help.printout(p);\n                window.main.applyColors();\n            };\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n\n            if (!(a.chromaticNumber !== null && (await GraphState.getProperty(\"graphColoring\")) !== null)) {\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    printGC();\n                    w.cleanup();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    UIInteractions.isRunning[myName] = false;\n                    resolve(e.data);\n                });\n                w.send({\n                    type: \"colorNetwork\",\n                    args: [],\n                    graph: window.main.graphState.getGraphData(),\n                    convertToGraphImmut: true\n                });\n            } else {\n                printGC();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n            }\n        });\n    }\n\n    static makeAndPrintDirectionalEulerian(): Promise<void> {\n        const myName = languages.current.Eulerian;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (!window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve();\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve(e.data);\n            });\n\n            const scc = await GraphState.getProperty(\"stronglyConnectedComponents\", true);\n\n            w.send({\n                type: \"directionalEulerian\",\n                args: [gHelp.findVertexDegreesDirectional(GraphState.graph.getFullAdjacency()), scc]\n            });\n        });\n    }\n\n    static makeAndPrintEulerian(ignoreDuplicate = false): Promise<void> {\n        const myName = languages.current.Eulerian;\n        if (UIInteractions.isRunning[myName]) {\n            if (ignoreDuplicate) {\n                return Promise.resolve();\n            }\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(async resolve => {\n            if (window.settings.getOption(\"direction\")) {\n                UIInteractions.isRunning[myName] = false;\n                return resolve(UIInteractions.makeAndPrintDirectionalEulerian());\n            }\n\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const cc = await GraphState.getProperty(\"connectedComponents\", true);\n\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.eulerian = e.data;\n                GraphState.setUpToDate(true, [\"eulerian\"]);\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                w.cleanup();\n                resolve(e.data);\n            });\n            w.send({\n                type: \"hasEulerianCircuit\",\n                args: [GraphState.graph.getAllOutDegrees(), cc]\n            });\n        });\n    }\n\n    static makeAndPrintFFMCMF(): void {\n        if (!window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n        const myName = languages.current.FordFulkerson;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        help.showFormModal(\n            async ($modal, values) => {\n                $modal.modal(\"hide\");\n\n                const source = GraphState.nodeLabelToID(values[0]);\n                const sink = GraphState.nodeLabelToID(values[1]);\n\n                let a: boolean | FlowResult | null = null;\n\n                const cb = () => {\n                    let p = `<h3>${languages.current.FordFulkerson}</h3><hr>${help.stringReplacement(languages.current.NoPathFromAToB,\n                        help.htmlEncode(GraphState.nodeIDToLabel(source)), help.htmlEncode(GraphState.nodeIDToLabel(sink)))}`;\n\n                    if (a === false) {\n                        help.printout(p);\n                        return;\n                    }\n                    a = a as { maxFlow: number; flowPath: any[] };\n\n                    p = `${languages.current.FordFulkersonMaxFlowMinCut} ${help.stringReplacement(languages.current.MaxFlowFromAToB,\n                        GraphState.nodeIDToLabel(source), GraphState.nodeIDToLabel(sink), a.maxFlow + \"\")}`;\n                    p += `\\n\\n${languages.current.UsingCapacities}\\n\\n`;\n                    p = help.htmlEncode(p);\n                    a.flowPath.forEach(v => {\n                        p += help.stringReplacement(languages.current.FlowWithCapacity, GraphState.nodeIDToLabel(v.from),\n                            GraphState.nodeIDToLabel(v.to), v.flow + \"\", v.capacity + \"\");\n                        p += \"\\n\";\n                    });\n                    p = p.trim();\n                    p = `<h3>${languages.current.FordFulkersonMaxFlowMinCut}</h3><hr>` + p;\n\n                    help.printout(p);\n                };\n\n                const iStartedProgress = UIInteractions.startLoadingAnimation();\n                const w = UIInteractions.getWorkerIfPossible(e => {\n                    a = e.data;\n                    UIInteractions.isRunning[myName] = false;\n                    cb();\n                    if (iStartedProgress) {\n                        UIInteractions.stopLoadingAnimation();\n                    }\n                    w.cleanup();\n                });\n                w.send({\n                    type: \"fordFulkerson\",\n                    args: [source, sink],\n                    convertToGraphImmut: true,\n                    graph: window.main.graphState.getGraphData()\n                });\n            },\n            languages.current.FordFulkersonMaxFlowMinCut,\n            languages.current.Go,\n            languages.current.Cancel,\n            [\n                {\n                    label: languages.current.SourceNode,\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                },\n                {\n                    label: languages.current.SinkNode,\n                    type: \"text\",\n                    validationFunc: window.main.nodeLabelIDValidator\n                }\n            ],\n            ($modal) => {\n                UIInteractions.isRunning[myName] = false;\n                $modal.modal(\"hide\");\n            }\n        );\n    }\n\n    static makeAndPrintKruskal(): void {\n        if (window.settings.getOption(\"direction\") || !window.settings.getOption(\"weights\")) {\n            return;\n        }\n\n        const myName = languages.current.KruskalMST;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: MSTResult = e.data;\n            w.cleanup();\n\n            let p = help.stringReplacement(languages.current.KruskalMSTTotalWeight, a.totalWeight + \"\");\n            p += `\\n\\n${languages.current.UsingEdges}\\n\\n`;\n            p = help.htmlEncode(p);\n            a.mst.forEach(v => {\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getFrom())}&rarr;`;\n                p += `${GraphState.nodeIDToLabel(new EdgeImmut(v).getTo())}\\n`;\n            });\n            p = p.trim();\n            p = `<h3>${languages.current.KruskalMST}</h3><hr>${p}`;\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"kruskal\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static makeAndPrintIsCyclic(): Promise<void> {\n        if (!window.settings.getOption(\"direction\")) {\n            return Promise.resolve();\n        }\n\n        const myName = languages.current.Cyclic;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return Promise.reject(languages.current.TaskAlreadyRunning);\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        return new Promise<void>(resolve => {\n            const iStartedProgress = UIInteractions.startLoadingAnimation();\n            const w = UIInteractions.getWorkerIfPossible(e => {\n                GraphState.graphProperties.cyclic = e.data;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                w.cleanup();\n                if (iStartedProgress) {\n                    UIInteractions.stopLoadingAnimation();\n                }\n                UIInteractions.isRunning[myName] = false;\n                resolve();\n            });\n            w.send({\n                type: \"isGraphCyclic\",\n                args: [],\n                convertToGraphImmut: true,\n                graph: window.main.graphState.getGraphData()\n            });\n        });\n    }\n\n    static makeAndPrintTopologicalSort(): void {\n        if (!window.settings.getOption(\"direction\")) {\n            return;\n        }\n\n        const myName = languages.current.TopoSort;\n        if (UIInteractions.isRunning[myName]) {\n            UIInteractions.printAlreadyRunning(myName);\n            return;\n        }\n        UIInteractions.isRunning[myName] = true;\n\n        const iStartedProgress = UIInteractions.startLoadingAnimation();\n        const w = UIInteractions.getWorkerIfPossible(e => {\n            const a: boolean | NodeImmut[] = e.data;\n            w.cleanup();\n\n            if (iStartedProgress) {\n                UIInteractions.stopLoadingAnimation();\n            }\n            UIInteractions.isRunning[myName] = false;\n\n            if (a === true) {\n                GraphState.graphProperties.cyclic = true;\n                GraphState.setUpToDate(true, [\"cyclic\"]);\n                help.printout(languages.current.TopoSortErrorHTML);\n                return;\n            }\n\n            let p = languages.current.TopoSort + \":\\n\\n\";\n            p = help.htmlEncode(p);\n            (a as any[]).forEach(v => {\n                p += `${GraphState.nodeIDToLabel(v.id)}, `;\n            });\n            p = p.slice(0, -2);\n            p = `<h3>${languages.current.TopoSort}</h3><hr>${p}`;\n\n            help.printout(p);\n        });\n        w.send({\n            type: \"topologicalSort\",\n            args: [],\n            convertToGraphImmut: true,\n            graph: window.main.graphState.getGraphData()\n        });\n    }\n\n    static printGraphAlgorithms(): void {\n        const $div = document.getElementById(\"algorithms-pane\")!;\n        $div.innerHTML = \"\";\n        const directional = window.settings.getOption(\"direction\");\n        const weighted = window.settings.getOption(\"weights\");\n\n        const addAlgoToPane = (alg: AlgorithmI) => {\n            const navlink = document.createElement(\"a\");\n            navlink.classList.add(\"nav-link\");\n            navlink.setAttribute(\"href\", \"#\");\n            navlink.innerText = alg.name;\n            navlink.addEventListener(\"click\", e => {\n                e.preventDefault();\n                alg.applyFunc();\n            });\n\n            $div.appendChild(navlink);\n        };\n\n        const a = UIInteractions.getAlgorithms();\n        a.forEach(alg => {\n            if (!alg.display) {\n                return;\n            }\n            if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            } else if ((\"weighted\" in alg && alg.weighted === weighted) || !(\"weighted\" in alg)) {\n                if ((\"directional\" in alg && alg.directional === directional) || !(\"directional\" in alg)) {\n                    addAlgoToPane(alg);\n                }\n            }\n        });\n    }\n}\n","\"use strict\";\n\nimport \"bootstrap\";\nimport { Network } from \"vis-network\";\nimport { default as main, MainI } from \"./main\";\nimport Settings from \"./settings\";\nimport UI from \"./UIInteractions\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport * as languages from \"./languages\";\n\ndeclare global {\n    interface Window {\n        main: MainI;\n        network: Network;\n        settings: typeof Settings;\n        ui: typeof UI;\n        Worker: Function;\n    }\n}\n\nwindow.main = main;\nwindow.settings = Settings;\n\nlanguages.setLanguage().then(() => {\n    window.ui = UI;\n    window.ui.registerListeners();\n\n    main.visOptions.locales = languages.current.VisLocale;\n    main.visOptions.locale = \"\";\n    window.network = new Network(main.container, {}, main.visOptions);\n    Settings.loadSettings();\n\n    main.addNetworkListeners(window.network);\n\n    let loadDefault = true;\n    if (Settings.checkForLocalStorage()) {\n        const s = localStorage.getItem(\"graphPlayground.lastState\");\n        if (s !== null) {\n            const jsonGraph: any = JSON.parse(s);\n            if (\"graph\" in jsonGraph && \"nodes\" in jsonGraph.graph) {\n                loadDefault = false;\n                main.applyState(false, jsonGraph as { graph: GraphPlain });\n            }\n        }\n    }\n    if (loadDefault) {\n        (async () => {\n            const predefined = (await import(\"./util/predefinedGraphs\")).default;\n            main.setData(predefined.Petersen(), false, true, true);\n        })();\n    }\n});\n","\"use strict\";\n\nexport interface EdgeImmutPlain {\n    label?: string;\n    from: number;\n    to: number;\n    weight: number;\n\n    [key: string]: any;\n\n    [key: number]: any;\n}\n\nexport default class EdgeImmut {\n    private readonly from: Readonly<number>;\n    private readonly to: Readonly<number>;\n    private readonly weight: Readonly<number>;\n    private readonly attributes: any;\n\n    constructor(from: number | EdgeImmutPlain, to?: number, weight: number | string = 1, extraAttrs: any = null) {\n        if (typeof from === \"object\") {\n            extraAttrs = Object.keys(from)\n                .filter(key => ![\"from\", \"to\", \"weight\"].includes(key))\n                .reduce((obj: any, key: string) => {\n                    obj[key] = (<EdgeImmutPlain>from)[key];\n                    return obj;\n                }, {});\n\n            to = from.to;\n            weight = from.weight;\n            from = from.from;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.from = Object.freeze(from);\n        this.to = Object.freeze(to!);\n        this.weight = Object.freeze(parseFloat(weight as string));\n\n        if (new.target === EdgeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getFrom(): Readonly<number> {\n        return this.from;\n    }\n\n    getTo(): Readonly<number> {\n        return this.to;\n    }\n\n    getWeight(): Readonly<number> {\n        return this.weight;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    toPlain(): EdgeImmutPlain {\n        const toReturn: EdgeImmutPlain = { from: this.from, to: this.to, weight: this.weight };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    editEdge(newWeight: number | null, extraAttrs: any = {}): EdgeImmut {\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        Object.keys(extraAttrs).forEach(key => {\n            attributes[key] = extraAttrs[key];\n        });\n\n        return new EdgeImmut(\n            this.getFrom(),\n            this.getTo(),\n            newWeight === null ? this.getWeight() : newWeight,\n            attributes\n        );\n    }\n}\n","\"use strict\";\n\nimport { List } from 'immutable';\nimport { default as NodeImmut, NodeImmutPlain } from './NodeImmut';\nimport { default as EdgeImmut, EdgeImmutPlain } from './EdgeImmut';\n\ninterface NodeMapping {\n    [key: number]: number\n}\n\nconst filterExtraAttr = (data: any, labels: any) => {\n    return Object.keys(data)\n        .filter((key) => !(labels).includes(key))\n        .reduce((obj: any, key) => {\n            obj[key] = data[key];\n            return obj;\n        }, {});\n};\n\nconst filterNodeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"label\", \"id\"]);\n};\n\nconst filterEdgeExtraAttr = (data: any) => {\n    return filterExtraAttr(data, [\"from\", \"to\", \"weight\"]);\n};\n\nconst genericEdgesToImmutEdges = (edges: any, nodeMap: NodeMapping = {}): boolean | List<EdgeImmut> => {\n    if (edges === null) {\n        return false;\n    }\n\n    let newEdges: List<EdgeImmut> = List();\n\n    if (typeof edges === 'object') {\n        edges.forEach((edge: any) => {\n            let weight = 0;\n            let from = 0;\n            let to = 0;\n            let extraAttrs = {};\n\n            if (\"weight\" in edge) {\n                weight = parseFloat(edge.weight);\n            }\n            if (\"from\" in edge) {\n                from = nodeMap[edge.from];\n            }\n            if (\"to\" in edge) {\n                to = nodeMap[edge.to];\n            }\n            if (\"attributes\" in edge) {\n                extraAttrs = filterEdgeExtraAttr(edge.attributes);\n            }\n            else {\n                extraAttrs = filterEdgeExtraAttr(edge);\n            }\n\n            newEdges = newEdges.push(new EdgeImmut(from, to, weight, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return newEdges;\n};\n\nconst genericNodesToImmutNodes = (nodes: any): boolean | { nodes: Readonly<List<NodeImmut>>; map: { [key: number]: number } } => {\n    if (nodes === null) {\n        return false;\n    }\n\n    let newNodes: List<NodeImmut> = List();\n    const nodeMap: NodeMapping = {};\n\n    if (typeof nodes === \"number\") {\n        // Create the nodes\n        for (let i = 0; i < Math.floor(nodes); i++) {\n            newNodes = newNodes.set(i, new NodeImmut(i));\n            nodeMap[i] = i;\n        }\n    }\n    else if (typeof nodes === 'object') {\n        let nodeNum = 0;\n        nodes.forEach((n: any) => {\n            const id = nodeNum++;\n            let label = null;\n            let extraAttrs = null;\n\n            if (\"label\" in n) {\n                label = n.label;\n            }\n            if (\"id\" in n) {\n                nodeMap[n.id] = id;\n                if (\"label\" in n && n.label === n.id.toString()) {\n                    label = id.toString();\n                }\n            }\n            else {\n                nodeMap[id] = id;\n            }\n            if (\"attributes\" in n) {\n                extraAttrs = filterNodeExtraAttr(n.attributes);\n            }\n            else {\n                extraAttrs = filterNodeExtraAttr(n);\n            }\n\n            newNodes = newNodes.set(id, new NodeImmut(id, label, extraAttrs));\n        });\n    }\n    else {\n        return false;\n    }\n\n    return { nodes: Object.freeze(newNodes), map: nodeMap };\n};\n\nexport default class GraphImmut {\n    private readonly directed: Readonly<boolean>;\n    private readonly weighted: Readonly<boolean>;\n    private readonly nodes: Readonly<List<NodeImmut>>;\n    private readonly numNodes: Readonly<number>;\n    private readonly edges: Readonly<List<EdgeImmut>>;\n    private readonly numEdges: Readonly<number>;\n\n    constructor(nodes: number | Readonly<List<NodeImmut>> | NodeImmutPlain[],\n        edges: null | Readonly<List<EdgeImmut>> | EdgeImmutPlain[] = null,\n        directed = false, weighted = false) {\n        this.directed = Object.freeze(directed);\n        this.weighted = Object.freeze(weighted);\n        let nodeMap = {};\n\n        // Make Nodes\n        if (typeof nodes === \"number\" || (typeof nodes === \"object\" && !(nodes instanceof List))) {\n            const n = genericNodesToImmutNodes(nodes);\n            if (typeof n !== \"object\") {\n                throw new Error(\"Unable to parse node input!\");\n            }\n            this.nodes = n.nodes;\n            nodeMap = n.map;\n        }\n        else if (nodes instanceof List) {\n            this.nodes = nodes as List<NodeImmut>;\n        }\n        else {\n            throw new Error(\"Illegal type of 'node' input to GraphImmut constructor\");\n        }\n        this.nodes = Object.freeze(this.nodes);\n        this.numNodes = Object.freeze(this.nodes.size);\n\n        // If we are given edges, add them to the graph\n        if (edges !== null && typeof edges === \"object\" && !(edges instanceof List)) {\n            const e = genericEdgesToImmutEdges(edges, nodeMap);\n            if (typeof e !== \"object\") {\n                throw new Error(\"Unable to parse Edge input\");\n            }\n            this.edges = e;\n        }\n        else if (edges instanceof List) {\n            this.edges = edges as List<EdgeImmut>;\n        }\n        else {\n            this.edges = List<EdgeImmut>();\n        }\n        this.edges = Object.freeze(this.edges);\n        this.numEdges = Object.freeze(this.edges.size);\n\n        if (new.target === GraphImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    getNode(id: number, rich = false): NodeImmut | NodeImmutPlain | boolean {\n        if (id >= this.numNodes) {\n            return false;\n        }\n        const node = this.nodes.get(id);\n        if (typeof node === \"undefined\") {\n            return false;\n        }\n        if (rich) {\n            return node;\n        }\n        return node.toPlain();\n    }\n\n    addNode(data: any = null): GraphImmut {\n        if (data === null) {\n            data = {};\n        }\n\n        const id = this.numNodes;\n        if (!(\"label\" in data)) {\n            data.label = id.toString();\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n\n        return new GraphImmut(this.nodes.set(id, new NodeImmut(id, data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    editNode(id: number, data: any): any {\n        if (!this.nodes.has(id)) {\n            return false;\n        }\n\n        const extraAttrs = filterNodeExtraAttr(data);\n        if (!(\"label\" in data)) {\n            data.label = (this.getNode(id, true) as NodeImmut).getLabel();\n        }\n        return new GraphImmut(this.nodes.set(id, (this.getNode(id, true) as NodeImmut).editNode(data.label, extraAttrs)),\n            this.edges, this.directed, this.weighted);\n    }\n\n    deleteNode(id: number): GraphImmut | boolean {\n        // Make sure the ID exists\n        if (!(id >= 0 && id < this.numNodes)) {\n            return false;\n        }\n\n        const nodeMap: NodeMapping = {}; // Map for old IDs to new ones since we're deleting an entry\n\n        // Remove it from the node list\n        let nodeCount = 0;\n        const newNodes: List<NodeImmut> = this.nodes\n            .filter((n) => {\n                if (n.getID() === id) {\n                    nodeMap[n.getID()] = -1;\n                }\n                else {\n                    nodeMap[n.getID()] = nodeCount++;\n                }\n\n                return n.getID() !== id;\n            })\n            .map((node) => {\n                let label = node.getLabel();\n                if (node.getID().toString() === label) {\n                    label = nodeMap[node.getID()].toString();\n                }\n\n                return new NodeImmut(nodeMap[node.getID()], label, node.getAllAttributes());\n            }) as List<NodeImmut>;\n\n        // Remap edges\n        const newEdges: List<EdgeImmut> = this.edges\n            .filter((edge) => {\n                return !(edge.getFrom() === id || edge.getTo() === id);\n            })\n            .map((edge) => {\n                return new EdgeImmut(nodeMap[edge.getFrom()], nodeMap[edge.getTo()], edge.getWeight(), edge.getAllAttributes());\n            }) as List<EdgeImmut>;\n\n        return new GraphImmut(newNodes, newEdges, this.directed, this.weighted);\n    }\n\n    addEdge(from: number, to: number, weight: any = 1): GraphImmut {\n        if (!this.weighted) {\n            weight = 1; // Ensure that edge weights are 1 if this is an unweighted graph\n        }\n\n        const newEdges = this.edges.push(new EdgeImmut(from, to, parseFloat(weight)));\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    deleteEdge(from: number, to: number, weight: any = null, deleteAll = true): GraphImmut {\n        if (weight !== null) {\n            weight = parseFloat(weight);\n        }\n\n        let foundOneEdge = false;\n        const newEdges: List<EdgeImmut> = this.edges.filter((edge) => {\n            // If we're not deleting everything and we have found one edge, then do not filter anymore\n            if (foundOneEdge && !deleteAll) {\n                return true;\n            }\n\n            // If we have an exact match\n            if (edge.getFrom() === from && edge.getTo() === to && (weight === null || edge.getWeight() === weight)) {\n                foundOneEdge = true;\n                return false; // Remove this edge\n            }\n\n            // If we are undirected, check for opposing matches\n            if (!this.directed) {\n                if (edge.getFrom() === to && edge.getTo() === from && (weight === null || edge.getWeight() === weight)) {\n                    foundOneEdge = true;\n                    return false; // Remove this edge\n                }\n            }\n\n            return true;\n        }) as List<EdgeImmut>;\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    editEdge(from: number, to: number, newWeight: any, oldWeight: any = null, color: string | null = null): GraphImmut | boolean {\n        let foundFirst = false;\n\n        if (oldWeight !== null) {\n            oldWeight = parseFloat(oldWeight);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge, index) => {\n            if (foundFirst) {\n                return;\n            }\n\n            if (((edge.getFrom() === from && edge.getTo() === to)\n                || (!this.isDirected() && edge.getFrom() === to && edge.getTo() === from))\n                && (oldWeight === null || edge.getWeight() === oldWeight)) {\n\n                if (color !== null) {\n                    newEdges = newEdges.set(index,\n                        edge.editEdge(newWeight === null ? null : parseFloat(newWeight),\n                            { color: color }));\n                }\n                else {\n                    newEdges = newEdges.set(index, edge.editEdge(newWeight === null ? null : parseFloat(newWeight)));\n                }\n                foundFirst = true;\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    getAllNodes(rich = false): NodeImmut[] | NodeImmutPlain[] {\n        if (rich) {\n            return this.nodes.toArray();\n        }\n        return this.nodes.map((node) => {\n            return node.toPlain();\n        }).toArray();\n    }\n\n    getAllNodesAsImmutableList(): Readonly<List<NodeImmut>> {\n        return this.nodes;\n    }\n\n    getAllEdgesAsImmutableList(): Readonly<List<EdgeImmut>> {\n        return this.edges;\n    }\n\n    getAllEdges(rich = false): EdgeImmut[] | EdgeImmutPlain[] {\n        if (rich) {\n            return this.edges.toArray();\n        }\n        return this.edges.map((edge) => {\n            return edge.toPlain();\n        }).toArray();\n    }\n\n    getNumberOfNodes(): number {\n        return this.numNodes;\n    }\n\n    getNumberOfEdges(): number {\n        return this.numEdges;\n    }\n\n    getAllOutDegrees(): number[] {\n        const degrees: number[] = [];\n        this.nodes.forEach((_, i) => {\n            degrees[i] = 0;\n        });\n        this.edges.forEach((edge) => {\n            degrees[edge.getFrom()]++;\n        });\n\n        return degrees;\n    }\n\n    asWeighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, true);\n    }\n\n    asUnweighted(): GraphImmut {\n        return new GraphImmut(this.nodes, this.edges.map((edge) => {\n            return edge.editEdge(1);\n        }) as List<EdgeImmut>, this.directed, false);\n    }\n\n    asDirected(doubleEdges = false): GraphImmut {\n        if (!doubleEdges) {\n            return new GraphImmut(this.nodes, this.edges, true, this.weighted);\n        }\n\n        let newEdges = this.edges;\n        this.edges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.getTo(), edge.getFrom(), edge.getWeight(), edge.getAllAttributes()));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, true, this.weighted);\n    }\n\n    asUndirected(): GraphImmut {\n        let newEdges: List<EdgeImmut> = List();\n        const addedEdges: { [key: string]: null } = {};\n\n        this.edges.forEach((edge) => {\n            let from = edge.getFrom();\n            let to = edge.getTo();\n            if (to < from) {\n                from = to;\n                to = edge.getFrom();\n            }\n            if (!(`${from}_${to}` in addedEdges)) {\n                addedEdges[`${from}_${to}`] = null;\n                newEdges = newEdges.push(new EdgeImmut(from, to, edge.getWeight(), edge.getAllAttributes()));\n            }\n        });\n\n        return new GraphImmut(this.nodes, newEdges, false, this.weighted);\n    }\n\n    asChangedDirectedWeighted(directed: boolean, weighted: boolean): GraphImmut {\n        let G: GraphImmut = this;\n        if (directed && !this.directed) {\n            G = G.asDirected();\n        }\n        else if (!directed && this.directed) {\n            G = G.asUndirected();\n        }\n\n        if (weighted && !this.weighted) {\n            G = G.asWeighted();\n        }\n        else if (!weighted && this.weighted) {\n            G = G.asUnweighted();\n        }\n\n        return G;\n    }\n\n    getNodeAdjacency(id: number): number[] {\n        const adj: number[] = [];\n        this.edges.forEach((edge) => {\n            if (edge.getFrom() === id) {\n                adj.push(edge.getTo());\n            }\n            else if (!this.directed && edge.getTo() === id) {\n                adj.push(edge.getFrom());\n            }\n        });\n\n        return adj;\n    }\n\n    getFullAdjacency(): number[][] {\n        const adj: number[][] = [];\n        this.nodes.forEach((n) => {\n            adj[n.getID()] = this.getNodeAdjacency(n.getID());\n        });\n\n        return adj;\n    }\n\n    areAdjacent(id1: number, id2: number): boolean {\n        return this.getNodeAdjacency(id1).includes(id2);\n    }\n\n    getEdgesBetween(id1: number, id2: number): EdgeImmut[] {\n        const edgeList: EdgeImmut[] = [];\n        if (id1 >= this.numNodes || id2 >= this.numNodes) {\n            return edgeList;\n        }\n\n        this.edges.forEach((edge) => {\n            if (!this.directed && edge.getFrom() === id2 && edge.getTo() === id1) {\n                edgeList.push(edge);\n            }\n\n            if (edge.getFrom() === id1 && edge.getTo() === id2) {\n                edgeList.push(edge);\n            }\n        });\n\n        return edgeList;\n    }\n\n    getMinWeightEdgeBetween(id1: number, id2: number): number {\n        let minWeight = Infinity;\n        this.getEdgesBetween(id1, id2).forEach((edge) => {\n            if (edge.getWeight() < minWeight) {\n                minWeight = edge.getWeight();\n            }\n        });\n\n        return minWeight;\n    }\n\n    // Take a multigraph and reduce all multiple edges to a single edge, weighted using the reducer\n    reduceMultiGraph(reducer: (a: number, b: number) => number = Math.min, initialValue: any = Infinity): GraphImmut {\n        const multiEdges: EdgeImmutPlain[] = [];\n        this.nodes.forEach((node) => {\n            // If we have duplicates\n            const adj = this.getNodeAdjacency(node.getID());\n            const uniques = new Set(adj);\n            if (uniques.size < adj.length) {\n                uniques.forEach((to) => {\n                    const newWeight = this.getEdgesBetween(node.getID(), to).reduce((acc, edge) => {\n                        return reducer(acc, edge.getWeight());\n                    }, initialValue);\n\n                    multiEdges.push({ from: node.getID(), to, weight: parseFloat(newWeight) });\n                });\n            }\n        });\n\n        // Remove all multigraph edges and replace them with single new edges\n        let newEdges = this.edges.filter((edge) => {\n            let keep = true;\n            multiEdges.forEach((duplicateEdge) => {\n                if (edge.getFrom() === duplicateEdge.from && edge.getTo() === duplicateEdge.to) {\n                    keep = false;\n                }\n            });\n\n            return keep;\n        }) as List<EdgeImmut>;\n        multiEdges.forEach((edge) => {\n            newEdges = newEdges.push(new EdgeImmut(edge.from, edge.to, edge.weight));\n        });\n\n        return new GraphImmut(this.nodes, newEdges, this.directed, this.weighted);\n    }\n\n    isWeighted() {\n        return this.weighted;\n    }\n\n    isDirected() {\n        return this.directed;\n    }\n}\n","\"use strict\";\n\nexport interface NodeImmutPlain {\n    id: Readonly<number>;\n    label: string;\n    [key: string]: any;\n    [key: number]: any;\n}\n\nexport default class NodeImmut {\n    private readonly id: Readonly<number>;\n    private readonly label: Readonly<string>;\n    private readonly attributes: any;\n\n    constructor(id: any, label: null | string = null, extraAttrs: null | any = null) {\n        if (label === null) {\n            this.label = id.toString();\n        } else {\n            this.label = label;\n        }\n\n        this.attributes = {};\n        if (extraAttrs !== null && typeof extraAttrs === \"object\") {\n            Object.keys(extraAttrs).forEach(key => {\n                this.attributes[key] = Object.freeze(extraAttrs[key]);\n            });\n        }\n\n        this.attributes = Object.freeze(this.attributes);\n        this.label = Object.freeze(this.label);\n        this.id = Object.freeze(id);\n\n        if (new.target === NodeImmut) {\n            Object.freeze(this);\n        }\n    }\n\n    toPlain(): NodeImmutPlain {\n        const toReturn: NodeImmutPlain = { id: this.id, label: this.label };\n        Object.keys(this.attributes).forEach(key => {\n            if (!(key in toReturn)) {\n                toReturn[key] = this.attributes[key];\n            }\n        });\n\n        return toReturn;\n    }\n\n    getID(): Readonly<number> {\n        return this.id;\n    }\n\n    getLabel(): Readonly<string> {\n        return this.label;\n    }\n\n    getAttribute(attribute: string | number): any {\n        if (attribute in this.attributes) {\n            return this.attributes[attribute];\n        }\n\n        return null;\n    }\n\n    getAllAttributes(): { [key: string]: any; [key: number]: any } {\n        return this.attributes;\n    }\n\n    editNode(label: any = null, extraAttrs: any = null): NodeImmut {\n        if (label === null) {\n            label = this.getLabel();\n        }\n\n        // Merge existing and new attributes favoring the new\n        const attributes = Object.assign({}, this.attributes);\n        if (extraAttrs !== null) {\n            Object.keys(extraAttrs).forEach(key => {\n                attributes[key] = extraAttrs[key];\n            });\n        }\n\n        return new NodeImmut(this.getID(), label, attributes);\n    }\n}\n","\"use strict\";\n\nimport { DataSet } from 'vis-data';\nimport { Node, Edge } from 'vis-network';\nimport help from './util/genericHelpers';\nimport GraphImmut from './classes/GraphImmut/GraphImmut';\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport NodeImmut, { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\n\ninterface UpToDateProperties {\n    name: string;\n    upToDate: boolean;\n    type: string;\n    always?: boolean;\n    applyFunc?: (ignoreDuplicate?: boolean) => any;\n    [index: string]: undefined | string | boolean | ((ignoreDuplicate?: boolean) => any)\n}\n\ninterface GraphProperties {\n    vertices: number;\n    edges: number;\n    eulerian: boolean;\n    \"Chromatic Number\": number | null;\n    \"Connected Components\": number | null;\n    \"Strongly Connected Components\": number | null;\n    cyclic: boolean;\n\n    [index: string]: boolean | number | null;\n}\n\ninterface GraphStateData {\n    stronglyConnectedComponents: null | { [key: number]: number };\n    connectedComponents: null | { [key: number]: number };\n    graphColoring: null | number[];\n\n    [index: string]: null | number[] | { [key: number]: number };\n}\n\nexport interface AddNodeI {\n    id?: number\n    label: string;\n    x: number;\n    y: number;\n    color?: string;\n}\n\nexport interface GraphStateHistory {\n    upToDate: UpToDateProperties[];\n    state: GraphStateData;\n    graph: GraphImmut;\n    graphProperties: GraphProperties;\n    [index: string]: UpToDateProperties[] | GraphStateData | GraphImmut | GraphProperties;\n}\n\nconst getInt = (v: string | number): number => {\n    if (typeof v === 'number') {\n        return v;\n    }\n    return parseInt(v);\n};\n\nexport default class GraphState {\n    public static workerPool: (Worker | null)[] = [];\n    public static backHistory: GraphStateHistory[] = [];\n    public static forwardHistory: GraphStateHistory[] = [];\n    public static maxHistory = 10;\n    public static upToDate: UpToDateProperties[] = [\n        {\n            name: \"Chromatic Number\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                return window.ui.makeAndPrintGraphColoring();\n            }\n        },\n        {\n            name: \"graphColoring\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                return window.ui.makeAndPrintGraphColoring();\n            }\n        },\n        { name: \"vertices\", upToDate: true, always: true, type: \"property\" },\n        { name: \"edges\", upToDate: true, always: true, type: \"property\" },\n        {\n            name: \"eulerian\", upToDate: false, type: \"property\",\n            applyFunc: (i) => {\n                return window.ui.makeAndPrintEulerian(i);\n            }\n        },\n        {\n            name: \"Connected Components\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"connectedComponents\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"Strongly Connected Components\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"stronglyConnectedComponents\", upToDate: false, type: \"state\",\n            applyFunc: () => {\n                window.ui.getAlgorithms().find((v) => v.name === 'Strongly Connected Components')!.applyFunc();\n            }\n        },\n        {\n            name: \"cyclic\", upToDate: false, type: \"property\",\n            applyFunc: () => {\n                return window.ui.makeAndPrintIsCyclic();\n            }\n        },\n    ];\n    public static state: GraphStateData = {\n        stronglyConnectedComponents: null,\n        connectedComponents: null,\n        graphColoring: null,\n    };\n    public static graph: GraphImmut;\n    public static graphProperties: GraphProperties = {\n        vertices: 0,\n        edges: 0,\n        eulerian: false,\n        \"Chromatic Number\": null,\n        \"Connected Components\": null,\n        \"Strongly Connected Components\": null,\n        cyclic: false,\n    };\n\n    static setUpToDate(value = false, listOptions?: string[]) {\n        const all = listOptions === null || typeof listOptions === \"undefined\";\n        let property = false;\n        GraphState.upToDate.forEach((v) => {\n            if ((!(\"always\" in v) || !v.always) && (all || listOptions!.indexOf(v.name) > -1)) {\n                v.upToDate = value;\n                if (v.type === \"property\") {\n                    property = true;\n                }\n            }\n        });\n        if (property) {\n            GraphState.makeAndPrintProperties();\n        }\n    }\n\n    static async getProperty(property: keyof GraphProperties, updateIfNotUpdated = false, ignoreDuplicate = false): Promise<any> {\n        const a = GraphState.upToDate.find((v) => {\n            return (\"name\" in v && v.name === property);\n        })!;\n        if (!a.upToDate) {\n            if (\"applyFunc\" in a && typeof a.applyFunc === \"function\" && updateIfNotUpdated) {\n                await a.applyFunc(ignoreDuplicate);\n            }\n            else {\n                return null;\n            }\n        }\n        if (a.type === \"state\") {\n            return Promise.resolve(GraphState.state[property]);\n        }\n        return Promise.resolve(GraphState.graphProperties[property]);\n    }\n\n    static async makeAndPrintProperties(recalcLong = false) {\n        const directional = window.settings.getOption(\"direction\");\n\n        GraphState.graphProperties.vertices = GraphState.graph.getNumberOfNodes();\n        GraphState.graphProperties.edges = GraphState.graph.getNumberOfEdges();\n\n        if (!directional) {\n            await GraphState.getProperty(\"eulerian\", true, true);\n        }\n\n        const p = Object.keys(GraphState.graphProperties);\n        if (recalcLong) {\n            p.forEach(async (v) => {\n                await GraphState.getProperty(v, true);\n            });\n        }\n\n        const printableProperties: any = {};\n        await Promise.all(p.map(async (v) => {\n            printableProperties[v] = await GraphState.getProperty(v);\n        }));\n\n        GraphState.printGraphProperties(printableProperties);\n    }\n\n    static printGraphProperties(properties: any) {\n        let p = \"\";\n        Object.keys(properties).forEach((k) => {\n            if (properties[k] !== null) {\n                p += `${help.toTitleCase(k)}: ${properties[k]}\\n`;\n            }\n        });\n        p = p.trim();\n        p = help.htmlEncode(p);\n        document.getElementById(\"graphProps\")!.innerHTML = `<p class='nav-link'>${p}</p>`;\n    }\n\n    private static updateGraph(graph = GraphState.graph) {\n        let nodes = graph.getAllNodes() as NodeImmutPlain[];\n        let edges = graph.getAllEdges() as EdgeImmutPlain[];\n        if (!window.settings.getOption(\"customColors\")) {\n            nodes = GraphState.clearColorFromNodes(nodes);\n            edges = GraphState.clearColorFromEdges(edges);\n        }\n        window.main.setData({ nodes, edges });\n    }\n\n    static addEdge(from: number | string, to: number | string, weight = 0, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        graph = graph.addEdge(edgeFrom, edgeTo, weight);\n        this.updateGraph(graph);\n    }\n\n    static addNode(data: AddNodeI, graph = GraphState.graph) {\n        graph = graph.addNode({ label: data.label, x: data.x, y: data.y, color: data.color });\n        this.updateGraph(graph);\n    }\n\n    static editNode(id: number | string, label: string, color?: string, graph = GraphState.graph) {\n        const iId = getInt(id);\n        graph = graph.editNode(iId, { label, color });\n        window.main.setData(GraphState.getGraphData(graph), false, false);\n    }\n\n    static editEdge(from: number | string, to: number | string,\n        newWeight: number, oldWeight: number, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        const newGraph = graph.editEdge(edgeFrom, edgeTo, newWeight, oldWeight);\n        if (newGraph instanceof GraphImmut) {\n            window.main.setData(GraphState.getGraphData(newGraph), false, false);\n        }\n    }\n\n    static deleteEdge(from: number | string, to: number | string, weight: (undefined | null | number) = null, graph = GraphState.graph) {\n        const edgeFrom = getInt(from);\n        const edgeTo = getInt(to);\n        graph = graph.deleteEdge(edgeFrom, edgeTo, weight, false);\n        this.updateGraph(graph);\n    }\n\n    static deleteNode(id: number | string, graph = GraphState.graph) {\n        const iId = getInt(id);\n        const newGraph = graph.deleteNode(iId);\n        if (newGraph instanceof GraphImmut) {\n            this.updateGraph(newGraph);\n        }\n    }\n\n    static clearColorFromNodes(nodes: NodeImmutPlain[]): NodeImmutPlain[] {\n        nodes.forEach((v) => {\n            v.color = null;\n        });\n        return nodes;\n    }\n\n    static clearColorFromEdges(edges: EdgeImmutPlain[]): EdgeImmutPlain[] {\n        edges.forEach((v) => {\n            delete v.color;\n        });\n        return edges;\n    }\n\n    static nodeIDToLabel(id: number, graph = GraphState.graph): string {\n        const n = graph.getNode(id, true);\n        if (n !== false && n !== null && n instanceof NodeImmut && n.getLabel().trim().length > 0) {\n            return n.getLabel().trim();\n        }\n\n        return id.toString();\n    }\n\n    // Preferentially search by ID, label, and case-insensitive label\n    static nodeLabelToID(label: string, graph = GraphState.graph) {\n        let n = graph.getAllNodes(true) as NodeImmut[];\n        n = n.filter((node) => {\n            return node.getLabel().toLowerCase() === label.toLowerCase() || node.getID().toString() === label;\n        });\n\n        if (n.length === 0) {\n            return -1;\n        }\n        else if (n.length === 1) {\n            return n[0].getID();\n        }\n\n        let rID = -1;\n        let found = false;\n\n        n.forEach((node) => {\n            if (!found && node.getID().toString() === label) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        if (found) {\n            return rID;\n        }\n\n        n.forEach((node) => {\n            if (!found && node.getLabel() === label) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        if (found) {\n            return rID;\n        }\n\n        n.forEach((node) => {\n            if (!found && node.getLabel().toLowerCase() === label.toLowerCase()) {\n                rID = node.getID();\n                found = true;\n            }\n        });\n\n        return rID;\n    }\n\n    // Return graph as a Vis compatible dataset\n    static getGraphAsDataSet(graph: GraphImmut): { nodes: DataSet<Node>; edges: DataSet<Edge> } {\n        const d = GraphState.getGraphData(graph);\n        if (graph.isWeighted()) {\n            d.edges.forEach((e) => {\n                e.label = e.weight.toString();\n            });\n        }\n        d.edges.forEach((e) => {\n            if ('color' in e) {\n                e.color = { color: e.color };\n            }\n        });\n\n        return { nodes: new DataSet(d.nodes as Node[]), edges: new DataSet(d.edges as Edge[]) };\n    }\n\n    static setLocations(locations: { [key: string]: { x: number; y: number } }, graph = GraphState.graph): GraphImmut {\n        let newNodes = graph.getAllNodesAsImmutableList();\n        Object.keys(locations).forEach((i) => {\n            const v = locations[i];\n            const node = newNodes.get(parseInt(i))!;\n            // Only change when there is actually a new position\n            if (node.getAttribute(\"x\") !== v.x || node.getAttribute(\"y\") !== v.y) {\n                // Batch up all changes that we'll be making\n                newNodes = newNodes.set(parseInt(i), node.editNode(node.getLabel(), { x: v.x, y: v.y }));\n            }\n        });\n\n        return new GraphImmut(newNodes, graph.getAllEdgesAsImmutableList(), graph.isDirected(), graph.isWeighted());\n    }\n\n    static getGraphData(graph = GraphState.graph, clearNodeColors = false, clearEdgeColors = false): GraphPlain {\n        const nodes = graph.getAllNodes() as NodeImmutPlain[];\n        const edges = graph.getAllEdges() as EdgeImmutPlain[];\n        return {\n            nodes: clearNodeColors ? GraphState.clearColorFromNodes(nodes) : nodes,\n            edges: clearEdgeColors ? GraphState.clearColorFromEdges(edges) : edges,\n            directed: graph.isDirected(),\n            weighted: graph.isWeighted()\n        };\n    }\n}\n","import EN_US from \"src/EN_US\";\n\nexport enum Languages {\n    EN_US = \"EN_US\",\n\n}\n\nexport let current = {} as typeof EN_US;\n\n\nexport const setLanguage = async () => {\n    current = (await import(`../${window.settings.getOption(\"language\") || Languages.EN_US}.ts`)).default;\n};\n","\"use strict\";\n\nimport help, { ModalFormRow } from './util/genericHelpers';\nimport randomColor from 'randomcolor';\nimport GraphState, { AddNodeI, GraphStateHistory } from './graphState';\nimport GraphImmut from \"./classes/GraphImmut/GraphImmut\";\nimport { NodeImmutPlain } from \"./classes/GraphImmut/NodeImmut\";\nimport { EdgeImmutPlain } from \"./classes/GraphImmut/EdgeImmut\";\nimport { GraphPlain } from \"./util/predefinedGraphs\";\nimport { Network, Node as VisNode, Edge } from \"vis-network\";\nimport { DataSet } from \"vis-data\";\nimport * as languages from \"./languages\";\n\n\nexport interface MainI {\n    graphState: typeof GraphState;\n    container: HTMLElement;\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback: Function) => void;\n    visOptions: {\n        interaction: { hover: boolean };\n        manipulation: {\n            addNode: (data: AddNodeI, callback: Function) => void;\n            editNode: (data: AddNodeI, callback: Function) => void;\n            addEdge: (data: VisEdgeInternal, callback?: Function) => void;\n            editEdge: (data: VisEdgeInternal, callback: Function) => void;\n            deleteEdge: (data: { edges: string[] }, callback?: Function) => void;\n            deleteNode: (data: { nodes: string[] }, callback: Function) => void\n        },\n        locale?: string,\n        locales?: any,\n    };\n    cancelEdit: (callback: Function) => void;\n    saveData: (data: any, callback: Function, operation: string, label: string, color: string) => Promise<void>;\n    nodeLabelIDValidator: (v: string) => (boolean | string);\n    applyColors: () => Promise<void>;\n    setData: (data: GraphPlain, recalcProps?: boolean, graphChanged?: boolean, rearrangeGraph?: boolean) => void;\n    saveState: () => void;\n    getStateForSaving: () => GraphStateHistory;\n    undo: () => void;\n    redo: () => void;\n    applyState: (undo?: boolean, newState?: any) => void;\n    saveStateLocalStorage: () => void;\n    shuffleNetworkLayout: () => void;\n    randomizeNetworkLayoutSeed: (network: VisNetworkInternals) => void;\n    addNetworkListeners: (network: Network) => void\n}\n\ninterface VisNetworkEvent {\n    edges: DataSet<Edge>;\n    nodes: DataSet<VisNode>;\n}\n\ninterface VisNetworkInternals extends Network {\n    layoutEngine: {\n        randomSeed: number,\n        initialRandomSeed: number\n    }\n}\n\ninterface VisEditEdgeInternal {\n    from: { id: string | number };\n    to: { id: string | number };\n    label?: string\n}\n\ninterface VisEdgeInternal {\n    from: string | number;\n    to: string | number;\n    id: string;\n    label?: string\n}\n\nconst customColorPallete = {\n    \"Default\": \"DEFAULT\",\n    \"Red\": \"red\",\n    \"Maroon\": \"maroon\",\n    \"Yellow\": \"yellow\",\n    \"Olive\": \"olive\",\n    \"Lime\": \"lime\",\n    \"Green\": \"green\",\n    \"Aqua\": \"aqua\",\n    \"Teal\": \"teal\",\n    \"Blue\": \"blue\",\n    \"Navy\": \"navy\",\n    \"Fuchsia\": \"fuchsia\",\n    \"Purple\": \"purple\",\n};\n\nconst self: MainI = {\n    graphState: GraphState,\n    container: document.getElementById('network')!,\n    // Function used to overwrite the edge edit functionality when weights are active\n    visWeightEdgeEdit: (data: VisEditEdgeInternal, callback) => {\n        help.showFormModal(($modal, vals) => {\n            callback(null);\n            $modal.modal(\"hide\");\n            const value = parseFloat(vals[0]);\n            GraphState.editEdge(data.from.id, data.to.id, value, parseFloat(data.label!));\n        }, languages.current.EditEdge, languages.current.Save, languages.current.Cancel, [\n            {\n                type: \"numeric\",\n                label: languages.current.WeightCapacity,\n                initialValue: parseFloat(data.label!)\n            }\n        ]);\n    },\n    visOptions: {\n        interaction: { hover: true },\n        manipulation: {\n            addNode: async (data, callback) => {\n                const customColors = window.settings.getOption(\"customColors\");\n                const options: ModalFormRow[] = [\n                    {\n                        type: \"html\",\n                        initialValue: `<p>${help.stringReplacement(languages.current.NodeId, await GraphState.getProperty(\"vertices\"))}</p>`\n                    },\n                    { type: \"text\", label: languages.current.LabelLabel, initialValue: await GraphState.getProperty(\"vertices\") },\n                ];\n                if (customColors) {\n                    options.push({ type: \"select\", label: languages.current.Color, optionText: Object.keys(customColorPallete), optionValues: Object.values(customColorPallete) });\n                }\n                const $popup = help.makeFormModal(languages.current.AddNode, languages.current.Save, languages.current.Cancel, options);\n\n                $popup.on(\"click\", \".btn-success\", () => {\n                    $popup.modal(\"hide\");\n                    self.saveData(data, callback, \"add\", $popup.find(\"input\").first().val() as string, $popup.find(\"select\").first().val() as string);\n                }).on(\"click\", \".btn-cancel\", () => {\n                    $popup.modal(\"hide\");\n                    self.cancelEdit(callback);\n                }).on(\"hidden.bs.modal\", () => {\n                    $popup.remove();\n                    self.cancelEdit(callback);\n                }).modal(\"show\");\n            },\n            editNode: (data, callback) => {\n                const customColors = window.settings.getOption(\"customColors\");\n                const initialColor = Object.getOwnPropertyNames(data.color).includes(\"background\") ? (data.color as any).background : \"DEFAULT\";\n\n                const options: ModalFormRow[] = [\n                    {\n                        type: \"html\",\n                        initialValue: `<p>${help.stringReplacement(languages.current.NodeId, data.id + \"\")}</p>`\n                    },\n                    { type: \"text\", label: languages.current.LabelLabel, initialValue: data.label },\n                ];\n                if (customColors) {\n                    options.push({ type: \"select\", label: languages.current.Color, optionText: Object.keys(customColorPallete), optionValues: Object.values(customColorPallete), initialValue: initialColor });\n                }\n                const $popup = help.makeFormModal(languages.current.EditNode, languages.current.Save, languages.current.Cancel, options);\n\n                $popup.on(\"click\", \".btn-success\", () => {\n                    $popup.modal(\"hide\");\n                    self.saveData(data, callback, \"editNode\", $popup.find(\"input\").first().val() as string, $popup.find(\"select\").first().val() as string);\n                }).on(\"click\", \".btn-cancel\", () => {\n                    $popup.modal(\"hide\");\n                    self.cancelEdit(callback);\n                }).on(\"hidden.bs.modal\", () => {\n                    $popup.remove();\n                    self.cancelEdit(callback);\n                }).modal(\"show\");\n            },\n            addEdge: (data, callback) => {\n                const apply = () => {\n                    if (typeof callback === \"function\") {\n                        callback(null);\n                    }\n                    GraphState.addEdge(data.from, data.to);\n                };\n                if (data.from === data.to) {\n                    if (confirm(languages.current.ConnectNodeToItselfConfirmation)) {\n                        apply();\n                    }\n                    return;\n                }\n\n                apply();\n            },\n            editEdge: (data, callback) => {\n                callback(null);\n                self.visOptions.manipulation.deleteEdge({ edges: [data.id] });\n                self.visOptions.manipulation.addEdge(data);\n            },\n            deleteEdge: (data, callback) => {\n                if (typeof callback === \"function\") {\n                    callback(null);\n                }\n                data.edges.forEach((v: any) => {\n                    let weight = null;\n                    const edge = (window.network as any).body.data.edges.get(v);\n                    const weightFromLabel = edge.label;\n                    if (typeof weightFromLabel !== \"undefined\") {\n                        weight = parseFloat(weightFromLabel);\n                    }\n\n                    GraphState.deleteEdge(edge.from, edge.to, weight);\n                });\n            },\n            deleteNode: (data, callback) => {\n                callback(null);\n                data.nodes.forEach((v: string) => {\n                    GraphState.deleteNode(v);\n                });\n            },\n        },\n    },\n\n    cancelEdit: (callback) => {\n        if (typeof callback === \"function\") {\n            callback(null);\n        }\n    },\n\n    saveData: async (data, callback, operation, label, color) => {\n        callback(null);\n\n        data.label = label;\n        data.color = color;\n        if (color === \"DEFAULT\") {\n            data.color = undefined;\n        }\n        if (operation === \"add\") {\n            GraphState.addNode(data);\n        }\n        else if (operation === \"editNode\") {\n            GraphState.editNode(data.id, data.label, data.color);\n        }\n    },\n\n    nodeLabelIDValidator: (v) => {\n        if (GraphState.nodeLabelToID(v) > -1) {\n            return true;\n        }\n        return languages.current.InvalidLabelOrId;\n    },\n\n    applyColors: async () => {\n        if (window.settings.getOption(\"direction\")) {\n            return;\n        }\n        const graphColors = await GraphState.getProperty(\"graphColoring\", true);\n        const chromaticNumber = await GraphState.getProperty(\"Chromatic Number\", true);\n\n        const colors = randomColor({ count: chromaticNumber, luminosity: \"light\" });\n        let G = GraphState.graph;\n        (G.getAllNodes() as NodeImmutPlain[]).forEach((v) => {\n            G = G.editNode(v.id, { color: colors[graphColors[v.id]] });\n        });\n        self.setData(GraphState.getGraphData(G), false, false);\n    },\n\n    setData: (data, recalcProps = false, graphChanged = true, rearrangeGraph = false) => {\n        // Store existing positions in the data if we're supposed to keep the layout\n        if (rearrangeGraph) {\n            data.nodes.forEach((v) => {\n                delete v.x;\n                delete v.y;\n            });\n        }\n\n        if (graphChanged) {\n            self.saveState();\n        }\n\n        if (\"directed\" in data && typeof data.directed !== \"undefined\") {\n            window.settings.changeOption(\"direction\", data.directed);\n        }\n        if (\"weighted\" in data && typeof data.weighted !== \"undefined\") {\n            window.settings.changeOption(\"weights\", data.weighted);\n        }\n        const directional = window.settings.getOption(\"direction\") as boolean;\n        const weighted = window.settings.getOption(\"weights\") as boolean;\n\n        const g = new GraphImmut(data.nodes, data.edges, directional, weighted);\n        GraphState.graph = g;\n\n        // Set a new random seed so that the layout will be different\n        self.randomizeNetworkLayoutSeed(window.network as unknown as VisNetworkInternals);\n        window.network.setData(GraphState.getGraphAsDataSet(g));\n        GraphState.graph = GraphState.setLocations(window.network.getPositions());\n\n        window.network.disableEditMode();\n        window.network.enableEditMode();\n\n        if (graphChanged) {\n            window.ui.stopLoadingAnimation();\n            window.ui.isRunning = {};\n            window.ui.terminateAllWebWorkers();\n            window.ui.printGraphAlgorithms();\n            help.printout(\"\");\n            GraphState.setUpToDate();\n            GraphState.makeAndPrintProperties(recalcProps);\n        }\n\n        self.saveStateLocalStorage();\n    },\n\n    saveState: () => {\n        if (GraphState.graph === null) {\n            return;\n        }\n\n        if (GraphState.backHistory.length >= GraphState.maxHistory) {\n            GraphState.backHistory.shift();\n        }\n\n        GraphState.backHistory.push(self.getStateForSaving());\n        GraphState.forwardHistory = [];\n        document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n    },\n\n    getStateForSaving: () => {\n        const state: any = {};\n        Object.keys(GraphState).forEach((k: string) => {\n            const v: any = (GraphState as any)[k];\n            if (typeof v !== \"function\") {\n                if (typeof v !== \"object\") {\n                    state[k] = v;\n                }\n                else {\n                    if (k === \"graph\" && v !== null) {\n                        state[k] = v;\n                    }\n                    if (!k.toLowerCase().includes(\"history\")) {\n                        state[k] = help.deepCopy(true, Array.isArray(v) ? [] : {}, v);\n                    }\n                }\n            }\n        });\n\n        return state as GraphStateHistory;\n    },\n\n    undo: () => {\n        if (GraphState.backHistory.length > 0) {\n            self.applyState(true);\n        }\n    },\n\n    redo: () => {\n        if (GraphState.forwardHistory.length > 0) {\n            self.applyState(false);\n        }\n    },\n\n    applyState: (undo = true, newState: null | GraphStateHistory = null) => {\n        const firstLoad = newState !== null;\n        const currentState = self.getStateForSaving();\n\n        if (!firstLoad) {\n            if (undo) {\n                newState = GraphState.backHistory.pop()!;\n            }\n            else {\n                newState = GraphState.forwardHistory.pop()!;\n            }\n        }\n\n        //@ts-ignore Ignore accessing private props. I do this because saving the state lost the type of the data\n        newState.graph = new GraphImmut(newState.graph.nodes, newState.graph.edges, newState.graph.directed, newState.graph.weighted);\n\n        window.settings.changeOption(\"direction\", newState!.graph.isDirected());\n        window.settings.changeOption(\"weights\", newState!.graph.isWeighted());\n\n        GraphState.graph = newState!.graph;\n\n        window.network.setData(GraphState.getGraphAsDataSet(GraphState.graph));\n        window.network.disableEditMode();\n        window.network.enableEditMode();\n\n        window.ui.printGraphAlgorithms();\n        help.printout(\"\");\n\n        Object.keys(newState!).forEach((k: string) => {\n            const v = newState![k];\n            if (typeof v !== \"object\") {\n                (GraphState as any)[k] = v;\n            }\n            else if (!k.toLowerCase().includes(\"history\") && k.toLowerCase() !== \"graph\") {\n                if (k.toLowerCase() === \"uptodate\") {\n                    Object.keys((GraphState as any)[k]).forEach((oldKey) => {\n                        (GraphState as any)[k][oldKey].upToDate = (v as any)[oldKey].upToDate;\n                    });\n                }\n                else {\n                    (GraphState as any)[k] = help.deepCopy(true, (GraphState as any)[k], v);\n                }\n            }\n        });\n\n        GraphState.makeAndPrintProperties().then(() => {\n            if (undo && !firstLoad) {\n                document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n                if (GraphState.backHistory.length === 0) {\n                    document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\n                }\n                GraphState.forwardHistory.push(currentState);\n            }\n            else if (!undo && !firstLoad) {\n                document.getElementsByClassName(\"icon-undo\")!.item(0)!.parentElement!.parentElement!.classList.add(\"active\");\n                if (GraphState.forwardHistory.length === 0) {\n                    document.getElementsByClassName(\"icon-redo\")!.item(0)!.parentElement!.parentElement!.classList.remove(\"active\");\n                }\n                GraphState.backHistory.push(currentState);\n            }\n\n            self.saveStateLocalStorage();\n        });\n    },\n\n    saveStateLocalStorage: () => {\n        if (window.settings.checkForLocalStorage()) {\n            localStorage.setItem(\"graphPlayground.lastState\", JSON.stringify(self.getStateForSaving()));\n        }\n    },\n\n    shuffleNetworkLayout: () => {\n        self.setData({\n            nodes: GraphState.graph.getAllNodes() as NodeImmutPlain[],\n            edges: GraphState.graph.getAllEdges() as EdgeImmutPlain[]\n        }, false, false, true);\n    },\n\n    randomizeNetworkLayoutSeed: (network) => {\n        const r = Math.round(Math.random() * 1000000);\n        network.layoutEngine.randomSeed = r;\n        network.layoutEngine.initialRandomSeed = r;\n    },\n\n    addNetworkListeners: (network) => {\n        // Enable edit node/edge when double clicking\n        network.on(\"doubleClick\", (p: VisNetworkEvent) => {\n            if (window.settings.getOption(\"weights\") && \"edges\" in p && p.edges.length === 1) {\n                network.editEdgeMode();\n            }\n            if (\"nodes\" in p && p.nodes.length === 1) {\n                lastNetworkClickEvent = null;\n                network.editNode();\n            }\n        });\n\n        // Save locations of nodes after dragging\n        network.on(\"dragEnd\", () => {\n            GraphState.graph = GraphState.setLocations(network.getPositions());\n            self.saveStateLocalStorage(); // Save the new locations as part of the state\n        });\n\n        // Delete nodes/edges when hit \"Delete\"\n        let lastNetworkClickEvent: Event | null = null;\n        network.on('click', (event) => {\n            lastNetworkClickEvent = event;\n        });\n\n        // Delete key to delete node or edge\n        document.addEventListener('keyup', (key) => {\n            if (key.key === \"Delete\" && lastNetworkClickEvent !== null) {\n                if (self.container.contains((lastNetworkClickEvent as any).event.target)) {\n                    if ((\"edges\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).edges.length === 1)\n                        || (\"nodes\" in lastNetworkClickEvent && (lastNetworkClickEvent as any).nodes.length === 1)) {\n                        network.deleteSelected();\n                    }\n                }\n            }\n        });\n\n        // Undo/Redo keyboard commands\n        document.addEventListener(\"keydown\", (e) => {\n            if ((e.key.toLowerCase() === 'y' && e.ctrlKey) || (e.key.toLowerCase() === 'z' && e.ctrlKey && e.shiftKey)) {\n                self.redo();\n            }\n            else if (e.key.toLowerCase() === 'z' && e.ctrlKey) {\n                self.undo();\n            }\n        });\n\n        // When clicking off of the network, remove the Delete functionality\n        document.addEventListener(\"click\", (e) => {\n            if (self.container !== e.target && !self.container.contains(e.target as Node)) {\n                lastNetworkClickEvent = null;\n            }\n        });\n    },\n\n};\n\nexport default self;\n","\"use strict\";\ninterface SettingsList {\n    nodePhysics: boolean;\n    direction: boolean;\n    weights: boolean;\n\n    [index: string]: boolean;\n}\n\nexport default class Settings {\n    private static readonly defaults: SettingsList = {\n        nodePhysics: true,\n        direction: false,\n        weights: false\n    };\n    private static current: any = {};\n\n    public static checkForLocalStorage() {\n        try {\n            const x = \"__storage_test__\";\n            localStorage.setItem(x, x);\n            localStorage.removeItem(x);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    public static saveSettings() {\n        if (Settings.checkForLocalStorage()) {\n            localStorage.setItem(\"graphPlayground.settings\", JSON.stringify(Settings.current));\n        }\n    }\n\n    public static loadSettings() {\n        if (Settings.checkForLocalStorage()) {\n            const settings = localStorage.getItem(\"graphPlayground.settings\");\n            if (settings === null) {\n                Settings.current = settings;\n            } else {\n                Settings.current = JSON.parse(settings);\n            }\n        }\n        if (Settings.current === null) {\n            Settings.current = {};\n        }\n        Settings.setAll();\n    }\n\n    public static setAll() {\n        window.network.setOptions({ nodes: { physics: Settings.getOption(\"nodePhysics\") as boolean } });\n        window.network.setOptions({ edges: { arrows: { to: Settings.getOption(\"direction\") as boolean } } });\n        if (Settings.getOption(\"weights\")) {\n            window.network.setOptions({\n                manipulation: {\n                    editEdge: {\n                        editWithoutDrag: window.main.visWeightEdgeEdit\n                    }\n                }\n            });\n        } else {\n            window.network.setOptions({ manipulation: { editEdge: window.main.visOptions.manipulation.editEdge } });\n        }\n    }\n\n    public static changeOption(option: string, value: string | boolean): void {\n        Settings.current[option] = value;\n        Settings.saveSettings();\n        Settings.setAll();\n    }\n\n    public static getOption(option: string): string | boolean {\n        if (option in Settings.current) {\n            return Settings.current[option];\n        }\n        return Settings.defaults[option];\n    }\n}\n","\"use strict\";\n\nimport * as $ from \"jquery\";\n\nexport declare interface ModalFormRow {\n    type: string;\n    label?: string;\n    initialValue?: any;\n    id?: string | number;\n    extraAttrs?: any;\n    validationFunc?: (value: any, container: JQuery) => boolean | string;\n    clickDismiss?: boolean;\n    onclick?: (...args: any[]) => void;\n    optionText?: any[];\n    optionValues?: any[];\n}\n\ndeclare interface BasicMapType {\n    class: string;\n    id: string;\n    value: any;\n\n    [key: number]: any;\n\n    [key: string]: any;\n}\n\nconst defaultCancelCb = ($modal: JQuery) => {\n    $modal.modal(\"hide\");\n};\n\nconst self = {\n    deepCopy(deep: boolean, clone: any, copy: any) {\n        const isPlainObject = (obj: any) => {\n            if (!obj || {}.toString.call(obj) !== \"[object Object]\") {\n                return false;\n            }\n\n            let proto = Object.getPrototypeOf(obj);\n\n            if (!proto) {\n                return true;\n            }\n\n            // Objects with prototype are plain iff they were constructed by a global Object function\n            let Ctor = {}.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n            return (\n                typeof Ctor === \"function\" &&\n                {}.hasOwnProperty.toString.call(Ctor) === {}.hasOwnProperty.toString.call(Object)\n            );\n        };\n\n        let options,\n            name,\n            src,\n            copyIsArray,\n            target = arguments[0] || {},\n            i = 1,\n            length = arguments.length;\n\n        // Handle a deep copy situation\n        if (typeof target === \"boolean\") {\n            deep = target;\n\n            // Skip the boolean and the target\n            target = arguments[i] || {};\n            i++;\n        }\n\n        // Handle case when target is a string or something (possible in deep copy)\n        if (typeof target !== \"object\" && typeof target !== \"function\") {\n            target = {};\n        }\n\n        if (i === length) {\n            target = this;\n            i--;\n        }\n\n        for (; i < length; i++) {\n            // Only deal with non-null/undefined values\n            if ((options = arguments[i]) != null) {\n                // Extend the base object\n                for (name in options) {\n                    src = target[name];\n                    copy = options[name];\n\n                    // Prevent never-ending loop\n                    if (target === copy) {\n                        continue;\n                    }\n\n                    // Recurse if we're merging plain objects or arrays\n                    if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n                        if (copyIsArray) {\n                            copyIsArray = false;\n                            clone = src && Array.isArray(src) ? src : [];\n                        } else {\n                            clone = src && isPlainObject(src) ? src : {};\n                        }\n\n                        // Never move original objects, clone them\n                        target[name] = self.deepCopy(deep, clone, copy);\n\n                        // Don't bring in undefined values\n                    } else if (copy !== undefined) {\n                        target[name] = copy;\n                    }\n                }\n            }\n        }\n\n        // Return the modified object\n        return target;\n    },\n\n    deepFreeze: <T extends Object>(o: T): Readonly<T> => {\n        Object.freeze(o);\n\n        Object.getOwnPropertyNames(o).forEach((prop: string | number) => {\n            if (\n                o.hasOwnProperty(prop) &&\n                (o as any)[prop] !== null &&\n                (typeof (o as any)[prop] === \"object\" || typeof (o as any)[prop] === \"function\") &&\n                !Object.isFrozen((o as any)[prop])\n            ) {\n                self.deepFreeze((o as any)[prop]);\n            }\n        });\n\n        return o;\n    },\n\n    sort: <T>(arr: T[], compareFunction: (a: any, b: any) => number): T[] => {\n        return [...arr].sort(compareFunction);\n    },\n\n    datasetToArray: (ds: any, key: string): Readonly<any[]> => {\n        const r: any[] = [];\n        ds.forEach((v: { [index: string]: any }) => {\n            r.push(v[key]);\n        });\n        return self.deepFreeze(r);\n    },\n\n    keepOnlyKeys: <T>(arr: T[], keys: string[]): Readonly<T[]> => {\n        arr = arr.slice();\n        arr.forEach((v: any) => {\n            const k = Object.keys(v);\n            k.forEach(key => {\n                if (keys.indexOf(key) < 0) {\n                    delete v[key];\n                }\n            });\n        });\n        return self.deepFreeze(arr);\n    },\n\n    getFileExtension: (filename: string): string => {\n        return filename.split(\".\").splice(-1)[0];\n    },\n\n    htmlEncode: (string: string): string => {\n        const t = document.createElement(\"textarea\");\n        t.textContent = string;\n        string = t.innerHTML.replace(/(?:\\r\\n|\\r|\\n)/g, \"<br/>\");\n        return string;\n    },\n\n    printout: (text: string, escape?: string): void => {\n        if (escape) {\n            text = self.htmlEncode(escape);\n        }\n        document.getElementById(\"printout\")!.innerHTML = text;\n    },\n\n    flatten: <T>(map: { [key: string]: T }): Readonly<T[]> => {\n        const r: T[] = [];\n        Object.keys(map).forEach(i => {\n            r.push(map[i]);\n        });\n        return self.deepFreeze(r);\n    },\n\n    rotate: (map: { [key: string]: any }): Readonly<any> => {\n        const r: any = {};\n        Object.keys(map).forEach(i => {\n            if (map[i] in r) {\n                r[map[i]].push(i);\n            } else {\n                r[map[i]] = [i];\n            }\n        });\n        return self.deepFreeze(r);\n    },\n\n    max: (iterable: any[]): number => {\n        return iterable.reduce((a, b) => {\n            return Math.max(a, b);\n        });\n    },\n\n    toTitleCase: (str: string): string => {\n        return str.replace(/(?:^|\\s)\\w/g, match => {\n            return match.toUpperCase();\n        });\n    },\n\n    stringReplacement: (str: string, ...replacements: string[]) => {\n        return replacements.reduce((val, replacement, i) => {\n            return val.replace(`$${i + 1}`, replacement);\n        }, str);\n    },\n\n    showSimpleModal: (title: string, body: string): void => {\n        self.showFormModal(null, title, null, null, [{ type: \"html\", initialValue: body }], null, false);\n    },\n\n    makeFormModal: (title: string, successText: string | null, cancelText: string | null, form: ModalFormRow[], footer = true): JQuery => {\n        const f = $(\"<div>\", { class: \"modal-body form-group\" });\n        form.forEach((formRow, i) => {\n            if (!(\"initialValue\" in formRow)) {\n                formRow.initialValue = \"\";\n            }\n\n            let id = \"form-modal-\" + i;\n            if (\"id\" in formRow && formRow.id !== \"\" && formRow.id !== null && typeof formRow.id === \"string\") {\n                id = formRow.id;\n            }\n\n            const basicMap: BasicMapType = { class: \"form-control\", id, value: formRow.initialValue };\n\n            if (\"extraAttrs\" in formRow) {\n                Object.keys(formRow.extraAttrs).forEach(attrname => {\n                    if (typeof formRow.extraAttrs[attrname] !== \"function\") {\n                        basicMap[attrname] = formRow.extraAttrs[attrname];\n                    }\n                });\n            }\n\n            let validFunc: typeof formRow[\"validationFunc\"] = () => true;\n            if (\"validationFunc\" in formRow && typeof formRow.validationFunc === \"function\") {\n                validFunc = formRow.validationFunc;\n            }\n\n            const generalValidator = (event: any, valueMutator: null | ((v: any) => any) = null) => {\n                const $v = $(event.target);\n                let val = $v.val();\n                if (valueMutator !== null && typeof valueMutator === \"function\") {\n                    val = valueMutator(val);\n                }\n                const valid = validFunc!(val, $v);\n\n                if (valid === true) {\n                    $v.removeClass(\"is-invalid\")\n                        .next(\"#feedback-\" + i)\n                        .remove();\n                } else {\n                    $v.addClass(\"is-invalid\");\n                    if ($v.next(\"#feedback-\" + i).length === 0) {\n                        $v.after($(\"<div>\", { class: \"invalid-feedback\", id: \"feedback-\" + i }).text(valid));\n                    }\n                }\n            };\n\n            if (formRow.type === \"html\") {\n                f.append($(formRow.initialValue));\n            } else if (formRow.type === \"checkbox\") {\n                basicMap.type = \"checkbox\";\n                basicMap.class = \"form-check-input\";\n                delete basicMap.value;\n                if (formRow.initialValue) {\n                    basicMap.checked = \"\";\n                }\n\n                f.append(\n                    $(\"<div>\", { class: \"form-check\" }).append(\n                        $(\"<label>\", { for: id, class: \"form-check-label\" })\n                            .text(formRow.label!)\n                            .prepend($(\"<input>\", basicMap))\n                    )\n                );\n            } else {\n                f.append($(\"<label>\", { for: id, class: \"col-form-label\" }).text(formRow.label!));\n\n                if (formRow.type === \"button\") {\n                    if (\"clickDismiss\" in formRow && formRow.clickDismiss === true) {\n                        basicMap.class += \" btn-dismiss\";\n                    }\n                    const $b = $(\"<button>\", basicMap).text(formRow.initialValue);\n                    if (\"onclick\" in formRow && typeof formRow.onclick === \"function\") {\n                        $b.on(\"click\", formRow.onclick);\n                    }\n                    f.append($b);\n                } else if (formRow.type === \"numeric\") {\n                    basicMap.type = \"number\";\n                    f.append(\n                        $(\"<input>\", basicMap).on(\"blur validate\", e => {\n                            generalValidator(e, parseFloat);\n                        })\n                    );\n                } else if (formRow.type === \"text\") {\n                    basicMap.type = \"text\";\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\n                } else if (formRow.type === \"file\") {\n                    basicMap.type = \"file\";\n                    basicMap.class = \"form-control-file form-control\";\n                    f.append($(\"<input>\", basicMap).on(\"blur validate\", generalValidator));\n                } else if (formRow.type === \"textarea\") {\n                    const $b = $(\"<textarea>\", basicMap).on(\"blur validate\", generalValidator);\n                    if (\"onclick\" in formRow) {\n                        $b.on(\"click\", formRow.onclick!);\n                    }\n                    f.append($b);\n                } else if (formRow.type === \"select\") {\n                    const $options = $(\"<select>\", basicMap);\n                    formRow.optionText!.forEach((oText, oIndex) => {\n                        if (oIndex < formRow.optionValues!.length) {\n                            let selected = false;\n                            if (formRow.initialValue === formRow.optionValues![oIndex]) {\n                                selected = true;\n                            }\n                            $options.append($(\"<option>\", { value: formRow.optionValues![oIndex], selected }).text(oText));\n                        } else {\n                            let selected = false;\n                            if (formRow.initialValue === oText) {\n                                selected = true;\n                            }\n                            $options.append($(\"<option>\", { selected }).text(oText));\n                        }\n                    });\n                    f.append($options.on(\"blur validate\", generalValidator));\n                }\n            }\n        });\n\n        let $footer: JQuery<HTMLElement> | null = $(\"<div>\", { class: \"modal-footer\" })\n            .append($(\"<button>\", { class: \"btn btn-success\", type: \"button\" }).text(successText!))\n            .append($(\"<button>\", { class: \"btn btn-danger btn-cancel\", type: \"button\" }).text(cancelText!));\n\n        if (footer === false) {\n            $footer = null;\n        }\n\n        const $modal = $(\"<div>\", { class: \"modal fade\", tabindex: \"-1\", role: \"dialog\", \"aria-hidden\": \"true\" });\n        $modal.append(\n            $(\"<div>\", { class: \"modal-dialog\" }).append(\n                $(\"<div>\", { class: \"modal-content\" })\n                    .append(\n                        $(\"<div>\", { class: \"modal-header\" })\n                            .append($(\"<h5>\", { class: \"modal-title\" }).text(title))\n                            .append(\n                                $(\"<button>\", {\n                                    class: \"close\",\n                                    \"data-dismiss\": \"modal\",\n                                    \"aria-label\": \"close\"\n                                }).append($(\"<span>\", { \"aria-hidden\": \"true\" }).html(\"&times;\"))\n                            )\n                    )\n                    .append(f)\n                    .append($footer!)\n            )\n        );\n        $modal\n            .find(\"input, textarea\")\n            .off(\"keyup\")\n            .on(\"keyup\", e => {\n                if (e.key === \"Enter\") {\n                    $(\".btn-success\")\n                        .last()\n                        .trigger(\"click\");\n                }\n            });\n        $modal.on(\"shown.bs.modal\", () => {\n            $modal\n                .find(\"input[type='text'], input[type='number'], textarea\")\n                .first()\n                .trigger(\"focus\");\n        });\n\n        return $modal;\n    },\n\n    showFormModal: (\n        successCb: null | (($modal: JQuery, vals: any[]) => void),\n        title: string,\n        successText: string | null,\n        cancelText: string | null,\n        form: ModalFormRow[],\n        cancelCb: null | (($modal: JQuery) => void) = defaultCancelCb,\n        footer = true\n    ) => {\n        const $modal = self.makeFormModal(title, successText, cancelText, form, footer);\n\n        $modal\n            .on(\"click\", \".btn-cancel\", () => {\n                if (typeof cancelCb === \"function\") {\n                    cancelCb($modal);\n                } else {\n                    $modal.modal(\"hide\");\n                }\n            })\n            .on(\"click\", \".btn-dismiss\", () => {\n                $modal.modal(\"hide\");\n            })\n            .on(\"click\", \".btn-success\", () => {\n                const vals: any[] = [];\n                let hasErrors = false;\n\n                $modal.find(\"input, textarea, select\").each((i, v) => {\n                    const $v = $(v);\n\n                    if (($v as any).tagName === \"SELECT\") {\n                        vals.push($v.find(\":selected\").val());\n                    } else if ($v.attr(\"type\") === \"checkbox\") {\n                        vals.push($v.prop(\"checked\"));\n                    } else if ($v.attr(\"type\") === \"file\") {\n                        vals.push(($v.get(0) as any).files);\n                    } else if ($v.attr(\"type\") === \"number\") {\n                        vals.push(parseFloat($v.val() as string));\n                    } else {\n                        vals.push($v.val());\n                    }\n\n                    if ($v.trigger(\"validate\").hasClass(\"is-invalid\")) {\n                        hasErrors = true;\n                    }\n                });\n\n                if (!hasErrors && typeof successCb === \"function\") {\n                    successCb($modal, vals);\n                }\n            })\n            .on(\"hidden.bs.modal\", () => {\n                if (typeof cancelCb === \"function\") {\n                    cancelCb($modal);\n                }\n                $modal.remove();\n            })\n            .modal(\"show\");\n    }\n};\n\nexport default self;\n","\"use strict\";\n\nimport {EdgeImmutPlain} from \"../classes/GraphImmut/EdgeImmut\";\nimport {NodeImmutPlain} from \"../classes/GraphImmut/NodeImmut\";\n\ninterface Degree {\n    in: number;\n    out: number;\n}\n\nexport default {\n    findVertexDegreesDirectional: (adjacencyMatrix: Array<Array<number>>): Degree[] => {\n        // Adjacency stores IDs of edges TO\n        const degrees: Degree[] = [];\n        adjacencyMatrix.forEach((v, i) => {\n            if (i in degrees) {\n                degrees[i].out += v.length;\n            }\n            else {\n                degrees[i] = {out: v.length, in: 0};\n            }\n            v.forEach((outV) => {\n                if (outV in degrees) {\n                    degrees[outV].in += 1;\n                }\n                else {\n                    degrees[outV] = {in: 1, out: 0};\n                }\n            });\n        });\n\n        return degrees;\n    },\n\n    interpolateNodesFromEdges: (edges: EdgeImmutPlain[]): NodeImmutPlain[] => {\n        const nodes: NodeImmutPlain[] = [];\n        edges.forEach((v) => {\n            nodes[v.from] = {id: v.from, label: v.from.toString()};\n            nodes[v.to] = {id: v.to, label: v.to.toString()};\n        });\n\n        return nodes;\n    },\n};\n","var map = {\n\t\"./EN_US.ts\": [\n\t\t216,\n\t\t9,\n\t\t872\n\t],\n\t\"./custom.d.ts\": [\n\t\t883,\n\t\t7,\n\t\t883\n\t],\n\t\"./js/GraphAlgorithms.ts\": [\n\t\t446,\n\t\t9,\n\t\t446\n\t],\n\t\"./js/UIInteractions.ts\": [\n\t\t825,\n\t\t9\n\t],\n\t\"./js/app.ts\": [\n\t\t238,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/EdgeImmut.ts\": [\n\t\t268,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/GraphImmut.ts\": [\n\t\t536,\n\t\t9\n\t],\n\t\"./js/classes/GraphImmut/NodeImmut.ts\": [\n\t\t729,\n\t\t9\n\t],\n\t\"./js/classes/SpanningTree.ts\": [\n\t\t866,\n\t\t9,\n\t\t866\n\t],\n\t\"./js/dataImportExport.ts\": [\n\t\t346,\n\t\t9,\n\t\t346\n\t],\n\t\"./js/graphState.ts\": [\n\t\t669,\n\t\t9\n\t],\n\t\"./js/languages.ts\": [\n\t\t119,\n\t\t9\n\t],\n\t\"./js/main.ts\": [\n\t\t863,\n\t\t9\n\t],\n\t\"./js/settings.ts\": [\n\t\t660,\n\t\t9\n\t],\n\t\"./js/util/genericHelpers.ts\": [\n\t\t485,\n\t\t9\n\t],\n\t\"./js/util/graphHelpers.ts\": [\n\t\t641,\n\t\t9\n\t],\n\t\"./js/util/predefinedGraphs.ts\": [\n\t\t133,\n\t\t9,\n\t\t981\n\t],\n\t\"./js/workers/GraphAlgorithmWorker.ts\": [\n\t\t69,\n\t\t9,\n\t\t69\n\t],\n\t\"./js/workers/pwaServiceWorker.ts\": [\n\t\t304,\n\t\t7,\n\t\t304\n\t],\n\t\"./overloadTypes.d.ts\": [\n\t\t595,\n\t\t7,\n\t\t595\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__.t(id, ids[1] | 16)\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 529;\nmodule.exports = webpackAsyncContext;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \"-\" + {\"69\":\"b6ead192885af1791bb1\",\"304\":\"561f9c8c92e97b50e6ef\",\"346\":\"85095ae09169363d53ea\",\"446\":\"68c1965cb51d4eba56a1\",\"595\":\"5a6fb330da439a5a0c5b\",\"866\":\"34b2bea5eeb5d747ddec\",\"872\":\"e6205c8189d00428fe9a\",\"883\":\"c0c33b9f6e4b4223421b\",\"981\":\"f415a3ae28372a73ecf4\"}[chunkId] + \".min.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t296: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkgraphPlayground\"] = self[\"webpackChunkgraphPlayground\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [216], () => (__webpack_require__(238)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","Worker_fn","Worker","makeAndPrintShortestPath","title","fn","weighted","myName","languages","current","ShortestPath","UIInteractions","isRunning","printAlreadyRunning","$modal","values","modal","source","sink","iStartedProgress","startLoadingAnimation","w","getWorkerIfPossible","e","a","data","cleanup","stopLoadingAnimation","p","NoPathFromAToB","toString","pathExists","ShortestPathFromAToB","distance","WithWeightedCost","cost","UsingPath","graph","GraphImmut","nodes","edges","directed","path","forEach","v","i","editEdge","window","main","setData","slice","includes","DijkstraError","DijkstraErrorHTML","BellmanFordError","BellmanFordErrorHTML","send","type","args","convertToGraphImmut","graphState","getGraphData","Go","Cancel","label","StartNode","validationFunc","nodeLabelIDValidator","EndNode","makeAndPrintComponents","stronglyConnected","cc","ConnectedComponents","componentKey","settings","getOption","StronglyConnectedComponents","Promise","reject","TaskAlreadyRunning","count","components","NumberOfConnectedComponents","VertexIsInConnectedComponentNumber","JSON","stringify","id","listener","this","worker","postMessage","onmessage","terminate","getAlgorithms","name","GraphColoring","directional","applyFunc","makeAndPrintGraphColoring","display","BFS","Dijkstra","BellmanFord","FordFulkerson","makeAndPrintFFMCMF","KruskalMST","makeAndPrintKruskal","Cyclic","makeAndPrintIsCyclic","TopoSort","makeAndPrintTopologicalSort","Eulerian","makeAndPrintDirectionalEulerian","registerListeners","makeSimpleClickListener","selector","document","querySelector","addEventListener","preventDefault","printHelp","printOptions","predefined","default","Petersen","Konigsberg","Complete","Hypercube","Custom","undo","redo","shuffleNetworkLayout","makeImportFileModal","makeImportTextModal","makeExportFileModal","makeExportTextModal","innerText","File","ImportFile","ImportText","ExportFile","ExportText","CalculateAllProperties","NewGraphLayout","GraphOptions","Help","ExampleGraphs","LoadPetersen","LoadKonigsberg","LoadComplete","LoadHypercube","LoadCustom","Algorithms","GraphProperties","Results","IssuesHTML","vals","changeOption","G","asDirected","asUndirected","asWeighted","asUnweighted","Options","Save","GraphPhysics","initialValue","DiGraph","WeightedGraph","CustomNodeColors","terminateAllWebWorkers","nextIndex","WorkerProxy","prog","getElementById","style","n","ThisTask","TaskAlreadyRunningBody","resolve","chromaticNumber","colors","printGC","NumberOfVertices","length","ChromaticNumberIs","VertexGetsColor","GraphColoringTitle","ReColor","applyColors","scc","makeAndPrintEulerian","ignoreDuplicate","cb","FordFulkersonMaxFlowMinCut","MaxFlowFromAToB","maxFlow","UsingCapacities","flowPath","FlowWithCapacity","from","to","flow","capacity","trim","SourceNode","SinkNode","KruskalMSTTotalWeight","totalWeight","UsingEdges","mst","EdgeImmut","getFrom","getTo","TopoSortErrorHTML","printGraphAlgorithms","$div","innerHTML","addAlgoToPane","alg","navlink","createElement","classList","add","setAttribute","appendChild","then","ui","network","Network","loadDefault","s","localStorage","getItem","jsonGraph","parse","weight","extraAttrs","Object","keys","filter","key","reduce","obj","attributes","freeze","parseFloat","getWeight","getAttribute","attribute","getAllAttributes","toPlain","toReturn","newWeight","assign","filterExtraAttr","labels","filterNodeExtraAttr","genericEdgesToImmutEdges","nodeMap","newEdges","edge","push","genericNodesToImmutNodes","newNodes","Math","floor","set","map","Error","numNodes","size","numEdges","getNode","rich","node","get","addNode","editNode","has","getLabel","deleteNode","nodeCount","getID","addEdge","deleteEdge","deleteAll","foundOneEdge","oldWeight","color","foundFirst","index","isDirected","getAllNodes","toArray","getAllNodesAsImmutableList","getAllEdgesAsImmutableList","getAllEdges","getNumberOfNodes","getNumberOfEdges","getAllOutDegrees","degrees","_","doubleEdges","addedEdges","asChangedDirectedWeighted","getNodeAdjacency","adj","getFullAdjacency","areAdjacent","id1","id2","getEdgesBetween","edgeList","getMinWeightEdgeBetween","minWeight","Infinity","reduceMultiGraph","reducer","min","multiEdges","uniques","Set","acc","keep","duplicateEdge","isWeighted","NodeImmut","getInt","parseInt","setUpToDate","value","listOptions","all","property","GraphState","upToDate","always","indexOf","makeAndPrintProperties","getProperty","updateIfNotUpdated","find","state","graphProperties","recalcLong","vertices","printableProperties","printGraphProperties","properties","k","updateGraph","clearColorFromNodes","clearColorFromEdges","edgeFrom","edgeTo","x","y","iId","newGraph","nodeIDToLabel","nodeLabelToID","toLowerCase","rID","found","getGraphAsDataSet","d","DataSet","setLocations","locations","clearNodeColors","clearEdgeColors","workerPool","backHistory","forwardHistory","maxHistory","stronglyConnectedComponents","connectedComponents","graphColoring","eulerian","cyclic","Languages","setLanguage","EN_US","customColorPallete","self","container","visWeightEdgeEdit","callback","visOptions","interaction","hover","manipulation","customColors","stringReplacement","options","optionText","optionValues","$popup","on","saveData","first","val","cancelEdit","remove","initialColor","getOwnPropertyNames","background","confirm","body","weightFromLabel","operation","undefined","graphColors","luminosity","recalcProps","graphChanged","rearrangeGraph","saveState","g","randomizeNetworkLayoutSeed","getPositions","disableEditMode","enableEditMode","saveStateLocalStorage","getStateForSaving","getElementsByClassName","item","parentElement","Array","isArray","applyState","newState","firstLoad","currentState","oldKey","checkForLocalStorage","setItem","r","round","random","layoutEngine","randomSeed","initialRandomSeed","addNetworkListeners","editEdgeMode","lastNetworkClickEvent","event","contains","target","deleteSelected","ctrlKey","shiftKey","removeItem","saveSettings","Settings","loadSettings","setAll","setOptions","physics","arrows","editWithoutDrag","option","defaults","nodePhysics","direction","weights","defaultCancelCb","deepCopy","deep","clone","copy","src","copyIsArray","isPlainObject","call","proto","getPrototypeOf","Ctor","hasOwnProperty","constructor","arguments","deepFreeze","o","prop","isFrozen","sort","arr","compareFunction","datasetToArray","ds","keepOnlyKeys","getFileExtension","filename","split","splice","htmlEncode","string","t","textContent","replace","printout","text","escape","flatten","rotate","max","iterable","b","toTitleCase","str","match","toUpperCase","replacements","replacement","showSimpleModal","showFormModal","makeFormModal","successText","cancelText","form","footer","f","class","formRow","basicMap","attrname","validFunc","generalValidator","valueMutator","$v","valid","removeClass","next","addClass","after","append","checked","for","prepend","clickDismiss","$b","onclick","oText","oIndex","selected","$footer","tabindex","role","html","off","last","trigger","successCb","cancelCb","hasErrors","each","tagName","attr","files","hasClass","findVertexDegreesDirectional","adjacencyMatrix","out","in","outV","interpolateNodesFromEdges","webpackAsyncContext","req","__webpack_require__","code","ids","module","exports","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","m","O","result","chunkIds","priority","notFulfilled","fulfilled","j","every","getter","__esModule","mode","ns","create","def","definition","defineProperty","enumerable","chunkId","promises","u","globalThis","Function","prototype","l","url","done","script","needAttach","scripts","getElementsByTagName","charset","timeout","nc","onScriptComplete","prev","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","head","Symbol","toStringTag","nmd","paths","children","installedChunks","installedChunkData","promise","error","errorType","realSrc","message","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}
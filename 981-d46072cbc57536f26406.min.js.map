{"version":3,"file":"981-d46072cbc57536f26406.min.js","mappings":"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","sources":["webpack://graphPlayground/./src/js/util/predefinedGraphs.ts"],"sourcesContent":["\"use strict\";\n\nimport gHelp from './graphHelpers';\nimport help from './genericHelpers';\nimport { EdgeImmutPlain } from \"../classes/GraphImmut/EdgeImmut\";\nimport { NodeImmutPlain } from \"../classes/GraphImmut/NodeImmut\";\nimport * as languages from \"../languages\";\n\nexport interface GraphPlain {\n    edges: EdgeImmutPlain[];\n    nodes: NodeImmutPlain[];\n    directed?: boolean;\n    weighted?: boolean\n}\n\nconst petersenEdges = help.deepFreeze([\n    { from: 1, to: 2, weight: 1 },\n    { from: 2, to: 3, weight: 1 },\n    { from: 3, to: 4, weight: 1 },\n    { from: 4, to: 5, weight: 1 },\n    { from: 5, to: 1, weight: 1 },\n\n    { from: 6, to: 8, weight: 1 },\n    { from: 7, to: 9, weight: 1 },\n    { from: 7, to: 10, weight: 1 },\n    { from: 8, to: 10, weight: 1 },\n    { from: 9, to: 6, weight: 1 },\n\n    { from: 1, to: 6, weight: 1 },\n    { from: 2, to: 7, weight: 1 },\n    { from: 3, to: 8, weight: 1 },\n    { from: 4, to: 9, weight: 1 },\n    { from: 5, to: 10, weight: 1 }\n]) as EdgeImmutPlain[];\n\nconst konigsbergEdges = help.deepFreeze([\n    { from: 1, to: 2, weight: 1 },\n    { from: 2, to: 3, weight: 1 },\n    { from: 2, to: 4, weight: 1 },\n    { from: 3, to: 4, weight: 1 },\n    { from: 3, to: 4, weight: 1 },\n    { from: 4, to: 1, weight: 1 },\n    { from: 4, to: 1, weight: 1 },\n]) as EdgeImmutPlain[];\n\nconst completeGraph = (V: number): Readonly<GraphPlain> => {\n    const edges = [];\n    const nodes = [];\n\n    for (let i = 0; i < V; i++) {\n        nodes.push({ id: i, label: i.toString() });\n        for (let j = i + 1; j < V; j++) {\n            edges.push({ from: i, to: j });\n        }\n    }\n\n    return help.deepFreeze({ nodes, edges, directed: false, weighted: false } as GraphPlain);\n};\n\nconst hypercubeGraph = (D: number): Readonly<GraphPlain> => {\n    const edges: EdgeImmutPlain[] = [];\n    const nodes: NodeImmutPlain[] = [];\n\n    const numNodes = Math.pow(2, D);\n\n    const pad = (str: string, max: number): string => {\n        return str.length < max ? pad(\"0\" + str, max) : str;\n    };\n\n    const generateDifferByOne = (input: number, numBits: number) => {\n        const inputBits = pad((input).toString(2), numBits).split(\"\").reverse();\n        const allDiffer = [];\n\n        // 1 bit difference from input, increasing order, none less than input\n        for (let b = 0; b < numBits; b++) {\n            if (inputBits[b] === \"0\") {\n                const newNum = inputBits.slice();\n                newNum[b] = \"1\";\n                newNum.reverse();\n                allDiffer.push(parseInt(newNum.join(\"\"), 2));\n            }\n        }\n\n        return allDiffer;\n    };\n\n    for (let i = 0; i < numNodes; i++) {\n        nodes.push({ id: i, label: pad(i.toString(2), D) });\n        generateDifferByOne(i, D).forEach((j) => {\n            edges.push({ from: i, to: j, weight: 1 });\n        });\n    }\n\n    return help.deepFreeze({ nodes, edges, directed: false, weighted: false } as GraphPlain);\n};\n\nconst newCustomGraph = (V: number, directed = false, weighted = false): Readonly<GraphPlain> => {\n    const nodes = [];\n    for (let i = 0; i < V; i++) {\n        nodes.push({ id: i, label: i.toString() });\n    }\n\n    return help.deepFreeze({ nodes, edges: [], directed, weighted } as GraphPlain);\n};\n\nexport default class PredefinedGraphs {\n    public static _complete = completeGraph;\n    public static _custom = newCustomGraph;\n    public static _hypercube = hypercubeGraph;\n\n    public static Petersen(): Readonly<GraphPlain> {\n        return help.deepFreeze({\n            edges: petersenEdges,\n            nodes: gHelp.interpolateNodesFromEdges(petersenEdges),\n            directed: false,\n            weighted: false,\n        });\n    }\n\n    public static Konigsberg(): Readonly<GraphPlain> {\n        return help.deepFreeze({\n            edges: konigsbergEdges,\n            nodes: gHelp.interpolateNodesFromEdges(konigsbergEdges),\n            directed: false,\n            weighted: false,\n        });\n    }\n\n    public static Complete(): void {\n        help.showFormModal(($modal, vals) => {\n            $modal.modal(\"hide\");\n            window.main.setData(completeGraph(vals[0]), false, true, true);\n        },\n            languages.current.ConfigurableCompleteGraph, languages.current.Go, languages.current.Cancel,\n            [{\n                type: \"numeric\", initialValue: 5, label: languages.current.NumberOfVerticesLabel, validationFunc: (v) => {\n                    return v >= 0 || languages.current.NumberOfVerticesNonNegativeError;\n                }\n            }]);\n    }\n\n    public static Hypercube(): void {\n        help.showFormModal(($modal, vals) => {\n            $modal.modal(\"hide\");\n            window.main.setData(hypercubeGraph(vals[0]), false, true, true);\n        },\n            languages.current.ConfigurableHypercubeGraph, languages.current.Go, languages.current.Cancel,\n            [{\n                type: \"numeric\", initialValue: 3, label: languages.current.NumberOfDimensionsLabel, validationFunc: (v) => {\n                    return v >= 0 || languages.current.NumberOfDimensionsNonNegativeError;\n                }\n            }]);\n    }\n\n    public static Custom(): void {\n        help.showFormModal(($modal, vals) => {\n            $modal.modal(\"hide\");\n            window.main.setData(newCustomGraph(vals[0], vals[1], vals[2]), false, true, true);\n        },\n            languages.current.ConfigurableGraph, languages.current.Go, languages.current.Cancel,\n            [\n                {\n                    type: \"numeric\", initialValue: 0, label: languages.current.NumberOfVerticesLabel, validationFunc: (v) => {\n                        return v >= 0 || languages.current.NumberOfVerticesNonNegativeError;\n                    }\n                },\n                { type: \"checkbox\", initialValue: false, label: \"Directed\" },\n                { type: \"checkbox\", initialValue: false, label: \"Weighted\" },\n            ]);\n    }\n}\n"],"names":["petersenEdges","from","to","weight","konigsbergEdges","completeGraph","V","edges","nodes","i","push","id","label","toString","j","directed","weighted","hypercubeGraph","D","numNodes","Math","pow","pad","str","max","length","input","numBits","inputBits","split","reverse","allDiffer","b","newNum","slice","parseInt","join","generateDifferByOne","forEach","newCustomGraph","Petersen","Konigsberg","Complete","$modal","vals","modal","window","main","setData","type","initialValue","validationFunc","v","Hypercube","Custom","_complete","_custom","_hypercube"],"sourceRoot":""}